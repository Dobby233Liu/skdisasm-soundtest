 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 1 - 6/11/2022 10:54:12


       1/       0 :                     ; ---------------------------------------------------------------------------
       2/       0 :                     		cpu 68000
       3/       0 :                     		include "sonic3k.macrosetup.asm"	; include a few basic macros
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    4/       0 :                     	page	0	; Don't want form feeds
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     org macro address
(1)   10/       0 :                     	if notZ80(MOMCPU)
(1)   11/       0 :                     .diff := address - *
(1)   12/       0 :                     		if .diff < 0
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(-.diff)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			while .diff > 1024
(1)   16/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   17/       0 :                     				dc.b [1024]$FF
(1)   18/       0 :                     .diff := .diff - 1024
(1)   19/       0 :                     			endm
(1)   20/       0 :                     			dc.b [.diff]$FF
(1)   21/       0 :                     		endif
(1)   22/       0 :                     	else
(1)   23/       0 :                     		if address < $
(1)   24/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   25/       0 :                     		else
(1)   26/       0 :                     			while address > $
(1)   27/       0 :                     				db 0
(1)   28/       0 :                     			endm
(1)   29/       0 :                     		endif
(1)   30/       0 :                     	endif
(1)   31/       0 :                         endm
(1)   32/       0 :                     
(1)   33/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   34/       0 :                     org0 macro address
(1)   35/       0 :                     .diff := address - *
(1)   36/       0 :                     	if .diff < 0
(1)   37/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-.diff)} bytes)"
(1)   38/       0 :                     	else
(1)   39/       0 :                     		while .diff > 1024
(1)   40/       0 :                     			; AS can only generate 1 kb of code on a single line
(1)   41/       0 :                     			dc.b [1024]0
(1)   42/       0 :                     .diff := .diff - 1024
(1)   43/       0 :                     		endm
(1)   44/       0 :                     		dc.b [.diff]0
(1)   45/       0 :                     	endif
(1)   46/       0 :                         endm
(1)   47/       0 :                     
(1)   48/       0 :                     ; define the cnop pseudo-instruction
(1)   49/       0 :                     cnop macro offset,alignment
(1)   50/       0 :                     	if notZ80(MOMCPU)
(1)   51/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   52/       0 :                     	else
(1)   53/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   54/       0 :                     	endif
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   58/       0 :                     cnop0 macro offset,alignment
(1)   59/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   63/       0 :                     align macro alignment
(1)   64/       0 :                     	cnop 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   68/       0 :                     align0 macro alignment
(1)   69/       0 :                     	cnop0 0,alignment
(1)   70/       0 :                         endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; define the even pseudo-instruction
(1)   73/       0 :                     even macro
(1)   74/       0 :                     	align0 2
(1)   75/       0 :                         endm
(1)   76/       0 :                     
(1)   77/       0 :                     ; define a trace macro
(1)   78/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   79/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   80/       0 :                     	if MOMPASS=1
(1)   81/       0 :                     		if ("ALLARGS"<>"")
(1)   82/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   83/       0 :                     		else
(1)   84/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   85/       0 :                     		endif
(1)   86/       0 :                     tracenum := (tracenum+1)
(1)   87/       0 :                     	endif
(1)   88/       0 :                        endm
(1)   89/       0 : =$0                 tracenum := 0
(1)   90/       0 :                     
(1)   91/       0 :                     bit function nBits,1<<(nBits-1)
(1)   92/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)   93/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)   94/       0 :                     signextendB function val,signextend(val,8)
(1)   95/       0 :                     
       4/       0 :                     		include "sonic3k.macros.asm"		; include some simplifying macros and functions
(1)    1/       0 :                     ; simplifying macros and functions
(1)    2/       0 :                     ; nameless temporary symbols should NOT be used inside macros because they can interfere with the surrounding code
(1)    3/       0 :                     ; normal labels should be used instead (which automatically become local to the macro)
(1)    4/       0 :                     
(1)    5/       0 :                     ; sign-extends a 32-bit integer to 64-bit
(1)    6/       0 :                     ; all RAM addresses are run through this function to allow them to work in both 16-bit and 32-bit addressing modes
(1)    7/       0 :                     ramaddr function x,(-(x&$80000000)<<1)|x
(1)    8/       0 :                     
(1)    9/       0 :                     ; makes a VDP command
(1)   10/       0 :                     vdpComm function addr,type,rwd,(((type&rwd)&3)<<30)|((addr&$3FFF)<<16)|(((type&rwd)&$FC)<<2)|((addr&$C000)>>14)
(1)   11/       0 :                     
(1)   12/       0 :                     ; values for the type argument
(1)   13/       0 : =$21                VRAM = %100001
(1)   14/       0 : =$2B                CRAM = %101011
(1)   15/       0 : =$25                VSRAM = %100101
(1)   16/       0 :                     
(1)   17/       0 :                     ; values for the rwd argument
(1)   18/       0 : =$C                 READ = %001100
(1)   19/       0 : =$7                 WRITE = %000111
(1)   20/       0 : =$27                DMA = %100111
(1)   21/       0 :                     
(1)   22/       0 :                     ; tells the VDP to copy a region of 68k memory to VRAM or CRAM or VSRAM
(1)   23/       0 :                     dma68kToVDP macro source,dest,length,type
(1)   24/       0 :                     	lea	(VDP_control_port).l,a5
(1)   25/       0 :                     	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a5)
(1)   26/       0 :                     	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a5)
(1)   27/       0 :                     	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a5)
(1)   28/       0 :                     	move.w	#((vdpComm(dest,type,DMA)>>16)&$FFFF),(a5)
(1)   29/       0 :                     	move.w	#(vdpComm(dest,type,DMA)&$FFFF),(DMA_trigger_word).w
(1)   30/       0 :                     	move.w	(DMA_trigger_word).w,(a5)
(1)   31/       0 :                     	; From '  ยง 7  DMA TRANSFER' of https://emu-docs.org/Genesis/sega2f.htm:
(1)   32/       0 :                     	;
(1)   33/       0 :                     	; "In the case of ROM to VRAM transfers,
(1)   34/       0 :                     	; a hardware feature causes occasional failure of DMA unless the
(1)   35/       0 :                     	; following two conditions are observed:
(1)   36/       0 :                     	;
(1)   37/       0 :                     	; --The destination address write (to address $C00004) must be a word
(1)   38/       0 :                     	;   write.
(1)   39/       0 :                     	;
(1)   40/       0 :                     	; --The final write must use the work RAM.
(1)   41/       0 :                     	;   There are two ways to accomplish this, by copying the DMA program
(1)   42/       0 :                     	;   into RAM or by doing a final "move.w ram address $C00004""
(1)   43/       0 :                         endm
(1)   44/       0 :                     
(1)   45/       0 :                     ; tells the VDP to fill a region of VRAM with a certain byte
(1)   46/       0 :                     dmaFillVRAM macro byte,addr,length
(1)   47/       0 :                     	lea	(VDP_control_port).l,a5
(1)   48/       0 :                     	move.w	#$8F01,(a5) ; VRAM pointer increment: $0001
(1)   49/       0 :                     	move.l	#(($9400|((((length)-1)&$FF00)>>8))<<16)|($9300|(((length)-1)&$FF)),(a5) ; DMA length ...
(1)   50/       0 :                     	move.w	#$9780,(a5) ; VRAM fill
(1)   51/       0 :                     	move.l	#$40000080|(((addr)&$3FFF)<<16)|(((addr)&$C000)>>14),(a5) ; Start at ...
(1)   52/       0 :                     	move.w	#(byte)<<8,(VDP_data_port).l ; Fill with byte
(1)   53/       0 :                     loop:	move.w	(a5),d1
(1)   54/       0 :                     	btst	#1,d1
(1)   55/       0 :                     	bne.s	loop	; busy loop until the VDP is finished filling...
(1)   56/       0 :                     	move.w	#$8F02,(a5) ; VRAM pointer increment: $0002
(1)   57/       0 :                         endm
(1)   58/       0 :                     
(1)   59/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)   60/       0 :                     ; that writes n bytes total at 4 bytes per iteration
(1)   61/       0 :                     bytesToLcnt function n,n>>2-1
(1)   62/       0 :                     
(1)   63/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)   64/       0 :                     ; that writes n bytes total at 2 bytes per iteration
(1)   65/       0 :                     bytesToWcnt function n,n>>1-1
(1)   66/       0 :                     
(1)   67/       0 :                     ; calculates initial loop counter value for a dbf loop
(1)   68/       0 :                     ; that writes n bytes total at x bytes per iteration
(1)   69/       0 :                     bytesToXcnt function n,x,n/x-1
(1)   70/       0 :                     
(1)   71/       0 :                     ; fills a region of 68k RAM with 0
(1)   72/       0 :                     clearRAM macro addr,length
(1)   73/       0 :                         if ((addr)&$8000)==0
(1)   74/       0 :                     	lea	(addr).l,a1
(1)   75/       0 :                         else
(1)   76/       0 :                     	lea	(addr).w,a1
(1)   77/       0 :                         endif
(1)   78/       0 :                     	moveq	#0,d0
(1)   79/       0 :                         if ((addr)&1)
(1)   80/       0 :                     	move.b	d0,(a1)+
(1)   81/       0 :                         endif
(1)   82/       0 :                     	move.w	#bytesToLcnt(length - ((addr)&1)),d1
(1)   83/       0 :                     .loop:	move.l	d0,(a1)+
(1)   84/       0 :                     	dbf	d1,.loop
(1)   85/       0 :                         if ((length - ((addr)&1))&2)
(1)   86/       0 :                     	move.w	d0,(a1)+
(1)   87/       0 :                         endif
(1)   88/       0 :                         if ((length - ((addr)&1))&1)
(1)   89/       0 :                     	move.b	d0,(a1)+
(1)   90/       0 :                         endif
(1)   91/       0 :                         endm
(1)   92/       0 :                     
(1)   93/       0 :                     ; tells the Z80 to stop, and waits for it to finish stopping (acquire bus)
(1)   94/       0 :                     stopZ80 macro
(1)   95/       0 :                     	move.w	#$100,(Z80_bus_request).l ; stop the Z80
(1)   96/       0 :                     loop:	btst	#0,(Z80_bus_request).l
(1)   97/       0 :                     	bne.s	loop ; loop until it says it's stopped
(1)   98/       0 :                         endm
(1)   99/       0 :                     
(1)  100/       0 :                     ; tells the Z80 to start again
(1)  101/       0 :                     startZ80 macro
(1)  102/       0 :                     	move.w	#0,(Z80_bus_request).l    ; start the Z80
(1)  103/       0 :                         endm
(1)  104/       0 :                     
(1)  105/       0 :                     ; function to make a little-endian 16-bit pointer for the Z80 sound driver
(1)  106/       0 :                     z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80
(1)  107/       0 :                     
(1)  108/       0 :                     ; macro to declare a little-endian 16-bit pointer for the Z80 sound driver
(1)  109/       0 :                     rom_ptr_z80 macro addr
(1)  110/       0 :                     	dc.w z80_ptr(addr)
(1)  111/       0 :                         endm
(1)  112/       0 :                     
(1)  113/       0 :                     ; macros to convert from tile index to art tiles, block mapping or VRAM address.
(1)  114/       0 :                     make_art_tile function addr,pal,pri,((pri&1)<<15)|((pal&3)<<13)|(addr&tile_mask)
(1)  115/       0 :                     tiles_to_bytes function addr,((addr&$7FF)<<5)
(1)  116/       0 :                     
(1)  117/       0 :                     ; function to calculate the location of a tile in plane mappings with a width of 40 cells
(1)  118/       0 :                     planeLocH28 function col,line,(($50 * line) + (2 * col))
(1)  119/       0 :                     
(1)  120/       0 :                     ; macro for generating water palette transition tables
(1)  121/       0 :                     watertransheader macro {INTLABEL}
(1)  122/       0 :                     __LABEL__ label *
(1)  123/       0 :                     	; Number of entries in list minus one
(1)  124/       0 :                     	dc.w (((__LABEL___End - __LABEL__ - 2) / 2) - 1)
(1)  125/       0 :                     	endm
(1)  126/       0 :                     
(1)  127/       0 :                     ; macro for generating level select strings
(1)  128/       0 :                     levselstr macro str
(1)  129/       0 :                     	save
(1)  130/       0 :                     	codepage	LEVELSELECT
(1)  131/       0 :                     	dc.b strlen(str)-1, str
(1)  132/       0 :                     	restore
(1)  133/       0 :                         endm
(1)  134/       0 :                     
(1)  135/       0 :                     ; codepage for level select
(1)  136/       0 :                     	save
(1)  137/       0 :                     	codepage LEVELSELECT
(1)  138/       0 :                     	charset '0','9', 16
(1)  139/       0 :                     	charset 'A','Z', 30
(1)  140/       0 :                     	charset 'a','z', 30
(1)  141/       0 :                     	charset '*', 26
(1)  142/       0 :                     	charset $A9, 27	; '?'
(1)  143/       0 :                     	charset ':', 28
(1)  144/       0 :                     	charset '.', 29
(1)  145/       0 :                     	charset ' ',  0
(1)  146/       0 : ALL                 	restore
(1)  147/       0 :                     
(1)  148/       0 :                     ; macros for defining animated PLC script lists
(1)  149/       0 :                     zoneanimstart macro {INTLABEL}
(1)  150/       0 :                     __LABEL__ label *
(1)  151/       0 :                     zoneanimcount := 0
(1)  152/       0 :                     zoneanimcur := "__LABEL__"
(1)  153/       0 :                     	dc.w zoneanimcount___LABEL__	; Number of scripts for a zone (-1)
(1)  154/       0 :                         endm
(1)  155/       0 :                     
(1)  156/       0 :                     zoneanimend macro
(1)  157/       0 :                     zoneanimcount_{"\{zoneanimcur}"} = zoneanimcount-1
(1)  158/       0 :                         endm
(1)  159/       0 :                     
(1)  160/       0 : =$0                 zoneanimdeclanonid := 0
(1)  161/       0 :                     
(1)  162/       0 :                     zoneanimdecl macro duration,artaddr,vramaddr,numentries,numvramtiles
(1)  163/       0 :                     zoneanimdeclanonid := zoneanimdeclanonid + 1
(1)  164/       0 :                     start:
(1)  165/       0 :                     	dc.l (duration&$FF)<<24|artaddr
(1)  166/       0 :                     	dc.w tiles_to_bytes(vramaddr)
(1)  167/       0 :                     	dc.b numentries, numvramtiles
(1)  168/       0 :                     zoneanimcount := zoneanimcount + 1
(1)  169/       0 :                         endm
(1)  170/       0 :                     
(1)  171/       0 :                     ; macro for declaring a "main level load block" (MLLB)
(1)  172/       0 :                     levartptrs macro plc1,plc2,palette,art1,art2,map16x161,map16x162,map128x1281,map128x1282
(1)  173/       0 :                     	dc.l (plc1<<24)|art1
(1)  174/       0 :                     	dc.l (plc2<<24)|art2
(1)  175/       0 :                     	dc.l (palette<<24)|map16x161
(1)  176/       0 :                     	dc.l (palette<<24)|map16x162
(1)  177/       0 :                     	dc.l map128x1281
(1)  178/       0 :                     	dc.l map128x1282
(1)  179/       0 :                         endm
(1)  180/       0 :                     
(1)  181/       0 :                     ; macro for a pattern load request list header
(1)  182/       0 :                     ; must be on the same line as a label that has a corresponding _End label later
(1)  183/       0 :                     plrlistheader macro {INTLABEL}
(1)  184/       0 :                     __LABEL__ label *
(1)  185/       0 :                     	dc.w (((__LABEL___End - __LABEL__Plc) / 6) - 1)
(1)  186/       0 :                     __LABEL__Plc:
(1)  187/       0 :                         endm
(1)  188/       0 :                     
(1)  189/       0 :                     ; macro for a pattern load request
(1)  190/       0 :                     plreq macro toVRAMaddr,fromROMaddr
(1)  191/       0 :                     	dc.l	fromROMaddr
(1)  192/       0 :                     	dc.w	tiles_to_bytes(toVRAMaddr)
(1)  193/       0 :                         endm
(1)  194/       0 :                     
(1)  195/       0 :                     ; macro for a debug object list header
(1)  196/       0 :                     ; must be on the same line as a label that has a corresponding _End label later
(1)  197/       0 :                     dbglistheader macro {INTLABEL}
(1)  198/       0 :                     __LABEL__ label *
(1)  199/       0 :                     	dc.w ((__LABEL___End - __LABEL__ - 2) / $A)
(1)  200/       0 :                         endm
(1)  201/       0 :                     
(1)  202/       0 :                     ; macro to define debug list object data
(1)  203/       0 :                     dbglistobj macro   obj, mapaddr, subtype, frame, vram
(1)  204/       0 :                     	dc.l frame<<24|obj
(1)  205/       0 :                     	dc.l subtype<<24|mapaddr
(1)  206/       0 :                     	dc.w vram
(1)  207/       0 :                         endm
(1)  208/       0 :                     
(1)  209/       0 :                     tribyte macro val
(1)  210/       0 :                     	if "val"<>""
(1)  211/       0 :                     		dc.b (val >> 16)&$FF,(val>>8)&$FF,val&$FF
(1)  212/       0 :                     		shift
(1)  213/       0 :                     		tribyte ALLARGS
(1)  214/       0 :                     	endif
(1)  215/       0 :                         endm
(1)  216/       0 :                     
(1)  217/       0 :                     ; macro to define a palette script pointer
(1)  218/       0 :                     palscriptptr	macro header, data
(1)  219/       0 :                     	dc.w data-header, 0
(1)  220/       0 :                     	dc.l header
(1)  221/       0 :                     ._headpos :=	header
(1)  222/       0 :                         endm
(1)  223/       0 :                     
(1)  224/       0 :                     ; macro to define a palette script header
(1)  225/       0 :                     palscripthdr	macro palette, entries, value
(1)  226/       0 :                     	dc.w (palette)&$FFFF
(1)  227/       0 :                     	dc.b entries-1, value
(1)  228/       0 :                         endm
(1)  229/       0 :                     
(1)  230/       0 :                     ; macro to define a palette script data
(1)  231/       0 :                     palscriptdata	macro frames, data
(1)  232/       0 :                     .framec :=	frames-1
(1)  233/       0 :                     	shift
(1)  234/       0 :                     	dc.w ALLARGS
(1)  235/       0 :                     	dc.w .framec
(1)  236/       0 :                         endm
(1)  237/       0 :                     
(1)  238/       0 :                     ; macro to define a palette script data from an external file
(1)  239/       0 :                     palscriptfile	macro frames, data
(1)  240/       0 :                     .framec :=	frames-1
(1)  241/       0 :                     	shift
(1)  242/       0 :                     	binclude ALLARGS
(1)  243/       0 :                     	dc.w .framec
(1)  244/       0 :                         endm
(1)  245/       0 :                     
(1)  246/       0 :                     ; macro to repeat script from start
(1)  247/       0 :                     palscriptrept	macro header
(1)  248/       0 :                     	dc.w -4
(1)  249/       0 :                         endm
(1)  250/       0 :                     
(1)  251/       0 :                     ; macro to define loop from start for x number of times, then initialize with new header
(1)  252/       0 :                     palscriptloop	macro header
(1)  253/       0 :                     	dc.w -8, header-._headpos
(1)  254/       0 :                     ._headpos :=	header
(1)  255/       0 :                         endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; macro to run the custom script routine
(1)  258/       0 :                     palscriptrun	macro header
(1)  259/       0 :                     	dc.w -$C
(1)  260/       0 :                         endm
(1)  261/       0 :                     
       5/       0 :                     		include "sonic3k.constants.asm"		; include some constants
(1)    1/       0 :                     ; Equates section - names for variables
(1)    2/       0 :                     
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     ; Object Status Table offsets
(1)    5/       0 :                     ; ---------------------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 :                     ; universally followed object conventions:
(1)    8/       0 : =$4                 render_flags =		  4 ; bitfield ; refer to SCHG for details
(1)    9/       0 : =$6                 height_pixels =		  6 ; byte
(1)   10/       0 : =$7                 width_pixels =		  7 ; byte
(1)   11/       0 : =$8                 priority =		  8 ; word ; in units of $80
(1)   12/       0 : =$A                 art_tile =		 $A ; word ; PCCVH AAAAAAAAAAA ; P = priority, CC = palette line, V = y-flip; H = x-flip, A = starting cell index of art
(1)   13/       0 : =$C                 mappings =		 $C ; long
(1)   14/       0 : =$10                x_pos =			$10 ; word, or long when extra precision is required
(1)   15/       0 : =$14                y_pos =			$14 ; word, or long when extra precision is required
(1)   16/       0 : =$22                mapping_frame =		$22 ; byte
(1)   17/       0 :                     ; ---------------------------------------------------------------------------
(1)   18/       0 :                     ; conventions followed by most objects:
(1)   19/       0 : =$5                 routine =		  5 ; byte
(1)   20/       0 : =$18                x_vel =			$18 ; word
(1)   21/       0 : =$1A                y_vel =			$1A ; word
(1)   22/       0 : =$1E                y_radius =		$1E ; byte ; collision height / 2
(1)   23/       0 : =$1F                x_radius =		$1F ; byte ; collision width / 2
(1)   24/       0 : =$20                anim =			$20 ; byte
(1)   25/       0 : =$21                prev_anim =		$21 ; byte ; when this isn't equal to anim the animation restarts
(1)   26/       0 : =$23                anim_frame =		$23 ; byte
(1)   27/       0 : =$24                anim_frame_timer =	$24 ; byte
(1)   28/       0 : =$26                angle =			$26 ; byte ; angle about axis into plane of the screen (00 = vertical, 360 degrees = 256)
(1)   29/       0 : =$2A                status =		$2A ; bitfield ; refer to SCHG for details
(1)   30/       0 :                     ; ---------------------------------------------------------------------------
(1)   31/       0 :                     ; conventions followed by many objects but not Sonic/Tails/Knuckles:
(1)   32/       0 : =$10                x_pixel =		x_pos ; word ; x-coordinate for objects using screen positioning
(1)   33/       0 : =$14                y_pixel =		y_pos ; word ; y-coordinate for objects using screen positioning
(1)   34/       0 : =$28                collision_flags =	$28 ; byte ; TT SSSSSS ; TT = collision type, SSSSSS = size
(1)   35/       0 : =$29                collision_property =	$29 ; byte ; usage varies, bosses use it as a hit counter
(1)   36/       0 : =$2B                shield_reaction =	$2B ; byte ; bit 3 = bounces off shield, bit 4 = negated by fire shield, bit 5 = negated by lightning shield, bit 6 = negated by bubble shield
(1)   37/       0 : =$2C                subtype =		$2C ; byte
(1)   38/       0 : =$3B                ros_bit =		$3B ; byte ; the bit to be cleared when an object is destroyed if the ROS flag is set
(1)   39/       0 : =$3C                ros_addr =		$3C ; word ; the RAM address whose bit to clear when an object is destroyed if the ROS flag is set
(1)   40/       0 : =$3C                routine_secondary =	$3C ; byte ; used by monitors for this purpose at least
(1)   41/       0 : =$40                vram_art =		$40 ; word ; address of art in VRAM (same as art_tile * $20)
(1)   42/       0 : =$42                parent =		$42 ; word ; address of the object that owns or spawned this one, if applicable
(1)   43/       0 : =$42                child_dx = 		$42 ; byte ; X offset of child relative to parent
(1)   44/       0 : =$43                child_dy = 		$43 ; byte ; Y offset of child relative to parent
(1)   45/       0 : =$46                parent3 = 		$46 ; word ; parent of child objects
(1)   46/       0 : =$48                parent2 =		$48 ; word ; several objects use this instead
(1)   47/       0 : =$48                respawn_addr =		$48 ; word ; the address of this object's entry in the respawn table
(1)   48/       0 :                     ; ---------------------------------------------------------------------------
(1)   49/       0 :                     ; conventions specific to Sonic/Tails/Knuckles:
(1)   50/       0 : =$1C                ground_vel =		$1C ; word ; overall velocity along ground, not updated when in the air
(1)   51/       0 : =$25                double_jump_property =	$25 ; byte ; remaining frames of flight / 2 for Tails, gliding-related for Knuckles
(1)   52/       0 : =$27                flip_angle =		$27 ; byte ; angle about horizontal axis (360 degrees = 256)
(1)   53/       0 : =$2B                status_secondary =	$2B ; byte ; see SCHG for details
(1)   54/       0 : =$2C                air_left =		$2C ; byte
(1)   55/       0 : =$2D                flip_type =		$2D ; byte ; bit 7 set means flipping is inverted, lower bits control flipping type
(1)   56/       0 : =$2E                object_control =	$2E ; byte ; bit 0 set means character can jump out, bit 7 set means he can't
(1)   57/       0 : =$2F                double_jump_flag =	$2F ; byte ; meaning depends on current character, see SCHG for details
(1)   58/       0 : =$30                flips_remaining =	$30 ; byte
(1)   59/       0 : =$31                flip_speed =		$31 ; byte
(1)   60/       0 : =$32                move_lock =		$32 ; word ; horizontal control lock, counts down to 0
(1)   61/       0 : =$34                invulnerability_timer =	$34 ; byte ; decremented every frame
(1)   62/       0 : =$35                invincibility_timer =	$35 ; byte ; decremented every 8 frames
(1)   63/       0 : =$36                speed_shoes_timer =	$36 ; byte ; decremented every 8 frames
(1)   64/       0 : =$37                status_tertiary =	$37 ; byte ; see SCHG for details
(1)   65/       0 : =$38                character_id =		$38 ; byte ; 0 for Sonic, 1 for Tails, 2 for Knuckles
(1)   66/       0 : =$39                scroll_delay_counter =	$39 ; byte ; incremented each frame the character is looking up/down, camera starts scrolling when this reaches 120
(1)   67/       0 : =$3A                next_tilt =		$3A ; byte ; angle on ground in front of character
(1)   68/       0 : =$3B                tilt =			$3B ; byte ; angle on ground
(1)   69/       0 : =$3C                stick_to_convex =	$3C ; byte ; used to make character stick to convex surfaces such as the rotating discs in CNZ
(1)   70/       0 : =$3D                spin_dash_flag =	$3D ; byte ; bit 1 indicates spin dash, bit 7 indicates forced roll
(1)   71/       0 : =$3E                spin_dash_counter =	$3E ; word
(1)   72/       0 : =$40                jumping =		$40 ; byte
(1)   73/       0 : =$42                interact =		$42 ; word ; RAM address of the last object the character stood on
(1)   74/       0 : =$44                default_y_radius =	$44 ; byte ; default value of y_radius
(1)   75/       0 : =$45                default_x_radius =	$45 ; byte ; default value of x_radius
(1)   76/       0 : =$46                top_solid_bit =		$46 ; byte ; the bit to check for top solidity (either $C or $E)
(1)   77/       0 : =$47                lrb_solid_bit =		$47 ; byte ; the bit to check for left/right/bottom solidity (either $D or $F)
(1)   78/       0 :                     ; ---------------------------------------------------------------------------
(1)   79/       0 :                     ; conventions followed by some/most bosses:
(1)   80/       0 : =$29                boss_hitcount2 =	$29
(1)   81/       0 :                     ; ---------------------------------------------------------------------------
(1)   82/       0 :                     ; when childsprites are activated (i.e. bit #6 of render_flags set)
(1)   83/       0 : =$16                mainspr_childsprites 	= $16	; amount of child sprites
(1)   84/       0 : =$18                sub2_x_pos		= $18	;x_vel
(1)   85/       0 : =$1A                sub2_y_pos		= $1A	;y_vel
(1)   86/       0 : =$1D                sub2_mapframe		= $1D
(1)   87/       0 : =$1E                sub3_x_pos		= $1E	;y_radius
(1)   88/       0 : =$20                sub3_y_pos		= $20	;anim
(1)   89/       0 : =$23                sub3_mapframe		= $23	;anim_frame
(1)   90/       0 : =$24                sub4_x_pos		= $24	;anim_frame_timer
(1)   91/       0 : =$26                sub4_y_pos		= $26	;angle
(1)   92/       0 : =$29                sub4_mapframe		= $29	;collision_property
(1)   93/       0 : =$2A                sub5_x_pos		= $2A	;status
(1)   94/       0 : =$2C                sub5_y_pos		= $2C	;subtype
(1)   95/       0 : =$2F                sub5_mapframe		= $2F
(1)   96/       0 : =$30                sub6_x_pos		= $30
(1)   97/       0 : =$32                sub6_y_pos		= $32
(1)   98/       0 : =$35                sub6_mapframe		= $35
(1)   99/       0 : =$36                sub7_x_pos		= $36
(1)  100/       0 : =$38                sub7_y_pos		= $38
(1)  101/       0 : =$3B                sub7_mapframe		= $3B
(1)  102/       0 : =$3C                sub8_x_pos		= $3C
(1)  103/       0 : =$3E                sub8_y_pos		= $3E
(1)  104/       0 : =$41                sub8_mapframe		= $41
(1)  105/       0 : =$42                sub9_x_pos		= $42
(1)  106/       0 : =$44                sub9_y_pos		= $44
(1)  107/       0 : =$47                sub9_mapframe		= $47
(1)  108/       0 : =$6                 next_subspr		= $6
(1)  109/       0 :                     ; ---------------------------------------------------------------------------
(1)  110/       0 :                     ; property of all objects:
(1)  111/       0 : =$4A                object_size =		$4A ; the size of an object's status table entry
(1)  112/       0 : =$4A                next_object =		object_size
(1)  113/       0 :                     ; ---------------------------------------------------------------------------
(1)  114/       0 :                     ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
(1)  115/       0 : =$12                objoff_12 =		2+x_pos
(1)  116/       0 : =$16                objoff_16 =		2+y_pos
(1)  117/       0 : =$1C                objoff_1C =		$1C
(1)  118/       0 : =$1D                objoff_1D =		$1D
(1)  119/       0 : =$27                objoff_27 =		$27
(1)  120/       0 : =$2E                objoff_2E =		$2E
(1)  121/       0 : =$2F                objoff_2F =		$2F
(1)  122/       0 : =$30                objoff_30 =		$30
(1)  123/       0 : =$31..$37            enum   objoff_31=$31,objoff_32=$32,objoff_33=$33,objoff_34=$34,objoff_35=$35,objoff_36=$36,objoff_37=$37
(1)  124/       0 : =$38..$3E            enum 	objoff_38=$38,objoff_39=$39,objoff_3A=$3A,objoff_3B=$3B,objoff_3C=$3C,objoff_3D=$3D,objoff_3E=$3E
(1)  125/       0 : =$3F..$45            enum 	objoff_3F=$3F,objoff_40=$40,objoff_41=$41,objoff_42=$42,objoff_43=$43,objoff_44=$44,objoff_45=$45
(1)  126/       0 : =$46..$49            enum 	objoff_46=$46,objoff_47=$47,objoff_48=$48,objoff_49=$49
(1)  127/       0 :                     
(1)  128/       0 :                      ; ---------------------------------------------------------------------------
(1)  129/       0 :                     ; Bits 3-6 of an object's status after a SolidObject call is a
(1)  130/       0 :                     ; bitfield with the following meaning:
(1)  131/       0 : =$3                 p1_standing_bit   = 3
(1)  132/       0 : =$4                 p2_standing_bit   = p1_standing_bit + 1
(1)  133/       0 :                     
(1)  134/       0 : =$8                 p1_standing       = 1<<p1_standing_bit
(1)  135/       0 : =$10                p2_standing       = 1<<p2_standing_bit
(1)  136/       0 :                     
(1)  137/       0 : =$2                 pushing_bit_delta = 2
(1)  138/       0 : =$5                 p1_pushing_bit    = p1_standing_bit + pushing_bit_delta
(1)  139/       0 : =$6                 p2_pushing_bit    = p1_pushing_bit + 1
(1)  140/       0 :                     
(1)  141/       0 : =$20                p1_pushing        = 1<<p1_pushing_bit
(1)  142/       0 : =$40                p2_pushing        = 1<<p2_pushing_bit
(1)  143/       0 :                     
(1)  144/       0 :                     
(1)  145/       0 : =$18                standing_mask     = p1_standing|p2_standing
(1)  146/       0 : =$60                pushing_mask      = p1_pushing|p2_pushing
(1)  147/       0 :                     
(1)  148/       0 :                     ; ---------------------------------------------------------------------------
(1)  149/       0 :                     ; Controller Buttons
(1)  150/       0 :                     ;
(1)  151/       0 :                     ; Buttons bit numbers
(1)  152/       0 : =$0                 button_up:			EQU	0
(1)  153/       0 : =$1                 button_down:			EQU	1
(1)  154/       0 : =$2                 button_left:			EQU	2
(1)  155/       0 : =$3                 button_right:			EQU	3
(1)  156/       0 : =$4                 button_B:			EQU	4
(1)  157/       0 : =$5                 button_C:			EQU	5
(1)  158/       0 : =$6                 button_A:			EQU	6
(1)  159/       0 : =$7                 button_start:			EQU	7
(1)  160/       0 :                     ; Buttons masks (1 << x == pow(2, x))
(1)  161/       0 : =$1                 button_up_mask:			EQU	1<<button_up	; $01
(1)  162/       0 : =$2                 button_down_mask:		EQU	1<<button_down	; $02
(1)  163/       0 : =$4                 button_left_mask:		EQU	1<<button_left	; $04
(1)  164/       0 : =$8                 button_right_mask:		EQU	1<<button_right	; $08
(1)  165/       0 : =$10                button_B_mask:			EQU	1<<button_B	; $10
(1)  166/       0 : =$20                button_C_mask:			EQU	1<<button_C	; $20
(1)  167/       0 : =$40                button_A_mask:			EQU	1<<button_A	; $40
(1)  168/       0 : =$80                button_start_mask:		EQU	1<<button_start	; $80
(1)  169/       0 :                     
(1)  170/       0 :                     ; ---------------------------------------------------------------------------
(1)  171/       0 :                     ; Player Status Variables
(1)  172/       0 : =$0                 Status_Facing       = 0
(1)  173/       0 : =$1                 Status_InAir        = 1
(1)  174/       0 : =$2                 Status_Roll         = 2
(1)  175/       0 : =$3                 Status_OnObj        = 3
(1)  176/       0 : =$4                 Status_RollJump     = 4
(1)  177/       0 : =$5                 Status_Push         = 5
(1)  178/       0 : =$6                 Status_Underwater   = 6
(1)  179/       0 :                     
(1)  180/       0 :                     ; ---------------------------------------------------------------------------
(1)  181/       0 :                     ; Player status_secondary variables
(1)  182/       0 : =$0                 Status_Shield       = 0
(1)  183/       0 : =$1                 Status_Invincible   = 1
(1)  184/       0 : =$2                 Status_SpeedShoes   = 2
(1)  185/       0 :                     
(1)  186/       0 : =$4                 Status_FireShield   = 4
(1)  187/       0 : =$5                 Status_LtngShield   = 5
(1)  188/       0 : =$6                 Status_BublShield   = 6
(1)  189/       0 :                     
(1)  190/       0 :                     ; ---------------------------------------------------------------------------
(1)  191/       0 :                     ; Elemental Shield DPLC variables
(1)  192/       0 : =$34                shield_prev_frame   = $34
(1)  193/       0 : =$38                shield_art          = $38
(1)  194/       0 : =$3C                shield_plc          = $3C
(1)  195/       0 :                     
(1)  196/       0 :                     ; ---------------------------------------------------------------------------
(1)  197/       0 :                     ; Address equates
(1)  198/       0 :                     ; ---------------------------------------------------------------------------
(1)  199/       0 :                     
(1)  200/       0 :                     ; Z80 addresses
(1)  201/       0 : =$A00000            Z80_RAM =			$A00000 ; start of Z80 RAM
(1)  202/       0 : =$A02000            Z80_RAM_end =			$A02000 ; end of non-reserved Z80 RAM
(1)  203/       0 : =$A11100            Z80_bus_request =		$A11100
(1)  204/       0 : =$A11200            Z80_reset =			$A11200
(1)  205/       0 :                     
(1)  206/       0 : =$A130F1            SRAM_access_flag =		$A130F1
(1)  207/       0 : =$A14000            Security_addr =			$A14000
(1)  208/       0 :                     ; ---------------------------------------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     ; I/O Area
(1)  211/       0 : =$A10001            HW_Version =			$A10001
(1)  212/       0 : =$A10003            HW_Port_1_Data =		$A10003
(1)  213/       0 : =$A10005            HW_Port_2_Data =		$A10005
(1)  214/       0 : =$A10007            HW_Expansion_Data =		$A10007
(1)  215/       0 : =$A10009            HW_Port_1_Control =		$A10009
(1)  216/       0 : =$A1000B            HW_Port_2_Control =		$A1000B
(1)  217/       0 : =$A1000D            HW_Expansion_Control =		$A1000D
(1)  218/       0 : =$A1000F            HW_Port_1_TxData =		$A1000F
(1)  219/       0 : =$A10011            HW_Port_1_RxData =		$A10011
(1)  220/       0 : =$A10013            HW_Port_1_SCtrl =		$A10013
(1)  221/       0 : =$A10015            HW_Port_2_TxData =		$A10015
(1)  222/       0 : =$A10017            HW_Port_2_RxData =		$A10017
(1)  223/       0 : =$A10019            HW_Port_2_SCtrl =		$A10019
(1)  224/       0 : =$A1001B            HW_Expansion_TxData =		$A1001B
(1)  225/       0 : =$A1001D            HW_Expansion_RxData =		$A1001D
(1)  226/       0 : =$A1001F            HW_Expansion_SCtrl =		$A1001F
(1)  227/       0 :                     ; ---------------------------------------------------------------------------
(1)  228/       0 :                     
(1)  229/       0 :                     ; VDP addresses
(1)  230/       0 : =$C00000            VDP_data_port =			$C00000
(1)  231/       0 : =$C00004            VDP_control_port =		$C00004
(1)  232/       0 : =$C00011            PSG_input =			$C00011
(1)  233/       0 :                     ; ---------------------------------------------------------------------------
(1)  234/       0 :                     
(1)  235/       0 :                     ; RAM addresses
(1)  236/       0 :                     
(1)  237/       0 : =$FF7880            Sprite_table_buffer_2 =		ramaddr(   $FF7880 ) ; $280 bytes ; alternate sprite table for player 1 in competition mode
(1)  238/       0 : =$FF7B00            Sprite_table_buffer_P2 =	ramaddr(   $FF7B00 ) ; $280 bytes ; sprite table for player 2 in competition mode
(1)  239/       0 : =$FF7D80            Sprite_table_buffer_P2_2 =	ramaddr(   $FF7D80 ) ; $280 bytes ; alternate sprite table for player 2 in competition mode
(1)  240/       0 :                     
(1)  241/FFFFFFFFFFFF0000 :                     	phase $FFFF0000
(1)  242/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000  RAM_start =			*
(1)  243/FFFFFFFFFFFF0000 :                     Chunk_table			ds.b $8000		; chunk (128x128) definitions, $80 bytes per definition
(1)  244/FFFFFFFFFFFF8000 :                     
(1)  245/FFFFFFFFFFFF8000 :                     Level_layout_header		ds.b 8			; first word = chunks per FG row, second word = chunks per BG row, third word = FG rows, fourth word = BG rows
(1)  246/FFFFFFFFFFFF8008 :                     Level_layout_main		ds.b $FF8		; $40 word-sized line pointers followed by actual layout data
(1)  247/FFFFFFFFFFFF9000 : =$FFFFFFFFFFFF8400  Object_respawn_table_2 :=	Level_layout_header+$400; $200 bytes ; respawn table used by glowing spheres bonus stage, because... Reasons?
(1)  248/FFFFFFFFFFFF9000 : =$FFFFFFFFFFFF8600  Ring_status_table_2 :=		Level_layout_header+$600; $400 bytes ; ring status table used by glowing spheres bonus stage, because... Reasons?
(1)  249/FFFFFFFFFFFF9000 :                     Block_table			ds.b $1800		; block (16x16) definitions, 8 bytes per definition, space for $300 blocks
(1)  250/FFFFFFFFFFFFA800 : =$FFFFFFFFFFFFA400  SStage_collision_response_list := Block_table+$1400	; $100 bytes ; sprite collision list during a special stage
(1)  251/FFFFFFFFFFFFA800 : =$FFFFFFFFFFFFA500  SStage_unkA500 :=		Block_table+$1500	; unknown special stage array
(1)  252/FFFFFFFFFFFFA800 : =$FFFFFFFFFFFFA600  SStage_unkA600 :=		Block_table+$1600	; unknown special stage array
(1)  253/FFFFFFFFFFFFA800 :                     HScroll_table			ds.b $200		; array of background scroll positions for the level. WARNING: some references are before this label
(1)  254/FFFFFFFFFFFFAA00 : =$FFFFFFFFFFFFA880  _unkA880 :=			HScroll_table+$80	; used in SSZ screen/background events
(1)  255/FFFFFFFFFFFFAA00 : =$FFFFFFFFFFFFA8E0  _unkA8E0 :=			HScroll_table+$E0	; used in SSZ screen/background events
(1)  256/FFFFFFFFFFFFAA00 :                     Nem_code_table			ds.b $200		; code table is built up here and then used during decompression
(1)  257/FFFFFFFFFFFFAC00 :                     Sprite_table_input		ds.b $400		; 8 priority levels, $80 bytes per level
(1)  258/FFFFFFFFFFFFB000 :                     
(1)  259/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000  Object_RAM =			*			; $1FCC bytes ; $4A bytes per object, 110 objects
(1)  260/FFFFFFFFFFFFB000 :                     Player_1			ds.b object_size	; main character in 1 player mode, player 1 in Competition mode
(1)  261/FFFFFFFFFFFFB04A :                     Player_2			ds.b object_size	; Tails in a Sonic and Tails game, player 2 in Competition mode
(1)  262/FFFFFFFFFFFFB094 :                     Reserved_object_3		ds.b object_size	; during a level, an object whose sole purpose is to clear the collision response list is stored here
(1)  263/FFFFFFFFFFFFB0DE :                     Dynamic_object_RAM		ds.b object_size*90	; $1A04 bytes ; 90 objects
(1)  264/FFFFFFFFFFFFCAE2 : =$FFFFFFFFFFFFCAE2  Dynamic_object_RAM_end =	*
(1)  265/FFFFFFFFFFFFCAE2 : =$FFFFFFFFFFFFCAE2  Level_object_RAM =		Dynamic_object_RAM_end	; $4EA bytes ; various fixed in-level objects
(1)  266/FFFFFFFFFFFFCAE2 :                     		ds.b object_size			; unknown
(1)  267/FFFFFFFFFFFFCB2C :                     Breathing_bubbles		ds.b object_size	; for the main character
(1)  268/FFFFFFFFFFFFCB76 :                     Breathing_bubbles_P2		ds.b object_size	; for Tails in a Sonic and Tails game
(1)  269/FFFFFFFFFFFFCBC0 : =$FFFFFFFFFFFFCBC0  Super_stars =			*			; for Super Sonic and Super Knuckles
(1)  270/FFFFFFFFFFFFCBC0 :                     Tails_tails_2P			ds.b object_size	; Tails' tails in Competition mode
(1)  271/FFFFFFFFFFFFCC0A :                     Tails_tails			ds.b object_size	; Tails' tails
(1)  272/FFFFFFFFFFFFCC54 :                     Dust				ds.b object_size
(1)  273/FFFFFFFFFFFFCC9E :                     Dust_P2				ds.b object_size
(1)  274/FFFFFFFFFFFFCCE8 :                     Shield				ds.b object_size
(1)  275/FFFFFFFFFFFFCD32 :                     Shield_P2			ds.b object_size	; left over from Sonic 2 I'm guessing
(1)  276/FFFFFFFFFFFFCD7C :                     Invincibility_stars		ds.b object_size*4
(1)  277/FFFFFFFFFFFFCEA4 :                     Invincibility_stars_P2		ds.b object_size*3
(1)  278/FFFFFFFFFFFFCF82 :                     Wave_Splash			ds.b object_size	; Obj_HCZWaveSplash is loaded here
(1)  279/FFFFFFFFFFFFCFCC : =$FFFFFFFFFFFFCFCC  Object_RAM_end =		*
(1)  280/FFFFFFFFFFFFCFCC :                     			ds.b $14			; unused
(1)  281/FFFFFFFFFFFFCFE0 :                     Conveyor_belt_load_array	ds.b $E			; each subtype of hcz conveyor belt uses a different byte to check if it's already loaded. Since they're so wide, the object loader may try loading them multiple times
(1)  282/FFFFFFFFFFFFCFEE :                     			ds.b $12			; unused
(1)  283/FFFFFFFFFFFFD000 :                     
(1)  284/FFFFFFFFFFFFD000 :                     Kos_decomp_buffer		ds.b $1000		; each module in a KosM archive is decompressed here and then DMAed to VRAM
(1)  285/FFFFFFFFFFFFE000 :                     H_scroll_buffer			ds.b $380		; horizontal scroll table is built up here and then DMAed to VRAM
(1)  286/FFFFFFFFFFFFE380 :                     Collision_response_list		ds.b $80		; only objects in this list are processed by the collision response routines
(1)  287/FFFFFFFFFFFFE400 : =$FFFFFFFFFFFFE400  Stat_table =			*			; used by Tails' AI in a Sonic and Tails game
(1)  288/FFFFFFFFFFFFE400 :                     Pos_table_P2			ds.b $100		; used by Player 2 in competition mode
(1)  289/FFFFFFFFFFFFE500 :                     Pos_table 			ds.b $100		;
(1)  290/FFFFFFFFFFFFE600 :                     Competition_saved_data		ds.b $54		; saved data from Competition Mode
(1)  291/FFFFFFFFFFFFE654 :                     			ds.b $C				; unused
(1)  292/FFFFFFFFFFFFE660 : =$FFFFFFFFFFFFE660  Save_pointer :=			*		; S3 uses a different address
(1)  293/FFFFFFFFFFFFE660 :                     				ds.l 1			; pointer to the active save slot in 1 player mode
(1)  294/FFFFFFFFFFFFE664 :                     			ds.w 1				; unused
(1)  295/FFFFFFFFFFFFE666 :                     Emerald_flicker_flag		ds.w 1			; controls the emerald flicker in save screen and special stage results.
(1)  296/FFFFFFFFFFFFE668 :                     			ds.b $44			; unused
(1)  297/FFFFFFFFFFFFE6AC : =$FFFFFFFFFFFFE6AC  Saved_data :=			*		; S3 uses a different address
(1)  298/FFFFFFFFFFFFE6AC :                     				ds.b $54		; saved data from 1 player mode
(1)  299/FFFFFFFFFFFFE700 :                     Ring_status_table		ds.b $400		; 1 word per ring
(1)  300/FFFFFFFFFFFFEB00 :                     Object_respawn_table		ds.b $300		; 1 byte per object, every object in the level gets an entry
(1)  301/FFFFFFFFFFFFEE00 :                     
(1)  302/FFFFFFFFFFFFEE00 : =$FFFFFFFFFFFFEE00  Camera_RAM =			*			; various camera and scroll-related variables are stored here
(1)  303/FFFFFFFFFFFFEE00 :                     H_scroll_amount			ds.w 1			; number of pixels camera scrolled horizontally in the last frame * $100
(1)  304/FFFFFFFFFFFFEE02 :                     V_scroll_amount			ds.w 1			; number of pixels camera scrolled vertically in the last frame * $100
(1)  305/FFFFFFFFFFFFEE04 :                     H_scroll_amount_P2		ds.w 1
(1)  306/FFFFFFFFFFFFEE06 :                     V_scroll_amount_P2		ds.w 1
(1)  307/FFFFFFFFFFFFEE08 :                     _unkEE08			ds.b 1			; this is actually unused
(1)  308/FFFFFFFFFFFFEE09 :                     			ds.b 1				; unused
(1)  309/FFFFFFFFFFFFEE0A :                     Scroll_lock			ds.b 1			; if this is set scrolling routines aren't called
(1)  310/FFFFFFFFFFFFEE0B :                     Scroll_lock_P2			ds.b 1
(1)  311/FFFFFFFFFFFFEE0C :                     Camera_target_min_X_pos		ds.w 1
(1)  312/FFFFFFFFFFFFEE0E :                     Camera_target_max_X_pos		ds.w 1
(1)  313/FFFFFFFFFFFFEE10 :                     Camera_target_min_Y_pos		ds.w 1
(1)  314/FFFFFFFFFFFFEE12 :                     Camera_target_max_Y_pos		ds.w 1
(1)  315/FFFFFFFFFFFFEE14 :                     Camera_min_X_pos		ds.w 1
(1)  316/FFFFFFFFFFFFEE16 :                     Camera_max_X_pos		ds.w 1
(1)  317/FFFFFFFFFFFFEE18 :                     Camera_min_Y_pos		ds.w 1
(1)  318/FFFFFFFFFFFFEE1A :                     Camera_max_Y_pos		ds.w 1			; this is the only one which ever differs from its target value
(1)  319/FFFFFFFFFFFFEE1C :                     Camera_min_X_pos_P2		ds.w 1
(1)  320/FFFFFFFFFFFFEE1E :                     Camera_max_X_pos_P2		ds.w 1
(1)  321/FFFFFFFFFFFFEE20 :                     Camera_min_Y_pos_P2		ds.w 1
(1)  322/FFFFFFFFFFFFEE22 :                     Camera_max_Y_pos_P2		ds.w 1
(1)  323/FFFFFFFFFFFFEE24 :                     H_scroll_frame_offset		ds.w 1			; if this is non-zero with value x, horizontal scrolling will be based on the player's position x / $100 + 1 frames ago
(1)  324/FFFFFFFFFFFFEE26 :                     Pos_table_index			ds.w 1			; goes up in increments of 4
(1)  325/FFFFFFFFFFFFEE28 :                     H_scroll_frame_offset_P2	ds.w 1
(1)  326/FFFFFFFFFFFFEE2A :                     Pos_table_index_P2		ds.w 1
(1)  327/FFFFFFFFFFFFEE2C :                     Distance_from_top		ds.w 1			; the vertical scroll manager scrolls the screen until the player's distance from the top of the screen is equal to this (or between this and this + $40 when in the air). $60 by d
(1)  328/FFFFFFFFFFFFEE2E :                     Distance_from_top_P2		ds.w 1
(1)  329/FFFFFFFFFFFFEE30 :                     Deform_lock			ds.b 1
(1)  330/FFFFFFFFFFFFEE31 :                     			ds.b 1				; unused
(1)  331/FFFFFFFFFFFFEE32 :                     Camera_max_Y_pos_changing	ds.b 1			; set when the maximum camera Y pos is undergoing a change
(1)  332/FFFFFFFFFFFFEE33 :                     Dynamic_resize_routine		ds.b 1
(1)  333/FFFFFFFFFFFFEE34 :                     			ds.b 5				; unused
(1)  334/FFFFFFFFFFFFEE39 :                     Fast_V_scroll_flag		ds.b 1			; if this is set vertical scroll when the player is on the ground and has a speed of less than $800 is capped at 24 pixels per frame instead of 6
(1)  335/FFFFFFFFFFFFEE3A :                     V_scroll_value_P2_copy		ds.l 1			; upper word for foreground, lower word for background
(1)  336/FFFFFFFFFFFFEE3E :                     Camera_X_diff			ds.w 1			; difference between Camera_X_pos_copy and Camera_X_pos_BG_copy, used for background collision in SSZ and other levels
(1)  337/FFFFFFFFFFFFEE40 :                     Camera_Y_diff			ds.w 1			; difference between Camera_Y_pos_copy and Camera_Y_pos_BG_copy, used for background collision in SSZ and other levels
(1)  338/FFFFFFFFFFFFEE42 :                     Ring_start_addr_ROM		ds.l 1			; address in the ring layout of the first ring whose X position is >= camera X position - 8
(1)  339/FFFFFFFFFFFFEE46 :                     Ring_end_addr_ROM		ds.l 1			; address in the ring layout of the first ring whose X position is >= camera X position + 328
(1)  340/FFFFFFFFFFFFEE4A :                     Ring_start_addr_RAM		ds.w 1			; address in the ring status table of the first ring whose X position is >= camera X position - 8
(1)  341/FFFFFFFFFFFFEE4C :                     			ds.w 1				; unused
(1)  342/FFFFFFFFFFFFEE4E : =$FFFFFFFFFFFFEE4E  Apparent_zone_and_act =		*
(1)  343/FFFFFFFFFFFFEE4E :                     Apparent_zone			ds.b 1			; always equal to actual zone
(1)  344/FFFFFFFFFFFFEE4F :                     Apparent_act			ds.b 1			; for example, after AIZ gets burnt, this indicates act 1 even though it's actually act 2
(1)  345/FFFFFFFFFFFFEE50 :                     Palette_fade_timer		ds.w 1			; the palette gets faded in until this timer expires
(1)  346/FFFFFFFFFFFFEE52 :                     Competition_time_record		ds.l 1		; player 1's recorded time for the current run, to be displayed in menus and the result screen 
(1)  347/FFFFFFFFFFFFEE56 : =$FFFFFFFFFFFFEE53  Competition_time_record_minute =			Competition_time_record+1
(1)  348/FFFFFFFFFFFFEE56 : =$FFFFFFFFFFFFEE54  Competition_time_record_second =			Competition_time_record+2
(1)  349/FFFFFFFFFFFFEE56 : =$FFFFFFFFFFFFEE55  Competition_time_record_frame =			Competition_time_record+3
(1)  350/FFFFFFFFFFFFEE56 :                     Competition_time_record_P2	ds.l 1		; player 2's recorded time for the current run, to be displayed in menus and the result screen 
(1)  351/FFFFFFFFFFFFEE5A : =$FFFFFFFFFFFFEE57  Competition_time_record_minute_P2 =		Competition_time_record_P2+1
(1)  352/FFFFFFFFFFFFEE5A : =$FFFFFFFFFFFFEE58  Competition_time_record_second_P2 =		Competition_time_record_P2+2
(1)  353/FFFFFFFFFFFFEE5A : =$FFFFFFFFFFFFEE59  Competition_time_record_frame_P2 =		Competition_time_record_P2+3
(1)  354/FFFFFFFFFFFFEE5A :                     Competition_time_attack_new_top_record			ds.b 1		; signifies new time records in time attack mode. set: no new records, clear: 1st place, $1: 2nd place, $2: 3rd place record.
(1)  355/FFFFFFFFFFFFEE5B :                     			ds.b 1				; unused
(1)  356/FFFFFFFFFFFFEE5C :                     Competition_lap_count			ds.b 1			; number of laps that player 1 has completed
(1)  357/FFFFFFFFFFFFEE5D :                     Competition_lap_count_2P			ds.b 1		; number of laps that player 2 has completed
(1)  358/FFFFFFFFFFFFEE5E :                     Act3_flag			ds.b 1			; set when entering LRZ 3 or DEZ 3 directly from previous act. Prevents title card from loading
(1)  359/FFFFFFFFFFFFEE5F :                     			ds.b 1				; unused
(1)  360/FFFFFFFFFFFFEE60 :                     Camera_X_pos_P2			ds.l 1
(1)  361/FFFFFFFFFFFFEE64 :                     Camera_Y_pos_P2			ds.l 1
(1)  362/FFFFFFFFFFFFEE68 :                     Camera_X_pos_P2_copy		ds.w 1
(1)  363/FFFFFFFFFFFFEE6A :                     			ds.w 1				; unused
(1)  364/FFFFFFFFFFFFEE6C :                     Camera_Y_pos_P2_copy		ds.w 1
(1)  365/FFFFFFFFFFFFEE6E :                     			ds.w 1				; unused
(1)  366/FFFFFFFFFFFFEE70 :                     _unkEE70			ds.w 1			; it is unclear how this is used
(1)  367/FFFFFFFFFFFFEE72 :                     			ds.w 1				; unused
(1)  368/FFFFFFFFFFFFEE74 :                     _unkEE74			ds.w 1			; it is unclear how this is used
(1)  369/FFFFFFFFFFFFEE76 :                     			ds.w 1				; unused
(1)  370/FFFFFFFFFFFFEE78 :                     Camera_X_pos			ds.l 1
(1)  371/FFFFFFFFFFFFEE7C :                     Camera_Y_pos			ds.l 1
(1)  372/FFFFFFFFFFFFEE80 :                     Camera_X_pos_copy		ds.l 1
(1)  373/FFFFFFFFFFFFEE84 :                     Camera_Y_pos_copy		ds.l 1
(1)  374/FFFFFFFFFFFFEE88 :                     Camera_X_pos_rounded		ds.w 1			; rounded down to the nearest block boundary ($10th pixel)
(1)  375/FFFFFFFFFFFFEE8A :                     Camera_Y_pos_rounded		ds.w 1			; rounded down to the nearest block boundary ($10th pixel)
(1)  376/FFFFFFFFFFFFEE8C :                     Camera_X_pos_BG_copy		ds.w 1
(1)  377/FFFFFFFFFFFFEE8E :                     _unkEE8E			ds.w 1			; various uses in screen/background events and competition mode
(1)  378/FFFFFFFFFFFFEE90 :                     
(1)  379/FFFFFFFFFFFFEE90 :                     Camera_Y_pos_BG_copy		ds.l 1
(1)  380/FFFFFFFFFFFFEE94 :                     Camera_X_pos_BG_rounded		ds.w 1			; rounded down to the nearest block boundary ($10th pixel)
(1)  381/FFFFFFFFFFFFEE96 :                     Camera_Y_pos_BG_rounded		ds.w 1			; rounded down to the nearest block boundary ($10th pixel)
(1)  382/FFFFFFFFFFFFEE98 :                     _unkEE98			ds.l 1			; various uses in screen/background events and competition mode
(1)  383/FFFFFFFFFFFFEE9C :                     _unkEE9C			ds.l 1			; various uses in screen/background events and competition mode
(1)  384/FFFFFFFFFFFFEEA0 :                     _unkEEA0			ds.w 1			; various uses in screen/background events and competition mode
(1)  385/FFFFFFFFFFFFEEA2 :                     _unkEEA2			ds.w 1			; various uses in screen/background events and competition mode
(1)  386/FFFFFFFFFFFFEEA4 :                     Plane_double_update_flag	ds.w 1			; set when two block are to be updated instead of one (i.e. the camera's scrolled by more than $10 pixels)
(1)  387/FFFFFFFFFFFFEEA6 :                     Special_V_int_routine		ds.w 1
(1)  388/FFFFFFFFFFFFEEA8 :                     Screen_X_wrap_value		ds.w 1			; set to $FFFF
(1)  389/FFFFFFFFFFFFEEAA :                     Screen_Y_wrap_value		ds.w 1			; either $7FF or $FFF
(1)  390/FFFFFFFFFFFFEEAC :                     Camera_Y_pos_mask		ds.w 1			; either $7F0 or $FF0
(1)  391/FFFFFFFFFFFFEEAE :                     Layout_row_index_mask		ds.w 1			; either $3C or $7C
(1)  392/FFFFFFFFFFFFEEB0 :                     
(1)  393/FFFFFFFFFFFFEEB0 :                     _unkEEB0			ds.w 1			;
(1)  394/FFFFFFFFFFFFEEB2 :                     Special_events_routine		ds.w 1			; routine counter for various special events. Used for example with LBZ2 Death Egg sequence
(1)  395/FFFFFFFFFFFFEEB4 :                     Events_fg_0			ds.w 1			; various flags used by screen events
(1)  396/FFFFFFFFFFFFEEB6 :                     Events_fg_1			ds.w 1			; various flags used by screen events
(1)  397/FFFFFFFFFFFFEEB8 :                     Events_fg_2			ds.w 1			; various flags used by screen events
(1)  398/FFFFFFFFFFFFEEBA :                     _unkEEBA			ds.w 1			; only used in Sonic 3
(1)  399/FFFFFFFFFFFFEEBC :                     Level_repeat_offset		ds.w 1			; the number of pixels the screen was moved this frame, used to offset level objects horizontally. Used only for level repeat sections, such as AIZ airship.
(1)  400/FFFFFFFFFFFFEEBE :                     Events_fg_3			ds.w 1			; various flags used by screen events
(1)  401/FFFFFFFFFFFFEEC0 :                     Events_routine_fg		ds.w 1			; screen events routine counter
(1)  402/FFFFFFFFFFFFEEC2 :                     Events_routine_bg		ds.w 1			; background events routine counter
(1)  403/FFFFFFFFFFFFEEC4 :                     Events_fg_4			ds.w 1			; various flags used by screen events
(1)  404/FFFFFFFFFFFFEEC6 :                     Events_fg_5			ds.w 1			; various flags used by screen events
(1)  405/FFFFFFFFFFFFEEC8 :                     Draw_delayed_position		ds.w 1			; position to redraw screen from. Screen is reloaded 1 row at a time to avoid game lag
(1)  406/FFFFFFFFFFFFEECA :                     Draw_delayed_rowcount		ds.w 1			; number of rows for screen redrawing. Screen is reloaded 1 row at a time to avoid game lag
(1)  407/FFFFFFFFFFFFEECC :                     Screen_shake_flag		ds.w 1			; flag for enabling screen shake. Negative values cause screen to shake infinitely, positive values make the screen shake for a short amount of time
(1)  408/FFFFFFFFFFFFEECE :                     Screen_shake_offset		ds.w 1			; vertical offset when screen_shake_flag is enabled. This is added to camera position later
(1)  409/FFFFFFFFFFFFEED0 :                     Screen_shake_last_offset	ds.w 1			; value of Screen_shake_offset for the previous frame
(1)  410/FFFFFFFFFFFFEED2 :                     
(1)  411/FFFFFFFFFFFFEED2 :                     Events_bg			ds.b $18		; $18 bytes ; various flags used by background events
(1)  412/FFFFFFFFFFFFEEEA : =$FFFFFFFFFFFFEEE0  SStage_results_object_addr =	Events_bg+$E		; word ; RAM address of the special stage results object
(1)  413/FFFFFFFFFFFFEEEA : =$FFFFFFFFFFFFEEEA  FBZ_cloud_addr =		*			; $14 bytes ; addresses for cloud objects in FBZ2
(1)  414/FFFFFFFFFFFFEEEA : =$FFFFFFFFFFFFEEEA  Vscroll_buffer =		*			; $50 bytes ; vertical scroll buffer used in various levels
(1)  415/FFFFFFFFFFFFEEEA :                     _unkEEEA			ds.w 1			; various unknown uses for EEEA
(1)  416/FFFFFFFFFFFFEEEC :                     			ds.w 1				; used in some instances (see above)
(1)  417/FFFFFFFFFFFFEEEE :                     _unkEEEE			ds.w 1			; used exclusively in SSZ background events code
(1)  418/FFFFFFFFFFFFEEF0 :                     			ds.w 1				; used in some instances (see above)
(1)  419/FFFFFFFFFFFFEEF2 :                     _unkEEF2			ds.w 1			; used exclusively in SSZ background events code
(1)  420/FFFFFFFFFFFFEEF4 :                     _unkEEF4			ds.w 1			; used exclusively in SSZ background events code
(1)  421/FFFFFFFFFFFFEEF6 :                     _unkEEF6			ds.l 1			; used exclusively in SSZ background events code
(1)  422/FFFFFFFFFFFFEEFA :                     _unkEEFA			ds.w 1			; used exclusively in SSZ background events code
(1)  423/FFFFFFFFFFFFEEFC :                     			ds.b $3E			; used in some instances (see above)
(1)  424/FFFFFFFFFFFFEF3A :                     
(1)  425/FFFFFFFFFFFFEF3A :                     Spritemask_flag			ds.w 1			; when set, indicates that special sprites are used for sprite masking
(1)  426/FFFFFFFFFFFFEF3C :                     Use_normal_sprite_table		ds.w 1			; if this is set Sprite_table_buffer and Sprite_table_buffer_P2 will be DMAed instead of Sprite_table_buffer_2 and Sprite_table_buffer_P2_2
(1)  427/FFFFFFFFFFFFEF3E :                     Switch_sprite_table		ds.w 1			; if set, switches the state of Use_normal_sprite_table
(1)  428/FFFFFFFFFFFFEF40 : =$FFFFFFFFFFFFEF40  Event_LBZ2_DeathEgg =		*			; if set, Launch Base 2 Death Egg is currently rising
(1)  429/FFFFFFFFFFFFEF40 :                     _unkEF40_1			ds.l 1			; used as a part of calculating decimal scores
(1)  430/FFFFFFFFFFFFEF44 : =$FFFFFFFFFFFFEF44  _unkEF44_1 =			*			; used as a jump pointer in vint 1E, unknown why this is used
(1)  431/FFFFFFFFFFFFEF44 :                     _unkEF44_2			ds.l 1			; used as a part of calculating decimal scores
(1)  432/FFFFFFFFFFFFEF48 :                     Competition_menu_selection	ds.b 1			; 0 = Grandprix, 1 = Matchrace, 2 = Timeattack. 3 = Exit
(1)  433/FFFFFFFFFFFFEF49 :                     Not_ghost_flag			ds.b 1			; set if Player 2 in competition mode isn't a ghost of player 1
(1)  434/FFFFFFFFFFFFEF4A :                     Competition_menu_zone		ds.b 1			; competition mode zone id. This is different from the zone order in game
(1)  435/FFFFFFFFFFFFEF4B :                     Dataselect_entry		ds.b 1			; the selected save entry in data select menu. This includes no save and delete options, too
(1)  436/FFFFFFFFFFFFEF4C :                     Dataselect_nosave_player	ds.w 1			; Player mode for NO SAVE option in data select menu
(1)  437/FFFFFFFFFFFFEF4E :                     Competition_menu_items		ds.b 1			; 0 = Enabled, FF = Disabled
(1)  438/FFFFFFFFFFFFEF4F :                     			ds.b 1				; unused
(1)  439/FFFFFFFFFFFFEF50 :                     Demo_start_button		ds.b 1			; keeps track of whether controller 1 has pressed the start button. May be used by the demo data itself
(1)  440/FFFFFFFFFFFFEF51 :                     			ds.b 1				; unused
(1)  441/FFFFFFFFFFFFEF52 :                     Demo_data_addr			ds.l 1			; keeps getting incremented as the demo progresses
(1)  442/FFFFFFFFFFFFEF56 :                     SRAM_mask_interrupts_flag	ds.w 1			; if this is set SRAM routines will mask all interrupts (by setting the SR to $2700)
(1)  443/FFFFFFFFFFFFEF58 :                     			ds.w 1				; unused
(1)  444/FFFFFFFFFFFFEF5A :                     Object_index_addr		ds.l 1			; points to either the object index for S3 levels or that for S&K levels
(1)  445/FFFFFFFFFFFFEF5E :                     Act3_ring_count			ds.w 1			; stores ring count during act 3 transition
(1)  446/FFFFFFFFFFFFEF60 :                     Act3_timer			ds.l 1			; stores timer during act 3 transition
(1)  447/FFFFFFFFFFFFEF64 :                     Camera_Y_pos_coarse_back	ds.w 1			; Camera_Y_pos_coarse - $80
(1)  448/FFFFFFFFFFFFEF66 :                     Glide_screen_shake		ds.w 1			; alternate screen shaking flag only used when hyper knuckles hits a wall after gliding
(1)  449/FFFFFFFFFFFFEF68 :                     _unkEF68			ds.w 1			; stores a tile used in special stage results screen, unknown purpose
(1)  450/FFFFFFFFFFFFEF6A :                     Special_stage_zone_and_act	ds.w 1			; stored zone and act during special stage results screen?
(1)  451/FFFFFFFFFFFFEF6C :                     HPZ_special_stage_completed	ds.w 1			; set if special stage was completed. This determines which cutscene to play when entering HPZS
(1)  452/FFFFFFFFFFFFEF6E :                     Current_special_stage_2		ds.b 1			; seems to be just a copy of Current_special_stage
(1)  453/FFFFFFFFFFFFEF6F :                     			ds.b 1				; unused
(1)  454/FFFFFFFFFFFFEF70 :                     HPZ_current_special_stage	ds.b 1			; seems to be just a copy of Current_special_stage used specifically for HPZS
(1)  455/FFFFFFFFFFFFEF71 :                     			ds.b 1				; unused
(1)  456/FFFFFFFFFFFFEF72 :                     Ending_running_flag		ds.w 1			; the only thing this does is prevent the game from pausing
(1)  457/FFFFFFFFFFFFEF74 :                     Plane_buffer_2_addr		ds.l 1			; the address of the second plane buffer to process, if applicable
(1)  458/FFFFFFFFFFFFEF78 :                     Demo_hold_counter		ds.b 1			; the number of frames to hold the current buttons. This only applies to S&K demos
(1)  459/FFFFFFFFFFFFEF79 :                     Demo_hold_buttons		ds.b 1			; the buttons to hold. This only applies to S&K demos
(1)  460/FFFFFFFFFFFFEF7A :                     Demo_number			ds.w 1			; the currently running demo
(1)  461/FFFFFFFFFFFFEF7C :                     			ds.l 1				; unused
(1)  462/FFFFFFFFFFFFEF80 :                     
(1)  463/FFFFFFFFFFFFEF80 : =$FFFFFFFFFFFFEF80  Ring_consumption_table =	*			; $80 bytes ; stores the addresses of all rings currently being consumed
(1)  464/FFFFFFFFFFFFEF80 :                     Ring_consumption_count		ds.w 1			; the number of rings being consumed currently
(1)  465/FFFFFFFFFFFFEF82 :                     Ring_consumption_list		ds.w $3F		; the remaining part of the ring consumption table
(1)  466/FFFFFFFFFFFFF000 :                     
(1)  467/FFFFFFFFFFFFF000 : =$FFFFFFFFFFFFF000  SStage_layout_buffer =		*			; $600 bytes ; yes, this area is used to for special stage layouts!
(1)  468/FFFFFFFFFFFFF000 :                     Target_water_palette		ds.b $80		; used by palette fading routines
(1)  469/FFFFFFFFFFFFF080 :                     Water_palette			ds.b $80		; this is what actually gets displayed
(1)  470/FFFFFFFFFFFFF100 : =$FFFFFFFFFFFFF0A0  Water_palette_line_2 =		Water_palette+$20	; $20 bytes
(1)  471/FFFFFFFFFFFFF100 : =$FFFFFFFFFFFFF0C0  Water_palette_line_3 =		Water_palette+$40	; $20 bytes
(1)  472/FFFFFFFFFFFFF100 : =$FFFFFFFFFFFFF0E0  Water_palette_line_4 =		Water_palette+$60	; $20 bytes
(1)  473/FFFFFFFFFFFFF100 :                     Plane_buffer			ds.b $480		; used by level drawing routines
(1)  474/FFFFFFFFFFFFF580 :                     VRAM_buffer			ds.b $80		; used to temporarily hold data while it is being transferred from one VRAM location to another
(1)  475/FFFFFFFFFFFFF600 :                     
(1)  476/FFFFFFFFFFFFF600 :                     Game_mode			ds.b 1
(1)  477/FFFFFFFFFFFFF601 :                     			ds.b 1				; unused
(1)  478/FFFFFFFFFFFFF602 : =$FFFFFFFFFFFFF602  Ctrl_1_logical =		*			; both held and pressed
(1)  479/FFFFFFFFFFFFF602 :                     Ctrl_1_held_logical		ds.b 1
(1)  480/FFFFFFFFFFFFF603 :                     Ctrl_1_pressed_logical		ds.b 1
(1)  481/FFFFFFFFFFFFF604 : =$FFFFFFFFFFFFF604  Ctrl_1 =			*			; both held and pressed
(1)  482/FFFFFFFFFFFFF604 :                     Ctrl_1_held			ds.b 1			; all held buttons
(1)  483/FFFFFFFFFFFFF605 :                     Ctrl_1_pressed			ds.b 1			; buttons being pressed newly this frame
(1)  484/FFFFFFFFFFFFF606 : =$FFFFFFFFFFFFF606  Ctrl_2 =			*			; both held and pressed
(1)  485/FFFFFFFFFFFFF606 :                     Ctrl_2_held			ds.b 1
(1)  486/FFFFFFFFFFFFF607 :                     Ctrl_2_pressed			ds.b 1
(1)  487/FFFFFFFFFFFFF608 :                     _tempF608		ds.b 6				; this is used in Sonic 3 Alone, but unused in Sonic & Knuckles and Sonic 3 Complete
(1)  488/FFFFFFFFFFFFF60E :                     
(1)  489/FFFFFFFFFFFFF60E :                     VDP_reg_1_command		ds.w 1			; AND the lower byte by $BF and write to VDP control port to disable display, OR by $40 to enable
(1)  490/FFFFFFFFFFFFF610 :                     			ds.l 1				; unused
(1)  491/FFFFFFFFFFFFF614 :                     Demo_timer			ds.w 1			; the time left for a demo to start/run
(1)  492/FFFFFFFFFFFFF616 : =$FFFFFFFFFFFFF616  V_scroll_value =		*			; both foreground and background
(1)  493/FFFFFFFFFFFFF616 :                     V_scroll_value_FG		ds.w 1
(1)  494/FFFFFFFFFFFFF618 :                     V_scroll_value_BG		ds.w 1
(1)  495/FFFFFFFFFFFFF61A :                     _unkF61A			ds.l 1			; unused
(1)  496/FFFFFFFFFFFFF61E : =$FFFFFFFFFFFFF61E  V_scroll_value_P2 =		*
(1)  497/FFFFFFFFFFFFF61E :                     V_scroll_value_FG_P2		ds.w 1
(1)  498/FFFFFFFFFFFFF620 :                     V_scroll_value_BG_P2		ds.w 1
(1)  499/FFFFFFFFFFFFF622 :                     Teleport_active_timer		ds.b 1			; left over from Sonic 2
(1)  500/FFFFFFFFFFFFF623 :                     Teleport_active_flag		ds.b 1			; left over from Sonic 2
(1)  501/FFFFFFFFFFFFF624 :                     H_int_counter_command		ds.w 1			; contains a command to write to VDP register $0A (line interrupt counter)
(1)  502/FFFFFFFFFFFFF626 : =$FFFFFFFFFFFFF625  H_int_counter =			H_int_counter_command+1	; just the counter part of the command
(1)  503/FFFFFFFFFFFFF626 : =$FFFFFFFFFFFFF626  Palette_fade_info =		*			; both index and count
(1)  504/FFFFFFFFFFFFF626 :                     Palette_fade_index		ds.b 1			; colour to start fading from
(1)  505/FFFFFFFFFFFFF627 :                     Palette_fade_count		ds.b 1			; the number of colours to fade
(1)  506/FFFFFFFFFFFFF628 :                     Lag_frame_count			ds.w 1			; more specifically, the number of times V-int routine 0 has run. Reset at the end of a normal frame
(1)  507/FFFFFFFFFFFFF62A :                     V_int_routine			ds.b 1
(1)  508/FFFFFFFFFFFFF62B :                     			ds.b 1				; unused
(1)  509/FFFFFFFFFFFFF62C :                     Sprites_drawn			ds.b 1			; used to ensure the sprite limit isn't exceeded
(1)  510/FFFFFFFFFFFFF62D :                     			ds.b 1				; unused
(1)  511/FFFFFFFFFFFFF62E :                     Water_palette_data_addr		ds.l 1			; points to the water palette data for the current level
(1)  512/FFFFFFFFFFFFF632 :                     Palette_cycle_counter0		ds.w 1			; various counters and variables for palette cycles
(1)  513/FFFFFFFFFFFFF634 :                     Palette_cycle_counter1		ds.w 1			; various counters and variables for palette cycles
(1)  514/FFFFFFFFFFFFF636 :                     RNG_seed			ds.l 1			; used by the random number generator
(1)  515/FFFFFFFFFFFFF63A :                     Game_paused			ds.w 1
(1)  516/FFFFFFFFFFFFF63C :                     			ds.l 1				; unused
(1)  517/FFFFFFFFFFFFF640 :                     DMA_trigger_word		ds.w 1			; transferred from RAM to avoid crashing the Mega Drive
(1)  518/FFFFFFFFFFFFF642 :                     			ds.w 1				; unused
(1)  519/FFFFFFFFFFFFF644 :                     H_int_flag			ds.w 1			; unless this is set H-int will return immediately
(1)  520/FFFFFFFFFFFFF646 :                     
(1)  521/FFFFFFFFFFFFF646 :                     Water_level			ds.w 1			; keeps fluctuating
(1)  522/FFFFFFFFFFFFF648 :                     Mean_water_level		ds.w 1			; the steady central value of the water level
(1)  523/FFFFFFFFFFFFF64A :                     Target_water_level		ds.w 1
(1)  524/FFFFFFFFFFFFF64C :                     Water_speed			ds.b 1			; this is added to or subtracted from Mean_water_level every frame till it reaches Target_water_level
(1)  525/FFFFFFFFFFFFF64D :                     Water_entered_counter		ds.b 1			; incremented when entering and exiting water, read by the the floating AIZ spike log, cleared on level initialisation and dynamic events of certain levels
(1)  526/FFFFFFFFFFFFF64E :                     Water_full_screen_flag		ds.b 1			; set if water covers the entire screen (i.e. the underwater palette should be DMAed during V-int rather than the normal palette)
(1)  527/FFFFFFFFFFFFF64F :                     Do_Updates_in_H_int		ds.b 1			; if this is set Do_Updates will be called from H-int instead of V-int
(1)  528/FFFFFFFFFFFFF650 :                     Palette_cycle_counters		ds.b $C			; various counters and variables for palette cycles
(1)  529/FFFFFFFFFFFFF65C :                     Palette_frame			ds.w 1
(1)  530/FFFFFFFFFFFFF65E :                     Palette_timer			ds.b 1
(1)  531/FFFFFFFFFFFFF65F :                     Super_palette_status		ds.b 1			 ; appears to be a flag for the palette's current status: '0' for 'off', '1' for 'fading', -1 for 'fading done'
(1)  532/FFFFFFFFFFFFF660 :                     _unkF660			ds.w 1
(1)  533/FFFFFFFFFFFFF662 :                     _unkF662			ds.w 1			 ; unused
(1)  534/FFFFFFFFFFFFF664 :                     Background_collision_flag	ds.b 1			 ; if set, background collision is enabled
(1)  535/FFFFFFFFFFFFF665 :                     Disable_death_plane		ds.b 1			 ; if set, going below the screen wont kill the player
(1)  536/FFFFFFFFFFFFF666 :                     Hyper_Sonic_flash_timer		ds.b 1			 ; used for Hyper Sonic's double jump move
(1)  537/FFFFFFFFFFFFF667 :                     Super_Tails_flag		ds.b 1
(1)  538/FFFFFFFFFFFFF668 :                     Palette_frame_Tails		ds.b 1			 ; Tails would use Palette_frame and Palette_timer, but they're reserved for his Super Flickies
(1)  539/FFFFFFFFFFFFF669 :                     Palette_timer_Tails		ds.b 1
(1)  540/FFFFFFFFFFFFF66A : =$FFFFFFFFFFFFF66A  Ctrl_2_logical =		*			 ; both held and pressed
(1)  541/FFFFFFFFFFFFF66A :                     Ctrl_2_held_logical		ds.b 1
(1)  542/FFFFFFFFFFFFF66B :                     Ctrl_2_pressed_logical		ds.b 1
(1)  543/FFFFFFFFFFFFF66C :                     _unkF66C			ds.b 1
(1)  544/FFFFFFFFFFFFF66D :                     			ds.b 3				; unused
(1)  545/FFFFFFFFFFFFF670 :                     Super_frame_count		ds.w 1
(1)  546/FFFFFFFFFFFFF672 :                     			ds.l 1				; unused
(1)  547/FFFFFFFFFFFFF676 :                     Scroll_force_positions		ds.b 1			; if this is set scrolling will be based on the two variables below rather than the player's actual position
(1)  548/FFFFFFFFFFFFF677 :                     			ds.b 1				; unused
(1)  549/FFFFFFFFFFFFF678 :                     Scroll_forced_X_pos		ds.w 1
(1)  550/FFFFFFFFFFFFF67A :                     			ds.w 1				; unused
(1)  551/FFFFFFFFFFFFF67C :                     Scroll_forced_Y_pos		ds.w 1			; note: must be exactly 4 bytes after Scroll_forced_X_pos
(1)  552/FFFFFFFFFFFFF67E :                     			ds.w 1				; unused
(1)  553/FFFFFFFFFFFFF680 :                     
(1)  554/FFFFFFFFFFFFF680 :                     Nem_decomp_queue		ds.b 6*$10		; 6 bytes per entry, first longword is source location and next word is VRAM destination
(1)  555/FFFFFFFFFFFFF6E0 : =$FFFFFFFFFFFFF680  Nem_decomp_source =		Nem_decomp_queue	; long ; the compressed data location for the first entry in the queue
(1)  556/FFFFFFFFFFFFF6E0 : =$FFFFFFFFFFFFF684  Nem_decomp_destination =	Nem_decomp_queue+4	; word ; destination in VRAM for the first entry in the queue
(1)  557/FFFFFFFFFFFFF6E0 : =$FFFFFFFFFFFFF6E0  Nem_decomp_vars =		*			; $20 bytes ; various variables used by the Nemesis decompression queue processor
(1)  558/FFFFFFFFFFFFF6E0 :                     Nem_write_routine		ds.l 1			; points to either Nem_PCD_WriteRowToVDP or Nem_PCD_WriteRowToVDP_XOR
(1)  559/FFFFFFFFFFFFF6E4 :                     Nem_repeat_count		ds.l 1			; stored repeat count for the current palette index
(1)  560/FFFFFFFFFFFFF6E8 :                     Nem_palette_index		ds.l 1			; the current palette index
(1)  561/FFFFFFFFFFFFF6EC :                     Nem_previous_row		ds.l 1			; used in XOR mode
(1)  562/FFFFFFFFFFFFF6F0 :                     Nem_data_word			ds.l 1			; contains the current compressed word being processed
(1)  563/FFFFFFFFFFFFF6F4 :                     Nem_shift_value			ds.l 1			; the number of bits the data word needs to be shifted by
(1)  564/FFFFFFFFFFFFF6F8 :                     Nem_patterns_left		ds.w 1			; the number of patterns remaining to be decompressed
(1)  565/FFFFFFFFFFFFF6FA :                     Nem_frame_patterns_left		ds.w 1			; the number of patterns remaining to be decompressed in the current frame
(1)  566/FFFFFFFFFFFFF6FC :                     			ds.l 1				; unused?
(1)  567/FFFFFFFFFFFFF700 :                     
(1)  568/FFFFFFFFFFFFF700 :                     Tails_CPU_interact		ds.w 1			; RAM address of the last object Tails stood on while controlled by AI
(1)  569/FFFFFFFFFFFFF702 :                     Tails_CPU_idle_timer		ds.w 1			; counts down while controller 2 is idle, when it reaches 0 the AI takes over
(1)  570/FFFFFFFFFFFFF704 :                     Tails_CPU_flight_timer		ds.w 1			; counts up while Tails is respawning, when it reaches 300 he drops into the level
(1)  571/FFFFFFFFFFFFF706 :                     			ds.w 1				; unused
(1)  572/FFFFFFFFFFFFF708 :                     Tails_CPU_routine		ds.w 1			; Tails' current AI routine in a Sonic and Tails game
(1)  573/FFFFFFFFFFFFF70A :                     Tails_CPU_target_X		ds.w 1			; Tails' target x-position
(1)  574/FFFFFFFFFFFFF70C :                     Tails_CPU_target_Y		ds.w 1			; Tails' target y-position
(1)  575/FFFFFFFFFFFFF70E :                     Tails_CPU_auto_fly_timer	ds.b 1		; counts up until AI Tails automatically flies up to maintain altitude, while grabbing Sonic in Marble Garden Act 2's boss
(1)  576/FFFFFFFFFFFFF70F :                     Tails_CPU_auto_jump_flag	ds.b 1		; set to #1 when AI Tails needs to jump of his own accord, regardless of whether Sonic jumped or not
(1)  577/FFFFFFFFFFFFF710 :                     Rings_manager_routine		ds.b 1
(1)  578/FFFFFFFFFFFFF711 :                     Level_started_flag		ds.b 1
(1)  579/FFFFFFFFFFFFF712 :                     _unkF712			ds.b $1C		; ??? ; unknown object respawn table
(1)  580/FFFFFFFFFFFFF72E :                     AIZ1_palette_cycle_flag		ds.b 1			; selects which palette cycles are used in AIZ1
(1)  581/FFFFFFFFFFFFF72F :                     			ds.b 1				; unused
(1)  582/FFFFFFFFFFFFF730 :                     Water_flag			ds.b 1
(1)  583/FFFFFFFFFFFFF731 :                     			ds.b $D				; unused
(1)  584/FFFFFFFFFFFFF73E :                     Flying_carrying_Sonic_flag	ds.b 1			; set when Tails carries Sonic in a Sonic and Tails game
(1)  585/FFFFFFFFFFFFF73F :                     Flying_picking_Sonic_timer	ds.b 1			; until this is 0 Tails can't pick Sonic up
(1)  586/FFFFFFFFFFFFF740 :                     _unkF740			ds.w 1
(1)  587/FFFFFFFFFFFFF742 :                     			ds.w 1				; unused
(1)  588/FFFFFFFFFFFFF744 :                     _unkF744			ds.w 1
(1)  589/FFFFFFFFFFFFF746 :                     Tails_CPU_star_post_flag	ds.b 1			; copy of Last_star_post_hit, sets Tails' starting behavior in a Sonic and Tails game
(1)  590/FFFFFFFFFFFFF747 :                     			ds.b 1				; unused
(1)  591/FFFFFFFFFFFFF748 : =$FFFFFFFFFFFFF748  Ctrl_1_title =			*			; copy of Ctrl_1, used on the title screen
(1)  592/FFFFFFFFFFFFF748 :                     Ctrl_1_held_title		ds.b 1
(1)  593/FFFFFFFFFFFFF749 :                     Ctrl_1_pressed_title		ds.b 1
(1)  594/FFFFFFFFFFFFF74A :                     _unkF74A			ds.b 1
(1)  595/FFFFFFFFFFFFF74B :                     _unkF74B			ds.b 1
(1)  596/FFFFFFFFFFFFF74C :                     _unkF74C			ds.w 1
(1)  597/FFFFFFFFFFFFF74E :                     Gliding_collision_flags		ds.b 1
(1)  598/FFFFFFFFFFFFF74F :                     Disable_wall_grab		ds.b 1			; if set, disables Knuckles wall grab
(1)  599/FFFFFFFFFFFFF750 :                     			ds.b $10			; unused
(1)  600/FFFFFFFFFFFFF760 :                     Max_speed			ds.w 1
(1)  601/FFFFFFFFFFFFF762 :                     Acceleration			ds.w 1
(1)  602/FFFFFFFFFFFFF764 :                     Deceleration			ds.w 1
(1)  603/FFFFFFFFFFFFF766 :                     Player_prev_frame		ds.b 1			; used by DPLC routines to detect whether a DMA transfer is required
(1)  604/FFFFFFFFFFFFF767 :                     			ds.b 1				; unused
(1)  605/FFFFFFFFFFFFF768 :                     Primary_Angle			ds.b 1
(1)  606/FFFFFFFFFFFFF769 :                     Primary_Angle_save		ds.b 1	; Used in FindFloor/FindWall
(1)  607/FFFFFFFFFFFFF76A :                     Secondary_Angle			ds.b 1
(1)  608/FFFFFFFFFFFFF76B :                     Secondary_Angle_save	ds.b 1	; Used in FindFloor/FindWall
(1)  609/FFFFFFFFFFFFF76C :                     
(1)  610/FFFFFFFFFFFFF76C :                     Object_load_routine		ds.b 1			; routine counter for the object loading manager
(1)  611/FFFFFFFFFFFFF76D :                     			ds.b 1				; unused
(1)  612/FFFFFFFFFFFFF76E :                     Camera_X_pos_coarse		ds.w 1			; rounded down to the nearest chunk boundary (128th pixel)
(1)  613/FFFFFFFFFFFFF770 :                     Camera_Y_pos_coarse		ds.w 1			; rounded down to the nearest chunk boundary (128th pixel)
(1)  614/FFFFFFFFFFFFF772 :                     Object_load_addr_front		ds.l 1			; the address inside the object placement data of the first object whose X pos is >= Camera_X_pos_coarse + $280
(1)  615/FFFFFFFFFFFFF776 :                     Object_load_addr_back		ds.l 1			; the address inside the object placement data of the first object whose X pos is >= Camera_X_pos_coarse - $80
(1)  616/FFFFFFFFFFFFF77A :                     Object_respawn_index_front	ds.w 1			; the object respawn table index for the object at Obj_load_addr_front
(1)  617/FFFFFFFFFFFFF77C :                     Object_respawn_index_back	ds.w 1			; the object respawn table index for the object at Obj_load_addr_back
(1)  618/FFFFFFFFFFFFF77E :                     			ds.b $16			; unused
(1)  619/FFFFFFFFFFFFF794 :                     Pal_fade_delay			ds.w 1			; timer for palette fade routines
(1)  620/FFFFFFFFFFFFF796 :                     Collision_addr			ds.l 1			; points to the primary or secondary collision data as appropriate
(1)  621/FFFFFFFFFFFFF79A :                     			ds.b $10			; unused
(1)  622/FFFFFFFFFFFFF7AA :                     Boss_flag			ds.b 1			; set if a boss fight is going on
(1)  623/FFFFFFFFFFFFF7AB :                     			ds.b 5				; unused
(1)  624/FFFFFFFFFFFFF7B0 :                     _unkF7B0			ds.b 4
(1)  625/FFFFFFFFFFFFF7B4 :                     
(1)  626/FFFFFFFFFFFFF7B4 :                     Primary_collision_addr		ds.l 1
(1)  627/FFFFFFFFFFFFF7B8 :                     Secondary_collision_addr	ds.l 1
(1)  628/FFFFFFFFFFFFF7BC :                     			ds.l 1				; unused
(1)  629/FFFFFFFFFFFFF7C0 :                     MHZ_pollen_counter		ds.b 1			; number of currently active pollen or leaves in MHZ
(1)  630/FFFFFFFFFFFFF7C1 :                     _unkF7C1			ds.b 1
(1)  631/FFFFFFFFFFFFF7C2 :                     _unkF7C2			ds.b 1
(1)  632/FFFFFFFFFFFFF7C3 :                     _unkF7C3			ds.b 1
(1)  633/FFFFFFFFFFFFF7C4 :                     _unkF7C4			ds.w 1
(1)  634/FFFFFFFFFFFFF7C6 :                     Reverse_gravity_flag		ds.b 1
(1)  635/FFFFFFFFFFFFF7C7 :                     _unkF7C7			ds.b 1
(1)  636/FFFFFFFFFFFFF7C8 :                     WindTunnel_flag			ds.b 1
(1)  637/FFFFFFFFFFFFF7C9 :                     WindTunnel_flag_P2		ds.b 1
(1)  638/FFFFFFFFFFFFF7CA :                     Ctrl_1_locked			ds.b 1
(1)  639/FFFFFFFFFFFFF7CB :                     Ctrl_2_locked			ds.b 1
(1)  640/FFFFFFFFFFFFF7CC :                     			ds.l 1				; unused
(1)  641/FFFFFFFFFFFFF7D0 :                     Chain_bonus_counter		ds.w 1
(1)  642/FFFFFFFFFFFFF7D2 :                     Time_bonus_countdown		ds.w 1			; used on the results screen
(1)  643/FFFFFFFFFFFFF7D4 :                     Ring_bonus_countdown		ds.w 1			; used on the results screen
(1)  644/FFFFFFFFFFFFF7D6 :                     			ds.l 1				; unused
(1)  645/FFFFFFFFFFFFF7DA :                     Camera_X_pos_coarse_back	ds.w 1			; Camera_X_pos_coarse - $80
(1)  646/FFFFFFFFFFFFF7DC :                     _unkF7DC			ds.w 1
(1)  647/FFFFFFFFFFFFF7DE :                     Player_prev_frame_P2		ds.b 1			; used by DPLC routines to detect whether a DMA transfer is required
(1)  648/FFFFFFFFFFFFF7DF :                     Player_prev_frame_P2_tail	ds.b 1			; used by DPLC routines to detect whether a DMA transfer is required
(1)  649/FFFFFFFFFFFFF7E0 :                     Level_trigger_array		ds.b $10		; used by buttons, etc.
(1)  650/FFFFFFFFFFFFF7F0 :                     Anim_Counters			ds.b $10		; each word stores data on animated level art, including duration and current frame
(1)  651/FFFFFFFFFFFFF800 :                     
(1)  652/FFFFFFFFFFFFF800 :                     Sprite_table_buffer		ds.b $280
(1)  653/FFFFFFFFFFFFFA80 :                     _unkFA80			ds.w 1			; unused
(1)  654/FFFFFFFFFFFFFA82 :                     _unkFA82			ds.b 1
(1)  655/FFFFFFFFFFFFFA83 :                     _unkFA83			ds.b 1
(1)  656/FFFFFFFFFFFFFA84 :                     _unkFA84			ds.w 1
(1)  657/FFFFFFFFFFFFFA86 :                     _unkFA86			ds.w 1
(1)  658/FFFFFFFFFFFFFA88 :                     _unkFA88			ds.b 1
(1)  659/FFFFFFFFFFFFFA89 :                     _unkFA89			ds.b 1
(1)  660/FFFFFFFFFFFFFA8A :                     _unkFA8A			ds.w 1
(1)  661/FFFFFFFFFFFFFA8C :                     _unkFA8C			ds.w 1			; unused?
(1)  662/FFFFFFFFFFFFFA8E :                     _unkFA8E			ds.w 1
(1)  663/FFFFFFFFFFFFFA90 :                     _unkFA90			ds.w 1
(1)  664/FFFFFFFFFFFFFA92 :                     Camera_stored_max_X_pos		ds.w 1			; the target camera maximum x-position
(1)  665/FFFFFFFFFFFFFA94 :                     Camera_stored_min_X_pos		ds.w 1			; the target camera minimum x-position
(1)  666/FFFFFFFFFFFFFA96 :                     Camera_stored_min_Y_pos		ds.w 1			; the target camera minimum y-position
(1)  667/FFFFFFFFFFFFFA98 :                     Camera_stored_max_Y_pos		ds.w 1			; the target camera maximum y-position
(1)  668/FFFFFFFFFFFFFA9A :                     Slotted_object_bits		ds.w 1			; bits to determine which slots are used for slotted objects
(1)  669/FFFFFFFFFFFFFA9C :                     			ds.b 6				; unused
(1)  670/FFFFFFFFFFFFFAA2 :                     _unkFAA2			ds.b 1
(1)  671/FFFFFFFFFFFFFAA3 :                     _unkFAA3			ds.b 1
(1)  672/FFFFFFFFFFFFFAA4 :                     _unkFAA4			ds.w 1
(1)  673/FFFFFFFFFFFFFAA6 :                     Signpost_addr			ds.w 1			; address of the currently active signpost object. Hidden monitors use this for bouncing
(1)  674/FFFFFFFFFFFFFAA8 :                     _unkFAA8			ds.b 1
(1)  675/FFFFFFFFFFFFFAA9 :                     _unkFAA9			ds.b 1
(1)  676/FFFFFFFFFFFFFAAA :                     End_of_level_flag		ds.b 1			; set if end of level is current active, for example after beating a boss
(1)  677/FFFFFFFFFFFFFAAB :                     _unkFAAB			ds.b 1
(1)  678/FFFFFFFFFFFFFAAC :                     _unkFAAC			ds.b 1
(1)  679/FFFFFFFFFFFFFAAD :                     _unkFAAD			ds.b 1
(1)  680/FFFFFFFFFFFFFAAE :                     _unkFAAE			ds.w 1
(1)  681/FFFFFFFFFFFFFAB0 :                     _unkFAB0			ds.w 1
(1)  682/FFFFFFFFFFFFFAB2 :                     _unkFAB2			ds.w 1
(1)  683/FFFFFFFFFFFFFAB4 :                     _unkFAB4			ds.w 1
(1)  684/FFFFFFFFFFFFFAB6 :                     _unkFAB6			ds.w 1
(1)  685/FFFFFFFFFFFFFAB8 :                     _unkFAB8			ds.b 1
(1)  686/FFFFFFFFFFFFFAB9 :                     _unkFAB9			ds.b 1
(1)  687/FFFFFFFFFFFFFABA :                     _unkFABA			ds.w 1
(1)  688/FFFFFFFFFFFFFABC :                     _unkFABC			ds.b 1
(1)  689/FFFFFFFFFFFFFABD :                     _unkFABD			ds.b 1
(1)  690/FFFFFFFFFFFFFABE :                     _unkFABE			ds.b 1			; unused?
(1)  691/FFFFFFFFFFFFFABF :                     Palette_rotation_disable	ds.b 1			; if set, palette rotation scripts are disabled
(1)  692/FFFFFFFFFFFFFAC0 :                     _unkFAC0			ds.b 1
(1)  693/FFFFFFFFFFFFFAC1 :                     _unkFAC1			ds.b 1
(1)  694/FFFFFFFFFFFFFAC2 :                     _unkFAC2			ds.w 1
(1)  695/FFFFFFFFFFFFFAC4 :                     _unkFAC4			ds.w 1
(1)  696/FFFFFFFFFFFFFAC6 :                     			ds.w 1				; unused
(1)  697/FFFFFFFFFFFFFAC8 :                     _unkFAC8			ds.w 1
(1)  698/FFFFFFFFFFFFFACA :                     			ds.w 1				; unused
(1)  699/FFFFFFFFFFFFFACC :                     _unkFACC			ds.b 1
(1)  700/FFFFFFFFFFFFFACD :                     _unkFACD			ds.b 1
(1)  701/FFFFFFFFFFFFFACE :                     Pal_fade_delay2			ds.w 1			; timer for palette fade from white routine
(1)  702/FFFFFFFFFFFFFAD0 :                     			ds.b $A				; unused
(1)  703/FFFFFFFFFFFFFADA :                     Palette_rotation_custom		ds.l 1			; custom routine for palette rotation scripts
(1)  704/FFFFFFFFFFFFFADE :                     Palette_rotation_data		ds.w 9			; data used by palette rotation scripts. Last word must always be 0
(1)  705/FFFFFFFFFFFFFAF0 :                     SSZ_MTZ_boss_X_pos			ds.w 1			; horizontal position of the Metropolis Zone boss in Sky Sanctuary
(1)  706/FFFFFFFFFFFFFAF2 :                     			ds.w 1				; unused
(1)  707/FFFFFFFFFFFFFAF4 :                     SSZ_MTZ_boss_Y_pos			ds.w 1			; vertical position of the Metropolis Zone boss in Sky Sanctuary
(1)  708/FFFFFFFFFFFFFAF6 :                     			ds.w 1				; unused
(1)  709/FFFFFFFFFFFFFAF8 :                     SSZ_MTZ_boss_X_vel			ds.w 1				; horizontal velocity of the Metropolis Zone boss in Sky Sanctuary
(1)  710/FFFFFFFFFFFFFAFA :                     SSZ_MTZ_boss_Y_vel			ds.w 1				; vertical velocity of the Metropolis Zone boss in Sky Sanctuary
(1)  711/FFFFFFFFFFFFFAFC :                     SSZ_MTZ_boss_laser_timer			ds.w 1	; counts down until a laser is fired in Sky Sanctuary's Metropolis boss fight
(1)  712/FFFFFFFFFFFFFAFE :                     			ds.w 1				; unused
(1)  713/FFFFFFFFFFFFFB00 :                     
(1)  714/FFFFFFFFFFFFFB00 :                     DMA_queue			ds.w $12*7		; stores all the VDP commands necessary to initiate a DMA transfer
(1)  715/FFFFFFFFFFFFFBFC :                     DMA_queue_slot			ds.l 1			; points to the next free slot on the queue
(1)  716/FFFFFFFFFFFFFC00 :                     
(1)  717/FFFFFFFFFFFFFC00 :                     Normal_palette			ds.b $80
(1)  718/FFFFFFFFFFFFFC80 : =$FFFFFFFFFFFFFC20  Normal_palette_line_2 =		Normal_palette+$20	; $20 bytes
(1)  719/FFFFFFFFFFFFFC80 : =$FFFFFFFFFFFFFC40  Normal_palette_line_3 =		Normal_palette+$40	; $20 bytes
(1)  720/FFFFFFFFFFFFFC80 : =$FFFFFFFFFFFFFC60  Normal_palette_line_4 =		Normal_palette+$60	; $20 bytes
(1)  721/FFFFFFFFFFFFFC80 :                     Target_palette			ds.b $80		; used by palette fading routines
(1)  722/FFFFFFFFFFFFFD00 : =$FFFFFFFFFFFFFCA0  Target_palette_line_2 =		Target_palette+$20	; $20 bytes
(1)  723/FFFFFFFFFFFFFD00 : =$FFFFFFFFFFFFFCC0  Target_palette_line_3 =		Target_palette+$40	; $20 bytes
(1)  724/FFFFFFFFFFFFFD00 : =$FFFFFFFFFFFFFCE0  Target_palette_line_4 =		Target_palette+$60	; $20 bytes
(1)  725/FFFFFFFFFFFFFD00 :                     Stack_contents			ds.b $100		; stack contents
(1)  726/FFFFFFFFFFFFFE00 : =$FFFFFFFFFFFFFE00  System_stack =			*			; this is the top of the stack, it grows downwards
(1)  727/FFFFFFFFFFFFFE00 :                     
(1)  728/FFFFFFFFFFFFFE00 :                     			ds.w 1				; unused
(1)  729/FFFFFFFFFFFFFE02 :                     Restart_level_flag		ds.w 1
(1)  730/FFFFFFFFFFFFFE04 :                     Level_frame_counter		ds.w 1			; the number of frames which have elapsed since the level started
(1)  731/FFFFFFFFFFFFFE06 :                     Debug_object			ds.b 1			; the current position in the debug mode object list
(1)  732/FFFFFFFFFFFFFE07 :                     			ds.b 1				; unused
(1)  733/FFFFFFFFFFFFFE08 : =$FFFFFFFFFFFFFE08  Debug_placement_mode =		*			; both routine and type
(1)  734/FFFFFFFFFFFFFE08 :                     Debug_placement_routine		ds.b 1
(1)  735/FFFFFFFFFFFFFE09 :                     Debug_placement_type		ds.b 1			; 0 = normal gameplay, 1 = normal object placement, 2 = frame cycling
(1)  736/FFFFFFFFFFFFFE0A :                     Debug_camera_delay		ds.b 1
(1)  737/FFFFFFFFFFFFFE0B :                     Debug_camera_speed		ds.b 1
(1)  738/FFFFFFFFFFFFFE0C :                     V_int_run_count			ds.l 1			; the number of times V-int has run
(1)  739/FFFFFFFFFFFFFE10 : =$FFFFFFFFFFFFFE10  Current_zone_and_act =		*
(1)  740/FFFFFFFFFFFFFE10 :                     Current_zone			ds.b 1
(1)  741/FFFFFFFFFFFFFE11 :                     Current_act			ds.b 1
(1)  742/FFFFFFFFFFFFFE12 :                     Life_count			ds.b 1
(1)  743/FFFFFFFFFFFFFE13 :                     			ds.b 3				; unused
(1)  744/FFFFFFFFFFFFFE16 :                     Current_special_stage		ds.b 1
(1)  745/FFFFFFFFFFFFFE17 :                     			ds.b 1				; unused
(1)  746/FFFFFFFFFFFFFE18 :                     Continue_count			ds.b 1
(1)  747/FFFFFFFFFFFFFE19 :                     Super_Sonic_Knux_flag		ds.b 1
(1)  748/FFFFFFFFFFFFFE1A :                     Time_over_flag			ds.b 1
(1)  749/FFFFFFFFFFFFFE1B :                     Extra_life_flags		ds.b 1
(1)  750/FFFFFFFFFFFFFE1C :                     Update_HUD_life_count		ds.b 1
(1)  751/FFFFFFFFFFFFFE1D :                     Update_HUD_ring_count		ds.b 1
(1)  752/FFFFFFFFFFFFFE1E :                     Update_HUD_timer		ds.b 1
(1)  753/FFFFFFFFFFFFFE1F :                     Update_HUD_score		ds.b 1
(1)  754/FFFFFFFFFFFFFE20 :                     Ring_count			ds.w 1
(1)  755/FFFFFFFFFFFFFE22 :                     Timer				ds.l 1
(1)  756/FFFFFFFFFFFFFE26 : =$FFFFFFFFFFFFFE23  Timer_minute =			Timer+1
(1)  757/FFFFFFFFFFFFFE26 : =$FFFFFFFFFFFFFE24  Timer_second =			Timer+2
(1)  758/FFFFFFFFFFFFFE26 : =$FFFFFFFFFFFFFE25  Timer_frame =			Timer+3			; the second gets incremented when this reaches 60
(1)  759/FFFFFFFFFFFFFE26 :                     Score				ds.l 1
(1)  760/FFFFFFFFFFFFFE2A :                     Last_star_post_hit		ds.b 1
(1)  761/FFFFFFFFFFFFFE2B :                     
(1)  762/FFFFFFFFFFFFFE2B :                     ; the following variables are all saved when hitting a star post
(1)  763/FFFFFFFFFFFFFE2B :                     Saved_last_star_post_hit	ds.b 1
(1)  764/FFFFFFFFFFFFFE2C :                     Saved_zone_and_act		ds.w 1
(1)  765/FFFFFFFFFFFFFE2E :                     Saved_X_pos			ds.w 1
(1)  766/FFFFFFFFFFFFFE30 :                     Saved_Y_pos			ds.w 1
(1)  767/FFFFFFFFFFFFFE32 :                     Saved_ring_count		ds.w 1
(1)  768/FFFFFFFFFFFFFE34 :                     Saved_timer			ds.l 1
(1)  769/FFFFFFFFFFFFFE38 :                     Saved_art_tile			ds.w 1
(1)  770/FFFFFFFFFFFFFE3A :                     Saved_solid_bits		ds.w 1			; copy of Player 1's top_solid_bit and lrb_solid_bit
(1)  771/FFFFFFFFFFFFFE3C :                     Saved_camera_X_pos		ds.w 1
(1)  772/FFFFFFFFFFFFFE3E :                     Saved_camera_Y_pos		ds.w 1
(1)  773/FFFFFFFFFFFFFE40 :                     Saved_mean_water_level		ds.w 1
(1)  774/FFFFFFFFFFFFFE42 :                     Saved_water_full_screen_flag	ds.b 1
(1)  775/FFFFFFFFFFFFFE43 :                     Saved_extra_life_flags		ds.b 1
(1)  776/FFFFFFFFFFFFFE44 :                     Saved_camera_max_Y_pos		ds.w 1
(1)  777/FFFFFFFFFFFFFE46 :                     Saved_dynamic_resize_routine	ds.b 1
(1)  778/FFFFFFFFFFFFFE47 :                     Saved_status_secondary		ds.b 1
(1)  779/FFFFFFFFFFFFFE48 :                     Special_bonus_entry_flag	ds.b 1			; 1 for entering a Special Stage, 2 for entering a Bonus Stage
(1)  780/FFFFFFFFFFFFFE49 :                     
(1)  781/FFFFFFFFFFFFFE49 :                     ; the following variables are all saved when entering a special stage
(1)  782/FFFFFFFFFFFFFE49 :                     Saved2_last_star_post_hit	ds.b 1
(1)  783/FFFFFFFFFFFFFE4A :                     Saved2_zone_and_act		ds.w 1
(1)  784/FFFFFFFFFFFFFE4C :                     Saved2_X_pos			ds.w 1
(1)  785/FFFFFFFFFFFFFE4E :                     Saved2_Y_pos			ds.w 1
(1)  786/FFFFFFFFFFFFFE50 :                     Saved2_ring_count		ds.w 1
(1)  787/FFFFFFFFFFFFFE52 :                     Saved2_timer			ds.l 1
(1)  788/FFFFFFFFFFFFFE56 :                     Saved2_art_tile			ds.w 1
(1)  789/FFFFFFFFFFFFFE58 :                     Saved2_solid_bits		ds.w 1
(1)  790/FFFFFFFFFFFFFE5A :                     Saved2_camera_X_pos		ds.w 1
(1)  791/FFFFFFFFFFFFFE5C :                     Saved2_camera_Y_pos		ds.w 1
(1)  792/FFFFFFFFFFFFFE5E :                     Saved2_mean_water_level		ds.w 1
(1)  793/FFFFFFFFFFFFFE60 :                     Saved2_water_full_screen_flag	ds.b 1
(1)  794/FFFFFFFFFFFFFE61 :                     Saved2_extra_life_flags		ds.b 1
(1)  795/FFFFFFFFFFFFFE62 :                     Saved2_camera_max_Y_pos		ds.w 1
(1)  796/FFFFFFFFFFFFFE64 :                     Saved2_dynamic_resize_routine	ds.b 1
(1)  797/FFFFFFFFFFFFFE65 :                     
(1)  798/FFFFFFFFFFFFFE65 :                     LRZ_rocks_routine		ds.b 1			; routine counter for lrz special rocks
(1)  799/FFFFFFFFFFFFFE66 :                     LRZ_rocks_addr_front		ds.l 1			; the address inside the lrz rocks data of the first rock whose X pos is >= Camera_X_pos_coarse + $280
(1)  800/FFFFFFFFFFFFFE6A :                     LRZ_rocks_addr_back		ds.l 1			; the address inside the lrz rocks data of the first rock whose X pos is >= Camera_X_pos_coarse - $80
(1)  801/FFFFFFFFFFFFFE6E :                     Oscillating_table		ds.b $42		; various oscillating variables
(1)  802/FFFFFFFFFFFFFEB0 : =$FFFFFFFFFFFFFEB0  Oscillating_table_end =		*			; end of oscillating data array
(1)  803/FFFFFFFFFFFFFEB0 :                     Slot_machine_goal_frame_timer			ds.b 1
(1)  804/FFFFFFFFFFFFFEB1 :                     Slot_machine_goal_frame			ds.b 1
(1)  805/FFFFFFFFFFFFFEB2 :                     Rings_frame_timer		ds.b 1
(1)  806/FFFFFFFFFFFFFEB3 :                     Rings_frame			ds.b 1
(1)  807/FFFFFFFFFFFFFEB4 :                     Slot_machine_peppermint_frame_timer			ds.b 1
(1)  808/FFFFFFFFFFFFFEB5 :                     Slot_machine_peppermint_frame			ds.b 1
(1)  809/FFFFFFFFFFFFFEB6 :                     Ring_spill_anim_counter		ds.b 1
(1)  810/FFFFFFFFFFFFFEB7 :                     Ring_spill_anim_frame		ds.b 1
(1)  811/FFFFFFFFFFFFFEB8 :                     Ring_spill_anim_accum		ds.w 1
(1)  812/FFFFFFFFFFFFFEBA :                     AIZ_vine_angle			ds.w 1			; controls the angle of AIZ giant vines
(1)  813/FFFFFFFFFFFFFEBC :                     			ds.w 1				; unused
(1)  814/FFFFFFFFFFFFFEBE :                     _unkFEBE			ds.b 1			; unused
(1)  815/FFFFFFFFFFFFFEBF :                     Extra_life_flags_P2		ds.b 1
(1)  816/FFFFFFFFFFFFFEC0 :                     Max_speed_P2			ds.w 1
(1)  817/FFFFFFFFFFFFFEC2 :                     Acceleration_P2			ds.w 1
(1)  818/FFFFFFFFFFFFFEC4 :                     Deceleration_P2			ds.w 1
(1)  819/FFFFFFFFFFFFFEC6 :                     Life_count_P2			ds.b 1			; left over from Sonic 2
(1)  820/FFFFFFFFFFFFFEC7 :                     Update_HUD_timer_P2		ds.b 1			; used in competition mode
(1)  821/FFFFFFFFFFFFFEC8 :                     Total_ring_count		ds.w 1			; left over from Sonic 2
(1)  822/FFFFFFFFFFFFFECA :                     Total_ring_count_P2		ds.w 1			; left over from Sonic 2
(1)  823/FFFFFFFFFFFFFECC :                     Monitors_broken			ds.w 1			; left over from Sonic 2. Apparently Sonic 3 developers liked copypasting, since gaining a life from rings also increments this counter
(1)  824/FFFFFFFFFFFFFECE :                     Monitors_broken_P2		ds.w 1			; left over from Sonic 2
(1)  825/FFFFFFFFFFFFFED0 :                     Ring_count_P2			ds.w 1			; left over from Sonic 2
(1)  826/FFFFFFFFFFFFFED2 :                     Timer_P2			ds.l 1			; used in competition mode
(1)  827/FFFFFFFFFFFFFED6 : =$FFFFFFFFFFFFFED3  Timer_minute_P2 =		Timer_P2+1
(1)  828/FFFFFFFFFFFFFED6 : =$FFFFFFFFFFFFFED4  Timer_second_P2 =		Timer_P2+2
(1)  829/FFFFFFFFFFFFFED6 : =$FFFFFFFFFFFFFED5  Timer_frame_P2 =		Timer_P2+3		; the second gets incremented when this reaches 60
(1)  830/FFFFFFFFFFFFFED6 :                     Score_P2			ds.l 1			; left over from Sonic 2
(1)  831/FFFFFFFFFFFFFEDA :                     Competition_total_laps			ds.b 1		; total number of laps in competition mode (typically 5)
(1)  832/FFFFFFFFFFFFFEDB :                     			ds.b 1				; unused
(1)  833/FFFFFFFFFFFFFEDC :                     Competition_current_lap			ds.b 1		; current lap number for player 1 in competition mode
(1)  834/FFFFFFFFFFFFFEDD :                     Competition_current_lap_2P		ds.b 1		; current lap number for player 2 in competition mode
(1)  835/FFFFFFFFFFFFFEDE :                     Loser_time_left			ds.b 1			; left over from Sonic 2
(1)  836/FFFFFFFFFFFFFEDF :                     			ds.b $23			; unused
(1)  837/FFFFFFFFFFFFFF02 :                     Results_screen_2P		ds.w 1			; left over from Sonic 2
(1)  838/FFFFFFFFFFFFFF04 :                     Perfect_rings_left		ds.w 1			; left over from Sonic 2
(1)  839/FFFFFFFFFFFFFF06 :                     _unkFF06			ds.w 1			; unknown
(1)  840/FFFFFFFFFFFFFF08 :                     Player_mode			ds.w 1			; 0 = Sonic and Tails, 1 = Sonic alone, 2 = Tails alone, 3 = Knuckles alone
(1)  841/FFFFFFFFFFFFFF0A :                     Player_option			ds.w 1			; option selected on level select, data select screen or Sonic & Knuckles title screen
(1)  842/FFFFFFFFFFFFFF0C :                     			ds.w 1				; unused
(1)  843/FFFFFFFFFFFFFF0E :                     
(1)  844/FFFFFFFFFFFFFF0E :                     Kos_decomp_queue_count		ds.w 1			; the number of pieces of data on the queue. Sign bit set indicates a decompression is in progress
(1)  845/FFFFFFFFFFFFFF10 :                     Kos_decomp_stored_registers	ds.w 20			; allows decompression to be spread over multiple frames
(1)  846/FFFFFFFFFFFFFF38 :                     Kos_decomp_stored_SR		ds.w 1
(1)  847/FFFFFFFFFFFFFF3A :                     Kos_decomp_bookmark		ds.l 1			; the address within the Kosinski queue processor at which processing is to be resumed
(1)  848/FFFFFFFFFFFFFF3E :                     Kos_description_field		ds.w 1			; used by the Kosinski queue processor the same way the stack is used by the normal Kosinski decompression routine
(1)  849/FFFFFFFFFFFFFF40 :                     Kos_decomp_queue		ds.l 2*4		; 2 longwords per entry, first is source location and second is decompression location
(1)  850/FFFFFFFFFFFFFF60 : =$FFFFFFFFFFFFFF40  Kos_decomp_source =		Kos_decomp_queue	; long ; the compressed data location for the first entry in the queue
(1)  851/FFFFFFFFFFFFFF60 : =$FFFFFFFFFFFFFF44  Kos_decomp_destination =	Kos_decomp_queue+4	; long ; the decompression location for the first entry in the queue
(1)  852/FFFFFFFFFFFFFF60 :                     Kos_modules_left		ds.b 1			; the number of modules left to decompresses. Sign bit set indicates a module is being decompressed/has been decompressed
(1)  853/FFFFFFFFFFFFFF61 :                     			ds.b 1				; unused
(1)  854/FFFFFFFFFFFFFF62 :                     Kos_last_module_size		ds.w 1			; the uncompressed size of the last module in words. All other modules are $800 words
(1)  855/FFFFFFFFFFFFFF64 :                     Kos_module_queue		ds.w 3*4		; 6 bytes per entry, first longword is source location and next word is VRAM destination
(1)  856/FFFFFFFFFFFFFF7C : =$FFFFFFFFFFFFFF64  Kos_module_source =		Kos_module_queue	; long ; the compressed data location for the first module in the queue
(1)  857/FFFFFFFFFFFFFF7C : =$FFFFFFFFFFFFFF68  Kos_module_destination =	Kos_module_queue+4	; word ; the VRAM destination for the first module in the queue
(1)  858/FFFFFFFFFFFFFF7C :                     
(1)  859/FFFFFFFFFFFFFF7C :                     _unkFF7C			ds.w 1
(1)  860/FFFFFFFFFFFFFF7E :                     _unkFF7E			ds.w 1
(1)  861/FFFFFFFFFFFFFF80 :                     Level_select_repeat		ds.w 1			; delay counter for repeating the button press. Allows the menu move even when up/down is held down
(1)  862/FFFFFFFFFFFFFF82 :                     Level_select_option		ds.w 1			; the current selected option in the level select
(1)  863/FFFFFFFFFFFFFF84 :                     Sound_test_sound		ds.w 1
(1)  864/FFFFFFFFFFFFFF86 :                     Title_screen_option		ds.b 1
(1)  865/FFFFFFFFFFFFFF87 :                     			ds.b 1				; unused
(1)  866/FFFFFFFFFFFFFF88 :                     _tempFF88		ds.w 1				; this is used in Sonic 3 Alone, but unused in Sonic & Knuckles and Sonic 3 Complete
(1)  867/FFFFFFFFFFFFFF8A : =$FFFFFFFFFFFFFF8A  Competition_settings =		*			; both items and game type
(1)  868/FFFFFFFFFFFFFF8A :                     Competition_items		ds.b 1			; 0 = Enabled, FF = Disabled.
(1)  869/FFFFFFFFFFFFFF8B :                     Competition_type		ds.b 1			; 0 = grand prix, 3 = match race, -1 = time attack
(1)  870/FFFFFFFFFFFFFF8C :                     _tempFF8C		ds.b 1				; this is used in Sonic 3 Alone, but unused in Sonic & Knuckles and Sonic 3 Complete
(1)  871/FFFFFFFFFFFFFF8D :                     			ds.b 1				; unused
(1)  872/FFFFFFFFFFFFFF8E :                     Total_bonus_countup		ds.w 1			; the total points to be added due to various bonuses this frame in the end of level results screen
(1)  873/FFFFFFFFFFFFFF90 :                     Current_music			ds.w 1
(1)  874/FFFFFFFFFFFFFF92 :                     Collected_special_ring_array	ds.l 1			; each bit indicates a special stage entry ring in the current zone
(1)  875/FFFFFFFFFFFFFF96 :                     Saved2_status_secondary		ds.b 1
(1)  876/FFFFFFFFFFFFFF97 :                     Respawn_table_keep		ds.b 1			; if set, respawn table is not reset during level load
(1)  877/FFFFFFFFFFFFFF98 :                     _tempFF98		ds.w 1				; this is used in Sonic 3 Alone, but unused in Sonic & Knuckles and Sonic 3 Complete
(1)  878/FFFFFFFFFFFFFF9A :                     Saved_apparent_zone_and_act	ds.w 1
(1)  879/FFFFFFFFFFFFFF9C :                     Saved2_apparent_zone_and_act	ds.w 1
(1)  880/FFFFFFFFFFFFFF9E :                     			ds.b 1				; unused
(1)  881/FFFFFFFFFFFFFF9F :                     
(1)  882/FFFFFFFFFFFFFF9F :                     Blue_spheres_header_flag	ds.b 1			; 0 = SEGA GENESIS, 1 = SEGA MEGA DRIVE
(1)  883/FFFFFFFFFFFFFFA0 :                     Blue_spheres_mode		ds.b 1			; 0 = single stage, 1 = full game
(1)  884/FFFFFFFFFFFFFFA1 :                     Blue_spheres_menu_flag		ds.b 1			; 0 = NO WAY!, 1 = normal, bit 7 set = entering a code
(1)  885/FFFFFFFFFFFFFFA2 :                     Blue_spheres_current_stage	ds.b 4			; the layout parts that make up the current stage
(1)  886/FFFFFFFFFFFFFFA6 :                     Blue_spheres_current_level	ds.l 1			; number shown at the top of the full game menu
(1)  887/FFFFFFFFFFFFFFAA :                     Blue_spheres_option		ds.b 1			; 0 = level, 1 = start, 2 = code
(1)  888/FFFFFFFFFFFFFFAB :                     Blue_spheres_progress_flag	ds.b 1			; 0 = normal, -1 = disabled (single stage mode or using a code from single stage mode)
(1)  889/FFFFFFFFFFFFFFAC :                     Blue_spheres_difficulty		ds.b 1			; value currently displayed
(1)  890/FFFFFFFFFFFFFFAD :                     Blue_spheres_target_difficulty	ds.b 1			; value read from the layout
(1)  891/FFFFFFFFFFFFFFAE :                     SK_alone_flag			ds.w 1			; -1 if Sonic 3 isn't locked on
(1)  892/FFFFFFFFFFFFFFB0 : =$FFFFFFFFFFFFFFB0  Emerald_counts =		*			; both chaos and super emeralds
(1)  893/FFFFFFFFFFFFFFB0 :                     Chaos_emerald_count		ds.b 1
(1)  894/FFFFFFFFFFFFFFB1 :                     Super_emerald_count		ds.b 1
(1)  895/FFFFFFFFFFFFFFB2 :                     Collected_emeralds_array	ds.b 7			; 1 byte per emerald, 0 = not collected, 1 = chaos emerald collected, 2 = grey super emerald, 3 = super emerald collected
(1)  896/FFFFFFFFFFFFFFB9 :                     			ds.b 1				; unused
(1)  897/FFFFFFFFFFFFFFBA :                     
(1)  898/FFFFFFFFFFFFFFBA :                     Emeralds_converted_flag		ds.b 1			; set if at least one emerald has been converted to a super emerald
(1)  899/FFFFFFFFFFFFFFBB :                     SK_special_stage_flag		ds.b 1			; set if a Sonic & Knuckles special stage is being run
(1)  900/FFFFFFFFFFFFFFBC :                     Title_anim_buffer		ds.b 1			; status of the title animation buffer. Changes 2 different nametables in VDP while the other is being processed
(1)  901/FFFFFFFFFFFFFFBD :                     Title_anim_delay		ds.b 1			; title animation delay counter
(1)  902/FFFFFFFFFFFFFFBE :                     Title_anim_frame		ds.b 1			; title animation frame number
(1)  903/FFFFFFFFFFFFFFBF :                     			ds.b 1				; unused
(1)  904/FFFFFFFFFFFFFFC0 :                     Next_extra_life_score		ds.l 1
(1)  905/FFFFFFFFFFFFFFC4 :                     Next_extra_life_score_P2	ds.l 1			; left over from Sonic 2
(1)  906/FFFFFFFFFFFFFFC8 :                     			ds.w 1				; unused
(1)  907/FFFFFFFFFFFFFFCA :                     Debug_saved_mappings		ds.l 1			; player 1 mappings before entering debug mode
(1)  908/FFFFFFFFFFFFFFCE :                     Debug_saved_art_tile		ds.w 1			; player 1 art_tile before entering debug mode
(1)  909/FFFFFFFFFFFFFFD0 : =$FFFFFFFFFFFFFFD0  Demo_mode_flag :=		*		; S3 uses a different address
(1)  910/FFFFFFFFFFFFFFD0 :                     				ds.w 1
(1)  911/FFFFFFFFFFFFFFD2 : =$FFFFFFFFFFFFFFD2  Next_demo_number :=		*		; S3 uses a different address
(1)  912/FFFFFFFFFFFFFFD2 :                     				ds.w 1
(1)  913/FFFFFFFFFFFFFFD4 : =$FFFFFFFFFFFFFFD4  Blue_spheres_stage_flag :=	*		; S3 uses a different address
(1)  914/FFFFFFFFFFFFFFD4 :                     				ds.b 1			; set if a Blue Sphere special stage is being run
(1)  915/FFFFFFFFFFFFFFD5 :                     			ds.b 1				; unused
(1)  916/FFFFFFFFFFFFFFD6 : =$FFFFFFFFFFFFFFD6  V_blank_cycles :=		*		; S3 uses a different address
(1)  917/FFFFFFFFFFFFFFD6 :                     				ds.w 1			; the number of cycles between V-blanks
(1)  918/FFFFFFFFFFFFFFD8 : =$FFFFFFFFFFFFFFD8  Graphics_flags :=		*		; S3 uses a different address
(1)  919/FFFFFFFFFFFFFFD8 :                     				ds.b 1			; bit 7 set = English system, bit 6 set = PAL system
(1)  920/FFFFFFFFFFFFFFD9 :                     			ds.b 1				; unused
(1)  921/FFFFFFFFFFFFFFDA : =$FFFFFFFFFFFFFFDA  Debug_mode_flag :=		*		; S3 uses a different address
(1)  922/FFFFFFFFFFFFFFDA :                     				ds.w 1
(1)  923/FFFFFFFFFFFFFFDC :                     			ds.l 1				; unused
(1)  924/FFFFFFFFFFFFFFE0 : =$FFFFFFFFFFFFFFE0  Level_select_flag :=		*		; S3 uses a different address
(1)  925/FFFFFFFFFFFFFFE0 :                     				ds.b 1
(1)  926/FFFFFFFFFFFFFFE1 : =$FFFFFFFFFFFFFFE1  Slow_motion_flag :=		*		; S3 uses a different address
(1)  927/FFFFFFFFFFFFFFE1 :                     				ds.b 1
(1)  928/FFFFFFFFFFFFFFE2 : =$FFFFFFFFFFFFFFE2  Debug_cheat_flag :=		*		; S3 uses a different address
(1)  929/FFFFFFFFFFFFFFE2 :                     				ds.w 1			; set if the debug cheat's been entered
(1)  930/FFFFFFFFFFFFFFE4 : =$FFFFFFFFFFFFFFE4  Level_select_cheat_counter :=	*		; S3 uses a different address
(1)  931/FFFFFFFFFFFFFFE4 :                     				ds.w 1			; progress entering level select cheat, unused
(1)  932/FFFFFFFFFFFFFFE6 : =$FFFFFFFFFFFFFFE6  Debug_mode_cheat_counter :=	*		; S3 uses a different address
(1)  933/FFFFFFFFFFFFFFE6 :                     				ds.w 1			; progress entering debug mode cheat, unused
(1)  934/FFFFFFFFFFFFFFE8 : =$FFFFFFFFFFFFFFE8  Competition_mode :=		*		; S3 uses a different address
(1)  935/FFFFFFFFFFFFFFE8 :                     				ds.w 1
(1)  936/FFFFFFFFFFFFFFEA : =$FFFFFFFFFFFFFFEA  P1_character :=			*		; S3 uses a different address
(1)  937/FFFFFFFFFFFFFFEA :                     				ds.b 1			; 0 = Sonic, 1 = Tails, 2 = Knuckles
(1)  938/FFFFFFFFFFFFFFEB : =$FFFFFFFFFFFFFFEB  P2_character :=			*		; S3 uses a different address
(1)  939/FFFFFFFFFFFFFFEB :                     				ds.b 1
(1)  940/FFFFFFFFFFFFFFEC :                     			ds.l 1				; unused
(1)  941/FFFFFFFFFFFFFFF0 :                     
(1)  942/FFFFFFFFFFFFFFF0 : =$FFFFFFFFFFFFFFF0  V_int_jump :=			*		; S3 uses a different address
(1)  943/FFFFFFFFFFFFFFF0 :                     				ds.b 6			; contains an instruction to jump to the V-int handler
(1)  944/FFFFFFFFFFFFFFF6 : =$FFFFFFFFFFFFFFF2  V_int_addr :=			V_int_jump+2		; long
(1)  945/FFFFFFFFFFFFFFF6 : =$FFFFFFFFFFFFFFF6  H_int_jump :=			*		; S3 uses a different address
(1)  946/FFFFFFFFFFFFFFF6 :                     				ds.b 6			; contains an instruction to jump to the H-int handler
(1)  947/FFFFFFFFFFFFFFFC : =$FFFFFFFFFFFFFFF8  H_int_addr :=			H_int_jump+2		; long
(1)  948/FFFFFFFFFFFFFFFC : =$FFFFFFFFFFFFFFFC  Checksum_string :=		*		; S3 uses a different address
(1)  949/FFFFFFFFFFFFFFFC :                     				ds.l 1			; set to Ref_Checksum_String once the checksum routine has run
(1)  950/       0 : =$534D264B          Ref_Checksum_String := 'SM&K'
(1)  951/       0 :                     
(1)  952/       0 : =$0                 .check =	(*)&$FFFFFF
(1)  956/   10000 :                     	dephase
(1)  957/   10000 :                     
(1)  958/   10000 :                     ; extra Special Stage variables
(1)  959/FFFFFFFFFFFFE400 :                     	phase Pos_table_P2
(1)  960/FFFFFFFFFFFFE400 :                     SStage_scalar_index_0		ds.w 1			; unknown scalar table index value
(1)  961/FFFFFFFFFFFFE402 :                     SStage_scalar_index_1		ds.w 1			; unknown scalar table index value
(1)  962/FFFFFFFFFFFFE404 :                     SStage_scalar_index_2		ds.w 1			; unknown scalar table index value
(1)  963/FFFFFFFFFFFFE406 :                     SStage_scalar_result_0		ds.l 1			; unknown scalar table results values
(1)  964/FFFFFFFFFFFFE40A :                     SStage_scalar_result_1		ds.l 1			; unknown scalar table results values
(1)  965/FFFFFFFFFFFFE40E :                     SStage_scalar_result_2		ds.l 1			; unknown scalar table results values
(1)  966/FFFFFFFFFFFFE412 :                     	ds.b $A
(1)  967/FFFFFFFFFFFFE41C :                     SStage_scalar_result_3		ds.l 1			; unknown scalar table results values
(1)  968/FFFFFFFFFFFFE420 :                     Special_stage_anim_frame	ds.w 1			; special stage globe's current animation frame, $10 and higher is turning
(1)  969/FFFFFFFFFFFFE422 :                     Special_stage_X_pos		ds.w 1
(1)  970/FFFFFFFFFFFFE424 :                     Special_stage_Y_pos		ds.w 1
(1)  971/FFFFFFFFFFFFE426 :                     Special_stage_angle		ds.b 1			; $00 = north, $40 = west, $80 = south, $C0 = east
(1)  972/FFFFFFFFFFFFE427 :                     			ds.b 1				; unused
(1)  973/FFFFFFFFFFFFE428 :                     Special_stage_velocity		ds.w 1			; player's movement speed, negative when going backwards
(1)  974/FFFFFFFFFFFFE42A :                     Special_stage_turning		ds.b 1			; direction of next turn, 4 = left, -4 = right
(1)  975/FFFFFFFFFFFFE42B :                     Special_stage_bumper_lock	ds.b 1			; if set, the player can't start advancing by pressing up
(1)  976/FFFFFFFFFFFFE42C :                     Special_stage_prev_anim_frame	ds.b 1
(1)  977/FFFFFFFFFFFFE42D :                     			ds.b 2				; unused
(1)  978/FFFFFFFFFFFFE42F :                     Special_stage_palette_frame	ds.b 1			; same as Special_stage_anim_frame, but set to 0 while turning
(1)  979/FFFFFFFFFFFFE430 :                     Special_stage_turn_lock		ds.b 1			; if set, the player can't turn
(1)  980/FFFFFFFFFFFFE431 :                     Special_stage_advancing		ds.b 1			; set when the player player presses up
(1)  981/FFFFFFFFFFFFE432 :                     Special_stage_jumping		ds.b 1			; $80 = normal jump, $81 = spring
(1)  982/FFFFFFFFFFFFE433 :                     Special_stage_fade_timer	ds.b 1			; counts up when leaving the special stage
(1)  983/FFFFFFFFFFFFE434 :                     Special_stage_prev_X_pos	ds.w 1
(1)  984/FFFFFFFFFFFFE436 :                     Special_stage_prev_Y_pos	ds.w 1
(1)  985/FFFFFFFFFFFFE438 :                     Special_stage_spheres_left	ds.w 1
(1)  986/FFFFFFFFFFFFE43A :                     Special_stage_ring_count	ds.w 1
(1)  987/FFFFFFFFFFFFE43C :                     Special_stage_sphere_HUD_flag	ds.b 1
(1)  988/FFFFFFFFFFFFE43D :                     Special_stage_extra_life_flags	ds.b 1			; when bit 7 is set, the ring HUD is updated
(1)  989/FFFFFFFFFFFFE43E :                     Special_stage_rate_timer	ds.w 1			; when this reaches 0, the special stage speeds up
(1)  990/FFFFFFFFFFFFE440 :                     Special_stage_jumping_P2	ds.b 1			; $80 = normal jump, $81 = spring
(1)  991/FFFFFFFFFFFFE441 :                     			ds.b 1				; unused
(1)  992/FFFFFFFFFFFFE442 :                     Special_stage_rings_left	ds.w 1
(1)  993/FFFFFFFFFFFFE444 :                     Special_stage_rate		ds.w 1			; player's maximum speed in either direction
(1)  994/FFFFFFFFFFFFE446 :                     Special_stage_palette_addr	ds.l 1			; ROM address of the stage's color palette
(1)  995/FFFFFFFFFFFFE44A :                     Special_stage_clear_timer	ds.w 1			; counts up after getting the last sphere, when it reaches $100 the emerald appears
(1)  996/FFFFFFFFFFFFE44C :                     Special_stage_clear_routine	ds.b 1			; if set, the player can't jump
(1)  997/FFFFFFFFFFFFE44D :                     Special_stage_emerald_timer	ds.b 1			; counts down when the emerald appears, when it reaches 0 the emerald sound plays
(1)  998/FFFFFFFFFFFFE44E :                     Special_stage_interact		ds.w 1			; address of the last bumper touched, or the emerald at the end of the stage
(1)  999/FFFFFFFFFFFFE450 :                     Special_stage_started		ds.b 1			; set when the player begins moving at the start of the stage
(1) 1000/FFFFFFFFFFFFE451 :                     			ds.b $2F			; unused
(1) 1001/FFFFFFFFFFFFE480 : =$FFFFFFFFFFFFE480  SStage_extra_sprites :=		*		; S3 uses a different address
(1) 1002/FFFFFFFFFFFFE480 :                     				ds.b $70		; some extra sprite info for special stages
(1) 1003/   100F0 :                     	dephase
(1) 1004/   100F0 :                     ; ---------------------------------------------------------------------------
(1) 1005/   100F0 :                     ; Art tile stuff
(1) 1006/   100F0 : =$0                 palette_line_0      =      (0<<13)
(1) 1007/   100F0 : =$2000              palette_line_1      =      (1<<13)
(1) 1008/   100F0 : =$4000              palette_line_2      =      (2<<13)
(1) 1009/   100F0 : =$6000              palette_line_3      =      (3<<13)
(1) 1010/   100F0 : =$8000              high_priority       =      (1<<15)
(1) 1011/   100F0 : =$7FF               tile_mask           =      $07FF
(1) 1012/   100F0 : =$7FFF              drawing_mask        =      $7FFF
(1) 1013/   100F0 :                     
(1) 1014/   100F0 :                     ; ---------------------------------------------------------------------------
(1) 1015/   100F0 :                     ; VRAM and tile art base addresses.
(1) 1016/   100F0 :                     ; VRAM Reserved regions.
(1) 1017/   100F0 : =$C000              VRAM_Plane_A_Name_Table               = $C000	; Extends until $CFFF
(1) 1018/   100F0 : =$E000              VRAM_Plane_B_Name_Table               = $E000	; Extends until $EFFF
(1) 1019/   100F0 :                     
(1) 1020/   100F0 :                     ; Menu background.
(1) 1021/   100F0 : =$1                 ArtTile_ArtKos_S3MenuBG               = $0001
(1) 1022/   100F0 :                     
(1) 1023/   100F0 :                     ; Competition mode.
(1) 1024/   100F0 : =$29F               ArtTile_ArtKos_Competition_LevSel     = $029F
(1) 1025/   100F0 : =$34A               ArtTile_ArtKos_Competition_ModeSel    = $034A
(1) 1026/   100F0 : =$34A               ArtTile_ArtKos_Competition_Results    = $034A
(1) 1027/   100F0 : =$5C9               ArtTile_ArtKos_Competition_CharSel    = $05C9
(1) 1028/   100F0 :                     
(1) 1029/   100F0 :                     ; Save screen.
(1) 1030/   100F0 : =$29F               ArtTile_ArtKos_Save_Misc              = $029F
(1) 1031/   100F0 : =$454               ArtTile_ArtKos_Save_Extra             = $0454
(1) 1032/   100F0 :                     
(1) 1033/   100F0 :                     ; ---------------------------------------------------------------------------
(1) 1034/   100F0 :                     ; Universal locations.
(1) 1035/   100F0 :                     
(1) 1036/   100F0 :                     ; Universal (used on all standard levels).
(1) 1037/   100F0 : =$4C4               ArtTile_Monitors                      = $04C4
(1) 1038/   100F0 : =$4DA               ArtTile_CutsceneKnux                  = $04DA
(1) 1039/   100F0 : =$5A0               ArtTile_Explosion                     = $05A0
(1) 1040/   100F0 : =$5E4               ArtTile_StarPost                      = $05E4
(1) 1041/   100F0 : =$680               ArtTile_Player_1                      = $0680
(1) 1042/   100F0 : =$6A0               ArtTile_Player_2                      = $06A0
(1) 1043/   100F0 : =$6B0               ArtTile_Player_2_Tail                 = $06B0
(1) 1044/   100F0 : =$6BC               ArtTile_Ring                          = $06BC
(1) 1045/   100F0 : =$79C               ArtTile_Shield                        = $079C
(1) 1046/   100F0 : =$7BB               ArtTile_Shield_Sparks                 = $07BB
(1) 1047/   100F0 : =$7E0               ArtTile_DashDust                      = $07E0
(1) 1048/   100F0 : =$7F0               ArtTile_DashDust_P2                   = $07F0
(1) 1049/   100F0 :                     
(1) 1050/   100F0 :                     ; ---------------------------------------------------------------------------
(1) 1051/   100F0 :                     ; Sound commands list.
(1) 1052/   100F0 :                     
(1) 1053/      E1 :                     	phase $E1
(1) 1054/      E1 : =$E1                mus__FirstCmd =			*		; ID of the first sound command
(1) 1055/      E1 :                     mus_FadeOut			ds.b 1		; $E1 - fade out music
(1) 1056/      E2 :                     mus_Stop			ds.b 1		; $E2 - stop music and sound effects
(1) 1057/      E3 :                     mus_MutePSG			ds.b 1		; $E3 - mute all PSG channels
(1) 1058/      E4 :                     mus_StopSFX			ds.b 1		; $E4 - stop all sound effects
(1) 1059/      E5 :                     mus_FadeOut2			ds.b 1		; $E5 - fade out music (duplicate)
(1) 1060/      E6 : =$E6                mus__EndCmd =			*		; next ID after last sound command
(1) 1061/      E6 :                     
(1) 1062/      E6 : =$FA                mus_S2SEGA =			$FA		; $FA - SEGA sound ID in Sonic 2
(1) 1063/      E6 : =$FE                mus_StopSEGA =			$FE		; $FE - Stop SEGA sound
(1) 1064/      E6 : =$FF                mus_SEGA =			$FF		; $FF - Play SEGA sound
(1) 1065/   100F5 :                     	dephase
(1) 1066/   100F5 :                     ; ---------------------------------------------------------------------------
(1) 1067/   100F5 :                     ; Music ID's list. These do not affect the sound driver, be careful.
(1) 1068/   100F5 :                     
(1) 1069/       1 :                     	phase $01
(1) 1070/       1 : =$1                 mus__First =			*		; ID of the first music
(1) 1071/       1 :                     mus_AIZ1			ds.b 1		; $01
(1) 1072/       2 :                     mus_AIZ2			ds.b 1		; $02
(1) 1073/       3 :                     mus_HCZ1			ds.b 1		; $03
(1) 1074/       4 :                     mus_HCZ2			ds.b 1		; $04
(1) 1075/       5 :                     mus_MGZ1			ds.b 1		; $05
(1) 1076/       6 :                     mus_MGZ2			ds.b 1		; $06
(1) 1077/       7 :                     mus_CNZ1			ds.b 1		; $07
(1) 1078/       8 :                     mus_CNZ2			ds.b 1		; $08
(1) 1079/       9 :                     mus_FBZ1			ds.b 1		; $09
(1) 1080/       A :                     mus_FBZ2			ds.b 1		; $0A
(1) 1081/       B :                     mus_ICZ1			ds.b 1		; $0B
(1) 1082/       C :                     mus_ICZ2			ds.b 1		; $0C
(1) 1083/       D :                     mus_LBZ1			ds.b 1		; $0D
(1) 1084/       E :                     mus_LBZ2			ds.b 1		; $0E
(1) 1085/       F :                     mus_MHZ1			ds.b 1		; $0F
(1) 1086/      10 :                     mus_MHZ2			ds.b 1		; $10
(1) 1087/      11 :                     mus_SOZ1			ds.b 1		; $11
(1) 1088/      12 :                     mus_SOZ2			ds.b 1		; $12
(1) 1089/      13 :                     mus_LRZ1			ds.b 1		; $13
(1) 1090/      14 :                     mus_LRZ2			ds.b 1		; $14
(1) 1091/      15 :                     mus_SSZ				ds.b 1		; $15
(1) 1092/      16 :                     mus_DEZ1			ds.b 1		; $16
(1) 1093/      17 :                     mus_DEZ2			ds.b 1		; $17
(1) 1094/      18 :                     mus_MinibossK			ds.b 1		; $18
(1) 1095/      19 :                     mus_EndBoss			ds.b 1		; $19
(1) 1096/      1A :                     mus_DDZ				ds.b 1		; $1A
(1) 1097/      1B :                     mus_Pachinko			ds.b 1		; $1B
(1) 1098/      1C :                     mus_SpecialStage		ds.b 1		; $1C
(1) 1099/      1D :                     mus_Slots			ds.b 1		; $1D
(1) 1100/      1E :                     mus_Gumball			ds.b 1		; $1E
(1) 1101/      1F :                     mus_Knuckles			ds.b 1		; $1F
(1) 1102/      20 :                     mus_ALZ				ds.b 1		; $20
(1) 1103/      21 :                     mus_BPZ				ds.b 1		; $21
(1) 1104/      22 :                     mus_DPZ				ds.b 1		; $22
(1) 1105/      23 :                     mus_CGZ				ds.b 1		; $23
(1) 1106/      24 :                     mus_EMZ				ds.b 1		; $24
(1) 1107/      25 :                     mus_TitleScreen			ds.b 1		; $25
(1) 1108/      26 :                     mus_Credits3			ds.b 1		; $26
(1) 1109/      27 :                     mus_GameOver			ds.b 1		; $27
(1) 1110/      28 :                     mus_Continue			ds.b 1		; $28
(1) 1111/      29 :                     mus_GotThroughAct		ds.b 1		; $29
(1) 1112/      2A :                     mus_ExtraLife			ds.b 1		; $2A
(1) 1113/      2B :                     mus_Emerald			ds.b 1		; $2B
(1) 1114/      2C :                     mus_Invincibility		ds.b 1		; $2C
(1) 1115/      2D :                     mus_CompetitionMenu		ds.b 1		; $2D
(1) 1116/      2E :                     mus_Miniboss			ds.b 1		; $2E
(1) 1117/      2F :                     mus_DataSelect			ds.b 1		; $2F
(1) 1118/      30 :                     mus_FinalBoss			ds.b 1		; $30
(1) 1119/      31 :                     mus_Drowning			ds.b 1		; $31
(1) 1120/      32 :                     mus_Ending			ds.b 1		; $32
(1) 1121/      33 :                     mus_CreditsK			ds.b 1		; $DC - Can also be treated as SFX?
(1) 1122/      34 : =$34                mus__End =			*		; next ID after last music
(1) 1123/   10128 :                     	dephase
(1) 1124/   10128 :                     
(1) 1125/   10128 :                     ; ---------------------------------------------------------------------------
(1) 1126/   10128 :                     ; Sound effect ID's list. These do not affect the sound driver, be careful.
(1) 1127/   10128 :                     
(1) 1128/      33 :                     	phase $33
(1) 1129/      33 : =$33                sfx__First =			*		; ID of the first sound effect
(1) 1130/      33 :                     sfx_RingRight			ds.b 1		; $33
(1) 1131/      34 :                     sfx_RingLeft			ds.b 1		; $34
(1) 1132/      35 :                     sfx_Death			ds.b 1		; $35
(1) 1133/      36 :                     sfx_Skid			ds.b 1		; $36
(1) 1134/      37 :                     sfx_SpikeHit			ds.b 1		; $37
(1) 1135/      38 :                     sfx_Bubble			ds.b 1		; $38
(1) 1136/      39 :                     sfx_Splash			ds.b 1		; $39
(1) 1137/      3A :                     sfx_Shield			ds.b 1		; $3A
(1) 1138/      3B :                     sfx_Drown			ds.b 1		; $3B
(1) 1139/      3C :                     sfx_Roll			ds.b 1		; $3C
(1) 1140/      3D :                     sfx_Break			ds.b 1		; $3D
(1) 1141/      3E :                     sfx_FireShield			ds.b 1		; $3E
(1) 1142/      3F :                     sfx_BubbleShield		ds.b 1		; $3F
(1) 1143/      40 :                     sfx_UnknownShield		ds.b 1		; $40
(1) 1144/      41 :                     sfx_LightningShield		ds.b 1		; $41
(1) 1145/      42 :                     sfx_InstaAttack			ds.b 1		; $42
(1) 1146/      43 :                     sfx_FireAttack			ds.b 1		; $43
(1) 1147/      44 :                     sfx_BubbleAttack		ds.b 1		; $44
(1) 1148/      45 :                     sfx_ElectricAttack		ds.b 1		; $45
(1) 1149/      46 :                     sfx_Whistle			ds.b 1		; $46
(1) 1150/      47 :                     sfx_SandwallRise		ds.b 1		; $47
(1) 1151/      48 :                     sfx_Blast			ds.b 1		; $48
(1) 1152/      49 :                     sfx_Thump			ds.b 1		; $49
(1) 1153/      4A :                     sfx_Grab			ds.b 1		; $4A
(1) 1154/      4B :                     sfx_WaterfallSplash		ds.b 1		; $4B
(1) 1155/      4C :                     sfx_GlideLand			ds.b 1		; $4C
(1) 1156/      4D :                     sfx_Projectile			ds.b 1		; $4D
(1) 1157/      4E :                     sfx_MissileExplode		ds.b 1		; $4E
(1) 1158/      4F :                     sfx_FlamethrowerQuiet		ds.b 1		; $4F
(1) 1159/      50 :                     sfx_BossActivate		ds.b 1		; $50
(1) 1160/      51 :                     sfx_MissileThrow		ds.b 1		; $51
(1) 1161/      52 :                     sfx_SpikeMove			ds.b 1		; $52
(1) 1162/      53 :                     sfx_Charging			ds.b 1		; $53
(1) 1163/      54 :                     sfx_BossLaser			ds.b 1		; $54
(1) 1164/      55 :                     sfx_BlockConveyor		ds.b 1		; $55
(1) 1165/      56 :                     sfx_FlipBridge			ds.b 1		; $56
(1) 1166/      57 :                     sfx_Geyser			ds.b 1		; $57
(1) 1167/      58 :                     sfx_FanLatch			ds.b 1		; $58
(1) 1168/      59 :                     sfx_Collapse			ds.b 1		; $59
(1) 1169/      5A :                     sfx_UnknownCharge		ds.b 1		; $5A
(1) 1170/      5B :                     sfx_Switch			ds.b 1		; $5B
(1) 1171/      5C :                     sfx_MechaSpark			ds.b 1		; $5C
(1) 1172/      5D :                     sfx_FloorThump			ds.b 1		; $5D
(1) 1173/      5E :                     sfx_Laser			ds.b 1		; $5E
(1) 1174/      5F :                     sfx_Crash			ds.b 1		; $5F
(1) 1175/      60 :                     sfx_BossZoom			ds.b 1		; $60
(1) 1176/      61 :                     sfx_BossHitFloor		ds.b 1		; $61
(1) 1177/      62 :                     sfx_Jump			ds.b 1		; $62
(1) 1178/      63 :                     sfx_Starpost			ds.b 1		; $63
(1) 1179/      64 :                     sfx_PulleyGrab			ds.b 1		; $64
(1) 1180/      65 :                     sfx_BlueSphere			ds.b 1		; $65
(1) 1181/      66 :                     sfx_AllSpheres			ds.b 1		; $66
(1) 1182/      67 :                     sfx_LevelProjectile		ds.b 1		; $67
(1) 1183/      68 :                     sfx_Perfect			ds.b 1		; $68
(1) 1184/      69 :                     sfx_PushBlock			ds.b 1		; $69
(1) 1185/      6A :                     sfx_Goal			ds.b 1		; $6A
(1) 1186/      6B :                     sfx_ActionBlock			ds.b 1		; $6B
(1) 1187/      6C :                     sfx_Splash2			ds.b 1		; $6C
(1) 1188/      6D :                     sfx_UnknownShift		ds.b 1		; $6D
(1) 1189/      6E :                     sfx_BossHit			ds.b 1		; $6E
(1) 1190/      6F :                     sfx_Rumble2			ds.b 1		; $6F
(1) 1191/      70 :                     sfx_LavaBall			ds.b 1		; $70
(1) 1192/      71 :                     sfx_Shield2			ds.b 1		; $71
(1) 1193/      72 :                     sfx_Hoverpad			ds.b 1		; $72
(1) 1194/      73 :                     sfx_Transporter			ds.b 1		; $73
(1) 1195/      74 :                     sfx_TunnelBooster		ds.b 1		; $74
(1) 1196/      75 :                     sfx_BalloonPlatform		ds.b 1		; $75
(1) 1197/      76 :                     sfx_TrapDoor			ds.b 1		; $76
(1) 1198/      77 :                     sfx_Balloon			ds.b 1		; $77
(1) 1199/      78 :                     sfx_GravityMachine		ds.b 1		; $78
(1) 1200/      79 :                     sfx_Lightning			ds.b 1		; $79
(1) 1201/      7A :                     sfx_BossMagma			ds.b 1		; $7A
(1) 1202/      7B :                     sfx_SmallBumpers		ds.b 1		; $7B
(1) 1203/      7C :                     sfx_ChainTension		ds.b 1		; $7C
(1) 1204/      7D :                     sfx_UnknownPump			ds.b 1		; $7D
(1) 1205/      7E :                     sfx_GroundSlide			ds.b 1		; $7E
(1) 1206/      7F :                     sfx_FrostPuff			ds.b 1		; $7F
(1) 1207/      80 :                     sfx_IceSpikes			ds.b 1		; $80
(1) 1208/      81 :                     sfx_TubeLauncher		ds.b 1		; $81
(1) 1209/      82 :                     sfx_SandSplash			ds.b 1		; $82
(1) 1210/      83 :                     sfx_BridgeCollapse		ds.b 1		; $83
(1) 1211/      84 :                     sfx_UnknownPowerUp		ds.b 1		; $84
(1) 1212/      85 :                     sfx_UnknownPowerDown		ds.b 1		; $85
(1) 1213/      86 :                     sfx_Alarm			ds.b 1		; $86
(1) 1214/      87 :                     sfx_MushroomBounce		ds.b 1		; $87
(1) 1215/      88 :                     sfx_PulleyMove			ds.b 1		; $88
(1) 1216/      89 :                     sfx_WeatherMachine		ds.b 1		; $89
(1) 1217/      8A :                     sfx_Bouncy			ds.b 1		; $8A
(1) 1218/      8B :                     sfx_ChopTree			ds.b 1		; $8B
(1) 1219/      8C :                     sfx_ChopStuck			ds.b 1		; $8C
(1) 1220/      8D :                     sfx_UnknownFlutter		ds.b 1		; $8D
(1) 1221/      8E :                     sfx_UnknownRevving		ds.b 1		; $8E
(1) 1222/      8F :                     sfx_DoorOpen			ds.b 1		; $8F
(1) 1223/      90 :                     sfx_DoorMove			ds.b 1		; $90
(1) 1224/      91 :                     sfx_DoorClose			ds.b 1		; $91
(1) 1225/      92 :                     sfx_GhostAppear			ds.b 1		; $92
(1) 1226/      93 :                     sfx_BossRecovery		ds.b 1		; $93
(1) 1227/      94 :                     sfx_ChainTick			ds.b 1		; $94
(1) 1228/      95 :                     sfx_BossHand			ds.b 1		; $95
(1) 1229/      96 :                     sfx_MechaLand			ds.b 1		; $96
(1) 1230/      97 :                     sfx_EnemyBreath			ds.b 1		; $97
(1) 1231/      98 :                     sfx_BossProjectile		ds.b 1		; $98
(1) 1232/      99 :                     sfx_UnknownPlink		ds.b 1		; $99
(1) 1233/      9A :                     sfx_SpringLatch			ds.b 1		; $9A
(1) 1234/      9B :                     sfx_ThumpBoss			ds.b 1		; $9B
(1) 1235/      9C :                     sfx_SuperEmerald		ds.b 1		; $9C
(1) 1236/      9D :                     sfx_Targeting			ds.b 1		; $9D
(1) 1237/      9E :                     sfx_Clank			ds.b 1		; $9E
(1) 1238/      9F :                     sfx_SuperTransform		ds.b 1		; $9F
(1) 1239/      A0 :                     sfx_MissileShoot		ds.b 1		; $A0
(1) 1240/      A1 :                     sfx_UnknownOminous		ds.b 1		; $A1
(1) 1241/      A2 :                     sfx_FloorLauncher		ds.b 1		; $A2
(1) 1242/      A3 :                     sfx_GravityLift			ds.b 1		; $A3
(1) 1243/      A4 :                     sfx_MechaTransform		ds.b 1		; $A4
(1) 1244/      A5 :                     sfx_UnknownRise			ds.b 1		; $A5
(1) 1245/      A6 :                     sfx_LaunchGrab			ds.b 1		; $A6
(1) 1246/      A7 :                     sfx_LaunchReady			ds.b 1		; $A7
(1) 1247/      A8 :                     sfx_EnergyZap			ds.b 1		; $A8
(1) 1248/      A9 :                     sfx_AirDing			ds.b 1		; $A9
(1) 1249/      AA :                     sfx_Bumper			ds.b 1		; $AA
(1) 1250/      AB :                     sfx_Spindash			ds.b 1		; $AB
(1) 1251/      AC :                     sfx_Continue			ds.b 1		; $AC
(1) 1252/      AD :                     sfx_LaunchGo			ds.b 1		; $AD
(1) 1253/      AE :                     sfx_Flipper			ds.b 1		; $AE
(1) 1254/      AF :                     sfx_EnterSS			ds.b 1		; $AF
(1) 1255/      B0 :                     sfx_Register			ds.b 1		; $B0
(1) 1256/      B1 :                     sfx_Spring			ds.b 1		; $B1
(1) 1257/      B2 :                     sfx_Error			ds.b 1		; $B2
(1) 1258/      B3 :                     sfx_BigRing			ds.b 1		; $B3
(1) 1259/      B4 :                     sfx_Explode			ds.b 1		; $B4
(1) 1260/      B5 :                     sfx_Diamonds			ds.b 1		; $B5
(1) 1261/      B6 :                     sfx_Dash			ds.b 1		; $B6
(1) 1262/      B7 :                     sfx_SlotMachine			ds.b 1		; $B7
(1) 1263/      B8 :                     sfx_Signpost			ds.b 1		; $B8
(1) 1264/      B9 :                     sfx_RingLoss			ds.b 1		; $B9
(1) 1265/      BA :                     sfx_Flying			ds.b 1		; $BA
(1) 1266/      BB :                     sfx_FlyTired			ds.b 1		; $BB
(1) 1267/      BC : =$BC                sfx__FirstContinuous =		*		; ID of the first continuous sound effect
(1) 1268/      BC :                     sfx_SlideSkidLoud		ds.b 1		; $BC
(1) 1269/      BD :                     sfx_LargeShip			ds.b 1		; $BD
(1) 1270/      BE :                     sfx_RobotnikSiren		ds.b 1		; $BE
(1) 1271/      BF :                     sfx_BossRotate			ds.b 1		; $BF
(1) 1272/      C0 :                     sfx_FanBig			ds.b 1		; $C0
(1) 1273/      C1 :                     sfx_FanSmall			ds.b 1		; $C1
(1) 1274/      C2 :                     sfx_FlamethrowerLoud		ds.b 1		; $C2
(1) 1275/      C3 :                     sfx_GravityTunnel		ds.b 1		; $C3
(1) 1276/      C4 :                     sfx_BossPanic			ds.b 1		; $C4
(1) 1277/      C5 :                     sfx_UnknownSpin			ds.b 1		; $C5
(1) 1278/      C6 :                     sfx_WaveHover			ds.b 1		; $C6
(1) 1279/      C7 :                     sfx_CannonTurn			ds.b 1		; $C7
(1) 1280/      C8 :                     sfx_SlideSkidQuiet		ds.b 1		; $C8
(1) 1281/      C9 :                     sfx_SpikeBalls			ds.b 1		; $C9
(1) 1282/      CA :                     sfx_LightTunnel			ds.b 1		; $CA
(1) 1283/      CB :                     sfx_Rumble			ds.b 1		; $CB
(1) 1284/      CC :                     sfx_BigRumble			ds.b 1		; $CC
(1) 1285/      CD :                     sfx_DeathEggRiseLoud		ds.b 1		; $CD
(1) 1286/      CE :                     sfx_WindQuiet			ds.b 1		; $CE
(1) 1287/      CF :                     sfx_WindLoud			ds.b 1		; $CF
(1) 1288/      D0 :                     sfx_Rising			ds.b 1		; $D0
(1) 1289/      D1 :                     sfx_UnknownFlutter2		ds.b 1		; $D1
(1) 1290/      D2 :                     sfx_GumballTab			ds.b 1		; $D2
(1) 1291/      D3 :                     sfx_DeathEggRiseQuiet		ds.b 1		; $D3
(1) 1292/      D4 :                     sfx_TurbineHum			ds.b 1		; $D4
(1) 1293/      D5 :                     sfx_LavaFall			ds.b 1		; $D5
(1) 1294/      D6 :                     sfx_UnknownZap			ds.b 1		; $D6
(1) 1295/      D7 :                     sfx_ConveyorPlatform		ds.b 1		; $D7
(1) 1296/      D8 :                     sfx_UnknownSaw			ds.b 1		; $D8
(1) 1297/      D9 :                     sfx_MagneticSpike		ds.b 1		; $D9
(1) 1298/      DA :                     sfx_LeafBlower			ds.b 1		; $DA
(1) 1299/      DB :                     sfx_WaterSkid			ds.b 1		; $DB
(1) 1300/      DC :                     				ds.b 3		; unused SFX slots, the driver will happily play them though
(1) 1301/      DF : =$DF                sfx__End =			*		; next ID after the last sound effect
(1) 1302/      DF :                     
(1) 1303/   101D4 :                     	dephase
(1) 1304/       0 :                     	!org 0				; make sure we reset the ROM position to 0
(1) 1305/       0 :                     
       6/       0 : (MACRO)             		org 0
       6/       0 : =$0                 .diff := 0 - *
       6/       0 :                                             dc.b [.diff]$FF
       7/       0 :                     ; ---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 : =$1                 strip_padding = 1
      10/       0 : =$1200              Size_of_Snd_driver_guess = $1200
      11/       0 : =$1                 mus_Default	= $01
      12/       0 : =$FFFFFFFFFFFFF62A  V_int_executing = V_int_routine
      13/       0 :                     
      14/       0 :                     ; ---------------------------------------------------------------------------
      15/       0 :                     
      16/       0 :                     StartOfROM:
      20/       0 :                     
      21/       0 : 0000 0000 0000      Vectors:	dc.l	$00000000,	EntryPoint,	ErrorTrap,	ErrorTrap	; 0
                    026E 0000 026C 
                    0000 026C          
      22/      10 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 4
                    026C 0000 026C 
                    0000 026C          
      23/      20 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 8
                    026C 0000 026C 
                    0000 026C          
      24/      30 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 12
                    026C 0000 026C 
                    0000 026C          
      25/      40 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 16
                    026C 0000 026C 
                    0000 026C          
      26/      50 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 20
                    026C 0000 026C 
                    0000 026C          
      27/      60 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 24
                    026C 0000 026C 
                    0000 026C          
      28/      70 : FFFF FFF6 0000      		dc.l	H_int_jump,	ErrorTrap,	V_int_jump,	ErrorTrap	; 28
                    026C FFFF FFF0 
                    0000 026C          
      29/      80 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 32
                    026C 0000 026C 
                    0000 026C          
      30/      90 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 36
                    026C 0000 026C 
                    0000 026C          
      31/      A0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 40
                    026C 0000 026C 
                    0000 026C          
      32/      B0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 44
                    026C 0000 026C 
                    0000 026C          
      33/      C0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 48
                    026C 0000 026C 
                    0000 026C          
      34/      D0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 52
                    026C 0000 026C 
                    0000 026C          
      35/      E0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 56
                    026C 0000 026C 
                    0000 026C          
      36/      F0 : 0000 026C 0000      		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 60
                    026C 0000 026C 
                    0000 026C          
      37/     100 : 5345 4741 2047      Header:		dc.b "SEGA GENESIS    "
                    454E 4553 4953 
                    2020 2020          
      38/     110 : 2843 2953 4547      Copyright:	dc.b "(C)SEGA 1994.JUN"
                    4120 3139 3934 
                    2E4A 554E          
      39/     120 : 534F 554E 4420      Domestic_Name:	dc.b "SOUND TEST PROGRAM                              "
                    5445 5354 2050 
                    524F 4752 414D 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020    
      40/     150 : 534F 554E 4420      Overseas_Name:	dc.b "SOUND TEST PROGRAM                              "
                    5445 5354 2050 
                    524F 4752 414D 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020 
                    2020 2020 2020    
      41/     180 : 474D 204D 4B2D      Serial_Number:	dc.b "GM MK-IDFK -00"
                    4944 464B 202D 
                    3030             
      42/     18E : 0000                Checksum:	dc.w $0000
      43/     190 : 4A20 2020 2020      Input:		dc.b "J               "
                    2020 2020 2020 
                    2020 2020          
      44/     1A0 : 0000 0000           ROMStartLoc:	dc.l StartOfROM
      45/     1A4 : 0002 FFFF           ROMEndLoc:	dc.l EndOfROM-1
      46/     1A8 : 00FF 0000           RAMStartLoc:	dc.l (RAM_start&$FFFFFF)
      47/     1AC : 00FF FFFF           RAMEndLoc:	dc.l (RAM_start&$FFFFFF)+$FFFF
      48/     1B0 : 2020                CartRAM_Info:	dc.b "  "
      49/     1B2 : 2020                CartRAM_Type:	dc.w %10000000100000
      50/     1B4 : 2020 2020           CartRAMStartLoc:dc.l $20202020
      51/     1B8 : 2020 2020           CartRAMEndLoc:	dc.l $20202020
      52/     1BC : 2020                Modem_Info:	dc.b "  "
      53/     1BE : 2020 2020 2020      		dc.b "          "
                    2020 2020          
      54/     1C8 : 0000                Unknown_Header:	dc.w  0
      55/     1CA : 2020 2020 2020      		dc.b  "      "
      56/     1D0 : 0000 0000           		dc.w  0,  0
      57/     1D4 : 0002 FFFF           		dc.l  EndOfROM-1	; 0	;CHECKLATER (ROM Bank Info)
      58/     1D8 : 2020 2020 2020      		dc.b  "        "
                    2020             
      59/     1E0 : 524F                KiS2ROM_Info:	dc.b  "RO"
      60/     1E2 : 2020                KiS2ROM_Type:	dc.w %10000000100000
      61/     1E4 : (MACRO)             KiS2ROMStartLoc:	tribyte $300000
      61/     1E4 : 3000 00                             dc.b ($300000 >> 16)&$FF,($300000>>8)&$FF,$300000&$FF
      61/     1E7 :                                     shift
      61/     1E7 :  (MACRO-2)                          tribyte 
      62/     1E7 : (MACRO)             KiS2ROMEndLoc:		tribyte $33FFFF
      62/     1E7 : 33FF FF                             dc.b ($33FFFF >> 16)&$FF,($33FFFF>>8)&$FF,$33FFFF&$FF
      62/     1EA :                                     shift
      62/     1EA :  (MACRO-2)                          tribyte 
      63/     1EA : (MACRO)             KiS2ROMStartLoc2:	tribyte $300000
      63/     1EA : 3000 00                             dc.b ($300000 >> 16)&$FF,($300000>>8)&$FF,$300000&$FF
      63/     1ED :                                     shift
      63/     1ED :  (MACRO-2)                          tribyte 
      64/     1ED : (MACRO)             KiS2ROMEndLoc2:		tribyte $33FFFF
      64/     1ED : 33FF FF                             dc.b ($33FFFF >> 16)&$FF,($33FFFF>>8)&$FF,$33FFFF&$FF
      64/     1F0 :                                     shift
      64/     1F0 :  (MACRO-2)                          tribyte 
      65/     1F0 : 4A55 4520 2020      Country_Code:	dc.b "JUE             "
                    2020 2020 2020 
                    2020 2020          
      66/     200 :                     ; ---------------------------------------------------------------------------
      67/     200 :                     
      68/     200 :                     ; ---------------------------------------------------------------------------
      69/     200 : 8000 3FFF 0100      SetupValues:	dc.w $8000,bytesToLcnt($10000),$100
      70/     206 : 00A0 0000           		dc.l Z80_RAM
      71/     20A : 00A1 1100           		dc.l Z80_bus_request
      72/     20E : 00A1 1200           		dc.l Z80_reset
      73/     212 : 00C0 0000 00C0      		dc.l VDP_data_port, VDP_control_port
                    0004             
      74/     21A :                     
      75/     21A :                     ; values for VDP registers
      76/     21A :                     VDPInitValues:
      77/     21A : 04                  		dc.b 4			; Command $8004 - HInt off, Enable HV counter read
      78/     21B : 14                  		dc.b $14		; Command $8114 - Display off, VInt off, DMA on, PAL off
      79/     21C : 30                  		dc.b $30		; Command $8230 - Scroll A Address $C000
      80/     21D : 3C                  		dc.b $3C		; Command $833C - Window Address $F000
      81/     21E : 07                  		dc.b 7			; Command $8407 - Scroll B Address $E000
      82/     21F : 6C                  		dc.b $6C		; Command $856C - Sprite Table Address $D800
      83/     220 : 00                  		dc.b 0			; Command $8600 - Null
      84/     221 : 00                  		dc.b 0			; Command $8700 - Background color Pal 0 Color 0
      85/     222 : 00                  		dc.b 0			; Command $8800 - Null
      86/     223 : 00                  		dc.b 0			; Command $8900 - Null
      87/     224 : FF                  		dc.b $FF		; Command $8AFF - Hint timing $FF scanlines
      88/     225 : 00                  		dc.b 0			; Command $8B00 - Ext Int off, VScroll full, HScroll full
      89/     226 : 81                  		dc.b $81		; Command $8C81 - 40 cell mode, shadow/highlight off, no interlace
      90/     227 : 37                  		dc.b $37		; Command $8D37 - HScroll Table Address $DC00
      91/     228 : 00                  		dc.b 0			; Command $8E00 - Null
      92/     229 : 01                  		dc.b 1			; Command $8F01 - VDP auto increment 1 byte
      93/     22A : 01                  		dc.b 1			; Command $9001 - 64x32 cell scroll size
      94/     22B : 00                  		dc.b 0			; Command $9100 - Window H left side, Base Point 0
      95/     22C : 00                  		dc.b 0			; Command $9200 - Window V upside, Base Point 0
      96/     22D : FF                  		dc.b $FF		; Command $93FF - DMA Length Counter $FFFF
      97/     22E : FF                  		dc.b $FF		; Command $94FF - See above
      98/     22F : 00                  		dc.b 0			; Command $9500 - DMA Source Address $0
      99/     230 : 00                  		dc.b 0			; Command $9600 - See above
     100/     231 : 80                  		dc.b $80		; Command $9700	- See above + VRAM fill mode
     101/     232 :                     VDPInitValues_End:
     102/     232 : 4000 0080           		dc.l	vdpComm($0000,VRAM,DMA)	; value for VRAM write mode
     103/     236 :                     
     104/     236 :                     ; Z80 instructions (not the sound driver; that gets loaded later)
     105/     236 :                     Z80StartupCodeBegin:
     107/     236 :                     	save
     108/     236 :                     	CPU Z80	; start assembling Z80 code
     109/       0 :                     	phase 0	; pretend we're at address 0
     110/       0 : AF                  		xor	a	; clear a to 0
     111/       1 : 01 D9 1F            		ld	bc,((Z80_RAM_end-Z80_RAM)-zStartupCodeEndLoc)-1	; prepare to loop this many times
     112/       4 : 11 27 00            		ld	de,zStartupCodeEndLoc+1	; initial destination address
     113/       7 : 21 26 00            		ld	hl,zStartupCodeEndLoc	; initial source address
     114/       A : F9                  		ld	sp,hl	; set the address the stack starts at
     115/       B : 77                  		ld	(hl),a	; set first byte of the stack to 0
     116/       C : ED B0               		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
     117/       E : DD E1               		pop	ix	; clear ix
     118/      10 : FD E1               		pop	iy	; clear iy
     119/      12 : ED 47               		ld	i,a	; clear i
     120/      14 : ED 4F               		ld	r,a	; clear r
     121/      16 : D1                  		pop	de	; clear de
     122/      17 : E1                  		pop	hl	; clear hl
     123/      18 : F1                  		pop	af	; clear af
     124/      19 : 08                  		ex	af,af'	; swap af with af'
     125/      1A : D9                  		exx		; swap bc/de/hl with their shadow registers too
     126/      1B : C1                  		pop	bc	; clear bc
     127/      1C : D1                  		pop	de	; clear de
     128/      1D : E1                  		pop	hl	; clear hl
     129/      1E : F1                  		pop	af	; clear af
     130/      1F : F9                  		ld	sp,hl	; clear sp
     131/      20 : F3                  		di		; clear iff1 (for interrupt handler)
     132/      21 : ED 56               		im	1	; interrupt handling mode = 1
     133/      23 : 36 E9               		ld	(hl),0E9h	; replace the first instruction with a jump to itself
     134/      25 : E9                  		jp	(hl)		; jump to the first instruction (to stay there forever)
     135/      26 :                     zStartupCodeEndLoc:
     136/     25C :                     	dephase	; stop pretending
     137/     25C : ALL                 		restore
     138/     25C :                     	padding off	; unfortunately our flags got reset so we have to set them again...
     143/     25C :                     Z80StartupCodeEnd:
     144/     25C : 8104                		dc.w $8104			; value for VDP display mode
     145/     25E : 8F02                		dc.w $8F02			; value for VDP increment
     146/     260 : C000 0000           		dc.l vdpComm($0000,CRAM,WRITE)	; value for CRAM write mode
     147/     264 : 4000 0010           		dc.l vdpComm($0000,VSRAM,WRITE)	; value for VSRAM write mode
     148/     268 : 9FBF DFFF           PSGInitValues:	dc.b $9F,$BF,$DF,$FF		; values for PSG channel volumes
     149/     26C :                     PSGInitValues_End:
     150/     26C :                     ; ---------------------------------------------------------------------------
     151/     26C :                     
     152/     26C :                     ; Trap for real unlike in SK
     153/     26C :                     ErrorTrap:
     154/     26C : 60FE                		bra.s ErrorTrap
     155/     26E :                     
     156/     26E :                     EntryPoint:
     157/     26E : 4FF8 FE00           		lea	(System_stack).w,sp
     158/     272 : 4AB9 00A1 0008      		tst.l	(HW_Port_1_Control-1).l
     159/     278 : 6606                		bne.s	+
     160/     27A : 4A79 00A1 000C      		tst.w	(HW_Expansion_Control-1).l
     161/     280 :                     +
     162/     280 : 667C                		bne.s	.start	; in case of a soft reset
     163/     282 : 4BFA FF7C           		lea	SetupValues(pc),a5
     164/     286 : 4C9D 00E0           		movem.w	(a5)+,d5-d7
     165/     28A : 4CDD 1F00           		movem.l	(a5)+,a0-a4
     166/     28E : 1029 EF01           		move.b	HW_Version-Z80_bus_request(a1),d0	; get hardware version
     167/     292 : 0200 000F           		andi.b	#$F,d0
     168/     296 : 6708                		beq.s	.initVDP	; branch if hardware is older than Genesis III
     169/     298 : 237C 5345 4741      		move.l	#'SEGA',Security_addr-Z80_bus_request(a1)	; satisfy the TMSS
                    2F00             
     170/     2A0 :                     
     171/     2A0 :                     	.initVDP:
     172/     2A0 : 3014                		move.w	(a4),d0	; check if VDP works
     173/     2A2 : 7000                		moveq	#0,d0
     174/     2A4 : 2C40                		movea.l	d0,a6
     175/     2A6 : 4E66                		move.l	a6,usp	; set usp to $0
     176/     2A8 : 7217                		moveq	#VDPInitValues_End-VDPInitValues-1,d1
     177/     2AA :                     
     178/     2AA :                     	.initVDPLoop:
     179/     2AA : 1A1D                		move.b	(a5)+,d5
     180/     2AC : 3885                		move.w	d5,(a4)
     181/     2AE : DA47                		add.w	d7,d5
     182/     2B0 : 51C9 FFF8           		dbf	d1,.initVDPLoop ; set all 24 registers
     183/     2B4 :                     
     184/     2B4 : 289D                		move.l	(a5)+,(a4)	; set VRAM write mode
     185/     2B6 : 3680                		move.w	d0,(a3)	; clear the screen
     186/     2B8 : 3287                		move.w	d7,(a1)	; stop the Z80
     187/     2BA : 3487                		move.w	d7,(a2)	; reset the Z80
     188/     2BC :                     
     189/     2BC :                     	.initZ80:
     190/     2BC : 0111                		btst	d0,(a1)	; has the Z80 stopped?
     191/     2BE : 66FC                		bne.s	.initZ80	; if not, branch
     192/     2C0 : 7425                		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
     193/     2C2 :                     
     194/     2C2 :                     	.initZ80Loop:
     195/     2C2 : 10DD                		move.b	(a5)+,(a0)+
     196/     2C4 : 51CA FFFC           		dbf	d2,.initZ80Loop
     197/     2C8 : 3480                		move.w	d0,(a2)
     198/     2CA : 3280                		move.w	d0,(a1)	; start the Z80
     199/     2CC : 3487                		move.w	d7,(a2)	; reset the Z80
     200/     2CE :                     
     201/     2CE :                     	.clearRAM:
     202/     2CE : 2D00                		move.l	d0,-(a6)		; Clear normal RAM
     203/     2D0 : 51CE FFFC           		dbf	d6,.clearRAM
     204/     2D4 :                     
     205/     2D4 : 289D                		move.l	(a5)+,(a4)	; set VDP display mode and increment
     206/     2D6 : 289D                		move.l	(a5)+,(a4)	; set VDP to CRAM write
     207/     2D8 : 761F                		moveq	#bytesToLcnt($80),d3
     208/     2DA :                     
     209/     2DA :                     	.clearCRAM:
     210/     2DA : 2680                		move.l	d0,(a3)			; Clear CRAM
     211/     2DC : 51CB FFFC           		dbf	d3,.clearCRAM
     212/     2E0 :                     
     213/     2E0 : 289D                		move.l	(a5)+,(a4)
     214/     2E2 : 7813                		moveq	#bytesToLcnt($50),d4
     215/     2E4 :                     
     216/     2E4 :                     	.clearVSRAM:
     217/     2E4 : 2680                		move.l	d0,(a3)			; Clear VSRAM
     218/     2E6 : 51CC FFFC           		dbf	d4,.clearVSRAM
     219/     2EA :                     
     220/     2EA : 7A03                		moveq	#PSGInitValues_End-PSGInitValues-1,d5
     221/     2EC :                     
     222/     2EC :                     	.initPSG:
     223/     2EC : 175D 0011           		move.b	(a5)+,PSG_input-VDP_data_port(a3)	; reset the PSG
     224/     2F0 : 51CD FFFA           		dbf	d5,.initPSG
     225/     2F4 :                     
     226/     2F4 : 3480                		move.w	d0,(a2)
     227/     2F6 : 4CD6 7FFF           		movem.l	(a6),d0-a6	; clear all registers
     228/     2FA : 46FC 2700           		move	#$2700,sr	; set the sr
     229/     2FE :                     
     230/     2FE :                     	.start:
     231/     2FE : 4A79 00C0 0004      		tst.w	(VDP_control_port).l
     232/     304 : 31FC 4EF9 FFF0      		move.w	#$4EF9,(V_int_jump).w	; machine code for jmp
     233/     30A : 21FC 0000 0496      		move.l	#VInt,(V_int_addr).w
                    FFF2             
     234/     312 : 31FC 4EF9 FFF6      		move.w	#$4EF9,(H_int_jump).w
     235/     318 : 21FC 0000 04DC      		move.l	#HInt,(H_int_addr).w
                    FFF8             
     236/     320 :                     -
     237/     320 : 3239 00C0 0004      		move.w	(VDP_control_port).l,d1
     238/     326 : 0801 0001           		btst	#1,d1
     239/     32A : 66F4                		bne.s	-	; wait till a DMA is completed
     240/     32C : 4DF9 00FF 0000      		lea	((RAM_start&$FFFFFF)).l,a6
     241/     332 : 7E00                		moveq	#0,d7
     242/     334 : 3C3C 3F7F           		move.w	#bytesToLcnt($FE00),d6
     243/     338 :                     -
     244/     338 : 2CC7                		move.l	d7,(a6)+
     245/     33A : 51CE FFFC           		dbf	d6,-
     246/     33E :                     
     247/     33E : 7200                		moveq	#0,d1
     248/     340 :                     
     249/     340 :                     
     250/     340 :                     GameStartup:
     251/     340 :                     
     252/     340 :                     ; Count cycles between VBlanks (likely to detect PAL systems and/or for other timing mechanisms
     253/     340 :                     DetectPAL:
     254/     340 : 4BF9 00C0 0004      		lea	(VDP_control_port).l,a5
     255/     346 : 3ABC 8174           		move.w	#$8174,(a5)		; VDP Command $8174 - Display on, VInt on, DMA on, PAL off
     256/     34A : 7000                		moveq	#0,d0
     257/     34C :                     
     258/     34C :                     	.waitForVBlankStart:
     259/     34C : 3215                		move.w	(a5),d1
     260/     34E : 0241 0008           		andi.w	#8,d1
     261/     352 : 67F8                		beq.s	.waitForVBlankStart
     262/     354 :                     
     263/     354 :                     	.waitForVBlankEnd:
     264/     354 : 3215                		move.w	(a5),d1
     265/     356 : 0241 0008           		andi.w	#8,d1
     266/     35A : 66F8                		bne.s	.waitForVBlankEnd	; Wait for VBlank to run once
     267/     35C :                     
     268/     35C :                     	.waitForNextVBlank:
     269/     35C : 5240                		addq.w	#1,d0
     270/     35E : 3215                		move.w	(a5),d1
     271/     360 : 0241 0008           		andi.w	#8,d1
     272/     364 : 67F6                		beq.s	.waitForNextVBlank
     273/     366 : 31C0 FFD6           		move.w	d0,(V_blank_cycles).w
     274/     36A :                     ; End of function DetectPAL
     275/     36A :                     
     276/     36A :                     Init_VDP:
     277/     36A : 41F9 00C0 0004      		lea	(VDP_control_port).l,a0
     278/     370 : 43F9 00C0 0000      		lea	(VDP_data_port).l,a1
     279/     376 : 45F9 0000 04DE      		lea	(VDP_register_values).l,a2
     280/     37C : 7E12                		moveq	#18,d7
     281/     37E :                     
     282/     37E :                     $$setRegisters:
     283/     37E : 309A                		move.w	(a2)+,(a0)
     284/     380 : 51CF FFFC           		dbf	d7,$$setRegisters
     285/     384 : 3039 0000 04E0      		move.w	(VDP_register_values+2).l,d0	; get command for register #1
     286/     38A : 31C0 F60E           		move.w	d0,(VDP_reg_1_command).w	; and store it in RAM (for easy display blanking/enabling)
     287/     38E : 31FC 8ADF F624      		move.w	#$8ADF,(H_int_counter_command).w
     288/     394 : 7000                		moveq	#0,d0
     289/     396 : 23FC 4000 0010      		move.l	#vdpComm($0000,VSRAM,WRITE),(VDP_control_port).l
                    00C0 0004          
     290/     3A0 : 3280                		move.w	d0,(a1)
     291/     3A2 : 3280                		move.w	d0,(a1)
     292/     3A4 : 23FC C000 0000      		move.l	#vdpComm($0000,CRAM,WRITE),(VDP_control_port).l
                    00C0 0004          
     293/     3AE : 3E3C 003F           		move.w	#$3F,d7
     294/     3B2 :                     
     295/     3B2 :                     $$clearCRAM:
     296/     3B2 : 3280                		move.w	d0,(a1)
     297/     3B4 : 51CF FFFC           		dbf	d7,$$clearCRAM
     298/     3B8 : 42B8 F616           		clr.l	(V_scroll_value).w
     299/     3BC : 42B8 F61A           		clr.l	(_unkF61A).w
     300/     3C0 : 2F01                		move.l	d1,-(sp)
     301/     3C2 : (MACRO)             		dmaFillVRAM 0,$0000,$10000	; clear entire VRAM
     301/     3C2 : 4BF9 00C0 0004              lea     (VDP_control_port).l,a5
     301/     3C8 : 3ABC 8F01                   move.w  #$8F01,(a5) ; VRAM pointer increment: $0001
     301/     3CC : 2ABC 94FF 93FF              move.l  #(($9400|(((($10000)-1)&$FF00)>>8))<<16)|($9300|((($10000)-1)&$FF)),(a5) ; DMA $10000 ...
     301/     3D2 : 3ABC 9780                   move.w  #$9780,(a5) ; VRAM fill
     301/     3D6 : 2ABC 4000 0080              move.l  #$40000080|((($0000)&$3FFF)<<16)|((($0000)&$C000)>>14),(a5) ; Start at ...
     301/     3DC : 33FC 0000 00C0              move.w  #(0)<<8,(VDP_data_port).l ; Fill with 0
                    0000             
     301/     3E4 : 3215                loop:   move.w  (a5),d1
     301/     3E6 : 0801 0001                   btst    #1,d1
     301/     3EA : 66F8                        bne.s   loop    ; busy loop until the VDP is finished filling...
     301/     3EC : 3ABC 8F02                   move.w  #$8F02,(a5) ; VRAM pointer increment: $0002
     302/     3F0 : 221F                		move.l	(sp)+,d1
     303/     3F2 :                     ; End of function Init_VDP
     304/     3F2 :                     
     305/     3F2 :                     SndDrvInit:
     306/     3F2 : 4E71                		nop
     307/     3F4 : 33FC 0100 00A1      		move.w	#$100,(Z80_bus_request).l
                    1100             
     308/     3FC : 33FC 0100 00A1      		move.w	#$100,(Z80_reset).l	; release Z80 reset
                    1200             
     309/     404 :                     
     310/     404 :                     		; Load SMPS sound driver
     311/     404 : 41F9 0000 0852      		lea	(Z80_SoundDriver).l,a0
     312/     40A : 43F9 00A0 0000      		lea	(Z80_RAM).l,a1
     313/     410 : 6100 0178           		bsr.w	Kos_Decomp
     314/     414 :                     		; Load default variables
     315/     414 : 7200                		moveq	#0,d1
     316/     416 : 43F9 00A0 1C7A      		lea	(Z80_RAM+z80_stack).l,a1
     317/     41C : 303C 0006           		move.w	#bytesToXcnt(zTracksStart-z80_stack, 8),d0
     318/     420 :                     -
     319/     420 : 03C9 0000           		movep.l	d1,0(a1)
     320/     424 : 03C9 0001           		movep.l	d1,1(a1)
     321/     428 : 5049                		addq.w	#8,a1
     322/     42A : 51C8 FFF4           		dbf	d0,-
     323/     42E :                     		; Detect PAL region consoles
     324/     42E : 0838 0006 FFD8      		btst	#6,(Graphics_flags).w
     325/     434 : 6708                		beq.s	+
     326/     436 : 13FC 0001 00A0      		move.b	#1,(Z80_RAM+zPalFlag).l
                    1C8C             
     327/     43E :                     +
     328/     43E : 33FC 0000 00A1      		move.w	#0,(Z80_reset).l	; reset Z80
                    1200             
     329/     446 : 4E71                		nop
     330/     448 : 4E71                		nop
     331/     44A : 4E71                		nop
     332/     44C : 4E71                		nop
     333/     44E : 33FC 0100 00A1      		move.w	#$100,(Z80_reset).l	; release reset
                    1200             
     334/     456 : (MACRO)             		startZ80
     334/     456 : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     335/     45E :                     ; End of function SndDrvInit
     336/     45E :                     
     337/     45E :                     
     338/     45E :                     	; delay moment
     339/     45E : 303C FFFF           		move.w	#$ffff,d0
     340/     462 :                     	.wait1:
     341/     462 : 6100 0026           		bsr.w	Wait_VSync
     342/     466 : 51C8 FFFA           		dbf	d0,.wait1
     343/     46A :                     
     344/     46A : 303C FFFF           		move.w	#$ffff,d0
     345/     46E :                     	.wait2:
     346/     46E : 6100 001A           		bsr.w	Wait_VSync
     347/     472 : 51C8 FFFA           		dbf	d0,.wait2
     348/     476 :                     
     349/     476 : 303C 0001           		move.w	#signextendB(mus_Default),d0
     350/     47A : 6100 0088           		bsr.w	Play_Music
     351/     47E :                     
     352/     47E :                     GameLoop:
     353/     47E : 11FC 0001 F62A      		move.b	#1,(V_int_executing).w
     354/     484 : 6100 0004           		bsr.w	Wait_VSync
     355/     488 : 60F4                		bra.s	GameLoop
     356/     48A :                     ; ---------------------------------------------------------------------------
     357/     48A :                     
     358/     48A :                     ; ---------------------------------------------------------------------------
     359/     48A :                     ; Called at the end of each frame to perform vertical synchronization
     360/     48A :                     ; ---------------------------------------------------------------------------
     361/     48A :                     
     362/     48A :                     ; =============== S U B R O U T I N E =======================================
     363/     48A :                     
     364/     48A :                     
     365/     48A :                     Wait_VSync:
     366/     48A : 46FC 2300           		move	#$2300,sr
     367/     48E :                     -
     368/     48E : 4A38 F62A           		tst.b	(V_int_executing).w
     369/     492 : 66FA                		bne.s	-	; wait until V-int's run
     370/     494 : 4E75                		rts
     371/     496 :                     ; End of function Wait_VSync
     372/     496 :                     
     373/     496 :                     ; ---------------------------------------------------------------------------
     374/     496 :                     ; Vertical interrupt handler
     375/     496 :                     ; ---------------------------------------------------------------------------
     376/     496 :                     
     377/     496 :                     VInt:
     378/     496 : 4E71                		nop
     379/     498 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
     380/     49C :                     -
     381/     49C : 3039 00C0 0004      		move.w	(VDP_control_port).l,d0
     382/     4A2 : 0240 0008           		andi.w	#8,d0
     383/     4A6 : 67F4                		beq.s	-	; wait until vertical blanking is taking place
     384/     4A8 :                     
     385/     4A8 : 0838 0006 FFD8      		btst	#6,(Graphics_flags).w
     386/     4AE : 6708                		beq.s	+	; branch if it's not a PAL system
     387/     4B0 : 303C 0700           		move.w	#$700,d0
     388/     4B4 :                     -
     389/     4B4 : 51C8 FFFE           		dbf	d0,-	; otherwise, waste a bit of time here
     390/     4B8 :                     +
     391/     4B8 : 0838 0006 FFD8      		btst	#6,(Graphics_flags).w
     392/     4BE : 6708                		beq.s	+	; branch if it isn't a PAL system
     393/     4C0 : 303C 0700           		move.w	#$700,d0
     394/     4C4 :                     -
     395/     4C4 : 51C8 FFFE           		dbf	d0,-	; otherwise, waste a bit of time here
     396/     4C8 :                     +
     397/     4C8 : 11FC 0000 F62A      		move.b	#0,(V_int_executing).w
     398/     4CE : (MACRO)             		startZ80
     398/     4CE : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     399/     4D6 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
     400/     4DA : 4E73                		rte
     401/     4DC :                     
     402/     4DC :                     HInt:
     403/     4DC : 4E73                		rte
     404/     4DE :                     
     405/     4DE :                     ; ---------------------------------------------------------------------------
     406/     4DE :                     VDP_register_values:
     407/     4DE : 8004                		dc.w $8004	; H-int disabled
     408/     4E0 : 8134                		dc.w $8134	; V-int enabled, display blanked, DMA enabled, 224 line display
     409/     4E2 : 8230                		dc.w $8230	; Scroll A PNT base $C000
     410/     4E4 : 8320                		dc.w $8320	; Window PNT base $8000
     411/     4E6 : 8407                		dc.w $8407	; Scroll B PNT base $E000
     412/     4E8 : 857C                		dc.w $857C	; Sprite attribute table base $F800
     413/     4EA : 8600                		dc.w $8600
     414/     4EC : 8700                		dc.w $8700	; Backdrop color is color 0 of the first palette line
     415/     4EE : 8800                		dc.w $8800
     416/     4F0 : 8900                		dc.w $8900
     417/     4F2 : 8A00                		dc.w $8A00
     418/     4F4 : 8B00                		dc.w $8B00	; Full-screen horizontal and vertical scrolling
     419/     4F6 : 8C81                		dc.w $8C81	; 40 cell wide display, no interlace
     420/     4F8 : 8D3C                		dc.w $8D3C	; Horizontal scroll table base $F000
     421/     4FA : 8E00                		dc.w $8E00
     422/     4FC : 8F02                		dc.w $8F02	; Auto-ncrement is 2
     423/     4FE : 9001                		dc.w $9001	; Scroll planes are 64x32 cells
     424/     500 : 9100                		dc.w $9100
     425/     502 : 9200                		dc.w $9200	; Window disabled
     426/     504 :                     
     427/     504 :                     ; ---------------------------------------------------------------------------
     428/     504 :                     ; Always replaces an index previous passed to this function
     429/     504 :                     ; ---------------------------------------------------------------------------
     430/     504 :                     
     431/     504 :                     ; =============== S U B R O U T I N E =======================================
     432/     504 :                     
     433/     504 :                     
     434/     504 :                     Play_Music:
     435/     504 : (MACRO)             		stopZ80
     435/     504 : 33FC 0100 00A1              move.w  #$100,(Z80_bus_request).l ; stop the Z80
                    1100             
     435/     50C : 0839 0000 00A1      loop:   btst    #0,(Z80_bus_request).l
                    1100             
     435/     514 : 66F6                        bne.s   loop ; loop until it says it's stopped
     436/     516 : 13C0 00A0 1C94      		move.b	d0,(Z80_RAM+zMusicNumber).l
     437/     51C : (MACRO)             		startZ80
     437/     51C : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     438/     524 : 4E75                		rts
     439/     526 :                     ; End of function Play_Music
     440/     526 :                     
     441/     526 :                     ; ---------------------------------------------------------------------------
     442/     526 :                     ; Can handle up to two different indexes in one frame
     443/     526 :                     ; ---------------------------------------------------------------------------
     444/     526 :                     
     445/     526 :                     ; =============== S U B R O U T I N E =======================================
     446/     526 :                     
     447/     526 :                     
     448/     526 :                     Play_SFX:
     449/     526 : (MACRO)             		stopZ80
     449/     526 : 33FC 0100 00A1              move.w  #$100,(Z80_bus_request).l ; stop the Z80
                    1100             
     449/     52E : 0839 0000 00A1      loop:   btst    #0,(Z80_bus_request).l
                    1100             
     449/     536 : 66F6                        bne.s   loop ; loop until it says it's stopped
     450/     538 : B039 00A0 1C95      		cmp.b	(Z80_RAM+zSFXNumber0).l,d0
     451/     53E : 671E                		beq.s	++
     452/     540 : 4A39 00A0 1C95      		tst.b	(Z80_RAM+zSFXNumber0).l
     453/     546 : 6610                		bne.s	+
     454/     548 : 13C0 00A0 1C95      		move.b	d0,(Z80_RAM+zSFXNumber0).l
     455/     54E : (MACRO)             		startZ80
     455/     54E : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     456/     556 : 4E75                		rts
     457/     558 :                     +
     458/     558 : 13C0 00A0 1C96      		move.b	d0,(Z80_RAM+zSFXNumber1).l
     459/     55E :                     +
     460/     55E : (MACRO)             		startZ80
     460/     55E : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     461/     566 :                     
     462/     566 :                     Play_SFX_Done:
     463/     566 : 4E75                		rts
     464/     568 :                     ; End of function Play_SFX
     465/     568 :                     
     466/     568 :                     
     467/     568 :                     ; =============== S U B R O U T I N E =======================================
     468/     568 :                     
     469/     568 :                     
     470/     568 :                     Change_Music_Tempo:
     471/     568 : (MACRO)             		stopZ80
     471/     568 : 33FC 0100 00A1              move.w  #$100,(Z80_bus_request).l ; stop the Z80
                    1100             
     471/     570 : 0839 0000 00A1      loop:   btst    #0,(Z80_bus_request).l
                    1100             
     471/     578 : 66F6                        bne.s   loop ; loop until it says it's stopped
     472/     57A : 13C0 00A0 1C91      		move.b	d0,(Z80_RAM+zTempoSpeedup).l
     473/     580 : (MACRO)             		startZ80
     473/     580 : 33FC 0000 00A1              move.w  #0,(Z80_bus_request).l    ; start the Z80
                    1100             
     474/     588 : 4E75                		rts
     475/     58A :                     ; End of function Change_Music_Tempo
     476/     58A :                     
     477/     58A :                     ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
     478/     58A :                     ; ---------------------------------------------------------------------------
     479/     58A :                     ; Kosinski decompression subroutine that decompresses data instantly
     480/     58A :                     ;
     481/     58A :                     ; For format explanation see http://info.sonicretro.org/Kosinski_compression
     482/     58A :                     ; New faster version by written by vladikcomper, with additional improvements by
     483/     58A :                     ; MarkeyJester and Flamewing
     484/     58A :                     ; ---------------------------------------------------------------------------
     485/     58A : =$1                 _Kos_UseLUT := 1
     486/     58A : =$3                 _Kos_LoopUnroll := 3
     487/     58A : =$1                 _Kos_ExtremeUnrolling := 1
     488/     58A :                     
     489/     58A :                     _Kos_RunBitStream macro
     490/     58A :                     	dbra	d2,.skip
     491/     58A :                     	moveq	#7,d2					; Set repeat count to 8.
     492/     58A :                     	move.b	d1,d0					; Use the remaining 8 bits.
     493/     58A :                     	not.w	d3						; Have all 16 bits been used up?
     494/     58A :                     	bne.s	.skip					; Branch if not.
     495/     58A :                     	move.b	(a0)+,d0				; Get desc field low-byte.
     496/     58A :                     	move.b	(a0)+,d1				; Get desc field hi-byte.
     497/     58A :                     	if _Kos_UseLUT==1
     498/     58A :                     	move.b	(a4,d0.w),d0			; Invert bit order...
     499/     58A :                     	move.b	(a4,d1.w),d1			; ... for both bytes.
     500/     58A :                     	endif
     501/     58A :                     .skip
     502/     58A :                     	endm
     503/     58A :                     
     504/     58A :                     _Kos_ReadBit macro
     505/     58A :                     	if _Kos_UseLUT==1
     506/     58A :                     	add.b	d0,d0					; Get a bit from the bitstream.
     507/     58A :                     	else
     508/     58A :                     	lsr.b	#1,d0					; Get a bit from the bitstream.
     509/     58A :                     	endif
     510/     58A :                     	endm
     511/     58A :                     ; ===========================================================================
     512/     58A :                     ; KozDec_193A:
     513/     58A :                     Kos_Decomp:
     514/     58A :                     KosDec:
     515/     58A : 7E07                	moveq	#(1<<_Kos_LoopUnroll)-1,d7
     517/     58C : 7000                	moveq	#0,d0
     518/     58E : 7200                	moveq	#0,d1
     519/     590 : 49FA 01C0           	lea	KosDec_ByteMap(pc),a4		; Load LUT pointer.
     521/     594 : 1018                	move.b	(a0)+,d0				; Get desc field low-byte.
     522/     596 : 1218                	move.b	(a0)+,d1				; Get desc field hi-byte.
     524/     598 : 1034 0000           	move.b	(a4,d0.w),d0			; Invert bit order...
     525/     59C : 1234 1000           	move.b	(a4,d1.w),d1			; ... for both bytes.
     527/     5A0 : 7407                	moveq	#7,d2					; Set repeat count to 8.
     528/     5A2 : 7600                	moveq	#0,d3					; d3 will be desc field switcher.
     529/     5A4 : 601A                	bra.s	.FetchNewCode
     530/     5A6 :                     ; ---------------------------------------------------------------------------
     531/     5A6 :                     .FetchCodeLoop:
     532/     5A6 :                     	; Code 1 (Uncompressed byte).
     533/     5A6 : (MACRO)             	_Kos_RunBitStream
     533/     5A6 : 51CA 0016                   dbra    d2,.skip
     533/     5AA : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     533/     5AC : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     533/     5AE : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     533/     5B0 : 660C                        bne.s   .skip                                   ; Branch if not.
     533/     5B2 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     533/     5B4 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     533/     5B6 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     533/     5BA : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     533/     5BE :                     .skip
     534/     5BE : 12D8                	move.b	(a0)+,(a1)+
     535/     5C0 :                     
     536/     5C0 :                     .FetchNewCode:
     537/     5C0 : (MACRO)             	_Kos_ReadBit
     537/     5C0 : D000                        add.b   d0,d0                                   ; Get a bit from the bitstream.
     538/     5C2 : 65E2                	bcs.s	.FetchCodeLoop			; If code = 1, branch.
     539/     5C4 :                     
     540/     5C4 :                     	; Codes 00 and 01.
     541/     5C4 : 7AFF                	moveq	#-1,d5
     542/     5C6 : 4BD1                	lea	(a1),a5
     543/     5C8 : (MACRO)             	_Kos_RunBitStream
     543/     5C8 : 51CA 0016                   dbra    d2,.skip
     543/     5CC : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     543/     5CE : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     543/     5D0 : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     543/     5D2 : 660C                        bne.s   .skip                                   ; Branch if not.
     543/     5D4 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     543/     5D6 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     543/     5D8 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     543/     5DC : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     543/     5E0 :                     .skip
     545/     5E0 : (MACRO)             	_Kos_ReadBit
     545/     5E0 : D000                        add.b   d0,d0                                   ; Get a bit from the bitstream.
     546/     5E2 : 6500 00F0           	bcs.w	.Code_01
     547/     5E6 :                     
     548/     5E6 :                     	; Code 00 (Dictionary ref. short).
     549/     5E6 : (MACRO)             	_Kos_RunBitStream
     549/     5E6 : 51CA 0016                   dbra    d2,.skip
     549/     5EA : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     549/     5EC : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     549/     5EE : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     549/     5F0 : 660C                        bne.s   .skip                                   ; Branch if not.
     549/     5F2 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     549/     5F4 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     549/     5F6 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     549/     5FA : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     549/     5FE :                     .skip
     550/     5FE : (MACRO)             	_Kos_ReadBit
     550/     5FE : D000                        add.b   d0,d0                                   ; Get a bit from the bitstream.
     551/     600 : 6564                	bcs.s	.Copy45
     552/     602 : (MACRO)             	_Kos_RunBitStream
     552/     602 : 51CA 0016                   dbra    d2,.skip
     552/     606 : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     552/     608 : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     552/     60A : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     552/     60C : 660C                        bne.s   .skip                                   ; Branch if not.
     552/     60E : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     552/     610 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     552/     612 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     552/     616 : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     552/     61A :                     .skip
     553/     61A : (MACRO)             	_Kos_ReadBit
     553/     61A : D000                        add.b   d0,d0                                   ; Get a bit from the bitstream.
     554/     61C : 6522                	bcs.s	.Copy3
     555/     61E : (MACRO)             	_Kos_RunBitStream
     555/     61E : 51CA 0016                   dbra    d2,.skip
     555/     622 : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     555/     624 : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     555/     626 : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     555/     628 : 660C                        bne.s   .skip                                   ; Branch if not.
     555/     62A : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     555/     62C : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     555/     62E : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     555/     632 : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     555/     636 :                     .skip
     556/     636 : 1A18                	move.b	(a0)+,d5				; d5 = displacement.
     557/     638 : DAC5                	adda.w	d5,a5
     558/     63A : 12DD                	move.b	(a5)+,(a1)+
     559/     63C : 12DD                	move.b	(a5)+,(a1)+
     560/     63E : 6080                	bra.s	.FetchNewCode
     561/     640 :                     ; ---------------------------------------------------------------------------
     562/     640 :                     .Copy3:
     563/     640 : (MACRO)             	_Kos_RunBitStream
     563/     640 : 51CA 0016                   dbra    d2,.skip
     563/     644 : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     563/     646 : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     563/     648 : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     563/     64A : 660C                        bne.s   .skip                                   ; Branch if not.
     563/     64C : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     563/     64E : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     563/     650 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     563/     654 : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     563/     658 :                     .skip
     564/     658 : 1A18                	move.b	(a0)+,d5				; d5 = displacement.
     565/     65A : DAC5                	adda.w	d5,a5
     566/     65C : 12DD                	move.b	(a5)+,(a1)+
     567/     65E : 12DD                	move.b	(a5)+,(a1)+
     568/     660 : 12DD                	move.b	(a5)+,(a1)+
     569/     662 : 6000 FF5C           	bra.w	.FetchNewCode
     570/     666 :                     ; ---------------------------------------------------------------------------
     571/     666 :                     .Copy45:
     572/     666 : (MACRO)             	_Kos_RunBitStream
     572/     666 : 51CA 0016                   dbra    d2,.skip
     572/     66A : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     572/     66C : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     572/     66E : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     572/     670 : 660C                        bne.s   .skip                                   ; Branch if not.
     572/     672 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     572/     674 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     572/     676 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     572/     67A : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     572/     67E :                     .skip
     573/     67E : (MACRO)             	_Kos_ReadBit
     573/     67E : D000                        add.b   d0,d0                                   ; Get a bit from the bitstream.
     574/     680 : 6528                	bcs.s	.Copy5
     575/     682 : (MACRO)             	_Kos_RunBitStream
     575/     682 : 51CA 0016                   dbra    d2,.skip
     575/     686 : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     575/     688 : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     575/     68A : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     575/     68C : 660C                        bne.s   .skip                                   ; Branch if not.
     575/     68E : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     575/     690 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     575/     692 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     575/     696 : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     575/     69A :                     .skip
     576/     69A : 1A18                	move.b	(a0)+,d5				; d5 = displacement.
     577/     69C : DAC5                	adda.w	d5,a5
     578/     69E : 12DD                	move.b	(a5)+,(a1)+
     579/     6A0 : 12DD                	move.b	(a5)+,(a1)+
     580/     6A2 : 12DD                	move.b	(a5)+,(a1)+
     581/     6A4 : 12DD                	move.b	(a5)+,(a1)+
     582/     6A6 : 6000 FF18           	bra.w	.FetchNewCode
     583/     6AA :                     ; ---------------------------------------------------------------------------
     584/     6AA :                     .Copy5:
     585/     6AA : (MACRO)             	_Kos_RunBitStream
     585/     6AA : 51CA 0016                   dbra    d2,.skip
     585/     6AE : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     585/     6B0 : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     585/     6B2 : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     585/     6B4 : 660C                        bne.s   .skip                                   ; Branch if not.
     585/     6B6 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     585/     6B8 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     585/     6BA : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     585/     6BE : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     585/     6C2 :                     .skip
     586/     6C2 : 1A18                	move.b	(a0)+,d5				; d5 = displacement.
     587/     6C4 : DAC5                	adda.w	d5,a5
     588/     6C6 : 12DD                	move.b	(a5)+,(a1)+
     589/     6C8 : 12DD                	move.b	(a5)+,(a1)+
     590/     6CA : 12DD                	move.b	(a5)+,(a1)+
     591/     6CC : 12DD                	move.b	(a5)+,(a1)+
     592/     6CE : 12DD                	move.b	(a5)+,(a1)+
     593/     6D0 : 6000 FEEE           	bra.w	.FetchNewCode
     594/     6D4 :                     ; ---------------------------------------------------------------------------
     619/     6D4 :                     ; ---------------------------------------------------------------------------
     620/     6D4 :                     .Code_01:
     621/     6D4 : 7800                	moveq	#0,d4					; d4 will contain copy count.
     622/     6D6 :                     	; Code 01 (Dictionary ref. long / special).
     623/     6D6 : (MACRO)             	_Kos_RunBitStream
     623/     6D6 : 51CA 0016                   dbra    d2,.skip
     623/     6DA : 7407                        moveq   #7,d2                                   ; Set repeat count to 8.
     623/     6DC : 1001                        move.b  d1,d0                                   ; Use the remaining 8 bits.
     623/     6DE : 4643                        not.w   d3                                              ; Have all 16 bits been used up?
     623/     6E0 : 660C                        bne.s   .skip                                   ; Branch if not.
     623/     6E2 : 1018                        move.b  (a0)+,d0                                ; Get desc field low-byte.
     623/     6E4 : 1218                        move.b  (a0)+,d1                                ; Get desc field hi-byte.
     623/     6E6 : 1034 0000                   move.b  (a4,d0.w),d0                    ; Invert bit order...
     623/     6EA : 1234 1000                   move.b  (a4,d1.w),d1                    ; ... for both bytes.
     623/     6EE :                     .skip
     624/     6EE : 1C18                	move.b	(a0)+,d6				; d6 = %LLLLLLLL.
     625/     6F0 : 1818                	move.b	(a0)+,d4				; d4 = %HHHHHCCC.
     626/     6F2 : 1A04                	move.b	d4,d5					; d5 = %11111111 HHHHHCCC.
     627/     6F4 : EB4D                	lsl.w	#5,d5					; d5 = %111HHHHH CCC00000.
     628/     6F6 : 1A06                	move.b	d6,d5					; d5 = %111HHHHH LLLLLLLL.
     630/     6F8 : C847                	and.w	d7,d4					; d4 = %00000CCC.
     634/     6FA : 6634                	bne.s	.StreamCopy				; if CCC=0, branch.
     635/     6FC :                     
     636/     6FC :                     	; special mode (extended counter)
     637/     6FC : 1818                	move.b	(a0)+,d4				; Read cnt
     638/     6FE : 6750                	beq.s	.Quit					; If cnt=0, quit decompression.
     639/     700 : 5304                	subq.b	#1,d4
     640/     702 : 6700 FEBC           	beq.w	.FetchNewCode			; If cnt=1, fetch a new code.
     641/     706 :                     
     642/     706 : DAC5                	adda.w	d5,a5
     643/     708 : 12DD                	move.b	(a5)+,(a1)+				; Do 1 extra copy (to compensate +1 to copy counter).
     644/     70A : 3C04                	move.w	d4,d6
     645/     70C : 4646                	not.w	d6
     646/     70E : CC47                	and.w	d7,d6
     647/     710 : DC46                	add.w	d6,d6
     648/     712 : E64C                	lsr.w	#_Kos_LoopUnroll,d4
     649/     714 : 4EFB 6002           	jmp	.largecopy(pc,d6.w)
     650/     718 :                     ; ---------------------------------------------------------------------------
     651/     718 :                     .largecopy:
     652/     718 :                     	rept (1<<_Kos_LoopUnroll)
     653/     718 :                     	move.b	(a5)+,(a1)+
     654/     718 :                     	endm
     653/     718 : 12DD                	move.b	(a5)+,(a1)+
     653/     71A : 12DD                	move.b	(a5)+,(a1)+
     653/     71C : 12DD                	move.b	(a5)+,(a1)+
     653/     71E : 12DD                	move.b	(a5)+,(a1)+
     653/     720 : 12DD                	move.b	(a5)+,(a1)+
     653/     722 : 12DD                	move.b	(a5)+,(a1)+
     653/     724 : 12DD                	move.b	(a5)+,(a1)+
     653/     726 : 12DD                	move.b	(a5)+,(a1)+
     655/     728 : 51CC FFEE           	dbra	d4,.largecopy
     656/     72C : 6000 FE92           	bra.w	.FetchNewCode
     657/     730 :                     ; ---------------------------------------------------------------------------
     659/     730 :                     .StreamCopy:
     660/     730 : DAC5                	adda.w	d5,a5
     661/     732 : 12DD                	move.b	(a5)+,(a1)+				; Do 1 extra copy (to compensate +1 to copy counter).
     663/     734 : BF44                	eor.w	d7,d4
     667/     736 : D844                	add.w	d4,d4
     668/     738 : 4EFB 4002           	jmp	.mediumcopy(pc,d4.w)
     669/     73C :                     ; ---------------------------------------------------------------------------
     670/     73C :                     .mediumcopy:
     671/     73C :                     	rept 8
     672/     73C :                     	move.b	(a5)+,(a1)+
     673/     73C :                     	endm
     672/     73C : 12DD                	move.b	(a5)+,(a1)+
     672/     73E : 12DD                	move.b	(a5)+,(a1)+
     672/     740 : 12DD                	move.b	(a5)+,(a1)+
     672/     742 : 12DD                	move.b	(a5)+,(a1)+
     672/     744 : 12DD                	move.b	(a5)+,(a1)+
     672/     746 : 12DD                	move.b	(a5)+,(a1)+
     672/     748 : 12DD                	move.b	(a5)+,(a1)+
     672/     74A : 12DD                	move.b	(a5)+,(a1)+
     674/     74C : 6000 FE72           	bra.w	.FetchNewCode
     676/     750 :                     ; ---------------------------------------------------------------------------
     677/     750 :                     .Quit:
     678/     750 : 4E75                	rts	
     679/     752 :                     ; End of function KosDec
     680/     752 :                     ; ===========================================================================
     682/     752 :                     KosDec_ByteMap:
     683/     752 : 0080 40C0 20A0      	dc.b	$00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
                    60E0 1090 50D0 
                    30B0 70F0          
     684/     762 : 0888 48C8 28A8      	dc.b	$08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
                    68E8 1898 58D8 
                    38B8 78F8          
     685/     772 : 0484 44C4 24A4      	dc.b	$04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
                    64E4 1494 54D4 
                    34B4 74F4          
     686/     782 : 0C8C 4CCC 2CAC      	dc.b	$0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
                    6CEC 1C9C 5CDC 
                    3CBC 7CFC          
     687/     792 : 0282 42C2 22A2      	dc.b	$02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
                    62E2 1292 52D2 
                    32B2 72F2          
     688/     7A2 : 0A8A 4ACA 2AAA      	dc.b	$0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
                    6AEA 1A9A 5ADA 
                    3ABA 7AFA          
     689/     7B2 : 0686 46C6 26A6      	dc.b	$06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
                    66E6 1696 56D6 
                    36B6 76F6          
     690/     7C2 : 0E8E 4ECE 2EAE      	dc.b	$0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
                    6EEE 1E9E 5EDE 
                    3EBE 7EFE          
     691/     7D2 : 0181 41C1 21A1      	dc.b	$01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
                    61E1 1191 51D1 
                    31B1 71F1          
     692/     7E2 : 0989 49C9 29A9      	dc.b	$09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
                    69E9 1999 59D9 
                    39B9 79F9          
     693/     7F2 : 0585 45C5 25A5      	dc.b	$05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
                    65E5 1595 55D5 
                    35B5 75F5          
     694/     802 : 0D8D 4DCD 2DAD      	dc.b	$0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
                    6DED 1D9D 5DDD 
                    3DBD 7DFD          
     695/     812 : 0383 43C3 23A3      	dc.b	$03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
                    63E3 1393 53D3 
                    33B3 73F3          
     696/     822 : 0B8B 4BCB 2BAB      	dc.b	$0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
                    6BEB 1B9B 5BDB 
                    3BBB 7BFB          
     697/     832 : 0787 47C7 27A7      	dc.b	$07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
                    67E7 1797 57D7 
                    37B7 77F7          
     698/     842 : 0F8F 4FCF 2FAF      	dc.b	$0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
                    6FEF 1F9F 5FDF 
                    3FBF 7FFF          
     700/     852 :                     ; ===========================================================================
     701/     852 :                     
     702/     852 :                     ; ---------------------------------------------------------------------------
     703/     852 :                     
     704/     852 :                     	; sound driver
     705/     852 :                     	include "Sound/Flamedriver/Flamedriver.asm"
(1)    1/     852 :                     ; ---------------------------------------------------------------------------
(1)    2/     852 :                     ; ===========================================================================
(1)    3/     852 :                     ; |                                                                         |
(1)    4/     852 :                     ; |	                        SONIC&K SOUND DRIVER                            |
(1)    5/     852 :                     ; |                                                                         |
(1)    6/     852 :                     ; ===========================================================================
(1)    7/     852 :                     ; Disassembled by MarkeyJester
(1)    8/     852 :                     ; Routines, pointers and stuff by Linncaki
(1)    9/     852 :                     ; Thoroughly commented and improved by Flamewing
(1)   10/     852 :                     ; ===========================================================================
(1)   11/     852 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)   12/     852 :                     ; purpose with or without fee is hereby granted.
(1)   13/     852 :                     ;
(1)   14/     852 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)   15/     852 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)   16/     852 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   17/     852 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   18/     852 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   19/     852 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   20/     852 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   21/     852 :                     ; ===========================================================================
(1)   22/     852 :                     ; Constants
(1)   23/     852 :                     ; ===========================================================================
(1)   24/     852 :                     
(1)   25/     852 :                     ; Used by SMPS2ASM include file.
(1)   26/     852 : =$5                 SonicDriverVer			= 5
(1)   27/     852 :                     ; Set the following to non-zero to use all S2 DAC samples, or to zero otherwise.
(1)   28/     852 :                     ; The S1 samples are a subset of this.
(1)   29/     852 : =$1                 use_s2_samples			= 1
(1)   30/     852 :                     ; Set the following to non-zero to use all S3D DAC samples, or to zero
(1)   31/     852 :                     ; otherwise. Most of the S3D samples are also present in S3/S&K, but
(1)   32/     852 :                     ; there are two samples specific to S3D.
(1)   33/     852 : =$1                 use_s3d_samples			= 1
(1)   34/     852 :                     ; Set the following to non-zero to use all S3 DAC samples,
(1)   35/     852 :                     ; or to zero otherwise.
(1)   36/     852 : =$1                 use_s3_samples			= 1
(1)   37/     852 :                     ; Set the following to non-zero to use all S&K DAC samples,
(1)   38/     852 :                     ; or to zero otherwise.
(1)   39/     852 : =$1                 use_sk_samples			= 1
(1)   40/     852 :                     
(1)   41/     852 :                     ; ---------------------------------------------------------------------------
(1)   42/     852 :                     
(1)   43/     852 :                     z80_SoundDriverStart:
(1)   44/     852 :                     
(1)   45/     852 :                     ; ---------------------------------------------------------------------------
(1)   46/       0 :                     zTrack STRUCT DOTS
(1)   47/       0 :                     	; Playback control bits:
(1)   48/       0 :                     	; 	0 (01h)		Noise channel (PSG) or FM3 special mode (FM)
(1)   49/       0 :                     	; 	1 (02h)		Do not attack next note
(1)   50/       0 :                     	; 	2 (04h)		SFX is overriding this track
(1)   51/       0 :                     	; 	3 (08h)		'Alternate frequency mode' flag
(1)   52/       0 :                     	; 	4 (10h)		'Track is resting' flag
(1)   53/       0 :                     	; 	5 (20h)		'Pitch slide' flag
(1)   54/       0 :                     	; 	6 (40h)		'Sustain frequency' flag -- prevents frequency from changing again for the lifetime of the track
(1)   55/       0 :                     	; 	7 (80h)		Track is playing
(1)   56/       0 :                     	PlaybackControl:	ds.b 1	; S&K: 0
(1)   57/       1 :                     	; Voice control bits:
(1)   58/       1 :                     	; 	0-1    		FM channel assignment bits (00 = FM1 or FM4, 01 = FM2 or FM5, 10 = FM3 or FM6/DAC, 11 = invalid)
(1)   59/       1 :                     	; 	2 (04h)		For FM/DAC channels, selects if reg/data writes are bound for part II (set) or part I (unset)
(1)   60/       1 :                     	; 	3 (08h)		Unknown/unused
(1)   61/       1 :                     	; 	4 (10h)		Unknown/unused
(1)   62/       1 :                     	; 	5-6    		PSG Channel assignment bits (00 = PSG1, 01 = PSG2, 10 = PSG3, 11 = Noise)
(1)   63/       1 :                     	; 	7 (80h)		PSG track if set, FM or DAC track otherwise
(1)   64/       1 :                     	VoiceControl:		ds.b 1	; S&K: 1
(1)   65/       2 :                     	TempoDivider:		ds.b 1	; S&K: 2
(1)   66/       3 :                     	DataPointerLow:		ds.b 1	; S&K: 3
(1)   67/       4 :                     	DataPointerHigh:	ds.b 1	; S&K: 4
(1)   68/       5 :                     	Transpose:			ds.b 1	; S&K: 5
(1)   69/       6 :                     	Volume:				ds.b 1	; S&K: 6
(1)   70/       7 :                     	ModulationCtrl:		ds.b 1	; S&K: 7		; Modulation is on if nonzero. If only bit 7 is set, then it is normal modulation; otherwise, this-1 is index on modulation envelope pointer table
(1)   71/       8 :                     	VoiceIndex:			ds.b 1	; S&K: 8		; FM instrument/PSG voice
(1)   72/       9 :                     	StackPointer:		ds.b 1	; S&K: 9		; For call subroutine coordination flag
(1)   73/       A :                     	AMSFMSPan:			ds.b 1	; S&K: 0Ah
(1)   74/       B :                     	DurationTimeout:	ds.b 1	; S&K: 0Bh
(1)   75/       C :                     	SavedDuration:		ds.b 1	; S&K: 0Ch		; Already multiplied by timing divisor
(1)   76/       D :                     	; ---------------------------------
(1)   77/       D :                     	; Alternate names for same offset:
(1)   78/       D :                     	SavedDAC:					; S&K: 0Dh		; For DAC channel
(1)   79/       D :                     	FreqLow:			ds.b 1	; S&K: 0Dh		; For FM/PSG channels
(1)   80/       E :                     	; ---------------------------------
(1)   81/       E :                     	FreqHigh:			ds.b 1	; S&K: 0Eh		; For FM/PSG channels
(1)   82/       F :                     	VoiceSongID:		ds.b 1	; S&K: 0Fh		; For using voices from a different song
(1)   83/      10 :                     	DACSFXPlaying:
(1)   84/      10 :                     	Detune:				ds.b 1	; S&K: 10h/11h	; In S&K, some places used 11h instead of 10h
(1)   85/      11 :                     	VolEnv:				ds.b 1	; S&K: 17h		; Used for dynamic volume adjustments
(1)   86/      12 :                     	; ---------------------------------
(1)   87/      12 :                     	; Alternate names for same offsets:
(1)   88/      12 :                     	FMVolEnv:					; S&K: 18h
(1)   89/      12 :                     	HaveSSGEGFlag:		ds.b 1	; S&K: 18h		; For FM channels, if track has SSG-EG data
(1)   90/      13 :                     	FMVolEnvMask:				; S&K: 19h
(1)   91/      13 :                     	SSGEGPointerLow:	ds.b 1	; S&K: 19h		; For FM channels, custom SSG-EG data pointer
(1)   92/      14 :                     	PSGNoise:					; S&K: 1Ah
(1)   93/      14 :                     	SSGEGPointerHigh:	ds.b 1	; S&K: 1Ah		; For FM channels, custom SSG-EG data pointer
(1)   94/      15 :                     	; ---------------------------------
(1)   95/      15 :                     	TLPtrLow:			ds.b 1	; S&K: 1Ch
(1)   96/      16 :                     	TLPtrHigh:			ds.b 1	; S&K: 1Dh
(1)   97/      17 :                     	NoteFillTimeout:	ds.b 1	; S&K: 1Eh
(1)   98/      18 :                     	NoteFillMaster:		ds.b 1	; S&K: 1Fh
(1)   99/      19 :                     	ModulationPtrLow:	ds.b 1	; S&K: 20h
(1)  100/      1A :                     	ModulationPtrHigh:	ds.b 1	; S&K: 21h
(1)  101/      1B :                     	; ---------------------------------
(1)  102/      1B :                     	; Alternate names for same offset:
(1)  103/      1B :                     	ModulationValLow:			; S&K: 22h
(1)  104/      1B :                     	ModEnvSens:			ds.b 1	; S&K: 22h
(1)  105/      1C :                     	; ---------------------------------
(1)  106/      1C :                     	ModulationValHigh:	ds.b 1	; S&K: 23h
(1)  107/      1D :                     	ModulationWait:		ds.b 1	; S&K: 24h
(1)  108/      1E :                     	; ---------------------------------
(1)  109/      1E :                     	; Alternate names for same offset:
(1)  110/      1E :                     	ModulationSpeed:			; S&K: 25h
(1)  111/      1E :                     	ModEnvIndex:		ds.b 1	; S&K: 25h
(1)  112/      1F :                     	; ---------------------------------
(1)  113/      1F :                     	ModulationDelta:	ds.b 1	; S&K: 26h
(1)  114/      20 :                     	ModulationSteps:	ds.b 1	; S&K: 27h
(1)  115/      21 :                     	LoopCounters:		ds.b 2	; S&K: 28h		; Might overflow into the following data
(1)  116/      23 :                     	VoicesLow:			ds.b 1	; S&K: 2Ah		; Low byte of pointer to track's voices, used only if zUpdatingSFX is set
(1)  117/      24 :                     	VoicesHigh:			ds.b 1	; S&K: 2Bh		; High byte of pointer to track's voices, used only if zUpdatingSFX is set
(1)  118/      25 :                     	Stack_top:			ds.b 4	; S&K: 2Ch-2Fh	; Track stack; can be used by LoopCounters
(1)  119/     852 : =$29                zTrack ENDSTRUCT
(1)  120/     852 :                     ; ---------------------------------------------------------------------------
(1)  121/     852 :                     ; Playback control bits:
(1)  122/     852 : =$0                 bitPSGNoise       = 0
(1)  123/     852 : =$0                 bitFM3Special     = 0
(1)  124/     852 : =$1                 bitNoAttack       = 1
(1)  125/     852 : =$2                 bitSFXOverride    = 2
(1)  126/     852 : =$3                 bitAltFreqMode    = 3
(1)  127/     852 : =$4                 bitTrackAtRest    = 4
(1)  128/     852 : =$5                 bitPitchSlide     = 5
(1)  129/     852 : =$6                 bitSustainFreq    = 6
(1)  130/     852 : =$7                 bitTrackPlaying   = 7
(1)  131/     852 : =$6                 maskSkipFMNoteOn  = (1<<bitNoAttack)|(1<<bitSFXOverride)|(1<<bitNoAttack)
(1)  132/     852 : =$6                 maskSkipFMNoteOff = (1<<bitSFXOverride)|(1<<bitNoAttack)
(1)  133/     852 : =$90                maskPlayRest      = (1<<bitTrackPlaying)|(1<<bitTrackAtRest)
(1)  134/     852 : =$14                maskFM6Unused     = (1<<bitSFXOverride)|(1<<bitTrackAtRest)
(1)  135/     852 :                     ; Voice control values:
(1)  136/     852 : =$0                 ymFM1      = 0
(1)  137/     852 : =$1                 ymFM2      = 1
(1)  138/     852 : =$2                 ymFM3      = 2
(1)  139/     852 : =$4                 ymFM4      = 4
(1)  140/     852 : =$5                 ymFM5      = 5
(1)  141/     852 : =$6                 ymFM6      = 6
(1)  142/     852 : =$6                 ymDAC      = 6
(1)  143/     852 : =$2                 ymPartII   = 2			; Bit value
(1)  144/     852 : =$0                 snPSGTone  = 0
(1)  145/     852 : =$10                snPSGVol   = $10
(1)  146/     852 : =$80                snPSG1     = $80
(1)  147/     852 : =$A0                snPSG2     = $A0
(1)  148/     852 : =$C0                snPSG3     = $C0
(1)  149/     852 : =$E0                snNoise    = $E0
(1)  150/     852 : =$7                 bitIsPSG   = 7			; Bit value
(1)  151/     852 :                     ; ---------------------------------------------------------------------------
(1)  152/     852 :                     ; equates: standard (for Genesis games) addresses in the memory map
(1)  153/     852 : =$4000              zYM2612_A0				=	$4000
(1)  154/     852 : =$4001              zYM2612_D0				=	$4001
(1)  155/     852 : =$4002              zYM2612_A1				=	$4002
(1)  156/     852 : =$4003              zYM2612_D1				=	$4003
(1)  157/     852 : =$6000              zBankRegister			=	$6000
(1)  158/     852 : =$7F11              zPSG					=	$7F11
(1)  159/     852 : =$8000              zROMWindow				=	$8000
(1)  160/     852 :                     ; ---------------------------------------------------------------------------
(1)  161/     852 :                     ; YM2612 register equates
(1)  162/     852 : =$22                ymLFO                      = $22
(1)  163/     852 : =$7                 maskLFOFrequency           = 7
(1)  164/     852 : =$3                 bitLFOEnable               = 3
(1)  165/     852 :                     
(1)  166/     852 : =$24                ymTimerAFrequencyHigh      = $24
(1)  167/     852 : =$25                ymTimerAFrequencyLow       = $25
(1)  168/     852 :                     
(1)  169/     852 : =$26                ymTimerBFrequency          = $26
(1)  170/     852 :                     
(1)  171/     852 : =$27                ymTimerControlFm3Mode      = $27
(1)  172/     852 : =$0                 maskFM3Normal              = 0
(1)  173/     852 : =$40                maskFM3Special             = $40
(1)  174/     852 : =$0                 bitTimerALoad              = 0
(1)  175/     852 : =$1                 bitTimerBLoad              = 1
(1)  176/     852 : =$2                 bitTimerAEnable            = 2
(1)  177/     852 : =$3                 bitTimerBEnable            = 3
(1)  178/     852 : =$4                 bitTimerAReset             = 4
(1)  179/     852 : =$5                 bitTimerBReset             = 5
(1)  180/     852 : =$F                 maskEnableLoadTimers       = (1<<bitTimerBEnable)|(1<<bitTimerAEnable)|(1<<bitTimerBLoad)|(1<<bitTimerALoad)
(1)  181/     852 :                     
(1)  182/     852 : =$28                ymKeyOnOff                 = $28
(1)  183/     852 : =$4                 bitOperator1               = 4
(1)  184/     852 : =$5                 bitOperator2               = 5
(1)  185/     852 : =$6                 bitOperator3               = 6
(1)  186/     852 : =$7                 bitOperator4               = 7
(1)  187/     852 : =$F0                maskAllOperators           = (1<<bitOperator4)|(1<<bitOperator3)|(1<<bitOperator2)|(1<<bitOperator1)
(1)  188/     852 :                     
(1)  189/     852 : =$2A                ymDACPCM                   = $2A
(1)  190/     852 : =$2B                ymDACEnable                = $2B
(1)  191/     852 : =$0                 maskDACDisable             = 0
(1)  192/     852 : =$80                maskDACEnable              = $80
(1)  193/     852 :                     
(1)  194/     852 : =$30                ymDetuneMultiply1          = $30
(1)  195/     852 : =$34                ymDetuneMultiply2          = $34
(1)  196/     852 : =$38                ymDetuneMultiply3          = $38
(1)  197/     852 : =$3C                ymDetuneMultiply4          = $3C
(1)  198/     852 :                     
(1)  199/     852 : =$40                ymTotalLevel1              = $40
(1)  200/     852 : =$44                ymTotalLevel2              = $44
(1)  201/     852 : =$48                ymTotalLevel3              = $48
(1)  202/     852 : =$4C                ymTotalLevel4              = $4C
(1)  203/     852 :                     
(1)  204/     852 : =$50                ymRateScaleAttackRate1     = $50
(1)  205/     852 : =$54                ymRateScaleAttackRate2     = $54
(1)  206/     852 : =$58                ymRateScaleAttackRate3     = $58
(1)  207/     852 : =$5C                ymRateScaleAttackRate4     = $5C
(1)  208/     852 : =$1F                maskAttackRate             = $1F
(1)  209/     852 : =$1F                maxAttackRate              = maskAttackRate
(1)  210/     852 : =$C0                maskRateScale              = $C0
(1)  211/     852 :                     
(1)  212/     852 : =$60                ymAMDecayRate1             = $60
(1)  213/     852 : =$64                ymAMDecayRate2             = $64
(1)  214/     852 : =$68                ymAMDecayRate3             = $68
(1)  215/     852 : =$6C                ymAMDecayRate4             = $6C
(1)  216/     852 :                     
(1)  217/     852 : =$70                ymSustainRate1             = $70
(1)  218/     852 : =$74                ymSustainRate2             = $74
(1)  219/     852 : =$78                ymSustainRate3             = $78
(1)  220/     852 : =$7C                ymSustainRate4             = $7C
(1)  221/     852 :                     
(1)  222/     852 : =$80                ymSustainLevelReleaseRate1 = $80
(1)  223/     852 : =$84                ymSustainLevelReleaseRate2 = $84
(1)  224/     852 : =$88                ymSustainLevelReleaseRate3 = $88
(1)  225/     852 : =$8C                ymSustainLevelReleaseRate4 = $8C
(1)  226/     852 : =$F                 maskReleaseRate            = $F
(1)  227/     852 : =$F                 maxReleaseRate             = maskReleaseRate
(1)  228/     852 : =$F0                maskSustainLevel           = $F0
(1)  229/     852 : =$F0                maxSustainLevel            = maskSustainLevel
(1)  230/     852 :                     
(1)  231/     852 : =$90                ymSSGEG1                   = $90
(1)  232/     852 : =$94                ymSSGEG2                   = $94
(1)  233/     852 : =$98                ymSSGEG3                   = $98
(1)  234/     852 : =$9C                ymSSGEG4                   = $9C
(1)  235/     852 : =$7                 maskSSGEGEnvelopeShape     = 7
(1)  236/     852 : =$3                 bitSSGEGEnable             = 3
(1)  237/     852 : =$8                 maskSSGEGEnable            = 1<<bitSSGEGEnable
(1)  238/     852 :                     
(1)  239/     852 : =$A0                ymFrequencyLow             = $A0
(1)  240/     852 : =$A4                ymFrequencyHigh            = $A4
(1)  241/     852 : =$A9                ymCH3FrequencyLow1         = $A9
(1)  242/     852 : =$AA                ymCH3FrequencyLow2         = $AA
(1)  243/     852 : =$A8                ymCH3FrequencyLow3         = $A8
(1)  244/     852 : =$A2                ymCH3FrequencyLow4         = $A2
(1)  245/     852 : =$AD                ymCH3FrequencyHigh1        = $AD
(1)  246/     852 : =$AE                ymCH3FrequencyHigh2        = $AE
(1)  247/     852 : =$AC                ymCH3FrequencyHigh3        = $AC
(1)  248/     852 : =$A6                ymCH3FrequencyHigh4        = $A6
(1)  249/     852 :                     
(1)  250/     852 : =$B0                ymAlgorithmFeedback        = $B0
(1)  251/     852 : =$7                 maskAlgorithm              = 7
(1)  252/     852 : =$38                maskFeedback               = $38
(1)  253/     852 :                     
(1)  254/     852 : =$B4                ymPanningAMSensFMSens      = $B4
(1)  255/     852 : =$7                 maskFMSensitivity          = 7
(1)  256/     852 : =$30                maskAMSensitivity          = $30
(1)  257/     852 : =$6                 bitOutputRight             = 6
(1)  258/     852 : =$7                 bitOutputLeft              = 7
(1)  259/     852 : =$C0                maskPanning                = $C0
(1)  260/     852 :                     ; ---------------------------------------------------------------------------
(1)  261/     852 :                     ; Envelope-related constants
(1)  262/     852 : =$80                ModEnvReset     = $80
(1)  263/     852 : =$81                ModEnvSustain1  = $81
(1)  264/     852 : =$82                ModEnvJumpTo    = $82
(1)  265/     852 : =$83                ModEnvSustain   = $83
(1)  266/     852 : =$84                ModEnvAlterSens = $84
(1)  267/     852 :                     
(1)  268/     852 : =$80                VolEnvReset     = $80
(1)  269/     852 : =$81                VolEnvRestTrack = $81
(1)  270/     852 : =$82                VolEnvJumpTo    = $82
(1)  271/     852 : =$83                VolEnvStopTrack = $83
(1)  272/     852 :                     ; ---------------------------------------------------------------------------
(1)  273/     852 :                     ; z80 RAM:
(1)  274/     852 : =$1C1A              zDataStart				=	$1C1A
(1)  275/    1C1A :                     		phase zDataStart
(1)  276/    1C1A :                     z80_stack_top:		ds.b $60
(1)  277/    1C7A :                     z80_stack:
(1)  278/    1C7A :                     zDACEnable:			ds.b 1
(1)  279/    1C7B :                     zDACEnableSave:		ds.b 1
(1)  280/    1C7C :                     zSpecFM3Freqs:		ds.b 8
(1)  281/    1C84 :                     zSpecFM3FreqsSFX:	ds.b 8
(1)  282/    1C8C :                     zQueueVariables:
(1)  283/    1C8C :                     zPalFlag:			ds.b 1
(1)  284/    1C8D :                     zPalDblUpdCounter:	ds.b 1
(1)  285/    1C8E :                     zSoundQueue0:		ds.b 1
(1)  286/    1C8F :                     zSoundQueue1:		ds.b 1
(1)  287/    1C90 :                     zSoundQueue2:		ds.b 1
(1)  288/    1C91 :                     zTempoSpeedup:		ds.b 1
(1)  289/    1C92 :                     zTempoSpeedupReq:	ds.b 1
(1)  290/    1C93 :                     zNextSound:			ds.b 1
(1)  291/    1C94 :                     ; The following 3 variables are used for M68K input
(1)  292/    1C94 :                     zMusicNumber:		ds.b 1	; Play_Sound
(1)  293/    1C95 :                     zSFXNumber0:		ds.b 1	; Play_Sound_2
(1)  294/    1C96 :                     zSFXNumber1:		ds.b 1	; Play_Sound_2
(1)  295/    1C97 :                     	shared zQueueVariables,zMusicNumber,zSFXNumber0,zSFXNumber1
(1)  299/    1C97 :                     zContinuousSFX:		ds.b 1
(1)  300/    1C98 :                     zContinuousSFXFlag:	ds.b 1
(1)  301/    1C99 :                     zContSFXLoopCnt:	ds.b 1	; Used as a loop counter for continuous SFX
(1)  302/    1C9A :                     zFadeOutTimeout:	ds.b 1
(1)  303/    1C9B :                     zFadeDelay:			ds.b 1
(1)  304/    1C9C :                     zFadeDelayTimeout:	ds.b 1
(1)  305/    1C9D :                     zPauseFlag:			ds.b 1
(1)  306/    1C9E :                     zHaltFlag:			ds.b 1
(1)  307/    1C9F :                     zTempoAccumulator:	ds.b 1
(1)  308/    1CA0 :                     zFadeToPrevFlag:	ds.b 1
(1)  309/    1CA1 :                     zUpdatingSFX:		ds.b 1
(1)  310/    1CA2 :                     zCurrentTempo:		ds.b 1
(1)  311/    1CA3 :                     zSpindashRev:		ds.b 1
(1)  312/    1CA4 :                     zRingSpeaker:		ds.b 1
(1)  313/    1CA5 :                     zFadeInTimeout:		ds.b 1
(1)  314/    1CA6 :                     zVoiceTblPtrSave:	ds.b 2	; For 1-up
(1)  315/    1CA8 :                     zCurrentTempoSave:	ds.b 1	; For 1-up
(1)  316/    1CA9 :                     zSongBankSave:		ds.b 1	; For 1-up
(1)  317/    1CAA :                     zTempoSpeedupSave:	ds.b 1	; For 1-up
(1)  318/    1CAB :                     zSpeedupTimeout:	ds.b 1
(1)  319/    1CAC :                     zDACIndex:			ds.b 1	; bit 7 = 1 if playing, 0 if not; remaining 7 bits are index into DAC tables (1-based)
(1)  320/    1CAD :                     zSongPosition:		ds.b 2
(1)  321/    1CAF :                     zTrackInitPos:		ds.b 2	; 2 bytes
(1)  322/    1CB1 :                     zVoiceTblPtr:		ds.b 2	; 2 bytes
(1)  323/    1CB3 :                     zSongBank:			ds.b 1	; Bits 15 to 22 of M68K bank address
(1)  324/    1CB4 :                     PlaySegaPCMFlag:	ds.b 1
(1)  325/    1CB5 :                     zSFXVoiceTblPtr:	ds.b 2	; 2 bytes
(1)  326/    1CB7 :                     zSFXTempoDivider:	ds.b 1
(1)  327/    1CB8 :                     ; Now starts song and SFX z80 RAM
(1)  328/    1CB8 :                     ; Max number of music channels: 6 FM + 3 PSG or 1 DAC + 5 FM + 3 PSG
(1)  329/    1CB8 :                     zTracksStart:
(1)  330/    1CB8 : (STRUCT)            zSongDAC:		zTrack
(1)  331/    1CE1 : (STRUCT)            zSongFM1:		zTrack
(1)  332/    1D0A : (STRUCT)            zSongFM2:		zTrack
(1)  333/    1D33 : (STRUCT)            zSongFM3:		zTrack
(1)  334/    1D5C : (STRUCT)            zSongFM4:		zTrack
(1)  335/    1D85 : (STRUCT)            zSongFM5:		zTrack
(1)  336/    1DAE : (STRUCT)            zSongFM6:		zTrack
(1)  337/    1DD7 : (STRUCT)            zSongPSG1:		zTrack
(1)  338/    1E00 : (STRUCT)            zSongPSG2:		zTrack
(1)  339/    1E29 : (STRUCT)            zSongPSG3:		zTrack
(1)  340/    1E52 :                     zTracksEnd:
(1)  341/    1E52 :                     ; This is RAM for backup of songs (when 1-up jingle is playing)
(1)  342/    1E52 :                     ; and for SFX channels. Note these two overlap.
(1)  343/    1E52 :                     ; Max number of SFX channels: 4 FM + 3 PSG
(1)  344/    1E52 :                     zTracksSFXStart:
(1)  345/    1E52 : (STRUCT)            zSFX_FM3:		zTrack
(1)  346/    1E7B : (STRUCT)            zSFX_FM4:		zTrack
(1)  347/    1EA4 : (STRUCT)            zSFX_FM5:		zTrack
(1)  348/    1ECD : (STRUCT)            zSFX_FM6:		zTrack
(1)  349/    1EF6 : (STRUCT)            zSFX_PSG1:		zTrack
(1)  350/    1F1F : (STRUCT)            zSFX_PSG2:		zTrack
(1)  351/    1F48 : (STRUCT)            zSFX_PSG3:		zTrack
(1)  352/    1F71 :                     zTracksSFXEnd:
(1)  353/     BA9 :                     		dephase
(1)  354/    1E52 :                     		phase zTracksSFXStart
(1)  355/    1E52 :                     zTracksSaveStart:
(1)  356/    1E52 : (STRUCT)            zSaveSongDAC:	zTrack
(1)  357/    1E7B : (STRUCT)            zSaveSongFM1:	zTrack
(1)  358/    1EA4 : (STRUCT)            zSaveSongFM2:	zTrack
(1)  359/    1ECD : (STRUCT)            zSaveSongFM3:	zTrack
(1)  360/    1EF6 : (STRUCT)            zSaveSongFM4:	zTrack
(1)  361/    1F1F : (STRUCT)            zSaveSongFM5:	zTrack
(1)  362/    1F48 : (STRUCT)            zSaveSongFM6:	zTrack
(1)  363/    1F71 : (STRUCT)            zSaveSongPSG1:	zTrack
(1)  364/    1F9A : (STRUCT)            zSaveSongPSG2:	zTrack
(1)  365/    1FC3 : (STRUCT)            zSaveSongPSG3:	zTrack
(1)  366/    1FEC :                     zTracksSaveEnd:
(1)  373/     D43 :                     		dephase
(1)  374/     D43 : =$A                 zNumMusicTracks = (zTracksEnd-zTracksStart)/zTrack.len
(1)  375/     D43 : =$9                 zNumMusicFMorPSGTracks = (zTracksEnd-zSongFM1)/zTrack.len
(1)  376/     D43 : =$7                 zNumMusicFMorDACTracks = (zSongPSG1-zTracksStart)/zTrack.len
(1)  377/     D43 : =$6                 zNumMusicFMTracks = (zSongPSG1-zSongFM1)/zTrack.len
(1)  378/     D43 : =$3                 zNumMusicFM1Tracks = (zSongFM4-zSongFM1)/zTrack.len
(1)  379/     D43 : =$3                 zNumMusicFM2Tracks = (zSongPSG1-zSongFM4)/zTrack.len
(1)  380/     D43 : =$3                 zNumMusicPSGTracks = (zTracksEnd-zSongPSG1)/zTrack.len
(1)  381/     D43 : =$7                 zNumSFXTracks = (zTracksSFXEnd-zTracksSFXStart)/zTrack.len
(1)  382/     D43 : =$A                 zNumSaveTracks = (zTracksSaveEnd-zTracksSaveStart)/zTrack.len
(1)  383/     D43 :                     ; ---------------------------------------------------------------------------
(1)  384/     852 :                     		!org z80_SoundDriverStart
(1)  385/     852 :                     z80_SoundDriver:
(1)  386/     852 :                     		save
(1)  387/       0 :                     		!org	0							; z80 Align, handled by the build process
(1)  388/       0 :                     		CPU Z80
(1)  389/       0 :                     		listing purecode
(1)  390/       0 :                     ; ---------------------------------------------------------------------------
(1)  393/       0 : =1H                 MusID__First			= Mus__First
(1)  403/       0 :                     
(1)  406/       0 : =2AH                MusID_ExtraLife			= mus_ExtraLife
(1)  416/       0 :                     
(1)  419/       0 : =34H                MusID__End				= Mus__End
(1)  429/       0 :                     
(1)  440/       0 :                     
(1)  449/       0 : =33H                SndID__First			= sfx__First
You can gain more IDs for SFX by changing the the definition of the sfx__First constant to 1 (it is currently $33)
(1)  451/       0 :                     					message "You can gain more IDs for SFX by changing the the definition of the sfx__First constant to 1 (it is currently $\{sfx__First})"
(1)  461/       0 :                     
(1)  464/       0 : =33H                SndID_Ring				= sfx_RingRight
(1)  474/       0 :                     
(1)  477/       0 : =34H                SndID_RingLeft			= sfx_RingLeft
(1)  483/       0 :                     
(1)  485/       0 : =1H                 RingSoundsAdjacent := 1
(1)  490/       0 :                     
(1)  493/       0 : =0ABH               SndID_SpindashRev		= sfx_Spindash
(1)  504/       0 :                     
(1)  507/       0 : =0DFH               SndID__End				= sfx__End
(1)  517/       0 :                     
(1)  520/       0 : =0BCH               SndID__FirstContinuous	= sfx__FirstContinuous
(1)  525/       0 :                     
(1)  529/       0 :                     
(1)  534/       0 : =0DFH               DACID__First	= SndID__End
(1)  537/       0 :                     
(1)  542/       0 : =0DFH               DACID__End	= SndID__End
(1)  545/       0 :                     
(1)  548/       0 : =0E1H               FadeID__First			= mus__FirstCmd
(1)  558/       0 :                     
(1)  561/       0 : =0E6H               FadeID__End				= Mus__EndCmd
(1)  571/       0 :                     
(1)  574/       0 : =0FEH               MusID_StopSega			= mus_StopSEGA
(1)  581/       0 :                     
(1)  584/       0 : =0FFH               MusID_SegaSound			= mus_SEGA
(1)  594/       0 :                     ; ---------------------------------------------------------------------------
(1)  595/       0 : =80H                NoteRest				= 080h
(1)  596/       0 : =0E0H               FirstCoordFlag			= 0E0h
(1)  597/       0 :                     ; ---------------------------------------------------------------------------
(1)  598/       0 : =0H                 zID_MusicPointers = 0
(1)  599/       0 : =2H                 zID_SFXPointers = 2
(1)  600/       0 : =4H                 zID_ModEnvPointers = 4
(1)  601/       0 : =6H                 zID_VolEnvPointers = 6
(1)  602/       0 :                     ; ---------------------------------------------------------------------------
(1)  603/       0 :                     
(1)  604/       0 :                     ; ===========================================================================
(1)  605/       0 :                     ; Macros
(1)  606/       0 :                     ; ===========================================================================
(1)  607/       0 :                     bankswitch macro
(1)  608/       0 :                     		ld	hl, zBankRegister
(1)  609/       0 :                     		ld	(hl), a
(1)  610/       0 :                     		rept 7
(1)  611/       0 :                     			rrca
(1)  612/       0 :                     			ld	(hl), a
(1)  613/       0 :                     		endm
(1)  614/       0 :                     		ld	(hl), h							; The low bit of h is 0
(1)  615/       0 :                     	endm
(1)  616/       0 :                     
(1)  617/       0 :                     bankswitchLoop macro
(1)  618/       0 :                     		ld	b, 8
(1)  619/       0 :                     .bankloop:
(1)  620/       0 :                     		ld	(zBankRegister), a
(1)  621/       0 :                     		rrca
(1)  622/       0 :                     		djnz	.bankloop
(1)  623/       0 :                     		xor	a
(1)  624/       0 :                     		ld	(zBankRegister), a
(1)  625/       0 :                     	endm
(1)  626/       0 :                     
(1)  627/       0 :                     bankswitchToMusic macro
(1)  628/       0 :                     		ld	a, (zSongBank)
(1)  629/       0 :                     		bankswitch
(1)  630/       0 :                     	endm
(1)  631/       0 :                     
(1)  632/       0 :                     ; macro to make a certain error message clearer should you happen to get it...
(1)  633/       0 :                     rsttarget macro {INTLABEL}
(1)  634/       0 :                     	if ($&7)||($>38h)
(1)  635/       0 :                     		fatal "Function __LABEL__ is at 0\{$}h, but must be at a multiple of 8 bytes <= 38h to be used with the rst instruction."
(1)  636/       0 :                     	endif
(1)  637/       0 :                     	if "__LABEL__"<>""
(1)  638/       0 :                     __LABEL__ label $
(1)  639/       0 :                     	endif
(1)  640/       0 :                     	endm
(1)  641/       0 :                     
(1)  642/       0 :                     setMaxAR macro
(1)  643/       0 :                     		or	maxAttackRate					; Set AR to maximum
(1)  644/       0 :                     	endm
(1)  645/       0 :                     
(1)  646/       0 :                     calcVolume macro
(1)  647/       0 :                     		or	a								; Is it positive?
(1)  648/       0 :                     		jp	p, .skip_track_vol				; Branch if yes
(1)  649/       0 :                     		add	a, (ix+zTrack.Volume)			; Add track's volume to it
(1)  650/       0 :                     		jr	nc, .skip_track_vol
(1)  651/       0 :                     		sbc	a, a							; Clamp volume attenuation as it overflowed
(1)  652/       0 :                     .skip_track_vol:
(1)  653/       0 :                     	endm
(1)  654/       0 :                     
(1)  655/       0 :                     zFastWriteFM macro reg, data, dataMacro
(1)  656/       0 :                     		ld	a, reg							; Get register to write to
(1)  657/       0 :                     		add	a, c							; Add the channel bits to the register address
(1)  658/       0 :                     		ld	(iy+0), a						; Select YM2612 register
(1)  659/       0 :                     		ld	a, data							; a = data to send
(1)  660/       0 :                     		if "dataMacro"<>""
(1)  661/       0 :                     			dataMacro
(1)  662/       0 :                     		endif
(1)  663/       0 :                     		ld	(iy+1), a						; Send data to register
(1)  664/       0 :                     	endm
(1)  665/       0 :                     
(1)  666/       0 :                     zGetFMPartPointer macro
(1)  667/       0 :                     		ld	c, (ix+zTrack.VoiceControl)		; Get voice control bits for future use
(1)  668/       0 :                     		ld	iy, zYM2612_A0					; Point to part I
(1)  669/       0 :                     		bit	ymPartII, c						; Is this the DAC channel or FM4 or FM5 or FM6?
(1)  670/       0 :                     		jr	z, .notFMII						; If not, write reg/data pair to part I
(1)  671/       0 :                     		res	ymPartII, c						; Strip 'bound to part II regs' bit
(1)  672/       0 :                     		ld	iy, zYM2612_A1					; Point to part II
(1)  673/       0 :                     .notFMII:
(1)  674/       0 :                     	endm
(1)  675/       0 :                     
(1)  676/       0 :                     ; function to turn a 68k address into a word the Z80 can use to access it
(1)  677/       0 :                     zmake68kPtr function addr,zROMWindow+(addr&7FFFh)
(1)  678/       0 :                     
(1)  679/       0 :                     ; function to turn a 68k address into a bank byte
(1)  680/       0 :                     ; Note: This discards a bit (should be 0FF8000h instead of 7F8000h). This is
(1)  681/       0 :                     ; relatively harmless since the driver only uses 8 bits anyway.
(1)  682/       0 :                     zmake68kBank function addr,(((addr&7F8000h)>>15))
(1)  683/       0 :                     ; ---------------------------------------------------------------------------
(1)  684/       0 :                     ; ===========================================================================
(1)  685/       0 :                     ; Entry Point
(1)  686/       0 :                     ; ===========================================================================
(1)  687/       0 :                     
(1)  688/       0 :                     ; EntryPoint:
(1)  689/       0 : F3                  		di									; Disable interrupts
(1)  690/       1 : F3                  		di									; Disable interrupts
(1)  691/       2 : ED 56               		im	1								; set interrupt mode 1
(1)  692/       4 : C3 7F 00            		jp	zInitAudioDriver
(1)  693/       7 :                     ; ---------------------------------------------------------------------------
(1)  694/       7 :                     
(1)  695/       7 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  696/       7 :                     ;
(1)  697/       7 :                     ; Gets the correct pointer to pointer table for the data type in question
(1)  698/       7 :                     ; (music, sfx, voices, etc.).
(1)  699/       7 :                     ;
(1)  700/       7 :                     ; Input:  c    ID for data type.
(1)  701/       7 :                     ; Output: hl   Master pointer table for	index
(1)  702/       7 :                     ;         af'  Trashed
(1)  703/       7 :                     ;         b    Trashed
(1)  704/       7 :                     
(1)  705/       7 :                     ; sub_8
(1)  706/       7 : (MACRO)             	align	8
(1)  706/       7 :  (MACRO-2)                  cnop 0,8
(1)  706/       7 :   (MACRO-3)                         org ($-1+(8)-(($-1+(-(0)))#(8)))
(1)  706/       7 : 00                                                  db 0
(1)  706/       8 :                     
(1)  707/       8 : (MACRO)             GetPointerTable:	rsttarget
(1)  707/       8 : =8H                 GetPointerTable label $
(1)  708/       8 : 21 A8 12            		ld	hl,z80_SoundDriverPointers		; Load pointer table
(1)  709/       B : 06 00               		ld	b, 0							; b = 0
(1)  710/       D : 09                  		add	hl, bc							; Add offset into pointer table
(1)  711/       E : 08                  		ex	af, af'							; Back up af
(1)  712/       F : 7E                  		ld	a, (hl)							; Read low byte of pointer into a
(1)  713/      10 : 23                  		inc	hl
(1)  714/      11 : 66                  		ld	h, (hl)							; Read high byte of pointer into h
(1)  715/      12 : 6F                  		ld	l, a							; Put low byte of pointer into l
(1)  716/      13 : 08                  		ex	af, af'							; Restore af
(1)  717/      14 : C3 18 00            		jp	PointerTableOffset
(1)  718/      17 :                     ; End of function GetPointerTable
(1)  719/      17 :                     
(1)  720/      17 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  721/      17 :                     ;
(1)  722/      17 :                     ; Reads	an offset into a pointer table and returns dereferenced pointer.
(1)  723/      17 :                     ;
(1)  724/      17 :                     ;
(1)  725/      17 :                     ; Input:  a    Index into pointer table
(1)  726/      17 :                     ;	      hl   Pointer to pointer table
(1)  727/      17 :                     ; Output: hl   Selected	pointer	in pointer table
(1)  728/      17 :                     ;         bc   Trashed
(1)  729/      17 :                     
(1)  730/      17 :                     ; sub_18
(1)  731/      17 : (MACRO)             	align	8
(1)  731/      17 :  (MACRO-2)                  cnop 0,8
(1)  731/      17 :   (MACRO-3)                         org ($-1+(8)-(($-1+(-(0)))#(8)))
(1)  731/      17 : 00                                                  db 0
(1)  731/      18 :                     
(1)  732/      18 : (MACRO)             PointerTableOffset:	rsttarget
(1)  732/      18 : =18H                PointerTableOffset label $
(1)  733/      18 : 4F                  		ld	c, a							; c = index into pointer table
(1)  734/      19 : 06 00               		ld	b, 0							; b = 0
(1)  735/      1B : 09                  		add	hl, bc							; hl += bc
(1)  736/      1C : 09                  		add	hl, bc							; hl += bc
(1)  737/      1D : C3 20 00            		jp	ReadPointer						; 10 clock cycles, 3 bytes
(1)  738/      20 :                     ; End of function PointerTableOffset
(1)  739/      20 :                     
(1)  740/      20 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  741/      20 :                     ;
(1)  742/      20 :                     ; Dereferences a pointer.
(1)  743/      20 :                     ;
(1)  744/      20 :                     ; Input:  hl	Pointer
(1)  745/      20 :                     ; output: hl	Equal to what that was being pointed to by hl
(1)  746/      20 :                     
(1)  747/      20 :                     ; loc_20
(1)  748/      20 : (MACRO)             	align	8
(1)  748/      20 :  (MACRO-2)                  cnop 0,8
(1)  748/      20 :   (MACRO-3)                         org ($-1+(8)-(($-1+(-(0)))#(8)))
(1)  749/      20 : (MACRO)             ReadPointer:	rsttarget
(1)  749/      20 : =20H                ReadPointer label $
(1)  750/      20 : 7E                  		ld	a, (hl)							; Read low byte of pointer into a
(1)  751/      21 : 23                  		inc	hl
(1)  752/      22 : 66                  		ld	h, (hl)							; Read high byte of pointer into h
(1)  753/      23 : 6F                  		ld	l, a							; Put low byte of pointer into l
(1)  754/      24 : C9                  		ret
(1)  755/      25 :                     ; End of function ReadPointer
(1)  756/      25 :                     
(1)  757/      25 :                     ; ---------------------------------------------------------------------------
(1)  758/      25 :                     ; There is room for two more 'rsttarget's here
(1)  759/      25 :                     ; ---------------------------------------------------------------------------
(1)  760/      25 : (MACRO)             	align	38h
(1)  760/      25 :  (MACRO-2)                  cnop 0,38H
(1)  760/      25 :   (MACRO-3)                         org ($-1+(38H)-(($-1+(-(0)))#(38H)))
(1)  760/      25 : 00                                                  db 0
(1)  760/      26 : 00                                                  db 0
(1)  760/      27 : 00                                                  db 0
(1)  760/      28 : 00                                                  db 0
(1)  760/      29 : 00                                                  db 0
(1)  760/      2A : 00                                                  db 0
(1)  760/      2B : 00                                                  db 0
(1)  760/      2C : 00                                                  db 0
(1)  760/      2D : 00                                                  db 0
(1)  760/      2E : 00                                                  db 0
(1)  760/      2F : 00                                                  db 0
(1)  760/      30 : 00                                                  db 0
(1)  760/      31 : 00                                                  db 0
(1)  760/      32 : 00                                                  db 0
(1)  760/      33 : 00                                                  db 0
(1)  760/      34 : 00                                                  db 0
(1)  760/      35 : 00                                                  db 0
(1)  760/      36 : 00                                                  db 0
(1)  760/      37 : 00                                                  db 0
(1)  760/      38 :                     
(1)  761/      38 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  762/      38 :                     ;
(1)  763/      38 :                     ; This subroutine is called every V-Int. After it is processed, the z80
(1)  764/      38 :                     ; returns to the digital audio loop to comtinue playing DAC samples.
(1)  765/      38 :                     ;
(1)  766/      38 :                     ; If the SEGA PCM is being played, it disables interrupts -- this means that
(1)  767/      38 :                     ; this procedure will NOT be called while the SEGA PCM is playing.
(1)  768/      38 :                     ;
(1)  769/      38 :                     ;zsub_38
(1)  770/      38 : (MACRO)             zVInt:	rsttarget
(1)  770/      38 : =38H                zVInt label $
(1)  771/      38 : F3                  		di									; Disable interrupts
(1)  772/      39 : F5                  		push	af							; Save af
(1)  773/      3A : FD E5               		push	iy							; Save iy
(1)  774/      3C : D9                  		exx									; Save bc,de,hl
(1)  775/      3D :                     
(1)  776/      3D :                     .doupdate:
(1)  777/      3D : CD D0 00            		call	zUpdateEverything			; Update all tracks
(1)  778/      40 : 3A 8C 1C            		ld	a, (zPalFlag)					; Get PAL flag
(1)  779/      43 : B7                  		or	a								; Is it set?
(1)  780/      44 : 28 12               		jr	z, .not_pal						; Branch if not (NTSC)
(1)  781/      46 : 3A 8D 1C            		ld	a, (zPalDblUpdCounter)			; Get PAL double-update timeout counter
(1)  782/      49 : B7                  		or	a								; Is it zero?
(1)  783/      4A : 20 08               		jr	nz, .pal_timer					; Branch if not
(1)  784/      4C : 3E 05               		ld	a, 5							; Set it back to 5...
(1)  785/      4E : 32 8D 1C            		ld	(zPalDblUpdCounter), a			; ... and save it
(1)  786/      51 : C3 3D 00            		jp	.doupdate						; Go again
(1)  787/      54 :                     
(1)  788/      54 :                     .pal_timer:
(1)  789/      54 : 3D                  		dec	a								; Decrease PAL double-update timeout counter
(1)  790/      55 : 32 8D 1C            		ld	(zPalDblUpdCounter), a			; Store it
(1)  791/      58 :                     
(1)  792/      58 :                     .not_pal:
(1)  793/      58 : 3A AC 1C            		ld	a, (zDACIndex)					; Get index of playing DAC sample
(1)  794/      5B : E6 7F               		and	7Fh								; Strip 'DAC playing' bit
(1)  795/      5D : 4F                  		ld	c, a							; c = a
(1)  796/      5E : 06 00               		ld	b, 0							; Sign extend c to bc
(1)  797/      60 : 21 4E 12            		ld	hl, DAC_Banks					; Make hl point to DAC bank table
(1)  798/      63 : 09                  		add	hl, bc							; Offset into entry for current sample
(1)  799/      64 : 7E                  		ld	a, (hl)							; Get bank index
(1)  800/      65 : (MACRO)             		bankswitch							; Switch to current DAC sample's bank
(1)  800/      65 : 21 00 60                            ld      hl, zBankRegister
(1)  800/      68 : 77                                  ld      (hl), a
(1)  800/      69 :                                     rept 7
(1)  800/      69 :                                             rrca
(1)  800/      69 :                                             ld      (hl), a
(1)  800/      69 :                                     endm
(1)  800/      69 : 0F                                          rrca
(1)  800/      6A : 77                                          ld      (hl), a
(1)  800/      6B : 0F                                          rrca
(1)  800/      6C : 77                                          ld      (hl), a
(1)  800/      6D : 0F                                          rrca
(1)  800/      6E : 77                                          ld      (hl), a
(1)  800/      6F : 0F                                          rrca
(1)  800/      70 : 77                                          ld      (hl), a
(1)  800/      71 : 0F                                          rrca
(1)  800/      72 : 77                                          ld      (hl), a
(1)  800/      73 : 0F                                          rrca
(1)  800/      74 : 77                                          ld      (hl), a
(1)  800/      75 : 0F                                          rrca
(1)  800/      76 : 77                                          ld      (hl), a
(1)  800/      77 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1)  801/      78 : D9                  		exx									; Restore bc,de,hl
(1)  802/      79 : FD E1               		pop	iy								; Restore iy
(1)  803/      7B : F1                  		pop	af								; Restore af
(1)  804/      7C : 06 01               		ld	b, 1							; b = 1
(1)  805/      7E : C9                  		ret
(1)  806/      7F :                     ; ---------------------------------------------------------------------------
(1)  807/      7F :                     ;loc_85
(1)  808/      7F :                     zInitAudioDriver:
(1)  809/      7F : 31 7A 1C            		ld	sp, z80_stack					; set the stack pointer to 0x2000 (end of z80 RAM)
(1)  810/      82 :                     		; The following instruction block keeps the z80 in a tight loop.
(1)  811/      82 : 0E 00               		ld	c, 0							; c = 0
(1)  812/      84 :                     
(1)  813/      84 :                     .loop:
(1)  814/      84 : 06 00               		ld	b, 0							; b = 0
(1)  815/      86 : 10 FE               		djnz	$							; Loop in this instruction, decrementing b each iteration, until b = 0
(1)  816/      88 : 0D                  		dec	c								; c--
(1)  817/      89 : 28 F9               		jr	z, .loop						; Loop if c = 0
(1)  818/      8B :                     
(1)  819/      8B : CD C8 09            		call	zMusicFade					; Stop all music
(1)  820/      8E : 3E 02               		ld	a, zmake68kBank(DacBank2)		; Set song bank to second DAC bank (default value)
(1)  821/      90 : 32 B3 1C            		ld	(zSongBank), a					; Store it
(1)  822/      93 : AF                  		xor	a								; a = 0
(1)  823/      94 : 32 A3 1C            		ld	(zSpindashRev), a				; Reset spindash rev
(1)  824/      97 : 32 AC 1C            		ld	(zDACIndex), a					; Clear current DAC sample index
(1)  825/      9A : 32 B4 1C            		ld	(PlaySegaPCMFlag), a			; Clear the Sega sound flag
(1)  826/      9D : 32 A4 1C            		ld	(zRingSpeaker), a				; Make rings play on left speaker
(1)  827/      A0 : 3E 05               		ld	a, 5							; Set PAL double-update counter to 5
(1)  828/      A2 : 32 8D 1C            		ld	(zPalDblUpdCounter), a			; (that is, do not double-update for 5 frames)
(1)  829/      A5 : FB                  		ei									; Enable interrupts
(1)  830/      A6 : C3 9B 11            		jp	zPlayDigitalAudio				; Start digital audio loop
(1)  831/      A9 :                     ; ---------------------------------------------------------------------------
(1)  832/      A9 :                     
(1)  833/      A9 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  834/      A9 :                     ;
(1)  835/      A9 :                     ; Writes a reg/data pair to part I or II
(1)  836/      A9 :                     ;
(1)  837/      A9 :                     ; Input:  a    Value for register
(1)  838/      A9 :                     ;         c    Value for data
(1)  839/      A9 :                     ;         ix   Pointer to track RAM
(1)  840/      A9 :                     
(1)  841/      A9 :                     ;sub_AF
(1)  842/      A9 :                     zWriteFMIorII:
(1)  843/      A9 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1)  844/      AD : C0                  		ret	nz								; Is so, quit
(1)  845/      AE : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1)  846/      B2 : C0                  		ret	nz								; Return if yes
(1)  847/      B3 : DD 86 01            		add	a, (ix+zTrack.VoiceControl)		; Add the channel bits to the register address
(1)  848/      B6 : DD CB 01 56         		bit	ymPartII, (ix+zTrack.VoiceControl)	; Is this the DAC channel or FM4 or FM5 or FM6?
(1)  849/      BA : 20 09               		jr	nz, zWriteFMII_reduced			; If yes, write reg/data pair to part II;
(1)  850/      BC :                     											; otherwise, write reg/data pair as is to part I.
(1)  851/      BC :                     ; End of function zWriteFMIorII
(1)  852/      BC :                     
(1)  853/      BC :                     
(1)  854/      BC :                     ; =============== S U B	R O U T	I N E =======================================
(1)  855/      BC :                     ;
(1)  856/      BC :                     ; Writes a reg/data pair to part I
(1)  857/      BC :                     ;
(1)  858/      BC :                     ; Input:  a    Value for register
(1)  859/      BC :                     ;         c    Value for data
(1)  860/      BC :                     
(1)  861/      BC :                     ;sub_C2
(1)  862/      BC :                     zWriteFMI:
(1)  863/      BC : 32 00 40            		ld	(zYM2612_A0), a					; Select YM2612 register
(1)  864/      BF : 00                  		nop									; Wait
(1)  865/      C0 : 79                  		ld	a, c							; a = data to send
(1)  866/      C1 : 32 01 40            		ld	(zYM2612_D0), a					; Send data to register
(1)  867/      C4 : C9                  		ret
(1)  868/      C5 :                     ; End of function zWriteFMI
(1)  869/      C5 :                     ; ---------------------------------------------------------------------------
(1)  870/      C5 :                     
(1)  871/      C5 :                     ;loc_CB
(1)  872/      C5 :                     zWriteFMII_reduced:
(1)  873/      C5 : D6 04               		sub	1<<ymPartII						; Strip 'bound to part II regs' bit
(1)  874/      C7 :                     ; ---------------------------------------------------------------------------
(1)  875/      C7 :                     
(1)  876/      C7 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  877/      C7 :                     ;
(1)  878/      C7 :                     ; Writes a reg/data pair to part II
(1)  879/      C7 :                     ;
(1)  880/      C7 :                     ; Input:  a    Value for register
(1)  881/      C7 :                     ;         c    Value for data
(1)  882/      C7 :                     
(1)  883/      C7 :                     ;sub_CD
(1)  884/      C7 :                     zWriteFMII:
(1)  885/      C7 : 32 02 40            		ld	(zYM2612_A1), a					; Select YM2612 register
(1)  886/      CA : 00                  		nop									; Wait
(1)  887/      CB : 79                  		ld	a, c							; a = data to send
(1)  888/      CC : 32 03 40            		ld	(zYM2612_D1), a					; Send data to register
(1)  889/      CF : C9                  		ret
(1)  890/      D0 :                     ; End of function zWriteFMII
(1)  891/      D0 :                     
(1)  892/      D0 :                     ; ---------------------------------------------------------------------------
(1)  893/      D0 :                     
(1)  894/      D0 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  895/      D0 :                     ;
(1)  896/      D0 :                     ;sub_11B
(1)  897/      D0 :                     zUpdateEverything:
(1)  898/      D0 : CD 75 08            		call	zPauseUnpause				; Pause/unpause according to M68K input
(1)  899/      D3 : CD 52 01            		call	zUpdateSFXTracks			; Do SFX tracks
(1)  900/      D6 :                     
(1)  901/      D6 :                     ;loc_121
(1)  902/      D6 :                     zUpdateMusic:
(1)  903/      D6 : CD 78 0A            		call	TempoWait					; Delay song tracks as appropriate for main tempo mod
(1)  904/      D9 : CD F9 08            		call	zDoMusicFadeOut				; Check if music should be faded out and fade if needed
(1)  905/      DC : CD 59 09            		call	zDoMusicFadeIn				; Check if music should be faded in and fade if needed
(1)  906/      DF : 3A A0 1C            		ld	a, (zFadeToPrevFlag)			; Get fade-to-prev flag
(1)  907/      E2 : FE 29               		cp	MusID_ExtraLife-1				; Is it still 1-Up?
(1)  908/      E4 : 20 18               		jr	nz, .check_fade_in				; Branch if not
(1)  909/      E6 : 3A 94 1C            		ld	a, (zMusicNumber)				; Get next music to play
(1)  910/      E9 : FE 2A               		cp	MusID_ExtraLife					; Is it another 1-Up?
(1)  911/      EB : 28 04               		jr	z, .clr_queue					; Branch if yes
(1)  912/      ED : FE 33               		cp	MusID__End-1					; Is it music?
(1)  913/      EF : 38 04               		jr	c, .clr_sfx						; Branch if not
(1)  914/      F1 :                     
(1)  915/      F1 :                     .clr_queue:
(1)  916/      F1 : AF                  		xor	a								; a = 0
(1)  917/      F2 : 32 94 1C            		ld	(zMusicNumber), a				; Clear queue entry
(1)  918/      F5 :                     
(1)  919/      F5 :                     .clr_sfx:
(1)  920/      F5 : AF                  		xor	a								; a = 0
(1)  921/      F6 : 32 95 1C            		ld	(zSFXNumber0), a				; Clear first queued SFX
(1)  922/      F9 : 32 96 1C            		ld	(zSFXNumber1), a				; Clear second queued SFX
(1)  923/      FC : 18 1F               		jr	.update_music
(1)  924/      FE :                     
(1)  925/      FE :                     ;loc_149
(1)  926/      FE :                     .check_fade_in:
(1)  927/      FE : 3A A0 1C            		ld	a, (zFadeToPrevFlag)			; Get fade-to-previous flag
(1)  928/     101 : FE FF               		cp	0FFh							; Is it 0FFh?
(1)  929/     103 : 28 18               		jr	z, .update_music				; Branch if yes
(1)  930/     105 : 21 94 1C            		ld	hl, zMusicNumber				; Point hl to M68K input
(1)  931/     108 : 5E                  		ld	e, (hl)							; e = next song to play
(1)  932/     109 : 23                  		inc	hl								; Advance pointer
(1)  933/     10A : 56                  		ld	d, (hl)							; d = next SFX to play
(1)  934/     10B : 23                  		inc	hl								; Advance pointer
(1)  935/     10C : 7E                  		ld	a, (hl)							; a = next SFX to play
(1)  936/     10D : B2                  		or	d								; Combine bits of a and d
(1)  937/     10E : B3                  		or	e								; Is anything in the play queue?
(1)  938/     10F : 28 0C               		jr	z, .update_music				; Branch if not
(1)  939/     111 : CD 8E 0A            		call	zFillSoundQueue				; Transfer M68K input
(1)  940/     114 : CD 58 05            		call	zCycleMusicQueue			; Cycle queue and play first entry (moves on to second)
(1)  941/     117 : CD 2A 05            		call	zCycleSoundQueue			; Cycle queue and play second entry
(1)  942/     11A : CD 2A 05            		call	zCycleSoundQueue			; Cycle queue and play third entry
(1)  943/     11D :                     
(1)  944/     11D :                     .update_music:
(1)  945/     11D : (MACRO)             		bankswitchToMusic
(1)  945/     11D : 3A B3 1C                            ld      a, (zSongBank)
(1)  945/     120 :  (MACRO-2)                          bankswitch
(1)  945/     120 : 21 00 60                            ld      hl, zBankRegister
(1)  945/     123 : 77                                  ld      (hl), a
(1)  945/     124 :                                     rept 7
(1)  945/     124 :                                             rrca
(1)  945/     124 :                                             ld      (hl), a
(1)  945/     124 :                                     endm
(1)  945/     124 : 0F                                          rrca
(1)  945/     125 : 77                                          ld      (hl), a
(1)  945/     126 : 0F                                          rrca
(1)  945/     127 : 77                                          ld      (hl), a
(1)  945/     128 : 0F                                          rrca
(1)  945/     129 : 77                                          ld      (hl), a
(1)  945/     12A : 0F                                          rrca
(1)  945/     12B : 77                                          ld      (hl), a
(1)  945/     12C : 0F                                          rrca
(1)  945/     12D : 77                                          ld      (hl), a
(1)  945/     12E : 0F                                          rrca
(1)  945/     12F : 77                                          ld      (hl), a
(1)  945/     130 : 0F                                          rrca
(1)  945/     131 : 77                                          ld      (hl), a
(1)  945/     132 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1)  946/     133 : AF                  		xor	a								; a = 0
(1)  947/     134 : 32 A1 1C            		ld	(zUpdatingSFX), a				; Updating music
(1)  948/     137 : 3A A0 1C            		ld	a, (zFadeToPrevFlag)			; Get fade-to-previous flag
(1)  949/     13A : FE FF               		cp	0FFh							; Is it 0FFh?
(1)  950/     13C : CC C2 0A            		call	z, zFadeInToPrevious		; Fade to previous if yes
(1)  951/     13F : DD 21 B8 1C         		ld	ix, zSongDAC					; ix = DAC track RAM
(1)  952/     143 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is DAC track playing?
(1)  953/     147 : C4 38 0C            		call	nz, zUpdateDACTrack			; Branch if yes
(1)  954/     14A : 06 09               		ld	b, zNumMusicFMorPSGTracks		; Number of FM+PSG tracks
(1)  955/     14C : DD 21 E1 1C         		ld	ix, zSongFM1					; ix = FM1 track RAM
(1)  956/     150 : 18 20               		jr	zTrackUpdLoop					; Play all tracks
(1)  957/     152 :                     
(1)  958/     152 :                     ; =============== S U B	R O U T	I N E =======================================
(1)  959/     152 :                     ;
(1)  960/     152 :                     ;sub_19E
(1)  961/     152 :                     zUpdateSFXTracks:
(1)  962/     152 : 3E 01               		ld	a, 1							; a = 1
(1)  963/     154 : 32 A1 1C            		ld	(zUpdatingSFX), a				; Updating SFX
(1)  964/     157 : 3E 05               		ld	a, zmake68kBank(SndBank)		; Get SFX bank ID
(1)  965/     159 : (MACRO)             		bankswitch							; Bank switch to SFX
(1)  965/     159 : 21 00 60                            ld      hl, zBankRegister
(1)  965/     15C : 77                                  ld      (hl), a
(1)  965/     15D :                                     rept 7
(1)  965/     15D :                                             rrca
(1)  965/     15D :                                             ld      (hl), a
(1)  965/     15D :                                     endm
(1)  965/     15D : 0F                                          rrca
(1)  965/     15E : 77                                          ld      (hl), a
(1)  965/     15F : 0F                                          rrca
(1)  965/     160 : 77                                          ld      (hl), a
(1)  965/     161 : 0F                                          rrca
(1)  965/     162 : 77                                          ld      (hl), a
(1)  965/     163 : 0F                                          rrca
(1)  965/     164 : 77                                          ld      (hl), a
(1)  965/     165 : 0F                                          rrca
(1)  965/     166 : 77                                          ld      (hl), a
(1)  965/     167 : 0F                                          rrca
(1)  965/     168 : 77                                          ld      (hl), a
(1)  965/     169 : 0F                                          rrca
(1)  965/     16A : 77                                          ld      (hl), a
(1)  965/     16B : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1)  966/     16C : DD 21 52 1E         		ld	ix, zTracksSFXStart				; ix = start of SFX track RAM
(1)  967/     170 : 06 07               		ld	b, zNumSFXTracks				; Number of channels
(1)  968/     172 :                     
(1)  969/     172 :                     zTrackUpdLoop:
(1)  970/     172 : C5                  		push	bc							; Save bc
(1)  971/     173 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is track playing?
(1)  972/     177 : C4 9C 01            		call	nz, zUpdateFMorPSGTrack		; Call routine if yes
(1)  973/     17A : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1)  974/     17D : DD 19               		add	ix, de							; Advance to next track
(1)  975/     17F : C1                  		pop	bc								; Restore bc
(1)  976/     180 : 10 F0               		djnz	zTrackUpdLoop				; Loop for all tracks
(1)  977/     182 :                     
(1)  978/     182 : 3A 91 1C            		ld	a, (zTempoSpeedup)				; Get tempo speed-up value
(1)  979/     185 : B7                  		or	a								; Is music sped up?
(1)  980/     186 : C8                  		ret	z								; Return if not
(1)  981/     187 : 3A AB 1C            		ld	a, (zSpeedupTimeout)			; Get extra tempo timeout
(1)  982/     18A : B7                  		or	a								; Has it expired?
(1)  983/     18B : C2 97 01            		jp	nz, .no_dbl_update				; Branch if not
(1)  984/     18E : 3A 91 1C            		ld	a, (zTempoSpeedup)				; Get master tempo speed-up value
(1)  985/     191 : 32 AB 1C            		ld	(zSpeedupTimeout), a			; Reset extra tempo timeout to it
(1)  986/     194 : C3 D6 00            		jp	zUpdateMusic					; Update music again
(1)  987/     197 :                     ; ---------------------------------------------------------------------------
(1)  988/     197 :                     .no_dbl_update:
(1)  989/     197 : 3D                  		dec	a								; Decrement timeout...
(1)  990/     198 : 32 AB 1C            		ld	(zSpeedupTimeout), a			; ... then store new value
(1)  991/     19B : C9                  		ret
(1)  992/     19C :                     ; End of function zUpdateSFXTracks
(1)  993/     19C :                     
(1)  994/     19C :                     
(1)  995/     19C :                     ; =============== S U B	R O U T	I N E =======================================
(1)  996/     19C :                     ; Updates FM or PSG track.
(1)  997/     19C :                     ;
(1)  998/     19C :                     ;sub_1E9
(1)  999/     19C :                     zUpdateFMorPSGTrack:
(1) 1000/     19C : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG channel?
(1) 1001/     1A0 : C2 E2 10            		jp	nz, zUpdatePSGTrack				; Branch if yes
(1) 1002/     1A3 : DD 35 0B            		dec	(ix+zTrack.DurationTimeout)		; Run note timer
(1) 1003/     1A6 : 20 17               		jr	nz, .note_going					; Branch if note hasn't expired yet
(1) 1004/     1A8 : CD 37 02            		call	zGetNextNote				; Get next note for FM track
(1) 1005/     1AB : DD CB 00 66         		bit	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Is track resting?
(1) 1006/     1AF : C0                  		ret	nz								; Return if yes
(1) 1007/     1B0 : CD 6F 03            		call	zPrepareModulation			; Initialize modulation
(1) 1008/     1B3 : CD 3E 04            		call	zDoPitchSlide				; Apply pitch slide and detune
(1) 1009/     1B6 : CD 9A 03            		call	zDoModulation				; Apply modulation
(1) 1010/     1B9 : CD DE 01            		call	zFMSendFreq					; Send frequency to YM2612
(1) 1011/     1BC : C3 01 03            		jp	zFMNoteOn						; Note on on all operators
(1) 1012/     1BF :                     ; ---------------------------------------------------------------------------
(1) 1013/     1BF :                     .note_going:
(1) 1014/     1BF : DD CB 00 66         		bit	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Is track resting?
(1) 1015/     1C3 : C0                  		ret	nz								; Return if yes
(1) 1016/     1C4 : CD 2E 03            		call	zDoFMVolEnv					; Do FM volume envelope effects for track
(1) 1017/     1C7 : DD 7E 17            		ld	a, (ix+zTrack.NoteFillTimeout)	; Get note fill timeout
(1) 1018/     1CA : B7                  		or	a								; Is timeout either not running or expired?
(1) 1019/     1CB : 28 06               		jr	z, .keep_going					; Branch if yes
(1) 1020/     1CD : DD 35 17            		dec	(ix+zTrack.NoteFillTimeout)		; Update note fill timeout
(1) 1021/     1D0 : CA 19 03            		jp	z, zKeyOffIfActive				; Send key off if needed
(1) 1022/     1D3 :                     
(1) 1023/     1D3 :                     .keep_going:
(1) 1024/     1D3 : CD 3E 04            		call	zDoPitchSlide				; Apply pitch slide and detune
(1) 1025/     1D6 : DD CB 00 76         		bit	bitSustainFreq, (ix+zTrack.PlaybackControl)	; Is 'sustain frequency' bit set?
(1) 1026/     1DA : C0                  		ret	nz								; Return if yes
(1) 1027/     1DB : CD 9A 03            		call	zDoModulation				; Apply modulation then fall through
(1) 1028/     1DE :                     		; Fall through to next function
(1) 1029/     1DE :                     ; End of function zUpdateFMorPSGTrack
(1) 1030/     1DE :                     
(1) 1031/     1DE :                     
(1) 1032/     1DE :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1033/     1DE :                     ; Uploads track's frequency to YM2612.
(1) 1034/     1DE :                     ;
(1) 1035/     1DE :                     ; Input:   ix    Pointer to track RAM
(1) 1036/     1DE :                     ;          hl    Frequency to upload
(1) 1037/     1DE :                     ;          de    For FM3 in special mode, pointer to extra FM3 frequency data (never correctly set)
(1) 1038/     1DE :                     ; Output:  a     Trashed
(1) 1039/     1DE :                     ;          bc    Trashed
(1) 1040/     1DE :                     ;          hl    Trashed
(1) 1041/     1DE :                     ;          de    Increased by 8
(1) 1042/     1DE :                     ;
(1) 1043/     1DE :                     ;sub_22B
(1) 1044/     1DE :                     zFMSendFreq:
(1) 1045/     1DE : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 1046/     1E2 : C0                  		ret	nz								; Return if yes
(1) 1047/     1E3 : DD CB 00 46         		bit	bitFM3Special, (ix+zTrack.PlaybackControl)	; Is track in special mode (FM3 only)?
(1) 1048/     1E7 : C2 F6 01            		jp	nz, .special_mode				; Branch if yes
(1) 1049/     1EA :                     
(1) 1050/     1EA :                     .not_fm3:
(1) 1051/     1EA : 3E A4               		ld	a, ymFrequencyHigh				; Command to update frequency MSB
(1) 1052/     1EC : 4C                  		ld	c, h							; High byte of frequency
(1) 1053/     1ED : CD A9 00            		call	zWriteFMIorII				; Send it to YM2612
(1) 1054/     1F0 : 3E A0               		ld	a, ymFrequencyLow				; Command to update frequency LSB
(1) 1055/     1F2 : 4D                  		ld	c, l							; Low byte of frequency
(1) 1056/     1F3 : C3 A9 00            		jp	zWriteFMIorII					; Send it to YM2612
(1) 1057/     1F6 :                     ; ---------------------------------------------------------------------------
(1) 1058/     1F6 :                     .special_mode:
(1) 1059/     1F6 : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; a = voice control byte
(1) 1060/     1F9 : FE 02               		cp	ymFM3							; Is this FM3?
(1) 1061/     1FB : 20 ED               		jr	nz, .not_fm3					; Branch if not
(1) 1062/     1FD : CD 2B 02            		call	zGetSpecialFM3DataPointer	; de = pointer to saved FM3 frequency shifts
(1) 1063/     200 : 06 04               		ld	b, zSpecialFreqCommands_End-zSpecialFreqCommands	; Number of entries
(1) 1064/     202 : 21 27 02            		ld	hl, zSpecialFreqCommands		; Lookup table
(1) 1065/     205 :                     
(1) 1066/     205 :                     .loop:
(1) 1067/     205 : C5                  		push	bc							; Save bc
(1) 1068/     206 : 7E                  		ld	a, (hl)							; a = register selector
(1) 1069/     207 : 23                  		inc	hl								; Advance pointer
(1) 1070/     208 : E5                  		push	hl							; Save hl
(1) 1071/     209 : EB                  		ex	de, hl							; Exchange de and hl
(1) 1072/     20A : 4E                  		ld	c, (hl)							; Get byte from FM3 data
(1) 1073/     20B : 23                  		inc	hl								; Advance pointer
(1) 1074/     20C : 46                  		ld	b, (hl)							; Get byte from FM3 data
(1) 1075/     20D : 23                  		inc	hl								; Advance pointer
(1) 1076/     20E : EB                  		ex	de, hl							; Exchange de and hl
(1) 1077/     20F : DD 6E 0D            		ld	l, (ix+zTrack.FreqLow)			; l = low byte of track frequency
(1) 1078/     212 : DD 66 0E            		ld	h, (ix+zTrack.FreqHigh)			; h = high byte of track frequency
(1) 1079/     215 : 09                  		add	hl, bc							; hl = full frequency for operator
(1) 1080/     216 : F5                  		push	af							; Save af
(1) 1081/     217 : 4C                  		ld	c, h							; High byte of frequency
(1) 1082/     218 : CD BC 00            		call	zWriteFMI					; Sent it to YM2612
(1) 1083/     21B : F1                  		pop	af								; Restore af
(1) 1084/     21C : D6 04               		sub	ymCH3FrequencyHigh1-ymCH3FrequencyLow1	; Move on to frequency LSB
(1) 1085/     21E : 4D                  		ld	c, l							; Low byte of frequency
(1) 1086/     21F : CD BC 00            		call	zWriteFMI					; Sent it to YM2612
(1) 1087/     222 : E1                  		pop	hl								; Restore hl
(1) 1088/     223 : C1                  		pop	bc								; Restore bc
(1) 1089/     224 : 10 DF               		djnz	.loop						; Loop for all operators
(1) 1090/     226 : C9                  		ret
(1) 1091/     227 :                     ; End of function zFMSendFreq
(1) 1092/     227 :                     
(1) 1093/     227 :                     ; ---------------------------------------------------------------------------
(1) 1094/     227 :                     ;loc_272
(1) 1095/     227 :                     zSpecialFreqCommands:
(1) 1096/     227 : AD                  		db ymCH3FrequencyHigh1				; Operator 4 frequency MSB
(1) 1097/     228 : AE                  		db ymCH3FrequencyHigh2				; Operator 3 frequency MSB
(1) 1098/     229 : AC                  		db ymCH3FrequencyHigh3				; Operator 2 frequency MSB
(1) 1099/     22A : A6                  		db ymCH3FrequencyHigh4				; Operator 1 frequency MSB
(1) 1100/     22B :                     zSpecialFreqCommands_End
(1) 1101/     22B :                     
(1) 1102/     22B :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1103/     22B :                     ;
(1) 1104/     22B :                     zGetSpecialFM3DataPointer:
(1) 1105/     22B : 11 7C 1C            		ld	de, zSpecFM3Freqs				; de = pointer to saved FM3 frequency shifts
(1) 1106/     22E : 3A A1 1C            		ld	a, (zUpdatingSFX)				; Get flag
(1) 1107/     231 : B7                  		or	a								; Is this a SFX track?
(1) 1108/     232 : C8                  		ret	z								; Return if not
(1) 1109/     233 : 11 84 1C            		ld	de, zSpecFM3FreqsSFX			; de = pointer to saved FM3 frequency shifts
(1) 1110/     236 : C9                  		ret
(1) 1111/     237 :                     ; End of function zGetSpecialFM3DataPointer
(1) 1112/     237 :                     
(1) 1113/     237 :                     
(1) 1114/     237 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1115/     237 :                     ; Gets next note from the track's data stream. If any coordination flags are
(1) 1116/     237 :                     ; found, they are handled and then the function keeps looping until a note is
(1) 1117/     237 :                     ; found.
(1) 1118/     237 :                     ;
(1) 1119/     237 :                     ; Input:   ix    Pointer to track's RAM
(1) 1120/     237 :                     ; Output:  de    Pointer to current position on track data
(1) 1121/     237 :                     ;          hl    Note frequency
(1) 1122/     237 :                     ;          All others possibly trashed due to coordination flags
(1) 1123/     237 :                     ;
(1) 1124/     237 :                     ;sub_277
(1) 1125/     237 :                     zGetNextNote:
(1) 1126/     237 : DD 5E 03            		ld	e, (ix+zTrack.DataPointerLow)	; e = low byte of track data pointer
(1) 1127/     23A : DD 56 04            		ld	d, (ix+zTrack.DataPointerHigh)	; d = high byte of track data pointer
(1) 1128/     23D : DD CB 00 8E         		res	bitNoAttack, (ix+zTrack.PlaybackControl)	; Clear 'do not attack next note' flag
(1) 1129/     241 : DD CB 00 A6         		res	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Clear 'track is at rest' flag
(1) 1130/     245 :                     
(1) 1131/     245 :                     ;loc_285
(1) 1132/     245 :                     zGetNextNote_cont:
(1) 1133/     245 : 1A                  		ld	a, (de)							; Get next byte from track
(1) 1134/     246 : 13                  		inc	de								; Advance pointer
(1) 1135/     247 : FE E0               		cp	FirstCoordFlag					; Is it a coordination flag?
(1) 1136/     249 : D2 95 0C            		jp	nc, zHandleFMorPSGCoordFlag		; Branch if yes
(1) 1137/     24C : 08                  		ex	af, af'							; Save af
(1) 1138/     24D : CD 19 03            		call	zKeyOffIfActive				; Kill note
(1) 1139/     250 : 08                  		ex	af, af'							; Restore af
(1) 1140/     251 : DD CB 00 5E         		bit	bitAltFreqMode, (ix+zTrack.PlaybackControl)	; Is alternate frequency mode flag set?
(1) 1141/     255 : C2 AD 02            		jp	nz, zAltFreqMode				; Branch if yes
(1) 1142/     258 : B7                  		or	a								; Is this a duration?
(1) 1143/     259 : F2 CF 02            		jp	p, zStoreDuration				; Branch if yes
(1) 1144/     25C : D6 81               		sub	81h								; Make the note into a 0-based index
(1) 1145/     25E : F2 66 02            		jp	p, .got_note					; Branch if it is a note and not a rest
(1) 1146/     261 : CD 7F 11            		call	zRestTrack					; Put track at rest
(1) 1147/     264 : 18 2D               		jr	zGetNoteDuration
(1) 1148/     266 :                     ; ---------------------------------------------------------------------------
(1) 1149/     266 :                     .got_note:
(1) 1150/     266 : DD 86 05            		add	a, (ix+zTrack.Transpose)		; Add in transposition
(1) 1151/     269 : 21 78 0B            		ld	hl, zPSGFrequencies				; PSG frequency lookup table
(1) 1152/     26C : F5                  		push	af							; Save af
(1) 1153/     26D : DF                  		rst	PointerTableOffset				; hl = frequency value for note
(1) 1154/     26E : F1                  		pop	af								; Restore af
(1) 1155/     26F : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 1156/     273 : 20 18               		jr	nz, zGotNoteFreq				; Branch if yes
(1) 1157/     275 : D5                  		push	de							; Save de
(1) 1158/     276 : 16 08               		ld	d, 8							; Each octave above the first adds this to frequency high bits
(1) 1159/     278 : 1E 0C               		ld	e, 0Ch							; 12 notes per octave
(1) 1160/     27A : 08                  		ex	af, af'							; Exchange af with af'
(1) 1161/     27B : AF                  		xor	a								; Clear a (which will clear a')
(1) 1162/     27C :                     
(1) 1163/     27C :                     .loop:
(1) 1164/     27C : 08                  		ex	af, af'							; Exchange af with af'
(1) 1165/     27D : 93                  		sub	e								; Subtract 1 octave from the note
(1) 1166/     27E : 38 04               		jr	c, .got_displacement			; If this is less than zero, we are done
(1) 1167/     280 : 08                  		ex	af, af'							; Exchange af with af'
(1) 1168/     281 : 82                  		add	a, d							; One octave up
(1) 1169/     282 : 18 F8               		jr	.loop							; Loop
(1) 1170/     284 :                     ; ---------------------------------------------------------------------------
(1) 1171/     284 :                     .got_displacement:
(1) 1172/     284 : 83                  		add	a, e							; Add 1 octave back (so note index is positive)
(1) 1173/     285 : 21 20 0C            		ld	hl, zFMFrequencies				; FM first octave frequency lookup table
(1) 1174/     288 : DF                  		rst	PointerTableOffset				; hl = frequency of the note on the first octave
(1) 1175/     289 : 08                  		ex	af, af'							; Exchange af with af'
(1) 1176/     28A : B4                  		or	h								; a = high bits of frequency (including octave bits, which were in a)
(1) 1177/     28B : 67                  		ld	h, a							; h = high bits of frequency (including octave bits)
(1) 1178/     28C : D1                  		pop	de								; Restore de
(1) 1179/     28D :                     
(1) 1180/     28D :                     ;loc_2CE
(1) 1181/     28D :                     zGotNoteFreq:
(1) 1182/     28D : DD 75 0D            		ld	(ix+zTrack.FreqLow), l			; Store low byte of note frequency
(1) 1183/     290 : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h			; Store high byte of note frequency
(1) 1184/     293 :                     
(1) 1185/     293 :                     ;loc_2D4
(1) 1186/     293 :                     zGetNoteDuration:
(1) 1187/     293 : DD CB 00 6E         		bit	bitPitchSlide, (ix+zTrack.PlaybackControl)
(1) 1188/     297 : 20 0D               		jr	nz, zApplyPitchSlide
(1) 1189/     299 : 1A                  		ld	a, (de)							; Get duration from the track
(1) 1190/     29A : B7                  		or	a								; Is it an actual duration?
(1) 1191/     29B : F2 CE 02            		jp	p, zGotNoteDuration				; Branch if yes
(1) 1192/     29E : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)	; Get saved duration
(1) 1193/     2A1 : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a	; Set it as next timeout duration
(1) 1194/     2A4 : 18 2F               		jr	zFinishTrackUpdate
(1) 1195/     2A6 :                     ; ---------------------------------------------------------------------------
(1) 1196/     2A6 :                     zApplyPitchSlide:
(1) 1197/     2A6 :                     		; Unused/dead code in S3/S&K/S3D; this is code for pitch slides
(1) 1198/     2A6 :                     		; in the Battletoads sound driver.
(1) 1199/     2A6 : 1A                  		ld	a, (de)							; Get new pitch slide value from track
(1) 1200/     2A7 : 13                  		inc	de								; Advance pointer
(1) 1201/     2A8 : DD 77 10            		ld	(ix+zTrack.Detune), a			; Store detune
(1) 1202/     2AB : 18 20               		jr	zGetRawDuration
(1) 1203/     2AD :                     ; ---------------------------------------------------------------------------
(1) 1204/     2AD :                     ;loc_2E8
(1) 1205/     2AD :                     ;zAlternateSMPS
(1) 1206/     2AD :                     zAltFreqMode:
(1) 1207/     2AD :                     		; Setting bit 3 on zTrack.PlaybackControl puts the song in a weird mode.
(1) 1208/     2AD :                     		;
(1) 1209/     2AD :                     		; This weird mode has literal frequencies and durations on the track.
(1) 1210/     2AD :                     		; Each byte on the track is either a coordination flag (0E0h to 0FFh) or
(1) 1211/     2AD :                     		; the high byte of a frequency. For the latter case, the following byte
(1) 1212/     2AD :                     		; is then the low byte of this same frequency.
(1) 1213/     2AD :                     		; If the frequency is nonzero, the (sign extended) transposition is
(1) 1214/     2AD :                     		; simply *added* to this frequency.
(1) 1215/     2AD :                     		; After the frequency, there is then a byte that is unused.
(1) 1216/     2AD :                     		; Finally, there is a raw duration byte following.
(1) 1217/     2AD :                     		;
(1) 1218/     2AD :                     		; To put the track in this mode, coord. flag 0FDh can be used; if the
(1) 1219/     2AD :                     		; parameter byte is 1, the mode is toggled on. To turn the mode off,
(1) 1220/     2AD :                     		; coord. flag 0FDh can be used with a parameter != 1.
(1) 1221/     2AD : 67                  		ld	h, a							; h = byte from track
(1) 1222/     2AE : 1A                  		ld	a, (de)							; a = next byte from track
(1) 1223/     2AF : 13                  		inc	de								; Advance pointer
(1) 1224/     2B0 : 6F                  		ld	l, a							; l = last byte read from track
(1) 1225/     2B1 : B4                  		or	h								; Is hl nonzero?
(1) 1226/     2B2 : 28 08               		jr	z, .got_zero					; Branch if not
(1) 1227/     2B4 : DD 7E 05            		ld	a, (ix+zTrack.Transpose)		; a = transposition
(1) 1228/     2B7 : 4F                  		ld	c, a							; bc = sign extension of transposition
(1) 1229/     2B8 : 17                  		rla									; Carry contains sign of transposition
(1) 1230/     2B9 : 9F                  		sbc	a, a							; a = 0 or -1 if carry is 0 or 1
(1) 1231/     2BA : 47                  		ld	b, a							; bc = sign extension of transposition
(1) 1232/     2BB : 09                  		add	hl, bc							; hl += transposition
(1) 1233/     2BC :                     
(1) 1234/     2BC :                     .got_zero:
(1) 1235/     2BC : DD 75 0D            		ld	(ix+zTrack.FreqLow), l			; Store low byte of note frequency
(1) 1236/     2BF : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h			; Store high byte of note frequency
(1) 1237/     2C2 : DD CB 00 6E         		bit	bitPitchSlide, (ix+zTrack.PlaybackControl)
(1) 1238/     2C6 : 28 05               		jr	z, zGetRawDuration
(1) 1239/     2C8 : 1A                  		ld	a, (de)							; Get pitch slide value from the track
(1) 1240/     2C9 : 13                  		inc	de								; Advance to next byte in track
(1) 1241/     2CA : DD 77 10            		ld	(ix+zTrack.Detune), a			; Store detune
(1) 1242/     2CD :                     ;loc_306
(1) 1243/     2CD :                     zGetRawDuration:
(1) 1244/     2CD : 1A                  		ld	a, (de)							; Get raw duration from track
(1) 1245/     2CE :                     
(1) 1246/     2CE :                     ;loc_307
(1) 1247/     2CE :                     zGotNoteDuration:
(1) 1248/     2CE : 13                  		inc	de								; Advance to next byte in track
(1) 1249/     2CF :                     
(1) 1250/     2CF :                     ;loc_308
(1) 1251/     2CF :                     zStoreDuration:
(1) 1252/     2CF : CD F7 02            		call	zComputeNoteDuration		; Multiply note by tempo divider
(1) 1253/     2D2 : DD 77 0C            		ld	(ix+zTrack.SavedDuration), a	; Store it for next note
(1) 1254/     2D5 :                     
(1) 1255/     2D5 :                     ;loc_30E
(1) 1256/     2D5 :                     zFinishTrackUpdate:
(1) 1257/     2D5 : DD 73 03            		ld	(ix+zTrack.DataPointerLow), e	; Save low byte of current location in song
(1) 1258/     2D8 : DD 72 04            		ld	(ix+zTrack.DataPointerHigh), d	; Save high byte of current location in song
(1) 1259/     2DB : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)	; Get current saved duration
(1) 1260/     2DE : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a	; Set it as duration timeout
(1) 1261/     2E1 : DD CB 00 4E         		bit	bitNoAttack, (ix+zTrack.PlaybackControl)	; Is 'do not attack next note' flag set?
(1) 1262/     2E5 : C0                  		ret	nz								; Branch if yes
(1) 1263/     2E6 : AF                  		xor	a								; Clear a
(1) 1264/     2E7 : DD 77 1E            		ld	(ix+zTrack.ModEnvIndex), a		; Clear modulation envelope index
(1) 1265/     2EA : DD 77 1B            		ld	(ix+zTrack.ModEnvSens), a		; Clear modulation envelope multiplier
(1) 1266/     2ED : DD 77 11            		ld	(ix+zTrack.VolEnv), a			; Reset volume envelope
(1) 1267/     2F0 : DD 7E 18            		ld	a, (ix+zTrack.NoteFillMaster)	; Get master note fill
(1) 1268/     2F3 : DD 77 17            		ld	(ix+zTrack.NoteFillTimeout), a	; Set note fill timeout
(1) 1269/     2F6 : C9                  		ret
(1) 1270/     2F7 :                     ; End of function zGetNextNote
(1) 1271/     2F7 :                     
(1) 1272/     2F7 :                     
(1) 1273/     2F7 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1274/     2F7 :                     ; This routine multiplies the note duration by the tempo divider. This can
(1) 1275/     2F7 :                     ; easily overflow, as the result is stored in a byte.
(1) 1276/     2F7 :                     ;
(1) 1277/     2F7 :                     ; Input:   a    Note duration
(1) 1278/     2F7 :                     ; Output:  a    Final note duration
(1) 1279/     2F7 :                     ;          b    zero
(1) 1280/     2F7 :                     ;          c    Damaged
(1) 1281/     2F7 :                     ;sub_330
(1) 1282/     2F7 :                     zComputeNoteDuration:
(1) 1283/     2F7 : DD 46 02            		ld	b, (ix+zTrack.TempoDivider)		; Get tempo divider for this track
(1) 1284/     2FA : 05                  		dec	b								; Make it into a loop counter
(1) 1285/     2FB : C8                  		ret	z								; Return if it was 1
(1) 1286/     2FC : 4F                  		ld	c, a							; c = a
(1) 1287/     2FD :                     
(1) 1288/     2FD :                     .loop:
(1) 1289/     2FD : 81                  		add	a, c							; a += c
(1) 1290/     2FE : 10 FD               		djnz	.loop						; Loop
(1) 1291/     300 : C9                  		ret
(1) 1292/     301 :                     ; End of function zComputeNoteDuration
(1) 1293/     301 :                     ; ---------------------------------------------------------------------------
(1) 1294/     301 :                     
(1) 1295/     301 :                     ; ---------------------------------------------------------------------------
(1) 1296/     301 :                     ;loc_342
(1) 1297/     301 :                     zFMNoteOn:
(1) 1298/     301 : DD 7E 0D            		ld	a, (ix+zTrack.FreqLow)			; Get low byte of note frequency
(1) 1299/     304 : DD B6 0E            		or	(ix+zTrack.FreqHigh)			; Is the note frequency zero?
(1) 1300/     307 : C8                  		ret	z								; Return if yes
(1) 1301/     308 : DD 7E 00            		ld	a, (ix+zTrack.PlaybackControl)	; Get playback control byte for track
(1) 1302/     30B : E6 06               		and	maskSkipFMNoteOn				; Is either bit 4 ("track at rest") or 2 ("SFX overriding this track") or bit 1 ("do not attack next note") set?
(1) 1303/     30D : C0                  		ret	nz								; Return if yes
(1) 1304/     30E : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; Get voice control byte from track
(1) 1305/     311 : F6 F0               		or	maskAllOperators				; Add in bits for all operators
(1) 1306/     313 : 4F                  		ld	c, a							; Key on for all operators
(1) 1307/     314 : 3E 28               		ld	a, ymKeyOnOff					; Select key on/of register
(1) 1308/     316 : C3 BC 00            		jp	zWriteFMI						; Send command to YM2612
(1) 1309/     319 :                     ; ---------------------------------------------------------------------------
(1) 1310/     319 :                     
(1) 1311/     319 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1312/     319 :                     ; Writes reg/data pair to register 28h (key on/off) if track active
(1) 1313/     319 :                     ;
(1) 1314/     319 :                     ; Input:   ix   Track data
(1) 1315/     319 :                     ; Output:  a    Damaged
(1) 1316/     319 :                     ;          c    Damaged
(1) 1317/     319 :                     ;sub_35B
(1) 1318/     319 :                     zKeyOffIfActive:
(1) 1319/     319 : DD 7E 00            		ld	a, (ix+zTrack.PlaybackControl)	; Get playback control byte for track
(1) 1320/     31C : E6 06               		and	maskSkipFMNoteOff				; Is either bit 1 ("do not attack next note") or 2 ("SFX overriding this track") set?
(1) 1321/     31E : C0                  		ret	nz								; Return if yes
(1) 1322/     31F :                     ; End of function zKeyOffIfActive
(1) 1323/     31F :                     
(1) 1324/     31F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1325/     31F :                     ; Writes reg/data pair to register 28h (key on/off)
(1) 1326/     31F :                     ;
(1) 1327/     31F :                     ; Input:   ix   Track data
(1) 1328/     31F :                     ; Output:  a    Damaged
(1) 1329/     31F :                     ;          c    Damaged
(1) 1330/     31F :                     ;loc_361
(1) 1331/     31F :                     zKeyOff:
(1) 1332/     31F : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)		; Get voice control byte for track (this will turn off all operators as high nibble = 0)
(1) 1333/     322 : CB 79               		bit	bitIsPSG, c						; Is this a PSG track?
(1) 1334/     324 : C0                  		ret	nz								; Return if yes
(1) 1335/     325 :                     ; End of function zKeyOff
(1) 1336/     325 :                     
(1) 1337/     325 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1338/     325 :                     ; Writes reg/data pair to register 28h (key on/off)
(1) 1339/     325 :                     ;
(1) 1340/     325 :                     ; Input:   c    Data to write
(1) 1341/     325 :                     ; Output:  a    Damaged
(1) 1342/     325 :                     ;loc_367
(1) 1343/     325 :                     zKeyOnOff:
(1) 1344/     325 : 3E 28               		ld	a, ymKeyOnOff					; Write to KEY ON/OFF port
(1) 1345/     327 : DD CB 00 B6         		res	bitSustainFreq, (ix+zTrack.PlaybackControl)	; From Dyna Brothers 2, but in a better place; clear flag to sustain frequency
(1) 1346/     32B : C3 BC 00            		jp	zWriteFMI						; Send it
(1) 1347/     32E :                     ; End of function zKeyOnOff
(1) 1348/     32E :                     
(1) 1349/     32E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1350/     32E :                     ; Performs volume envelope effects in FM channels.
(1) 1351/     32E :                     ;
(1) 1352/     32E :                     ; Input:   ix    Pointer to track RAM
(1) 1353/     32E :                     ; Output:  a     Trashed
(1) 1354/     32E :                     ;          bc    Trashed
(1) 1355/     32E :                     ;          de    Trashed
(1) 1356/     32E :                     ;          hl    Trashed
(1) 1357/     32E :                     ;
(1) 1358/     32E :                     ;sub_36D
(1) 1359/     32E :                     ;zDoFMFlutter
(1) 1360/     32E :                     zDoFMVolEnv:
(1) 1361/     32E : DD 7E 12            		ld	a, (ix+zTrack.FMVolEnv)			; Get FM volume envelope
(1) 1362/     331 : B7                  		or	a								; Is it zero?
(1) 1363/     332 : C8                  		ret	z								; Return if yes
(1) 1364/     333 : F8                  		ret	m								; Return if it is actually the custom SSG-EG flag
(1) 1365/     334 : 3D                  		dec	a								; Make a into an index
(1) 1366/     335 : 0E 06               		ld	c, zID_VolEnvPointers			; Value for volume envelope pointer table
(1) 1367/     337 : CF                  		rst	GetPointerTable					; hl = pointer to volume envelope for track
(1) 1368/     338 : CD 4D 11            		call	zDoVolEnv					; a = new volume envelope
(1) 1369/     33B : DD 66 16            		ld	h, (ix+zTrack.TLPtrHigh)			; h = high byte to TL data pointer
(1) 1370/     33E : DD 6E 15            		ld	l, (ix+zTrack.TLPtrLow)			; l = low byte to TL data pointer
(1) 1371/     341 : 11 AE 04            		ld	de, zFMInstrumentTLTable		; de = pointer to FM TL register table
(1) 1372/     344 : 06 04               		ld	b, zFMInstrumentTLTable_End-zFMInstrumentTLTable	; Number of entries
(1) 1373/     346 : 4F                  		ld	c, a							; Save volume envelope
(1) 1374/     347 : DD 7E 13            		ld	a, (ix+zTrack.FMVolEnvMask)		; a = envelope bitmask
(1) 1375/     34A :                     
(1) 1376/     34A :                     .loop:
(1) 1377/     34A : CB 2F               		sra	a								; Divide a by 2
(1) 1378/     34C : 30 1C               		jr	nc, .skip_reg					; Branch if bit shifted was zero
(1) 1379/     34E : F5                  		push	af							; Save af
(1) 1380/     34F : 7E                  		ld	a, (hl)							; Get TL value
(1) 1381/     350 : B7                  		or	a								; Do we need to add track volume?
(1) 1382/     351 : F2 5B 03            		jp	p, .skip_track_vol				; Branch if not
(1) 1383/     354 : DD 86 06            		add	a, (ix+zTrack.Volume)			; Add track's volume to it
(1) 1384/     357 : 38 08               		jr	c, .do_clamp					; Branch on carry (overflow)
(1) 1385/     359 : E6 7F               		and	7Fh								; Clear top bit for overflow check below
(1) 1386/     35B :                     
(1) 1387/     35B :                     .skip_track_vol:
(1) 1388/     35B : 81                  		add	a, c							; Add volume envelope
(1) 1389/     35C : CD 6B 0D            		call	zDoFMVolumeClamp			; Clamp if needed
(1) 1390/     35F : 18 01               		jr	.update_volume
(1) 1391/     361 :                     ; ---------------------------------------------------------------------------
(1) 1392/     361 :                     .do_clamp:
(1) 1393/     361 : 9F                  		sbc	a, a							; Clamp volume attenuation as it overflowed
(1) 1394/     362 :                     
(1) 1395/     362 :                     .update_volume:
(1) 1396/     362 : C5                  		push	bc							; Save bc
(1) 1397/     363 : 4F                  		ld	c, a							; c = TL + volume envelope
(1) 1398/     364 : 1A                  		ld	a, (de)							; a = YM2612 register
(1) 1399/     365 : CD A9 00            		call	zWriteFMIorII				; Send TL data to YM2612
(1) 1400/     368 : C1                  		pop	bc								; Restore bc
(1) 1401/     369 : F1                  		pop	af								; Restore af
(1) 1402/     36A :                     
(1) 1403/     36A :                     .skip_reg:
(1) 1404/     36A : 13                  		inc	de								; Advance to next YM2612 register
(1) 1405/     36B : 23                  		inc	hl								; Advance to next TL value
(1) 1406/     36C : 10 DC               		djnz	.loop						; Loop for all registers
(1) 1407/     36E : C9                  		ret
(1) 1408/     36F :                     ; End of function zDoFMVolEnv
(1) 1409/     36F :                     
(1) 1410/     36F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1411/     36F :                     ; Initializes normal modulation.
(1) 1412/     36F :                     ;
(1) 1413/     36F :                     ; Input:   ix    Pointer to track's RAM
(1) 1414/     36F :                     ; Output:  de    If modulation control has bit 7 set and track is to attack next note, pointer to modulation steps in track RAM
(1) 1415/     36F :                     ;          hl    If modulation control has bit 7 set and track is to attack next note, pointer to modulation steps in track data
(1) 1416/     36F :                     ;
(1) 1417/     36F :                     ;sub_39E
(1) 1418/     36F :                     zPrepareModulation:
(1) 1419/     36F : DD CB 07 7E         		bit	7, (ix+zTrack.ModulationCtrl)	; Is modulation on?
(1) 1420/     373 : C8                  		ret	z								; Return if not
(1) 1421/     374 : DD CB 00 4E         		bit	bitNoAttack, (ix+zTrack.PlaybackControl)	; Is 'do not attack next note' bit set?
(1) 1422/     378 : C0                  		ret	nz								; Return if yes
(1) 1423/     379 : DD 5E 19            		ld	e, (ix+zTrack.ModulationPtrLow)	; e = low byte of pointer to modulation data
(1) 1424/     37C : DD 56 1A            		ld	d, (ix+zTrack.ModulationPtrHigh)	; d = high byte of pointer to modulation data
(1) 1425/     37F : DD E5               		push	ix							; Save ix
(1) 1426/     381 : E1                  		pop	hl								; hl = pointer to track data
(1) 1427/     382 : 06 00               		ld	b, 0							; b = 0
(1) 1428/     384 : 0E 1D               		ld	c, zTrack.ModulationWait		; c = offset in track RAM for modulation data
(1) 1429/     386 : 09                  		add	hl, bc							; hl = pointer to modulation data in track RAM
(1) 1430/     387 : EB                  		ex	de, hl							; Exchange de and hl
(1) 1431/     388 : ED A0               		ldi									; *de++ = *hl++
(1) 1432/     38A : ED A0               		ldi									; *de++ = *hl++
(1) 1433/     38C : ED A0               		ldi									; *de++ = *hl++
(1) 1434/     38E : 7E                  		ld	a, (hl)							; a = number of modulation steps
(1) 1435/     38F : CB 3F               		srl	a								; Divide by 2
(1) 1436/     391 : 12                  		ld	(de), a							; Store in track RAM
(1) 1437/     392 : AF                  		xor	a								; a = 0
(1) 1438/     393 : DD 77 1B            		ld	(ix+zTrack.ModulationValLow), a	; Clear low byte of accumulated modulation
(1) 1439/     396 : DD 77 1C            		ld	(ix+zTrack.ModulationValHigh), a	; Clear high byte of accumulated modulation
(1) 1440/     399 : C9                  		ret
(1) 1441/     39A :                     ; End of function zPrepareModulation
(1) 1442/     39A :                     
(1) 1443/     39A :                     
(1) 1444/     39A :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1445/     39A :                     ; Applies modulation.
(1) 1446/     39A :                     ;
(1) 1447/     39A :                     ; Input:   ix    Pointer to track's RAM
(1) 1448/     39A :                     ;          hl    Note frequency
(1) 1449/     39A :                     ; Output:
(1) 1450/     39A :                     ;    If modulation control is 80h (normal modulation):
(1) 1451/     39A :                     ;          hl    Final note frequency
(1) 1452/     39A :                     ;          de    Pointer to modulation data in track RAM
(1) 1453/     39A :                     ;          iy    Pointer to modulation data in track RAM
(1) 1454/     39A :                     ;          bc    Unmodulated note frequency
(1) 1455/     39A :                     ;
(1) 1456/     39A :                     ;    If modulation control is nonzero and not 80h (modulation envelope effects):
(1) 1457/     39A :                     ;
(1) 1458/     39A :                     ;
(1) 1459/     39A :                     ;sub_3C9
(1) 1460/     39A :                     zDoModulation:
(1) 1461/     39A : DD 7E 07            		ld	a, (ix+zTrack.ModulationCtrl)	; Get modulation control byte
(1) 1462/     39D : B7                  		or	a								; Is modulation active?
(1) 1463/     39E : C8                  		ret	z								; Return if not
(1) 1464/     39F : FE 80               		cp	80h								; Is modulation control 80h?
(1) 1465/     3A1 : 20 45               		jr	nz, zDoModEnvelope				; Branch if not
(1) 1466/     3A3 : DD 35 1D            		dec	(ix+zTrack.ModulationWait)		; Decrement modulation wait
(1) 1467/     3A6 : C0                  		ret	nz								; Return if nonzero
(1) 1468/     3A7 : DD 34 1D            		inc	(ix+zTrack.ModulationWait)		; Increase it back to 1 for next frame
(1) 1469/     3AA : E5                  		push	hl							; Save hl
(1) 1470/     3AB : DD 6E 1B            		ld	l, (ix+zTrack.ModulationValLow)	; l = low byte of accumulated modulation
(1) 1471/     3AE : DD 66 1C            		ld	h, (ix+zTrack.ModulationValHigh)	; h = high byte of accumulated modulation
(1) 1472/     3B1 :                     		; In non-Type 2 DAC versions of SMPS Z80, the following four instructions were below the 'jr nz'
(1) 1473/     3B1 :                     		; which could lead to a bug where iy isn't initialised, but still used as a pointer.
(1) 1474/     3B1 : DD 5E 19            		ld	e, (ix+zTrack.ModulationPtrLow)	; e = low byte of modulation data pointer
(1) 1475/     3B4 : DD 56 1A            		ld	d, (ix+zTrack.ModulationPtrHigh)	; d = high byte of modulation data pointer
(1) 1476/     3B7 : D5                  		push	de							; Save de
(1) 1477/     3B8 : FD E1               		pop	iy								; iy = pointer to modulation data
(1) 1478/     3BA : DD 35 1E            		dec	(ix+zTrack.ModulationSpeed)		; Decrement modulation speed
(1) 1479/     3BD : 20 14               		jr	nz, .mod_sustain				; Branch if nonzero
(1) 1480/     3BF : FD 7E 01            		ld	a, (iy+1)						; Get original modulation speed
(1) 1481/     3C2 : DD 77 1E            		ld	(ix+zTrack.ModulationSpeed), a	; Reset modulation speed timeout
(1) 1482/     3C5 : DD 7E 1F            		ld	a, (ix+zTrack.ModulationDelta)	; Get modulation delta per step
(1) 1483/     3C8 : 4F                  		ld	c, a							; c = modulation delta per step
(1) 1484/     3C9 : 17                  		rla									; Carry contains sign of delta
(1) 1485/     3CA : 9F                  		sbc	a, a							; a = 0 or -1 if carry is 0 or 1
(1) 1486/     3CB : 47                  		ld	b, a							; bc = sign extension of delta
(1) 1487/     3CC : 09                  		add	hl, bc							; hl += bc
(1) 1488/     3CD : DD 75 1B            		ld	(ix+zTrack.ModulationValLow), l	; Store low byte of accumulated modulation
(1) 1489/     3D0 : DD 74 1C            		ld	(ix+zTrack.ModulationValHigh), h	; Store high byte of accumulated modulation
(1) 1490/     3D3 :                     
(1) 1491/     3D3 :                     .mod_sustain:
(1) 1492/     3D3 : C1                  		pop	bc								; bc = note frequency
(1) 1493/     3D4 : 09                  		add	hl, bc							; hl = modulated note frequency
(1) 1494/     3D5 : DD 35 20            		dec	(ix+zTrack.ModulationSteps)		; Reduce number of modulation steps
(1) 1495/     3D8 : C0                  		ret	nz								; Return if nonzero
(1) 1496/     3D9 : FD 7E 03            		ld	a, (iy+3)						; Get number of steps from track data
(1) 1497/     3DC : DD 77 20            		ld	(ix+zTrack.ModulationSteps), a	; Reset modulation steps in track RAM
(1) 1498/     3DF : DD 7E 1F            		ld	a, (ix+zTrack.ModulationDelta)	; Load modulation delta
(1) 1499/     3E2 : ED 44               		neg									; Change its sign
(1) 1500/     3E4 : DD 77 1F            		ld	(ix+zTrack.ModulationDelta), a	; Store it back
(1) 1501/     3E7 : C9                  		ret
(1) 1502/     3E8 :                     ; ---------------------------------------------------------------------------
(1) 1503/     3E8 :                     ;loc_41A
(1) 1504/     3E8 :                     ;zDoFrequencyFlutter
(1) 1505/     3E8 :                     zDoModEnvelope:
(1) 1506/     3E8 : 3D                  		dec	a								; Convert into pointer table index
(1) 1507/     3E9 : EB                  		ex	de, hl							; Exchange de and hl; de = note frequency
(1) 1508/     3EA : 0E 04               		ld	c, zID_ModEnvPointers			; Value for modulation envelope pointer table
(1) 1509/     3EC : CF                  		rst	GetPointerTable					; hl = modulation envelope pointer for modulation control byte
(1) 1510/     3ED : 18 03               		jr	zDoModEnvelope_cont
(1) 1511/     3EF :                     ; ---------------------------------------------------------------------------
(1) 1512/     3EF :                     ;zFreqFlutterSetIndex
(1) 1513/     3EF :                     zModEnvSetIndex:
(1) 1514/     3EF : DD 77 1E            		ld	(ix+zTrack.ModEnvIndex), a		; Set new modulation envelope index
(1) 1515/     3F2 :                     
(1) 1516/     3F2 :                     ;loc_425
(1) 1517/     3F2 :                     ;zDoFrequencyFlutter_cont
(1) 1518/     3F2 :                     zDoModEnvelope_cont:
(1) 1519/     3F2 : E5                  		push	hl							; Save hl
(1) 1520/     3F3 : DD 4E 1E            		ld	c, (ix+zTrack.ModEnvIndex)		; c = modulation envelope index
(1) 1521/     3F6 : 06 00               		ld	b, 0							; b = 0
(1) 1522/     3F8 : 09                  		add	hl, bc							; Offset into modulation envelope table
(1) 1523/     3F9 :                     		; Fix based on similar code from Space Harrier II's sound driver.
(1) 1524/     3F9 :                     		; This is better than the previous fix, which was based on Ristar's driver.
(1) 1525/     3F9 : 4D                  		ld	c, l
(1) 1526/     3FA : 44                  		ld	b, h
(1) 1527/     3FB : 0A                  		ld	a, (bc)							; a = new modulation envelope value
(1) 1528/     3FC : E1                  		pop	hl								; Restore hl
(1) 1529/     3FD : CB 7F               		bit	7, a							; Is modulation envelope negative?
(1) 1530/     3FF : CA 2F 04            		jp	z, zlocPositiveModEnvMod		; Branch if not
(1) 1531/     402 : FE 82               		cp	ModEnvJumpTo					; Is it a command to jump to another value?
(1) 1532/     404 : 28 12               		jr	z, zlocChangeModEnvIndex		; Branch if yes
(1) 1533/     406 : FE 80               		cp	ModEnvReset						; Is it a command to reset envelope?
(1) 1534/     408 : 28 12               		jr	z, zlocResetModEnvMod			; Branch if yes
(1) 1535/     40A : FE 84               		cp	ModEnvAlterSens					; Is it a command to change sensibility?
(1) 1536/     40C : 28 11               		jr	z, zlocModEnvIncMultiplier		; Branch if yes
(1) 1537/     40E : 26 FF               		ld	h, -1							; For sign-extending negative modulation envelope
(1) 1538/     410 : 30 1F               		jr	nc, zlocApplyModEnvMod			; Branch if more than 84h
(1) 1539/     412 :                     		; Only 81h and 83h can get here.
(1) 1540/     412 : DD CB 00 F6         		set	bitSustainFreq, (ix+zTrack.PlaybackControl)	; Set 'sustain frequency' bit
(1) 1541/     416 : E1                  		pop	hl								; Tamper with return location so as to not return to caller
(1) 1542/     417 : C9                  		ret
(1) 1543/     418 :                     ; ---------------------------------------------------------------------------
(1) 1544/     418 :                     ;loc_449
(1) 1545/     418 :                     ;zlocChangeFlutterIndex
(1) 1546/     418 :                     zlocChangeModEnvIndex:
(1) 1547/     418 : 03                  		inc	bc								; Increment bc
(1) 1548/     419 : 0A                  		ld	a, (bc)							; Get next byte from modulation envelope
(1) 1549/     41A : 18 D3               		jr	zModEnvSetIndex					; Set position to value read
(1) 1550/     41C :                     ; ---------------------------------------------------------------------------
(1) 1551/     41C :                     ;loc_44D
(1) 1552/     41C :                     ;zlocResetFlutterMod
(1) 1553/     41C :                     zlocResetModEnvMod:
(1) 1554/     41C : AF                  		xor	a								; a = 0
(1) 1555/     41D : 18 D0               		jr	zModEnvSetIndex					; Reset position for modulation envelope
(1) 1556/     41F :                     ; ---------------------------------------------------------------------------
(1) 1557/     41F :                     ;loc_450
(1) 1558/     41F :                     ;zlocFlutterIncMultiplier
(1) 1559/     41F :                     zlocModEnvIncMultiplier:
(1) 1560/     41F : 03                  		inc	bc								; Increment bc
(1) 1561/     420 : 0A                  		ld	a, (bc)							; Get next byte from modulation envelope
(1) 1562/     421 : DD 86 1B            		add	a, (ix+zTrack.ModEnvSens)		; Add envelope sensibility to a...
(1) 1563/     424 : DD 77 1B            		ld	(ix+zTrack.ModEnvSens), a		; ... then store new value
(1) 1564/     427 : DD 34 1E            		inc	(ix+zTrack.ModEnvIndex)			; Advance envelope modulation...
(1) 1565/     42A : DD 34 1E            		inc	(ix+zTrack.ModEnvIndex)			; ... twice.
(1) 1566/     42D : 18 C3               		jr	zDoModEnvelope_cont
(1) 1567/     42F :                     ; ---------------------------------------------------------------------------
(1) 1568/     42F :                     ;loc_460
(1) 1569/     42F :                     ;zlocPositiveFlutterMod
(1) 1570/     42F :                     zlocPositiveModEnvMod:
(1) 1571/     42F : 26 00               		ld	h, 0							; h = 0
(1) 1572/     431 :                     
(1) 1573/     431 :                     ;loc_462
(1) 1574/     431 :                     ;zlocApplyFlutterMod
(1) 1575/     431 :                     zlocApplyModEnvMod:
(1) 1576/     431 : 6F                  		ld	l, a							; hl = sign extension of modulation value
(1) 1577/     432 : DD 46 1B            		ld	b, (ix+zTrack.ModEnvSens)		; Fetch envelope sensibility
(1) 1578/     435 : 04                  		inc	b								; Increment it (minimum 1)
(1) 1579/     436 : EB                  		ex	de, hl							; Swap hl and de; hl = note frequency
(1) 1580/     437 :                     
(1) 1581/     437 :                     .loop:
(1) 1582/     437 : 19                  		add	hl, de							; hl += de
(1) 1583/     438 : 10 FD               		djnz	.loop						; Make hl = note frequency + b * de
(1) 1584/     43A : DD 34 1E            		inc	(ix+zTrack.ModEnvIndex)			; Advance modulation envelope
(1) 1585/     43D : C9                  		ret
(1) 1586/     43E :                     ; End of function zDoModulation
(1) 1587/     43E :                     
(1) 1588/     43E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1589/     43E :                     ; Adds the current detune (signed) to note frequency.
(1) 1590/     43E :                     ;
(1) 1591/     43E :                     ; Input:   ix    Track RAM
(1) 1592/     43E :                     ; Output:  hl    Shifted frequency
(1) 1593/     43E :                     ;          a     Damaged
(1) 1594/     43E :                     ;          bc    Damaged
(1) 1595/     43E :                     ;
(1) 1596/     43E :                     ;sub_46F
(1) 1597/     43E :                     ;zUpdateFreq
(1) 1598/     43E :                     zDoPitchSlide:
(1) 1599/     43E : DD 66 0E            		ld	h, (ix+zTrack.FreqHigh)			; h = high byte of note frequency
(1) 1600/     441 : DD 6E 0D            		ld	l, (ix+zTrack.FreqLow)			; l = low byte of note frequency
(1) 1601/     444 : DD 7E 10            		ld	a, (ix+zTrack.Detune)			; a = detune
(1) 1602/     447 : 4F                  		ld	c, a							; bc = sign extension of detune
(1) 1603/     448 : 17                  		rla									; Carry contains sign of detune
(1) 1604/     449 : 9F                  		sbc	a, a							; a = 0 or -1 if carry is 0 or 1
(1) 1605/     44A : 47                  		ld	b, a							; bc = sign extension of detune
(1) 1606/     44B : 09                  		add	hl, bc							; Add to frequency
(1) 1607/     44C :                     
(1) 1608/     44C :                     		; Battletoads did this check under zApplyFreq below. Putting it
(1) 1609/     44C :                     		; here is an optimization.
(1) 1610/     44C : DD CB 00 6E         		bit	bitPitchSlide, (ix+zTrack.PlaybackControl)	; Is pitch slide on?
(1) 1611/     450 : C8                  		ret	z								; Return if not
(1) 1612/     451 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 1613/     455 : 20 22               		jr	nz, zApplyFreq					; Branch if yes
(1) 1614/     457 : EB                  		ex	de, hl							; de = new frequency
(1) 1615/     458 : 3E 07               		ld	a, 7							; Want to mask off octave bits
(1) 1616/     45A : A2                  		and	d								; a = bits 8-10 of frequency
(1) 1617/     45B : 47                  		ld	b, a							; Copy it to b
(1) 1618/     45C : 4B                  		ld	c, e							; bc = raw frequency of note
(1) 1619/     45D : B7                  		or	a								; Clear carry flag
(1) 1620/     45E : 21 83 02            		ld	hl, 283h						; hl = lowest FM note - 1
(1) 1621/     461 : ED 42               		sbc	hl, bc							; Is raw frequency lower than this?
(1) 1622/     463 : 38 06               		jr	c, .no_underflow				; Branch if not
(1) 1623/     465 : 21 85 FA            		ld	hl, -57Bh						; hl = +12 semitones (freq) - 1 octave (block)
(1) 1624/     468 : 19                  		add	hl, de							; hl = de exchanging 1 octave (block) for 12 semitones (freq)
(1) 1625/     469 : 18 0E               		jr	zApplyFreq
(1) 1626/     46B :                     ; ---------------------------------------------------------------------------
(1) 1627/     46B :                     .no_underflow:
(1) 1628/     46B : B7                  		or	a								; Clear carry flag
(1) 1629/     46C : 21 08 05            		ld	hl, 508h						; hl = 1 octave above lowest FM note
(1) 1630/     46F : ED 42               		sbc	hl, bc							; Is raw frequency above this?
(1) 1631/     471 : 30 05               		jr	nc, .no_overflow				; Branch if not
(1) 1632/     473 : 21 7C 05            		ld	hl, 57Ch						; hl = -12 semitones (freq) + 1 octave (block)
(1) 1633/     476 : 19                  		add	hl, de							; hl = de exchanging 1 octave (block) for 12 semitones (freq)
(1) 1634/     477 : EB                  		ex	de, hl							; de = new frequency
(1) 1635/     478 :                     
(1) 1636/     478 :                     .no_overflow:
(1) 1637/     478 : EB                  		ex	de, hl							; hl = new frequency
(1) 1638/     479 :                     
(1) 1639/     479 :                     zApplyFreq:
(1) 1640/     479 : DD 74 0E            		ld	(ix+zTrack.FreqHigh), h			; Save high byte of new frequency
(1) 1641/     47C : DD 75 0D            		ld	(ix+zTrack.FreqLow), l			; Save low byte of new frequency
(1) 1642/     47F : C9                  		ret
(1) 1643/     480 :                     ; End of function zDoPitchSlide
(1) 1644/     480 :                     
(1) 1645/     480 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1646/     480 :                     ; Gets offset for requested FM instrument.
(1) 1647/     480 :                     ;
(1) 1648/     480 :                     ;sub_483
(1) 1649/     480 :                     zGetFMInstrumentPointer:
(1) 1650/     480 : 2A B1 1C            		ld	hl, (zVoiceTblPtr)				; hl = pointer to voice table
(1) 1651/     483 : 3A A1 1C            		ld	a, (zUpdatingSFX)				; Get flag
(1) 1652/     486 : B7                  		or	a								; Is this a SFX track?
(1) 1653/     487 : 28 06               		jr	z, zGetFMInstrumentOffset		; Branch if not
(1) 1654/     489 : DD 6E 23            		ld	l, (ix+zTrack.VoicesLow)		; l = low byte of track's voice pointer
(1) 1655/     48C : DD 66 24            		ld	h, (ix+zTrack.VoicesHigh)		; h = high byte of track's voice pointer
(1) 1656/     48F :                     
(1) 1657/     48F :                     ;loc_492
(1) 1658/     48F :                     zGetFMInstrumentOffset:
(1) 1659/     48F : AF                  		xor	a								; a = 0
(1) 1660/     490 : B0                  		or	b								; Is FM instrument the first one (zero)?
(1) 1661/     491 : C8                  		ret	z								; Return if so
(1) 1662/     492 : 11 19 00            		ld	de, 25							; Size of each FM instrument
(1) 1663/     495 :                     
(1) 1664/     495 :                     .loop:
(1) 1665/     495 : 19                  		add	hl, de							; Advance pointer to next instrument
(1) 1666/     496 : 10 FD               		djnz	.loop						; Loop until instrument offset is found
(1) 1667/     498 : C9                  		ret
(1) 1668/     499 :                     ; End of function zGetFMInstrumentPointer
(1) 1669/     499 :                     
(1) 1670/     499 :                     ; ---------------------------------------------------------------------------
(1) 1671/     499 :                     ;loc_49C
(1) 1672/     499 :                     zFMInstrumentRegTable:
(1) 1673/     499 : B0                  		db ymAlgorithmFeedback				; Feedback/Algorithm
(1) 1674/     49A :                     zFMInstrumentOperatorTable:
(1) 1675/     49A : 30                  		db ymDetuneMultiply1				; Detune/multiple operator 1
(1) 1676/     49B : 38                  		db ymDetuneMultiply3				; Detune/multiple operator 3
(1) 1677/     49C : 34                  		db ymDetuneMultiply2				; Detune/multiple operator 2
(1) 1678/     49D : 3C                  		db ymDetuneMultiply4				; Detune/multiple operator 4
(1) 1679/     49E :                     zFMInstrumentRSARTable:
(1) 1680/     49E : 50                  		db ymRateScaleAttackRate1			; Rate scaling/attack rate operator 1
(1) 1681/     49F : 58                  		db ymRateScaleAttackRate3			; Rate scaling/attack rate operator 3
(1) 1682/     4A0 : 54                  		db ymRateScaleAttackRate2			; Rate scaling/attack rate operator 2
(1) 1683/     4A1 : 5C                  		db ymRateScaleAttackRate4			; Rate scaling/attack rate operator 4
(1) 1684/     4A2 :                     zFMInstrumentAMD1RTable:
(1) 1685/     4A2 : 60                  		db ymAMDecayRate1					; Amplitude modulation/first decay rate operator 1
(1) 1686/     4A3 : 68                  		db ymAMDecayRate3					; Amplitude modulation/first decay rate operator 3
(1) 1687/     4A4 : 64                  		db ymAMDecayRate2					; Amplitude modulation/first decay rate operator 2
(1) 1688/     4A5 : 6C                  		db ymAMDecayRate4					; Amplitude modulation/first decay rate operator 4
(1) 1689/     4A6 :                     zFMInstrumentD2RTable:
(1) 1690/     4A6 : 70                  		db ymSustainRate1					; Secondary decay rate operator 1
(1) 1691/     4A7 : 78                  		db ymSustainRate3					; Secondary decay rate operator 3
(1) 1692/     4A8 : 74                  		db ymSustainRate2					; Secondary decay rate operator 2
(1) 1693/     4A9 : 7C                  		db ymSustainRate4					; Secondary decay rate operator 4
(1) 1694/     4AA :                     zFMInstrumentD1LRRTable:
(1) 1695/     4AA : 80                  		db ymSustainLevelReleaseRate1		; Secondary amplitude/release rate operator 1
(1) 1696/     4AB : 88                  		db ymSustainLevelReleaseRate3		; Secondary amplitude/release rate operator 3
(1) 1697/     4AC : 84                  		db ymSustainLevelReleaseRate2		; Secondary amplitude/release rate operator 2
(1) 1698/     4AD : 8C                  		db ymSustainLevelReleaseRate4		; Secondary amplitude/release rate operator 4
(1) 1699/     4AE :                     zFMInstrumentOperatorTable_End
(1) 1700/     4AE :                     ;loc_4B1
(1) 1701/     4AE :                     zFMInstrumentTLTable:
(1) 1702/     4AE : 40                  		db ymTotalLevel1					; Total level operator 1
(1) 1703/     4AF : 48                  		db ymTotalLevel3					; Total level operator 3
(1) 1704/     4B0 : 44                  		db ymTotalLevel2					; Total level operator 2
(1) 1705/     4B1 : 4C                  		db ymTotalLevel4					; Total level operator 4
(1) 1706/     4B2 :                     zFMInstrumentTLTable_End
(1) 1707/     4B2 :                     ;loc_4B5
(1) 1708/     4B2 :                     zFMInstrumentSSGEGTable:
(1) 1709/     4B2 : 90                  		db ymSSGEG1							; SSG-EG operator 1
(1) 1710/     4B3 : 98                  		db ymSSGEG3							; SSG-EG operator 3
(1) 1711/     4B4 : 94                  		db ymSSGEG2							; SSG-EG operator 2
(1) 1712/     4B5 : 9C                  		db ymSSGEG4							; SSG-EG operator 4
(1) 1713/     4B6 :                     zFMInstrumentSSGEGTable_End
(1) 1714/     4B6 :                     
(1) 1715/     4B6 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1716/     4B6 :                     ; Subroutine to send FM instrument data to YM2612 chip.
(1) 1717/     4B6 :                     ;
(1) 1718/     4B6 :                     ;sub_4B9
(1) 1719/     4B6 :                     zSendFMInstrument:
(1) 1720/     4B6 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 1721/     4BA : 28 0C               		jr	z, .active						; Is so, quit
(1) 1722/     4BC :                     
(1) 1723/     4BC : 0E 15               		ld	c, zFMInstrumentOperatorTable_End-zFMInstrumentRegTable
(1) 1724/     4BE : 06 00               		ld	b, 0
(1) 1725/     4C0 : 09                  		add	hl, bc							; Point hl to TL data
(1) 1726/     4C1 : DD 75 15            		ld	(ix+zTrack.TLPtrLow), l			; Save low byte of pointer to (not yet uploaded) TL data
(1) 1727/     4C4 : DD 74 16            		ld	(ix+zTrack.TLPtrHigh), h		; Save high byte of pointer to (not yet uploaded) TL data
(1) 1728/     4C7 : C9                  		ret
(1) 1729/     4C8 :                     ; ---------------------------------------------------------------------------
(1) 1730/     4C8 :                     .active:
(1) 1731/     4C8 : FD E5               		push	iy							; Save iy
(1) 1732/     4CA : (MACRO)             		zGetFMPartPointer					; Point iy to appropriate FM part
(1) 1732/     4CA : DD 4E 01                            ld      c, (ix+zTrack.VoiceControl)             ; Get voice control bits for future use
(1) 1732/     4CD : FD 21 00 40                         ld      iy, zYM2612_A0                                  ; Point to part I
(1) 1732/     4D1 : CB 51                               bit     ymPartII, c                                             ; Is this the DAC channel or FM4 or FM5 or FM6?
(1) 1732/     4D3 : 28 06                               jr      z, .notFMII                                             ; If not, write reg/data pair to part I
(1) 1732/     4D5 : CB 91                               res     ymPartII, c                                             ; Strip 'bound to part II regs' bit
(1) 1732/     4D7 : FD 21 02 40                         ld      iy, zYM2612_A1                                  ; Point to part II
(1) 1732/     4DB :                     .notFMII:
(1) 1733/     4DB : 11 99 04            		ld	de, zFMInstrumentRegTable		; de = pointer to register output table
(1) 1734/     4DE : (MACRO)             		zFastWriteFM ymPanningAMSensFMSens, (ix+zTrack.AMSFMSPan)
(1) 1734/     4DE : 3E B4                               ld      a, YMPANNINGAMSENSFMSENS                                                  ; Get register to write to
(1) 1734/     4E0 : 81                                  add     a, c                                                    ; Add the channel bits to the register address
(1) 1734/     4E1 : FD 77 00                            ld      (iy+0), a                                               ; Select YM2612 register
(1) 1734/     4E4 : DD 7E 0A                            ld      a, (IX+ZTRACK.AMSFMSPAN)                                                 ; a = (IX+ZTRACK.AMSFMSPAN) to send
(1) 1734/     4E7 : FD 77 01                            ld      (iy+1), a                                               ; Send (IX+ZTRACK.AMSFMSPAN) to register
(1) 1735/     4EA : 06 15               		ld	b, zFMInstrumentOperatorTable_End-zFMInstrumentRegTable	; Number of commands to issue
(1) 1736/     4EC : DD 7E 12            		ld	a, (ix+zTrack.HaveSSGEGFlag)	; Get custom SSG-EG flag
(1) 1737/     4EF : B7                  		or	a								; Does track have custom SSG-EG data?
(1) 1738/     4F0 : F2 FF 04            		jp	p, .sendinstrument				; Branch if not
(1) 1739/     4F3 :                     
(1) 1740/     4F3 :                     		; Handle case of SSG-EG
(1) 1741/     4F3 :                     		; Start with detune/multiplier operators
(1) 1742/     4F3 : 06 05               		ld	b, zFMInstrumentRSARTable-zFMInstrumentRegTable	; Number of commands to issue
(1) 1743/     4F5 : CD 0C 05            		call	zSendFMInstrData			; Send FM instrument data
(1) 1744/     4F8 :                     
(1) 1745/     4F8 :                     		; Now for rate scaling/attack rate. The attack rate must be 1Fh if using
(1) 1746/     4F8 :                     		; SSG-EG, which is the reason for the split.
(1) 1747/     4F8 : 06 04               		ld	b, zFMInstrumentAMD1RTable-zFMInstrumentRSARTable	; Number of commands to issue
(1) 1748/     4FA : CD 1A 05            		call	zSendFMInstrDataRSAR		; Send FM instrument data
(1) 1749/     4FD :                     
(1) 1750/     4FD :                     		; Finalize with all the other operators.
(1) 1751/     4FD : 06 0C               		ld	b, zFMInstrumentOperatorTable_End-zFMInstrumentAMD1RTable	; Number of commands to issue
(1) 1752/     4FF :                     
(1) 1753/     4FF :                     .sendinstrument:
(1) 1754/     4FF : CD 0C 05            		call	zSendFMInstrData			; Send FM instrument data
(1) 1755/     502 : DD 75 15            		ld	(ix+zTrack.TLPtrLow), l			; Save low byte of pointer to (not yet uploaded) TL data
(1) 1756/     505 : DD 74 16            		ld	(ix+zTrack.TLPtrHigh), h		; Save high byte of pointer to (not yet uploaded) TL data
(1) 1757/     508 : D5                  		push	de							; Needed to balance stack
(1) 1758/     509 : C3 A6 0D            		jp	zSendTL.got_pointers			; Send TL data
(1) 1759/     50C :                     ; End of function zSendFMInstrument
(1) 1760/     50C :                     
(1) 1761/     50C :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1762/     50C :                     ; Sends FM instrument data to YM2612.
(1) 1763/     50C :                     ;
(1) 1764/     50C :                     ; Input:   ix    Track data
(1) 1765/     50C :                     ;          hl    Pointer to instrument data
(1) 1766/     50C :                     ;          de    Pointer to register selector table
(1) 1767/     50C :                     ; Output:   a    Value written to the register
(1) 1768/     50C :                     ;           c    Value written to the register
(1) 1769/     50C :                     ;
(1) 1770/     50C :                     ;sub_4DA
(1) 1771/     50C :                     zSendFMInstrData:
(1) 1772/     50C : (MACRO)             		zFastWriteFM (de), (hl)
(1) 1772/     50C : 1A                                  ld      a, (DE)                                                  ; Get register to write to
(1) 1772/     50D : 81                                  add     a, c                                                    ; Add the channel bits to the register address
(1) 1772/     50E : FD 77 00                            ld      (iy+0), a                                               ; Select YM2612 register
(1) 1772/     511 : 7E                                  ld      a, (HL)                                                 ; a = (HL) to send
(1) 1772/     512 : FD 77 01                            ld      (iy+1), a                                               ; Send (HL) to register
(1) 1773/     515 : 13                  		inc	de								; Advance pointer
(1) 1774/     516 : 23                  		inc	hl								; Advance pointer
(1) 1775/     517 : 10 F3               		djnz	zSendFMInstrData			; Loop
(1) 1776/     519 : C9                  		ret
(1) 1777/     51A :                     ; End of function zSendFMInstrData
(1) 1778/     51A :                     
(1) 1779/     51A :                     zSendFMInstrDataRSAR:
(1) 1780/     51A : (MACRO)             		zFastWriteFM (de), (hl), setMaxAR
(1) 1780/     51A : 1A                                  ld      a, (DE)                                                  ; Get register to write to
(1) 1780/     51B : 81                                  add     a, c                                                    ; Add the channel bits to the register address
(1) 1780/     51C : FD 77 00                            ld      (iy+0), a                                               ; Select YM2612 register
(1) 1780/     51F : 7E                                  ld      a, (HL)                                                 ; a = (HL) to send
(1) 1780/     520 :  (MACRO-2)                                  SETMAXAR
(1) 1780/     520 : F6 1F                               or      maxAttackRate                                   ; Set AR to maximum
(1) 1780/     522 : FD 77 01                            ld      (iy+1), a                                               ; Send (HL) to register
(1) 1781/     525 : 13                  		inc	de								; Advance pointer
(1) 1782/     526 : 23                  		inc	hl								; Advance pointer
(1) 1783/     527 : 10 F1               		djnz	zSendFMInstrDataRSAR		; Loop
(1) 1784/     529 : C9                  		ret
(1) 1785/     52A :                     
(1) 1786/     52A :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1787/     52A :                     ; Rotates sound queue and clears last entry. Then plays the popped sound from
(1) 1788/     52A :                     ; the queue.
(1) 1789/     52A :                     ;loc_4E2
(1) 1790/     52A :                     zCycleSoundQueue:
(1) 1791/     52A : 3A 8F 1C            		ld	a, (zSoundQueue1)				; Get first item in sound queue
(1) 1792/     52D : 32 93 1C            		ld	(zNextSound), a					; Save into next sound variable
(1) 1793/     530 : 3A 90 1C            		ld	a, (zSoundQueue2)				; Get second item in queue
(1) 1794/     533 : 32 8F 1C            		ld	(zSoundQueue1), a				; Move to first spot
(1) 1795/     536 : AF                  		xor	a								; a = 0
(1) 1796/     537 : 32 90 1C            		ld	(zSoundQueue2), a				; Clear third spot in queue
(1) 1797/     53A : 3A 93 1C            		ld	a, (zNextSound)					; a = next sound to play
(1) 1798/     53D :                     		; Fall through to zPlaySFXByIndex
(1) 1799/     53D :                     
(1) 1800/     53D :                     zPlaySFXByIndex:
(1) 1805/     53D : FE 33               		cp	SndID__First					; Is this below the sound start point?
(1) 1806/     53F : D8                  		ret	c								; Return if yes
(1) 1808/     540 : FE DF               		cp	SndID__End						; Is this a sound effect?
(1) 1809/     542 : DA 47 07            		jp	c, zPlaySound_CheckRing			; Branch if yes
(1) 1810/     545 : FE DF               		cp	DACID__First
(1) 1811/     547 : D8                  		ret	c
(1) 1812/     548 : FE DF               		cp	DACID__End
(1) 1813/     54A : D0                  		ret	nc
(1) 1814/     54B :                     		; "PlayVoice/PlayDACSFX" in ValleyBell's SMPS disassemblies
(1) 1815/     54B : D6 DE               		sub	DACID__First-1
(1) 1816/     54D : 32 AC 1C            		ld	(zDACIndex), a
(1) 1817/     550 : 3E 01               		ld	a, 1
(1) 1818/     552 : 32 C8 1C            		ld	(zSongDAC.DACSFXPlaying), a
(1) 1819/     555 : C3 2E 07            		jp	zClearNextSound
(1) 1820/     558 :                     ; End of function zPlaySFXByIndex
(1) 1821/     558 :                     
(1) 1822/     558 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1823/     558 :                     ; Rotates sound queue and clears last entry. Then plays the popped sound from
(1) 1824/     558 :                     ; the queue.
(1) 1825/     558 :                     ;loc_4E2
(1) 1826/     558 :                     zCycleMusicQueue:
(1) 1827/     558 : 3A 8E 1C            		ld	a, (zSoundQueue0)				; Get queued music
(1) 1828/     55B : 32 93 1C            		ld	(zNextSound), a					; Save into next sound variable
(1) 1829/     55E : AF                  		xor	a								; a = 0
(1) 1830/     55F : 32 8E 1C            		ld	(zSoundQueue0), a				; Clear music spot
(1) 1831/     562 : 3A 93 1C            		ld	a, (zNextSound)					; a = next sound to play
(1) 1832/     565 :                     		; Fall through to zPlaySoundByIndex
(1) 1833/     565 :                     ; End of function zCycleSoundQueue
(1) 1834/     565 :                     
(1) 1835/     565 :                     ; ===========================================================================
(1) 1836/     565 :                     ; Type Check
(1) 1837/     565 :                     ; ===========================================================================
(1) 1838/     565 :                     ; 1-32, DC = Music
(1) 1839/     565 :                     ; 33-DB, DD-DF = SFX
(1) 1840/     565 :                     ; E1-E6 = Fade Effects
(1) 1841/     565 :                     ; FF = SEGA Scream
(1) 1842/     565 :                     
(1) 1843/     565 :                     ; TypeCheck:
(1) 1844/     565 :                     ;sub_4FB
(1) 1845/     565 :                     zPlaySoundByIndex:
(1) 1846/     565 : FE 34               		cp	MusID__End						; Is this a music?
(1) 1847/     567 : DA A8 05            		jp	c, zPlayMusic					; Branch if yes
(1) 1848/     56A : FE E1               		cp	FadeID__First					; Is it before the first fade effect?
(1) 1849/     56C : DA C8 09            		jp	c, zMusicFade					; Branch if yes
(1) 1850/     56F : FE E6               		cp	FadeID__End						; Is this after the last fade effect?
(1) 1851/     571 : D2 C8 09            		jp	nc, zMusicFade					; Branch if yes
(1) 1852/     574 : D6 E1               		sub	FadeID__First					; If none of the checks passed, do fade effects.
(1) 1853/     576 : 21 7B 05            		ld	hl, zFadeEffects				; hl = switch table pointer
(1) 1854/     579 : DF                  		rst	PointerTableOffset				; Get address of function that handles the fade effect
(1) 1855/     57A : E9                  		jp	(hl)							; Handle fade effect
(1) 1856/     57B :                     ; End of function zPlaySoundByIndex
(1) 1857/     57B :                     ; ---------------------------------------------------------------------------
(1) 1858/     57B :                     ;loc_524
(1) 1859/     57B :                     zFadeEffects:
(1) 1860/     57B : DC 08               		dw	zFadeOutMusic					; E1h
(1) 1861/     57D : C8 09               		dw	zMusicFade						; E2h
(1) 1862/     57F : 68 0A               		dw	zPSGSilenceAll					; E3h
(1) 1863/     581 : 85 05               		dw	zStopSFX						; E4h
(1) 1864/     583 : DC 08               		dw	zFadeOutMusic					; E5h
(1) 1865/     585 :                     ; ---------------------------------------------------------------------------
(1) 1866/     585 :                     ;sub_52E
(1) 1867/     585 :                     zStopSFX:
(1) 1868/     585 : DD 21 52 1E         		ld	ix, zTracksSFXStart				; ix = pointer to SFX track memory
(1) 1869/     589 : 06 07               		ld	b, zNumSFXTracks				; Number of channels
(1) 1870/     58B : 3E 01               		ld	a, 1							; a = 1
(1) 1871/     58D : 32 A1 1C            		ld	(zUpdatingSFX), a				; Set flag to update SFX
(1) 1872/     590 :                     
(1) 1873/     590 :                     .loop:
(1) 1874/     590 : C5                  		push	bc							; Save bc
(1) 1875/     591 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is track playing?
(1) 1876/     595 : C4 A3 05            		call	nz, zSilenceStopTrack		; Branch if yes
(1) 1877/     598 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 1878/     59B : DD 19               		add	ix, de							; ix = pointer to next track
(1) 1879/     59D : C1                  		pop	bc								; Restore bc
(1) 1880/     59E : 10 F0               		djnz	.loop						; Loop for each track
(1) 1881/     5A0 : C3 2E 07            		jp	zClearNextSound
(1) 1882/     5A3 :                     
(1) 1883/     5A3 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 1884/     5A3 :                     ; Writes hl to stack twice and stops track, silencing it. The two hl pushes
(1) 1885/     5A3 :                     ; will be counteracted by cfSilenceStopTrack.
(1) 1886/     5A3 :                     ;
(1) 1887/     5A3 :                     ;sub_54D
(1) 1888/     5A3 :                     zSilenceStopTrack:
(1) 1889/     5A3 : E5                  		push	hl							; Save hl...
(1) 1890/     5A4 : E5                  		push	hl							; ... twice
(1) 1891/     5A5 : C3 48 0D            		jp	cfSilenceStopTrack				; Silence FM channel and stop track
(1) 1892/     5A8 :                     ; End of function zSilenceStopTrack
(1) 1893/     5A8 :                     ; ---------------------------------------------------------------------------
(1) 1894/     5A8 :                     
(1) 1895/     5A8 :                     ;loc_558
(1) 1896/     5A8 :                     zPlayMusic:
(1) 1897/     5A8 : D6 01               		sub	MusID__First					; Remap index from 1h-33h to 0h-32h
(1) 1898/     5AA : F8                  		ret	m								; Return if negative (id = 0)
(1) 1899/     5AB : F5                  		push	af							; Save af
(1) 1900/     5AC : FE 29               		cp	MusID_ExtraLife-MusID__First	; Is it the 1-up music?
(1) 1901/     5AE : C2 3D 06            		jp	nz, zPlayMusic_DoFade			; Branch if not
(1) 1902/     5B1 : 3A A5 1C            		ld	a, (zFadeInTimeout)				; Fading timeout
(1) 1903/     5B4 : B7                  		or	a								; Is music being faded?
(1) 1904/     5B5 : CA D0 05            		jp	z, .no_fade						; Branch if not
(1) 1905/     5B8 : AF                  		xor	a								; a = 0
(1) 1906/     5B9 : 32 94 1C            		ld	(zMusicNumber), a				; Clear M68K input queue...
(1) 1907/     5BC : 32 95 1C            		ld	(zSFXNumber0), a				; ... including SFX slot 0...
(1) 1908/     5BF : 32 96 1C            		ld	(zSFXNumber1), a				; ... and SFX slot 1
(1) 1909/     5C2 : 32 8E 1C            		ld	(zSoundQueue0), a				; Also clear music queue entry 0...
(1) 1910/     5C5 : 32 8F 1C            		ld	(zSoundQueue1), a				; ... and entry 1...
(1) 1911/     5C8 : 32 90 1C            		ld	(zSoundQueue2), a				; ... and entry 2
(1) 1912/     5CB : 32 93 1C            		ld	(zNextSound), a					; Clear currently selected song to play
(1) 1913/     5CE : F1                  		pop	af								; Restore af
(1) 1914/     5CF : C9                  		ret
(1) 1915/     5D0 :                     ; ---------------------------------------------------------------------------
(1) 1916/     5D0 :                     .no_fade:
(1) 1917/     5D0 : 3A A0 1C            		ld	a, (zFadeToPrevFlag)			; Get fade-to-prev flag
(1) 1918/     5D3 : FE 29               		cp	MusID_ExtraLife-1				; Was it triggered by the 1-up song?
(1) 1919/     5D5 : CA 40 06            		jp	z, zBGMLoad						; Branch if yes
(1) 1920/     5D8 : AF                  		xor	a								; a = 0
(1) 1921/     5D9 : 32 94 1C            		ld	(zMusicNumber), a				; Clear M68K input queue...
(1) 1922/     5DC : 32 95 1C            		ld	(zSFXNumber0), a				; ... including SFX slot 0...
(1) 1923/     5DF : 32 96 1C            		ld	(zSFXNumber1), a				; ... and SFX slot 1
(1) 1924/     5E2 : 32 8E 1C            		ld	(zSoundQueue0), a				; Also clear music queue entry 0...
(1) 1925/     5E5 : 32 8F 1C            		ld	(zSoundQueue1), a				; ... and entry 1...
(1) 1926/     5E8 : 32 90 1C            		ld	(zSoundQueue2), a				; ... and entry 2
(1) 1927/     5EB : 3A B3 1C            		ld	a, (zSongBank)					; Get song bank for extant track...
(1) 1928/     5EE : 32 A9 1C            		ld	(zSongBankSave), a				; ... and save it
(1) 1929/     5F1 : 3A 91 1C            		ld	a, (zTempoSpeedup)				; Get current tempo speed-up value...
(1) 1930/     5F4 : 32 AA 1C            		ld	(zTempoSpeedupSave), a			; ... and save it
(1) 1931/     5F7 : 3A A2 1C            		ld	a, (zCurrentTempo)				; Get current tempo
(1) 1932/     5FA : 32 A8 1C            		ld	(zCurrentTempoSave), a			; Save it
(1) 1933/     5FD : 3A 7A 1C            		ld	a, (zDACEnable)					; Get song DAC enable for extant track...
(1) 1934/     600 : 32 7B 1C            		ld	(zDACEnableSave), a				; ... and save it
(1) 1935/     603 : AF                  		xor	a								; a = 0
(1) 1936/     604 : 32 91 1C            		ld	(zTempoSpeedup), a				; 1-Up should play on normal speed
(1) 1937/     607 : 32 97 1C            		ld	(zContinuousSFX), a				; Clear continuous SFX ID
(1) 1938/     60A : 32 98 1C            		ld	(zContinuousSFXFlag), a			; Clear continuous SFX flag
(1) 1939/     60D : 32 99 1C            		ld	(zContSFXLoopCnt), a			; Clear continuous SFX counter
(1) 1940/     610 : 21 B8 1C            		ld	hl, zTracksStart				; hl = pointer to song RAM
(1) 1941/     613 : 11 52 1E            		ld	de, zTracksSaveStart			; de = pointer to RAM area to save the song data to
(1) 1942/     616 : 01 9A 01            		ld	bc, zTracksSaveEnd-zTracksSaveStart		; Number of bytes to copy
(1) 1943/     619 : ED B0               		ldir								; while (bc-- > 0) *de++ = *hl++;
(1) 1944/     61B : 21 52 1E            		ld	hl, zTracksSaveStart			; hl = pointer to saved song's RAM area
(1) 1945/     61E : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 1946/     621 : 06 0A               		ld	b, zNumSaveTracks				; Number of tracks
(1) 1947/     623 :                     
(1) 1948/     623 :                     .loop:
(1) 1949/     623 : 7E                  		ld	a, (hl)							; Get playback control byte for song
(1) 1950/     624 : E6 7F               		and	(~(1<<bitTrackPlaying))&0FFh	; Strip the 'playing' bit
(1) 1951/     626 : F6 04               		or	1<<bitSFXOverride				; Set bit 2 (SFX overriding)
(1) 1952/     628 : 77                  		ld	(hl), a							; And save it all
(1) 1953/     629 : 19                  		add	hl, de							; Advance to next track
(1) 1954/     62A : 10 F7               		djnz	.loop						; Loop for all tracks
(1) 1955/     62C :                     
(1) 1956/     62C : 3E 29               		ld	a, MusID_ExtraLife-1			; a = 1-up id-1
(1) 1957/     62E : 32 A0 1C            		ld	(zFadeToPrevFlag), a			; Set fade-to-prev flag to it
(1) 1958/     631 : 2A B1 1C            		ld	hl, (zVoiceTblPtr)				; Get voice table pointer
(1) 1959/     634 : 22 A6 1C            		ld	(zVoiceTblPtrSave), hl			; Save it
(1) 1960/     637 : CD E2 09            		call	zMusicFadeSimple
(1) 1961/     63A : C3 40 06            		jp	zBGMLoad
(1) 1962/     63D :                     ; ---------------------------------------------------------------------------
(1) 1963/     63D :                     
(1) 1964/     63D :                     zPlayMusic_DoFade:
(1) 1965/     63D : CD BC 09            		call	zMusicFadeKeepSFX			; Stop all music
(1) 1966/     640 :                     
(1) 1967/     640 :                     ;loc_5DE
(1) 1968/     640 :                     zBGMLoad:
(1) 1969/     640 : F1                  		pop	af								; Restore af
(1) 1970/     641 : F5                  		push	af							; Then save it back again
(1) 1971/     642 : 21 6F 17            		ld	hl, z80_MusicBanks				; hl = table of music banks
(1) 1972/     645 :                     		; The following block adds the music index to the table address as a 16-bit offset
(1) 1973/     645 : 85                  		add	a, l							; a += l
(1) 1974/     646 : 6F                  		ld	l, a							; l = low byte of offset into music entry
(1) 1975/     647 : 8C                  		adc	a, h							; a += h, plus 1 if a + l overflowed the 8-bit register
(1) 1976/     648 : 95                  		sub	l								; Now, a = high byte of offset into music entry
(1) 1977/     649 : 67                  		ld	h, a							; hl is the offset to the music bank
(1) 1978/     64A : 7E                  		ld	a, (hl)							; Get bank for the song to play
(1) 1979/     64B : 32 B3 1C            		ld	(zSongBank), a					; Save the song's bank...
(1) 1980/     64E : (MACRO)             		bankswitch							; ... then bank switch to it
(1) 1980/     64E : 21 00 60                            ld      hl, zBankRegister
(1) 1980/     651 : 77                                  ld      (hl), a
(1) 1980/     652 :                                     rept 7
(1) 1980/     652 :                                             rrca
(1) 1980/     652 :                                             ld      (hl), a
(1) 1980/     652 :                                     endm
(1) 1980/     652 : 0F                                          rrca
(1) 1980/     653 : 77                                          ld      (hl), a
(1) 1980/     654 : 0F                                          rrca
(1) 1980/     655 : 77                                          ld      (hl), a
(1) 1980/     656 : 0F                                          rrca
(1) 1980/     657 : 77                                          ld      (hl), a
(1) 1980/     658 : 0F                                          rrca
(1) 1980/     659 : 77                                          ld      (hl), a
(1) 1980/     65A : 0F                                          rrca
(1) 1980/     65B : 77                                          ld      (hl), a
(1) 1980/     65C : 0F                                          rrca
(1) 1980/     65D : 77                                          ld      (hl), a
(1) 1980/     65E : 0F                                          rrca
(1) 1980/     65F : 77                                          ld      (hl), a
(1) 1980/     660 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 1981/     661 : 3E B6               		ld	a, ymPanningAMSensFMSens|ymFM3	; Set Panning / AMS / FMS
(1) 1982/     663 : 32 02 40            		ld	(zYM2612_A1), a					; Write destination address to YM2612 address register
(1) 1983/     666 : 00                  		nop
(1) 1984/     667 : 3E C0               		ld	a, maskPanning					; default Panning / AMS / FMS settings (only stereo L/R enabled)
(1) 1985/     669 : 32 03 40            		ld	(zYM2612_D1), a					; Write to YM2612 data register
(1) 1986/     66C : F1                  		pop	af								; Restore af
(1) 1987/     66D : 0E 00               		ld	c, zID_MusicPointers			; c = 4 (music pointer table)
(1) 1988/     66F : CF                  		rst	GetPointerTable					; hl = pointer to song data
(1) 1989/     670 : E5                  		push	hl							; Save hl...
(1) 1990/     671 : E5                  		push	hl							; ... twice
(1) 1991/     672 : E7                  		rst	ReadPointer						; Dereference pointer, so that hl = pointer to voice table
(1) 1992/     673 : 22 B1 1C            		ld	(zVoiceTblPtr), hl				; Store voice table pointer
(1) 1993/     676 : E1                  		pop	hl								; Restore hl to pointer to song data
(1) 1994/     677 : FD E1               		pop	iy								; Also set iy = pointer to song data
(1) 1995/     679 : FD 7E 05            		ld	a, (iy+5)						; Main tempo value
(1) 1996/     67C : 32 9F 1C            		ld	(zTempoAccumulator), a			; Set starting accumulator value
(1) 1997/     67F : 32 A2 1C            		ld	(zCurrentTempo), a				; Store current song tempo
(1) 1998/     682 : 11 06 00            		ld	de, 6							; Offset into DAC pointer
(1) 1999/     685 : 19                  		add	hl, de							; hl = pointer to DAC pointer
(1) 2000/     686 : 22 AD 1C            		ld	(zSongPosition), hl				; Save it to RAM
(1) 2001/     689 : 21 33 07            		ld	hl, zFMDACInitBytes				; Load pointer to init data
(1) 2002/     68C : 22 AF 1C            		ld	(zTrackInitPos), hl				; Save it to RAM
(1) 2003/     68F : 11 B8 1C            		ld	de, zTracksStart				; de = pointer to track RAM
(1) 2004/     692 : FD 46 02            		ld	b, (iy+2)						; b = number of FM + DAC channels
(1) 2005/     695 : FD 7E 04            		ld	a, (iy+4)						; a = tempo divider
(1) 2006/     698 :                     
(1) 2007/     698 :                     .fm_dac_loop:
(1) 2008/     698 : C5                  		push	bc							; Save bc (gets damaged by ldi instructions)
(1) 2009/     699 : 2A AF 1C            		ld	hl, (zTrackInitPos)				; Restore saved position for init bytes
(1) 2010/     69C : ED A0               		ldi									; *de++ = *hl++	(copy initial playback control)
(1) 2011/     69E : 08                  		ex	af, af'							; Save tempo divider
(1) 2012/     69F : E5                  		push	hl							; Save track data
(1) 2013/     6A0 : 7E                  		ld	a, (hl)							; Get initial channel assignment bits
(1) 2014/     6A1 : CD 2C 08            		call	zIsSFXTrackOverriding_Part2	; Is SFX overriding?
(1) 2015/     6A4 : E1                  		pop	hl								; Restore track data
(1) 2016/     6A5 : F2 AE 06            		jp	p, .not_overriding_fm			; Branch if not
(1) 2017/     6A8 : EB                  		ex	hl, de							; Swap hl and de
(1) 2018/     6A9 : 2B                  		dec	hl								; Point to track playback control
(1) 2019/     6AA : CB D6               		set	bitSFXOverride, (hl)			; Set 'SFX is overriding this track' bit
(1) 2020/     6AC : 23                  		inc	hl								; Point back to channel assignment bits
(1) 2021/     6AD : EB                  		ex	hl, de							; Swap hl and de
(1) 2022/     6AE :                     
(1) 2023/     6AE :                     .not_overriding_fm:
(1) 2024/     6AE : ED A0               		ldi									; *de++ = *hl++	(copy channel assignment bits)
(1) 2025/     6B0 :                     
(1) 2026/     6B0 :                     .continue_fm_init:
(1) 2027/     6B0 : 08                  		ex	af, af'							; Restore tempo divider
(1) 2028/     6B1 : 12                  		ld	(de), a							; Copy tempo divider
(1) 2029/     6B2 : 13                  		inc	de								; Advance pointer
(1) 2030/     6B3 : 22 AF 1C            		ld	(zTrackInitPos), hl				; Save current position in channel assignment bits
(1) 2031/     6B6 : 2A AD 1C            		ld	hl, (zSongPosition)				; Load current position in BGM data
(1) 2032/     6B9 : ED A0               		ldi									; *de++ = *hl++ (copy track address low byte)
(1) 2033/     6BB : ED A0               		ldi									; *de++ = *hl++ (copy track address high byte)
(1) 2034/     6BD : ED A0               		ldi									; *de++ = *hl++ (default transposition)
(1) 2035/     6BF : ED A0               		ldi									; *de++ = *hl++ (track default volume)
(1) 2036/     6C1 : 22 AD 1C            		ld	(zSongPosition), hl				; Store current position in BGM data
(1) 2037/     6C4 : CD 3B 08            		call	zInitFMDACTrack				; Init the remainder of the track RAM
(1) 2038/     6C7 : C1                  		pop	bc								; Restore bc
(1) 2039/     6C8 : 10 CE               		djnz	.fm_dac_loop				; Loop for all tracks (stored in b)
(1) 2040/     6CA :                     
(1) 2041/     6CA : FD 7E 02            		ld	a, (iy+2)						; a = number of FM + DAC channels
(1) 2042/     6CD : D6 07               		sub	7								; Does it equal 7? (6 FM channels)
(1) 2043/     6CF : 28 11               		jr	z, .set_dac						; If yes, skip this next part
(1) 2044/     6D1 :                     
(1) 2045/     6D1 :                     .got_dac:
(1) 2046/     6D1 :                     		; Setup FM Channel 6 specifically if it's not in use
(1) 2047/     6D1 : 21 AE 1D            		ld	hl, zSongFM6					; Get FM3 track
(1) 2048/     6D4 : 06 27               		ld	b, zTrack.len-2					; Loop counter
(1) 2049/     6D6 : 36 14               		ld	(hl), maskFM6Unused				; Set 'SFX is overriding this track' and 'Track is resting' bits, clear 'Track is playing' bit
(1) 2050/     6D8 : 23                  		inc	hl								; Point to voice control byte
(1) 2051/     6D9 : 36 06               		ld	(hl), ymFM6						; This is FM6
(1) 2052/     6DB : AF                  		xor	a								; Clear 'a'
(1) 2053/     6DC :                     
(1) 2054/     6DC :                     .loop:
(1) 2055/     6DC : 23                  		inc	hl								; Advance to next byte
(1) 2056/     6DD : 77                  		ld	(hl), a							; Put 0 into this byte
(1) 2057/     6DE : 10 FC               		djnz	.loop						; Loop until end of track
(1) 2058/     6E0 :                     
(1) 2059/     6E0 : 3E 80               		ld	a, maskDACEnable				; FM Channel 6 is NOT in use (will enable DAC)
(1) 2060/     6E2 :                     
(1) 2061/     6E2 :                     .set_dac:
(1) 2062/     6E2 : 4F                  		ld	c, a							; Set this as value to be used in FM register write coming up...
(1) 2063/     6E3 : 32 7A 1C            		ld	(zDACEnable), a					; Note whether FM Channel 6 is in use (enables DAC if not)
(1) 2064/     6E6 : 3E 2B               		ld	a, ymDACEnable					; Set DAC Enable appropriately
(1) 2065/     6E8 : CD BC 00            		call	zWriteFMI
(1) 2066/     6EB :                     		; End of DAC/FM init, begin PSG init
(1) 2067/     6EB :                     
(1) 2068/     6EB : FD 7E 03            		ld	a, (iy+3)						; Get number of PSG tracks
(1) 2069/     6EE : B7                  		or	a								; Do we have any PSG channels?
(1) 2070/     6EF : CA 2E 07            		jp	z, zClearNextSound				; Branch if not
(1) 2071/     6F2 : 47                  		ld	b, a							; b = number of PSG tracks
(1) 2072/     6F3 : 21 41 07            		ld	hl, zPSGInitBytes				; Load pointer to init data
(1) 2073/     6F6 : 22 AF 1C            		ld	(zTrackInitPos), hl				; Save it to RAM
(1) 2074/     6F9 : 11 D7 1D            		ld	de, zSongPSG1					; de = pointer to RAM for song PSG tracks
(1) 2075/     6FC : FD 7E 04            		ld	a, (iy+4)						; a = tempo divider
(1) 2076/     6FF :                     
(1) 2077/     6FF :                     .psg_loop:
(1) 2078/     6FF : C5                  		push	bc							; Save bc (gets damaged by ldi instructions)
(1) 2079/     700 : 2A AF 1C            		ld	hl, (zTrackInitPos)				; Restore saved position for init bytes
(1) 2080/     703 : ED A0               		ldi									; *de++ = *hl++	(copy initial playback control)
(1) 2081/     705 : 08                  		ex	af, af'							; Save tempo divider
(1) 2082/     706 : E5                  		push	hl							; Save track data
(1) 2083/     707 : 7E                  		ld	a, (hl)							; Get initial channel assignment bits
(1) 2084/     708 : CD 2C 08            		call	zIsSFXTrackOverriding_Part2	; Is SFX overriding?
(1) 2085/     70B : E1                  		pop	hl								; Restore track data
(1) 2086/     70C : F2 15 07            		jp	p, .not_overriding_psg			; Branch if not
(1) 2087/     70F : EB                  		ex	hl, de							; Swap hl and de
(1) 2088/     710 : 2B                  		dec	hl								; Point to track playback control
(1) 2089/     711 : CB D6               		set	bitSFXOverride, (hl)			; Set 'SFX is overriding this track' bit
(1) 2090/     713 : 23                  		inc	hl								; Point back to channel assignment bits
(1) 2091/     714 : EB                  		ex	hl, de							; Swap hl and de
(1) 2092/     715 :                     
(1) 2093/     715 :                     .not_overriding_psg:
(1) 2094/     715 : ED A0               		ldi									; *de++ = *hl++	(copy channel assignment bits)
(1) 2095/     717 :                     
(1) 2096/     717 :                     .continue_psg_init:
(1) 2097/     717 : 08                  		ex	af, af'							; Restore tempo divider
(1) 2098/     718 : 12                  		ld	(de), a							; Copy tempo divider
(1) 2099/     719 : 13                  		inc	de								; Advance pointer
(1) 2100/     71A : 22 AF 1C            		ld	(zTrackInitPos), hl				; Save current position in channel assignment bits
(1) 2101/     71D : 2A AD 1C            		ld	hl, (zSongPosition)				; Load current position in BGM data
(1) 2102/     720 : 01 06 00            		ld	bc, 6							; Copy 6 bytes
(1) 2103/     723 : ED B0               		ldir								; while (bc-- > 0) *de++ = *hl++; (copy track address, default transposition, default volume, modulation control, default PSG tone)
(1) 2104/     725 : 22 AD 1C            		ld	(zSongPosition), hl				; Store current potition in BGM data
(1) 2105/     728 : CD 42 08            		call	zZeroFillTrackRAM			; Init the remainder of the track RAM
(1) 2106/     72B : C1                  		pop	bc								; Restore bc
(1) 2107/     72C : 10 D1               		djnz	.psg_loop					; Loop for all tracks (stored in b)
(1) 2108/     72E :                     		; FALL THROUGH
(1) 2109/     72E :                     
(1) 2110/     72E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2111/     72E :                     ; Clears next sound to play.
(1) 2112/     72E :                     ;sub_690
(1) 2113/     72E :                     zClearNextSound:
(1) 2114/     72E : AF                  		xor	a
(1) 2115/     72F : 32 93 1C            		ld	(zNextSound), a
(1) 2116/     732 : C9                  		ret
(1) 2117/     733 :                     ; End of function zClearNextSound
(1) 2118/     733 :                     ; ---------------------------------------------------------------------------
(1) 2119/     733 :                     ;loc_695
(1) 2120/     733 :                     ; FM/DAC channel assignment bits
(1) 2121/     733 :                     ; The first byte in every pair (always 80h) is default value for playback control bits.
(1) 2122/     733 :                     ; The second byte in every pair goes as follows:
(1) 2123/     733 :                     ; The first is for DAC; then 0, 1, 2 then 4, 5, 6 for the FM channels (the missing 3
(1) 2124/     733 :                     ; is the gap between part I and part II for YM2612 port writes).
(1) 2125/     733 :                     zFMDACInitBytes:
(1) 2126/     733 : 80 06               		db (1<<bitTrackPlaying), ymDAC
(1) 2127/     735 : 80 00               		db (1<<bitTrackPlaying), ymFM1
(1) 2128/     737 : 80 01               		db (1<<bitTrackPlaying), ymFM2
(1) 2129/     739 :                     
(1) 2130/     739 :                     zFMDACInitBytesFM3:
(1) 2131/     739 : 80 02               		db (1<<bitTrackPlaying), ymFM3
(1) 2132/     73B : 80 04               		db (1<<bitTrackPlaying), ymFM4
(1) 2133/     73D : 80 05               		db (1<<bitTrackPlaying), ymFM5
(1) 2134/     73F : 80 06               		db (1<<bitTrackPlaying), ymFM6
(1) 2135/     741 :                     ;loc_6A3
(1) 2136/     741 :                     ; Default values for PSG tracks
(1) 2137/     741 :                     ; The first byte in every pair (always 80h) is default value for playback control bits.
(1) 2138/     741 :                     ; The second byte in every pair is the default values for PSG tracks.
(1) 2139/     741 :                     zPSGInitBytes:
(1) 2140/     741 : 80 80               		db (1<<bitTrackPlaying), snPSG1
(1) 2141/     743 : 80 A0               		db (1<<bitTrackPlaying), snPSG2
(1) 2142/     745 : 80 C0               		db (1<<bitTrackPlaying), snPSG3
(1) 2143/     747 :                     ; ---------------------------------------------------------------------------
(1) 2144/     747 :                     ;loc_6A9
(1) 2145/     747 :                     zPlaySound_CheckRing:
(1) 2146/     747 : D6 33               		sub	SndID__First					; Make it a 0-based index
(1) 2148/     749 : B7                  		or	a								; Is it the ring sound?
(1) 2152/     74A : C2 55 07            		jp	nz, zPlaySound_Bankswitch		; Branch if not
(1) 2156/     74D : 3A A4 1C            		ld	a, (zRingSpeaker)				; Get speaker on which ring sound is played
(1) 2157/     750 : EE 01               		xor	1								; Toggle bit 0
(1) 2158/     752 : 32 A4 1C            		ld	(zRingSpeaker), a				; Save it
(1) 2170/     755 :                     
(1) 2171/     755 :                     ;loc_6B7
(1) 2172/     755 :                     zPlaySound_Bankswitch:
(1) 2173/     755 : 08                  		ex	af, af'							; Save af
(1) 2174/     756 : 3E 05               		ld	a, zmake68kBank(SndBank)		; Load SFX sound bank address
(1) 2175/     758 : (MACRO)             		bankswitch							; Bank switch to it
(1) 2175/     758 : 21 00 60                            ld      hl, zBankRegister
(1) 2175/     75B : 77                                  ld      (hl), a
(1) 2175/     75C :                                     rept 7
(1) 2175/     75C :                                             rrca
(1) 2175/     75C :                                             ld      (hl), a
(1) 2175/     75C :                                     endm
(1) 2175/     75C : 0F                                          rrca
(1) 2175/     75D : 77                                          ld      (hl), a
(1) 2175/     75E : 0F                                          rrca
(1) 2175/     75F : 77                                          ld      (hl), a
(1) 2175/     760 : 0F                                          rrca
(1) 2175/     761 : 77                                          ld      (hl), a
(1) 2175/     762 : 0F                                          rrca
(1) 2175/     763 : 77                                          ld      (hl), a
(1) 2175/     764 : 0F                                          rrca
(1) 2175/     765 : 77                                          ld      (hl), a
(1) 2175/     766 : 0F                                          rrca
(1) 2175/     767 : 77                                          ld      (hl), a
(1) 2175/     768 : 0F                                          rrca
(1) 2175/     769 : 77                                          ld      (hl), a
(1) 2175/     76A : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 2176/     76B : AF                  		xor	a								; a = 0
(1) 2177/     76C : 0E 02               		ld	c, zID_SFXPointers				; SFX table index
(1) 2178/     76E : 32 A1 1C            		ld	(zUpdatingSFX), a				; Clear flag to update SFX
(1) 2179/     771 : 08                  		ex	af, af'							; Restore af
(1) 2180/     772 : FE 78               		cp	SndID_SpindashRev-SndID__First	; Is this the spindash sound?
(1) 2181/     774 : CA A6 07            		jp	z, zPlaySound					; Branch if yes
(1) 2182/     777 : FE 89               		cp	SndID__FirstContinuous-SndID__First	; Is this before sound 0BCh?
(1) 2183/     779 : DA A0 07            		jp	c, zPlaySound_Normal			; Branch if yes
(1) 2184/     77C : F5                  		push	af							; Save af
(1) 2185/     77D : 47                  		ld	b, a							; b = sound index
(1) 2186/     77E : 3A 97 1C            		ld	a, (zContinuousSFX)				; Load last continuous SFX played
(1) 2187/     781 : 90                  		sub	b								; Is this the same continuous sound that was playing?
(1) 2188/     782 : C2 95 07            		jp	nz, zPlaySound_NotCont			; Branch if not
(1) 2189/     785 :                     		; If we got here, a is zero.
(1) 2190/     785 : 3C                  		inc	a								; a = 1
(1) 2191/     786 : 32 98 1C            		ld	(zContinuousSFXFlag), a			; Flag continuous SFX as being extended
(1) 2192/     789 : F1                  		pop	af								; Restore af
(1) 2193/     78A : CF                  		rst	GetPointerTable					; hl = pointer to SFX data
(1) 2194/     78B : 23                  		inc	hl								; Skip low byte of voice pointer
(1) 2195/     78C : 23                  		inc	hl								; Skip high byte of voice pointer
(1) 2196/     78D : 23                  		inc	hl								; Skip timing divisor
(1) 2197/     78E : 7E                  		ld	a, (hl)							; Get number of SFX tracks
(1) 2198/     78F : 32 99 1C            		ld	(zContSFXLoopCnt), a			; Save it to RAM (loop counter for continuous SFX)
(1) 2199/     792 : C3 2E 07            		jp	zClearNextSound
(1) 2200/     795 :                     ; ---------------------------------------------------------------------------
(1) 2201/     795 :                     ;loc_6FB
(1) 2202/     795 :                     zPlaySound_NotCont:
(1) 2203/     795 : AF                  		xor	a								; a = 0
(1) 2204/     796 : 32 98 1C            		ld	(zContinuousSFXFlag), a			; Clear continue continuous SFX flag
(1) 2205/     799 : F1                  		pop	af								; Restore af
(1) 2206/     79A : 32 97 1C            		ld	(zContinuousSFX), a				; Store SFX index
(1) 2207/     79D : C3 A6 07            		jp	zPlaySound
(1) 2208/     7A0 :                     ; ---------------------------------------------------------------------------
(1) 2209/     7A0 :                     ;loc_706
(1) 2210/     7A0 :                     zPlaySound_Normal:
(1) 2211/     7A0 : F5                  		push	af							; Save af
(1) 2212/     7A1 : AF                  		xor	a								; a = 0
(1) 2213/     7A2 : 32 A3 1C            		ld	(zSpindashRev), a				; Reset spindash rev
(1) 2214/     7A5 : F1                  		pop		af							; Restore af
(1) 2215/     7A6 :                     
(1) 2216/     7A6 :                     ;loc_70C
(1) 2217/     7A6 :                     zPlaySound:
(1) 2218/     7A6 : CF                  		rst	GetPointerTable					; hl = pointer to SFX data
(1) 2219/     7A7 : E5                  		push	hl							; Save hl
(1) 2220/     7A8 : E7                  		rst	ReadPointer						; hl = voice table pointer
(1) 2221/     7A9 : 22 B5 1C            		ld	(zSFXVoiceTblPtr), hl			; Save to RAM
(1) 2222/     7AC : E1                  		pop	hl								; hl = pointer to SFX data
(1) 2223/     7AD : E5                  		push	hl							; Save it again
(1) 2224/     7AE : FD E1               		pop	iy								; iy = pointer to SFX data
(1) 2225/     7B0 : FD 7E 02            		ld	a, (iy+2)						; a = tempo divider
(1) 2226/     7B3 : 32 B7 1C            		ld	(zSFXTempoDivider), a			; Save to RAM
(1) 2227/     7B6 : 11 04 00            		ld	de, 4							; de = 4
(1) 2228/     7B9 : 19                  		add	hl, de							; hl = pointer to SFX track data
(1) 2229/     7BA : FD 46 03            		ld	b, (iy+3)						; b = number of tracks (FM + PSG) used by SFX
(1) 2230/     7BD : 78                  		ld	a, b							; Copy to a
(1) 2231/     7BE : 32 99 1C            		ld	(zContSFXLoopCnt), a			; Save to RAM (loop counter for continuous SFX)
(1) 2232/     7C1 :                     
(1) 2233/     7C1 :                     ;loc_72C
(1) 2234/     7C1 :                     zSFXTrackInitLoop:
(1) 2235/     7C1 : C5                  		push	bc							; Save bc; damaged by ldi instructions below
(1) 2236/     7C2 : E5                  		push	hl							; Save hl
(1) 2237/     7C3 : 23                  		inc	hl								; hl = pointer to channel identifier
(1) 2238/     7C4 : 4E                  		ld	c, (hl)							; c = channel identifier
(1) 2239/     7C5 : CD 15 08            		call	zGetSFXChannelPointers		; Get track pointers for track RAM (ix) and overridden song track (hl)
(1) 2240/     7C8 : CB D6               		set	bitSFXOverride, (hl)			; Set 'SFX is overriding this track' bit
(1) 2241/     7CA : DD E5               		push	ix							; Save pointer to SFX track data in RAM
(1) 2242/     7CC :                     
(1) 2243/     7CC : D1                  		pop		de							; de = pointer to SFX track data in RAM (unless you consider the above effectively dead code)
(1) 2244/     7CD : E1                  		pop		hl							; hl = pointer to SFX track data
(1) 2245/     7CE : ED A0               		ldi									; *de++ = *hl++ (initial playback control)
(1) 2246/     7D0 : 1A                  		ld	a, (de)							; Get the voice control byte from track RAM (to deal with SFX already there)
(1) 2247/     7D1 : FE 02               		cp	ymFM3							; Is this FM3?
(1) 2248/     7D3 : CC 2B 0A            		call	z, zFM3NormalMode			; Set FM3 to normal mode if so
(1) 2249/     7D6 : ED A0               		ldi									; *de++ = *hl++ (copy channel identifier)
(1) 2250/     7D8 : 3A B7 1C            		ld	a, (zSFXTempoDivider)			; Get SFX tempo divider
(1) 2251/     7DB : 12                  		ld	(de), a							; Store it to RAM
(1) 2252/     7DC : 13                  		inc	de								; Advance pointer
(1) 2253/     7DD : ED A0               		ldi									; *de++ = *hl++ (low byte of channel data pointer)
(1) 2254/     7DF : ED A0               		ldi									; *de++ = *hl++ (high byte of channel data pointer)
(1) 2255/     7E1 : ED A0               		ldi									; *de++ = *hl++ (transposition)
(1) 2256/     7E3 : ED A0               		ldi									; *de++ = *hl++ (channel volume)
(1) 2257/     7E5 : CD 3B 08            		call	zInitFMDACTrack				; Init the remainder of the track RAM
(1) 2258/     7E8 :                     
(1) 2259/     7E8 : E5                  		push	hl							; Save hl
(1) 2260/     7E9 : 2A B5 1C            		ld	hl, (zSFXVoiceTblPtr)			; hl = pointer to voice data
(1) 2261/     7EC :                     
(1) 2262/     7EC : DD 75 23            		ld	(ix+zTrack.VoicesLow), l		; Low byte of voice pointer
(1) 2263/     7EF : DD 74 24            		ld	(ix+zTrack.VoicesHigh), h		; High byte of voice pointer
(1) 2264/     7F2 : CD 19 03            		call	zKeyOffIfActive				; Kill channel notes
(1) 2265/     7F5 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 2266/     7F9 : CC 35 0A            		call	z, zFMClearSSGEGOps			; Clear SSG-EG operators for track's channels if not
(1) 2267/     7FC : CD 88 11            		call	zSilencePSGChannel			; Silence PSG channel
(1) 2268/     7FF : E1                  		pop		hl							; Restore hl
(1) 2269/     800 : C1                  		pop		bc							; Restore bc
(1) 2270/     801 : 10 BE               		djnz	zSFXTrackInitLoop			; Loop for all SFX tracks
(1) 2271/     803 : C3 2E 07            		jp	zClearNextSound
(1) 2272/     806 :                     
(1) 2273/     806 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2274/     806 :                     ; Gets SFX channel index for given channel assignment bits
(1) 2275/     806 :                     ;
(1) 2276/     806 :                     ; Input:  a     Channel assignment bits
(1) 2277/     806 :                     ; Output: a     SFX channel index
(1) 2278/     806 :                     ;         f     m for FM1/FM2, z for FM3, p for FM4-FM6 or PSG1-PSG3
(1) 2279/     806 :                     zGetSFXChannelIndex:
(1) 2280/     806 : B7                  		or	a								; Is this a PSG track?
(1) 2281/     807 : FA 0F 08            		jp	m, .is_psg						; Branch if yes
(1) 2282/     80A : D6 03               		sub	3								; Is this FM4, FM5 or FM6?
(1) 2283/     80C : D0                  		ret	nc								; Branch if yes
(1) 2284/     80D : 3C                  		inc	a								; Is this FM3?
(1) 2285/     80E : C9                  		ret
(1) 2286/     80F :                     ; ---------------------------------------------------------------------------
(1) 2287/     80F :                     .is_psg:
(1) 2288/     80F :                     		; Shift high 3 bits to low bits so that we can convert it to a table index
(1) 2289/     80F : 07                  		rlca
(1) 2290/     810 : 07                  		rlca
(1) 2291/     811 : 07                  		rlca
(1) 2292/     812 : E6 07               		and	7
(1) 2293/     814 : C9                  		ret
(1) 2294/     815 :                     
(1) 2295/     815 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2296/     815 :                     ; Gets SFX channel and overridden channel for given channel assignment bits
(1) 2297/     815 :                     ;
(1) 2298/     815 :                     ; Input:  c     Channel assignment bits
(1) 2299/     815 :                     ; Output: ix    SFX channel
(1) 2300/     815 :                     ;         hl    Overridden channel
(1) 2301/     815 :                     ;sub_78F
(1) 2302/     815 :                     zGetSFXChannelPointers:
(1) 2303/     815 : 79                  		ld	a, c							; a = channel identifier
(1) 2304/     816 : CD 06 08            		call	zGetSFXChannelIndex			; Get channel index
(1) 2305/     819 : F8                  		ret	m								; Return if FM1 or FM2
(1) 2306/     81A : F5                  		push	af							; Save af
(1) 2307/     81B : 21 55 08            		ld	hl, zSFXChannelData				; Pointer table for track RAM
(1) 2308/     81E : DF                  		rst	PointerTableOffset				; hl = track RAM
(1) 2309/     81F : E5                  		push	hl							; Save hl
(1) 2310/     820 : DD E1               		pop	ix								; ix = track RAM
(1) 2311/     822 : F1                  		pop	af								; Restore af
(1) 2312/     823 :                     		; This is where there is code in other drivers to load the special SFX
(1) 2313/     823 :                     		; channel pointers to iy
(1) 2314/     823 : 21 65 08            		ld	hl, zSFXOverriddenChannel		; Pointer table for the overridden music track
(1) 2315/     826 : C3 18 00            		jp	PointerTableOffset				; hl = RAM destination to mark as overridden
(1) 2316/     829 :                     ; End of function zGetSFXChannelPointers
(1) 2317/     829 :                     
(1) 2318/     829 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2319/     829 :                     ; Checks if matching SFX channel is overriding the channel pointed to by ix.
(1) 2320/     829 :                     ;
(1) 2321/     829 :                     ; Input:  ix    Pointer to channel data
(1) 2322/     829 :                     ; Output: a     Playback control byte of matching SFX track or 0 for FM1/FM2
(1) 2323/     829 :                     ;         f     m if matching SFX track is playing, 0 otherwise
(1) 2324/     829 :                     zIsSFXTrackOverriding:
(1) 2325/     829 : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; Fetch channel assignment byte
(1) 2326/     82C :                     
(1) 2327/     82C :                     zIsSFXTrackOverriding_Part2:
(1) 2328/     82C : CD 06 08            		call	zGetSFXChannelIndex			; Get channel index
(1) 2329/     82F : FA 39 08            		jp	m, .is_fm1fm2					; Return if FM1 or FM2
(1) 2330/     832 : 21 55 08            		ld	hl, zSFXChannelData				; Pointer table for track RAM
(1) 2331/     835 : DF                  		rst	PointerTableOffset				; hl = track RAM
(1) 2332/     836 : 7E                  		ld	a, (hl)							; Get playback control byte for SFX track
(1) 2333/     837 : B7                  		or	a								; Is SFX track overriding this?
(1) 2334/     838 : C9                  		ret
(1) 2335/     839 :                     ; ---------------------------------------------------------------------------
(1) 2336/     839 :                     .is_fm1fm2:
(1) 2337/     839 : AF                  		xor	a								; Return 0 (aka 'SFX track not playing')
(1) 2338/     83A : C9                  		ret
(1) 2339/     83B :                     
(1) 2340/     83B :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2341/     83B :                     ;
(1) 2342/     83B :                     ;sub_7C5
(1) 2343/     83B :                     zInitFMDACTrack:
(1) 2344/     83B : 08                  		ex	af, af'							; Save af
(1) 2345/     83C : AF                  		xor	a								; a = 0
(1) 2346/     83D : 12                  		ld	(de), a							; Set modulation to inactive
(1) 2347/     83E : 13                  		inc	de								; Advance to next byte
(1) 2348/     83F : 12                  		ld	(de), a							; Set FM instrument/PSG tone to zero too
(1) 2349/     840 : 13                  		inc	de								; Advance to next byte again
(1) 2350/     841 : 08                  		ex	af, af'							; Restore af
(1) 2351/     842 :                     
(1) 2352/     842 :                     ;loc_7CC
(1) 2353/     842 :                     zZeroFillTrackRAM:
(1) 2354/     842 : EB                  		ex	de, hl							; Exchange the contents of de and hl
(1) 2355/     843 : 36 29               		ld	(hl), zTrack.len				; Call subroutine stack pointer
(1) 2356/     845 : 23                  		inc	hl								; Advance to next byte
(1) 2357/     846 : 36 C0               		ld	(hl), maskPanning				; default Panning / AMS / FMS settings (only stereo L/R enabled)
(1) 2358/     848 : 23                  		inc	hl								; Advance to next byte
(1) 2359/     849 : 36 01               		ld	(hl), 1							; Current note duration timeout
(1) 2360/     84B :                     
(1) 2361/     84B : 06 1D               		ld	b, zTrack.len-zTrack.DurationTimeout-1	; Loop counter
(1) 2362/     84D :                     
(1) 2363/     84D :                     .loop:
(1) 2364/     84D : 23                  		inc	hl								; Advance to next byte
(1) 2365/     84E : 36 00               		ld	(hl), 0							; Put 0 into this byte
(1) 2366/     850 : 10 FB               		djnz	.loop						; Loop until end of track
(1) 2367/     852 :                     
(1) 2368/     852 : 23                  		inc	hl								; Make hl point to next track
(1) 2369/     853 : EB                  		ex	de, hl							; Exchange the contents of de and hl
(1) 2370/     854 : C9                  		ret
(1) 2371/     855 :                     ; End of function zInitFMDACTrack
(1) 2372/     855 :                     ; ---------------------------------------------------------------------------
(1) 2373/     855 :                     ;zloc_7DF
(1) 2374/     855 :                     zSFXChannelData:
(1) 2375/     855 : 52 1E               		dw zSFX_FM3						; FM3
(1) 2376/     857 : 7B 1E               		dw zSFX_FM4						; FM4
(1) 2377/     859 : A4 1E               		dw zSFX_FM5						; FM5
(1) 2378/     85B : CD 1E               		dw zSFX_FM6						; FM6
(1) 2379/     85D : F6 1E               		dw zSFX_PSG1					; PSG1
(1) 2380/     85F : 1F 1F               		dw zSFX_PSG2					; PSG2
(1) 2381/     861 : 48 1F               		dw zSFX_PSG3					; PSG3
(1) 2382/     863 : 48 1F               		dw zSFX_PSG3					; PSG3/Noise
(1) 2383/     865 :                     ;zloc_7EF
(1) 2384/     865 :                     zSFXOverriddenChannel:
(1) 2385/     865 : 33 1D               		dw zSongFM3						; FM3
(1) 2386/     867 : 5C 1D               		dw zSongFM4						; FM4
(1) 2387/     869 : 85 1D               		dw zSongFM5						; FM5
(1) 2388/     86B : AE 1D               		dw zSongFM6						; FM6
(1) 2389/     86D : D7 1D               		dw zSongPSG1					; PSG1
(1) 2390/     86F : 00 1E               		dw zSongPSG2					; PSG2
(1) 2391/     871 : 29 1E               		dw zSongPSG3					; PSG3
(1) 2392/     873 : 29 1E               		dw zSongPSG3					; PSG3/Noise
(1) 2393/     875 :                     
(1) 2394/     875 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2395/     875 :                     ; Pauses/unpauses sound.
(1) 2396/     875 :                     ;
(1) 2397/     875 :                     ;sub_7FF
(1) 2398/     875 :                     zPauseUnpause:
(1) 2399/     875 : 21 9D 1C            		ld	hl, zPauseFlag					; hl = pointer to pause flag
(1) 2400/     878 : 7E                  		ld	a, (hl)							; a = pause flag
(1) 2401/     879 : B7                  		or	a								; Is sound driver paused?
(1) 2402/     87A : C8                  		ret	z								; Return if not
(1) 2403/     87B : FA 86 08            		jp	m, .unpause						; Branch if pause flag is negative (unpause)
(1) 2404/     87E : D1                  		pop	de								; Pop return value from the stack, so that a 'ret' will go back to zVInt
(1) 2405/     87F : 3D                  		dec	a								; Decrease a
(1) 2406/     880 : C0                  		ret	nz								; Return if nonzero
(1) 2407/     881 : 36 02               		ld	(hl), 2							; Set pause flag to 2 (i.e., stay paused but don't pause again)
(1) 2408/     883 : C3 3C 0A            		jp	zPauseAudio						; Pause all but DAC
(1) 2409/     886 :                     ; ---------------------------------------------------------------------------
(1) 2410/     886 :                     .unpause:
(1) 2411/     886 : AF                  		xor	a								; a = 0
(1) 2412/     887 : 77                  		ld	(hl), a							; Clear pause flag
(1) 2413/     888 : 3A 9A 1C            		ld	a, (zFadeOutTimeout)			; Get fade timeout
(1) 2414/     88B : B7                  		or	a								; Is it zero?
(1) 2415/     88C : C2 C8 09            		jp	nz, zMusicFade					; Stop all music if not
(1) 2416/     88F : DD 21 E1 1C         		ld	ix, zSongFM1					; Start with FM1 track
(1) 2417/     893 : 06 06               		ld	b, zNumMusicFMTracks			; Number of FM tracks
(1) 2418/     895 : 3A 7A 1C            		ld	a, (zDACEnable)					; Get DAC enable
(1) 2419/     898 : B7                  		or	a								; Is it supposed to be on?
(1) 2420/     899 : 28 04               		jr	z, .fm_loop						; Branch if not
(1) 2421/     89B : DD 21 B8 1C         		ld	ix, zSongDAC					; Start with DAC instead
(1) 2422/     89F :                     
(1) 2423/     89F :                     .fm_loop:
(1) 2424/     89F : 3A 9E 1C            		ld	a, (zHaltFlag)					; Get halt flag
(1) 2425/     8A2 : B7                  		or	a								; Is song halted?
(1) 2426/     8A3 : 20 06               		jr	nz, .set_pan					; Branch if yes
(1) 2427/     8A5 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is track playing?
(1) 2428/     8A9 : 28 08               		jr	z, .skip_fm_track				; Branch if not
(1) 2429/     8AB :                     
(1) 2430/     8AB :                     .set_pan:
(1) 2431/     8AB : DD 4E 0A            		ld	c, (ix+zTrack.AMSFMSPan)		; Get track AMS/FMS/panning
(1) 2432/     8AE : 3E B4               		ld	a, ymPanningAMSensFMSens		; Command to select AMS/FMS/panning register
(1) 2433/     8B0 : CD A9 00            		call	zWriteFMIorII				; Write data to YM2612
(1) 2434/     8B3 :                     
(1) 2435/     8B3 :                     .skip_fm_track:
(1) 2436/     8B3 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2437/     8B6 : DD 19               		add	ix, de							; Advance to next track
(1) 2438/     8B8 : 10 E5               		djnz	.fm_loop					; Loop for all tracks
(1) 2439/     8BA :                     
(1) 2440/     8BA : DD 21 52 1E         		ld	ix, zTracksSFXStart				; Start at the start of SFX track data
(1) 2441/     8BE : 06 07               		ld	b, zNumSFXTracks				; Number of tracks
(1) 2442/     8C0 :                     
(1) 2443/     8C0 :                     .psg_loop:
(1) 2444/     8C0 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is track playing?
(1) 2445/     8C4 : 28 0E               		jr	z, .skip_psg_track				; Branch if not
(1) 2446/     8C6 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 2447/     8CA : 20 08               		jr	nz, .skip_psg_track				; Branch if yes
(1) 2448/     8CC : DD 4E 0A            		ld	c, (ix+zTrack.AMSFMSPan)		; Get track AMS/FMS/panning
(1) 2449/     8CF : 3E B4               		ld	a, ymPanningAMSensFMSens		; Command to select AMS/FMS/panning register
(1) 2450/     8D1 : CD A9 00            		call	zWriteFMIorII				; Write data to YM2612
(1) 2451/     8D4 :                     
(1) 2452/     8D4 :                     .skip_psg_track:
(1) 2453/     8D4 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2454/     8D7 : DD 19               		add	ix, de							; Go to next track
(1) 2455/     8D9 : 10 E5               		djnz	.psg_loop					; Loop for all tracks
(1) 2456/     8DB :                     
(1) 2457/     8DB : C9                  		ret
(1) 2458/     8DC :                     ; End of function zPauseUnpause
(1) 2459/     8DC :                     
(1) 2460/     8DC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2461/     8DC :                     ; Fades out music.
(1) 2462/     8DC :                     ;sub_85C
(1) 2463/     8DC :                     zFadeOutMusic:
(1) 2464/     8DC : 3E 28               		ld	a, 28h							; a = 28h
(1) 2465/     8DE : 32 9A 1C            		ld	(zFadeOutTimeout), a			; Set fade timeout to this (start fading out music)
(1) 2466/     8E1 : 3E 06               		ld	a, 6							; a = 6
(1) 2467/     8E3 : 32 9C 1C            		ld	(zFadeDelayTimeout), a			; Set fade delay timeout
(1) 2468/     8E6 : 32 9B 1C            		ld	(zFadeDelay), a					; Set fade delay and fall through
(1) 2469/     8E9 :                     
(1) 2470/     8E9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2471/     8E9 :                     ; Halts FM6, DAC, PSG1, PSG2, PSG3.
(1) 2472/     8E9 :                     ;sub_869
(1) 2473/     8E9 :                     zHaltDACPSG:
(1) 2474/     8E9 : AF                  		xor	a								; a = 0
(1) 2475/     8EA : 32 B8 1C            		ld	(zSongDAC), a					; Halt DAC
(1) 2476/     8ED : 32 29 1E            		ld	(zSongPSG3), a					; Halt PSG3
(1) 2477/     8F0 : 32 D7 1D            		ld	(zSongPSG1), a					; Halt PSG1
(1) 2478/     8F3 : 32 00 1E            		ld	(zSongPSG2), a					; Halt PSG2
(1) 2479/     8F6 : C3 68 0A            		jp	zPSGSilenceAll
(1) 2480/     8F9 :                     ; End of function zHaltDACPSG
(1) 2481/     8F9 :                     
(1) 2482/     8F9 :                     
(1) 2483/     8F9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2484/     8F9 :                     ; Fade out music slowly.
(1) 2485/     8F9 :                     ;
(1) 2486/     8F9 :                     ;sub_879
(1) 2487/     8F9 :                     zDoMusicFadeOut:
(1) 2488/     8F9 : 21 9A 1C            		ld	hl, zFadeOutTimeout				; hl = pointer to fade timeout
(1) 2489/     8FC : 7E                  		ld	a, (hl)							; a = fade counter
(1) 2490/     8FD : B7                  		or	a								; Is fade counter zero?
(1) 2491/     8FE : C8                  		ret	z								; Return if yes
(1) 2492/     8FF : FC E9 08            		call	m, zHaltDACPSG				; Kill DAC and PSG channels if negative
(1) 2493/     902 : CB BE               		res	7, (hl)							; Clear sign bit
(1) 2494/     904 : 3A 9C 1C            		ld	a, (zFadeDelayTimeout)			; Get fade delay timeout
(1) 2495/     907 : 3D                  		dec	a								; Decrement it
(1) 2496/     908 : 28 04               		jr	z, .timer_expired				; Branch if it zero now
(1) 2497/     90A : 32 9C 1C            		ld	(zFadeDelayTimeout), a			; Store it back
(1) 2498/     90D : C9                  		ret
(1) 2499/     90E :                     ; ---------------------------------------------------------------------------
(1) 2500/     90E :                     .timer_expired:
(1) 2501/     90E : 3A 9B 1C            		ld	a, (zFadeDelay)					; Get fade delay
(1) 2502/     911 : 32 9C 1C            		ld	(zFadeDelayTimeout), a			; Restore counter to initial value
(1) 2503/     914 : 21 9A 1C            		ld	hl, zFadeOutTimeout				; (hl) = fade timeout
(1) 2504/     917 : 35                  		dec	(hl)							; Decrement it
(1) 2505/     918 : CA C8 09            		jp	z, zMusicFade					; Stop all music if it is zero
(1) 2506/     91B : (MACRO)             		bankswitchToMusic
(1) 2506/     91B : 3A B3 1C                            ld      a, (zSongBank)
(1) 2506/     91E :  (MACRO-2)                          bankswitch
(1) 2506/     91E : 21 00 60                            ld      hl, zBankRegister
(1) 2506/     921 : 77                                  ld      (hl), a
(1) 2506/     922 :                                     rept 7
(1) 2506/     922 :                                             rrca
(1) 2506/     922 :                                             ld      (hl), a
(1) 2506/     922 :                                     endm
(1) 2506/     922 : 0F                                          rrca
(1) 2506/     923 : 77                                          ld      (hl), a
(1) 2506/     924 : 0F                                          rrca
(1) 2506/     925 : 77                                          ld      (hl), a
(1) 2506/     926 : 0F                                          rrca
(1) 2506/     927 : 77                                          ld      (hl), a
(1) 2506/     928 : 0F                                          rrca
(1) 2506/     929 : 77                                          ld      (hl), a
(1) 2506/     92A : 0F                                          rrca
(1) 2506/     92B : 77                                          ld      (hl), a
(1) 2506/     92C : 0F                                          rrca
(1) 2506/     92D : 77                                          ld      (hl), a
(1) 2506/     92E : 0F                                          rrca
(1) 2506/     92F : 77                                          ld      (hl), a
(1) 2506/     930 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 2507/     931 : DD 21 B8 1C         		ld	ix, zTracksStart				; ix = pointer to track RAM
(1) 2508/     935 : 06 07               		ld	b, zNumMusicFMorDACTracks		; Number of FM+DAC tracks
(1) 2509/     937 :                     
(1) 2510/     937 :                     .loop:
(1) 2511/     937 : DD 34 06            		inc	(ix+zTrack.Volume)				; Decrease volume
(1) 2512/     93A : F2 42 09            		jp	p, .chk_change_volume			; If still positive, branch
(1) 2513/     93D : DD 35 06            		dec	(ix+zTrack.Volume)				; Increase it back to minimum volume (127)
(1) 2514/     940 : 18 0F               		jr	.next_track
(1) 2515/     942 :                     ; ---------------------------------------------------------------------------
(1) 2516/     942 :                     .chk_change_volume:
(1) 2517/     942 : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is track still playing?
(1) 2518/     946 : 28 09               		jr	z, .next_track					; Branch if not
(1) 2519/     948 : C5                  		push	bc							; Save bc
(1) 2520/     949 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding track?
(1) 2521/     94D : CC 89 0D            		call	z, zSendTL.active			; Send new volume if not
(1) 2522/     950 : C1                  		pop	bc								; Restore bc
(1) 2523/     951 :                     
(1) 2524/     951 :                     .next_track:
(1) 2525/     951 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2526/     954 : DD 19               		add	ix, de							; Advance to next track
(1) 2527/     956 : 10 DF               		djnz	.loop						; Loop for all tracks
(1) 2528/     958 : C9                  		ret
(1) 2529/     959 :                     ; End of function zDoMusicFadeOut
(1) 2530/     959 :                     
(1) 2531/     959 :                     
(1) 2532/     959 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2533/     959 :                     ; Fades music in.
(1) 2534/     959 :                     ;
(1) 2535/     959 :                     ;sub_8DF
(1) 2536/     959 :                     zDoMusicFadeIn:
(1) 2537/     959 : 3A A5 1C            		ld	a, (zFadeInTimeout)				; Get fading timeout
(1) 2538/     95C : B7                  		or	a								; Is music being faded?
(1) 2539/     95D : C8                  		ret	z								; Return if not
(1) 2540/     95E : (MACRO)             		bankswitchToMusic
(1) 2540/     95E : 3A B3 1C                            ld      a, (zSongBank)
(1) 2540/     961 :  (MACRO-2)                          bankswitch
(1) 2540/     961 : 21 00 60                            ld      hl, zBankRegister
(1) 2540/     964 : 77                                  ld      (hl), a
(1) 2540/     965 :                                     rept 7
(1) 2540/     965 :                                             rrca
(1) 2540/     965 :                                             ld      (hl), a
(1) 2540/     965 :                                     endm
(1) 2540/     965 : 0F                                          rrca
(1) 2540/     966 : 77                                          ld      (hl), a
(1) 2540/     967 : 0F                                          rrca
(1) 2540/     968 : 77                                          ld      (hl), a
(1) 2540/     969 : 0F                                          rrca
(1) 2540/     96A : 77                                          ld      (hl), a
(1) 2540/     96B : 0F                                          rrca
(1) 2540/     96C : 77                                          ld      (hl), a
(1) 2540/     96D : 0F                                          rrca
(1) 2540/     96E : 77                                          ld      (hl), a
(1) 2540/     96F : 0F                                          rrca
(1) 2540/     970 : 77                                          ld      (hl), a
(1) 2540/     971 : 0F                                          rrca
(1) 2540/     972 : 77                                          ld      (hl), a
(1) 2540/     973 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 2541/     974 : 21 9B 1C            		ld	hl, zFadeDelay					; Get fade delay
(1) 2542/     977 : 35                  		dec	(hl)							; Decrement it
(1) 2543/     978 : C0                  		ret	nz								; Return if it is not yet zero
(1) 2544/     979 : 3A 9C 1C            		ld	a, (zFadeDelayTimeout)			; Get current fade delay timeout
(1) 2545/     97C : 32 9B 1C            		ld	(zFadeDelay), a					; Reset to starting fade delay
(1) 2546/     97F : 06 06               		ld	b, zNumMusicFMTracks			; Number of FM tracks
(1) 2547/     981 : DD 21 E1 1C         		ld	ix, zSongFM1					; ix = start of FM1 RAM
(1) 2548/     985 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2549/     988 :                     
(1) 2550/     988 :                     .fm_loop:
(1) 2551/     988 : DD 35 06            		dec	(ix+zTrack.Volume)				; Increase track volume
(1) 2552/     98B : C5                  		push	bc							; Save bc
(1) 2553/     98C : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is 'SFX is overriding' bit set?
(1) 2554/     990 : CC 89 0D            		call	z, zSendTL.active			; Send new volume if not
(1) 2555/     993 : C1                  		pop	bc								; Restore bc
(1) 2556/     994 : DD 19               		add	ix, de							; Advance to next track
(1) 2557/     996 : 10 F0               		djnz	.fm_loop					; Loop for all tracks
(1) 2558/     998 :                     
(1) 2559/     998 : 21 A5 1C            		ld	hl, zFadeInTimeout				; Get fading timeout
(1) 2560/     99B : 35                  		dec	(hl)							; Decrement it
(1) 2561/     99C : C0                  		ret	nz								; Return if still fading
(1) 2562/     99D : 06 03               		ld	b, zNumMusicPSGTracks			; Number of PSG tracks
(1) 2563/     99F : DD 21 D7 1D         		ld	ix, zSongPSG1					; ix = start of PSG RAM
(1) 2564/     9A3 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2565/     9A6 :                     
(1) 2566/     9A6 :                     .psg_loop:
(1) 2567/     9A6 : DD CB 00 96         		res	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Clear 'SFX is overriding' bit
(1) 2568/     9AA : DD 19               		add	ix, de							; Advance to next track
(1) 2569/     9AC : 10 F8               		djnz	.psg_loop					; Loop for all tracks
(1) 2570/     9AE :                     
(1) 2571/     9AE : 3A 7A 1C            		ld	a, (zDACEnable)					; Get DAC enable
(1) 2572/     9B1 : B7                  		or	a
(1) 2573/     9B2 : C8                  		ret	z
(1) 2574/     9B3 : DD 21 B8 1C         		ld	ix, zSongDAC					; ix = start of DAC RAM
(1) 2575/     9B7 : DD CB 00 96         		res	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Clear 'SFX is overriding' bit
(1) 2576/     9BB : C9                  		ret
(1) 2577/     9BC :                     ; End of function zDoMusicFadeIn
(1) 2578/     9BC :                     
(1) 2579/     9BC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2580/     9BC :                     ; Wipes music data (except SFX stuff) and fades all channels not overridden by
(1) 2581/     9BC :                     ; SFX channels.
(1) 2582/     9BC :                     zMusicFadeKeepSFX:
(1) 2583/     9BC :                     		; The following block sets to zero the z80 RAM that keeps music and SFX state
(1) 2584/     9BC : 21 9A 1C            		ld	hl, zFadeOutTimeout				; Starting source address for copy
(1) 2585/     9BF : 11 9B 1C            		ld	de, zFadeDelay					; Starting destination address for copy
(1) 2586/     9C2 : 01 B7 01            		ld	bc, zTracksEnd-zFadeDelay		; Length of copy
(1) 2587/     9C5 : C3 D1 09            		jp	zMusicFade.common
(1) 2588/     9C8 :                     
(1) 2589/     9C8 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2590/     9C8 :                     ; Wipes music data and fades all FM, PSG and DAC channels.
(1) 2591/     9C8 :                     ;sub_944
(1) 2592/     9C8 :                     zMusicFade:
(1) 2593/     9C8 :                     		; The following block sets to zero the z80 RAM that keeps music and SFX state
(1) 2594/     9C8 : 21 97 1C            		ld	hl, zContinuousSFX				; Starting source address for copy
(1) 2595/     9CB : 11 98 1C            		ld	de, zContinuousSFXFlag			; Starting destination address for copy
(1) 2596/     9CE : 01 51 03            		ld	bc, zTracksSaveEnd-zFadeDelay	; Length of copy
(1) 2597/     9D1 :                     
(1) 2598/     9D1 :                     .common:
(1) 2599/     9D1 : AF                  		xor	a								; a = 0
(1) 2600/     9D2 : 77                  		ld	(hl), a							; Initial value of zero
(1) 2601/     9D3 : ED B0               		ldir								; while (--length) *de++ = *hl++
(1) 2602/     9D5 : 3A 92 1C            		ld	a, (zTempoSpeedupReq)			; Get flag indicating if tempo is to be kept
(1) 2603/     9D8 : B7                  		or	a								; Is it set?
(1) 2604/     9D9 : 20 03               		jr	nz, .keep_tempo					; Branch if yes
(1) 2605/     9DB : 32 91 1C            		ld	(zTempoSpeedup), a				; Fade in normal speed
(1) 2606/     9DE :                     
(1) 2607/     9DE :                     .keep_tempo:
(1) 2608/     9DE : AF                  		xor	a								; a = 0
(1) 2609/     9DF : 32 92 1C            		ld	(zTempoSpeedupReq), a			; Clear for next time around
(1) 2610/     9E2 :                     
(1) 2611/     9E2 :                     zMusicFadeSimple:
(1) 2612/     9E2 : DD 21 33 07         		ld	ix, zFMDACInitBytes				; Initialization data for channels
(1) 2613/     9E6 : 06 06               		ld	b, zNumMusicFMTracks			; Number of FM channels
(1) 2614/     9E8 :                     
(1) 2615/     9E8 :                     .loop:
(1) 2616/     9E8 : C5                  		push	bc							; Save bc for loop
(1) 2617/     9E9 : CD 29 08            		call	zIsSFXTrackOverriding		; Is SFX overriding?
(1) 2618/     9EC : FA 03 0A            		jp	m, .skip_fmchannel				; Branch if yes
(1) 2619/     9EF : CD A2 0A            		call	zFMSilenceChannel			; Silence track's channel
(1) 2620/     9F2 : CD 35 0A            		call	zFMClearSSGEGOps			; Clears the SSG-EG operators for this channel
(1) 2621/     9F5 : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; Fetch channel assignment byte
(1) 2622/     9F8 : FE 02               		cp	ymFM3							; Is this FM3?
(1) 2623/     9FA : 20 07               		jr	nz, .skip_fmchannel				; Branch if yes
(1) 2624/     9FC : 0E 00               		ld	c, maskFM3Normal				; FM3 mode: normal mode
(1) 2625/     9FE : 3E 27               		ld	a, ymTimerControlFm3Mode		; FM3 special settings
(1) 2626/     A00 : CD BC 00            		call	zWriteFMI					; Set it
(1) 2627/     A03 :                     
(1) 2628/     A03 :                     .skip_fmchannel:
(1) 2629/     A03 : DD 23               		inc	ix								; Go to next channel byte
(1) 2630/     A05 : DD 23               		inc	ix								; But skip the 80h
(1) 2631/     A07 : C1                  		pop	bc								; Restore bc for loop counter
(1) 2632/     A08 : 10 DE               		djnz	.loop						; Loop while b > 0
(1) 2633/     A0A :                     
(1) 2634/     A0A : DD 21 41 07         		ld	ix, zPSGInitBytes				; Initialization data for channels
(1) 2635/     A0E : 06 03               		ld	b, zNumMusicPSGTracks			; Number of PSG tracks
(1) 2636/     A10 :                     
(1) 2637/     A10 :                     .looppsg:
(1) 2638/     A10 : C5                  		push	bc							; Save bc for loop
(1) 2639/     A11 : CD 29 08            		call	zIsSFXTrackOverriding		; Is SFX overriding?
(1) 2640/     A14 : F4 88 11            		call	p, zSilencePSGChannel		; Silence if not
(1) 2641/     A17 : DD 23               		inc	ix								; Go to next channel byte
(1) 2642/     A19 : DD 23               		inc	ix								; But skip the 80h
(1) 2643/     A1B : C1                  		pop	bc								; Restore bc for loop counter
(1) 2644/     A1C : 10 F2               		djnz	.looppsg					; Loop for all PSG channels
(1) 2645/     A1E :                     
(1) 2646/     A1E : AF                  		xor	a								; a = 0
(1) 2647/     A1F : 32 9A 1C            		ld	(zFadeOutTimeout), a			; Set fade timeout to zero... again
(1) 2648/     A22 : 4F                  		ld	c, a							; Write a zero...
(1) 2649/     A23 : 3E 2B               		ld	a, ymDACEnable					; ... to DAC enable register
(1) 2650/     A25 : CD BC 00            		call	zWriteFMI					; Disable DAC
(1) 2651/     A28 : C3 2E 07            		jp	zClearNextSound
(1) 2652/     A2B :                     
(1) 2653/     A2B :                     ;loc_979
(1) 2654/     A2B :                     zFM3NormalMode:
(1) 2655/     A2B : 0E 00               		ld	c, maskFM3Normal				; FM3 mode: normal mode
(1) 2656/     A2D : 3E 27               		ld	a, ymTimerControlFm3Mode		; FM3 special settings
(1) 2657/     A2F : CD BC 00            		call	zWriteFMI					; Set it
(1) 2658/     A32 : C3 2E 07            		jp	zClearNextSound
(1) 2659/     A35 :                     ; End of function zMusicFade
(1) 2660/     A35 :                     
(1) 2661/     A35 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2662/     A35 :                     ; Sets the SSG-EG registers (90h+) for all operators on this track to 0.
(1) 2663/     A35 :                     ;
(1) 2664/     A35 :                     ; Input:  ix    Pointer to track RAM
(1) 2665/     A35 :                     ; Output: a     Damaged
(1) 2666/     A35 :                     ;         b     Damaged
(1) 2667/     A35 :                     ;         c     Damaged
(1) 2668/     A35 :                     ;sub_986
(1) 2669/     A35 :                     zFMClearSSGEGOps:
(1) 2670/     A35 : 3E 90               		ld	a, ymSSGEG1						; Set SSG-EG registers...
(1) 2671/     A37 : 0E 00               		ld	c, 0							; ... set to zero (as docs say it should)...
(1) 2672/     A39 : C3 B6 0A            		jp	zFMOperatorWriteLoop			; ... for all operators of this track's channel
(1) 2673/     A3C :                     ; End of function zFMClearSSGEGOps
(1) 2674/     A3C :                     
(1) 2675/     A3C :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2676/     A3C :                     ; Pauses all audio.
(1) 2677/     A3C :                     ;loc_98D
(1) 2678/     A3C :                     zPauseAudio:
(1) 2679/     A3C : C5                  		push	bc							; Save bc
(1) 2680/     A3D : F5                  		push	af							; Save af
(1) 2681/     A3E : 06 03               		ld	b, zNumMusicFM1Tracks			; FM1/FM2/FM3
(1) 2682/     A40 : 3E B4               		ld	a, ymPanningAMSensFMSens		; Command to select AMS/FMS/panning register (FM1)
(1) 2683/     A42 : 0E 00               		ld	c, 0							; AMS=FMS=panning=0
(1) 2684/     A44 :                     
(1) 2685/     A44 :                     .loop1:
(1) 2686/     A44 : F5                  		push	af							; Save af
(1) 2687/     A45 : CD BC 00            		call	zWriteFMI					; Write reg/data pair to YM2612
(1) 2688/     A48 : F1                  		pop	af								; Restore af
(1) 2689/     A49 : 3C                  		inc	a								; Advance to next channel
(1) 2690/     A4A : 10 F8               		djnz	.loop1						; Loop for all channels
(1) 2691/     A4C :                     
(1) 2692/     A4C : 06 03               		ld	b, zNumMusicFM2Tracks			; FM4/FM5/FM6
(1) 2693/     A4E : 3E B4               		ld	a, ymPanningAMSensFMSens		; Command to select AMS/FMS/panning register
(1) 2694/     A50 :                     
(1) 2695/     A50 :                     .loop2:
(1) 2696/     A50 : F5                  		push	af							; Save af
(1) 2697/     A51 : CD C7 00            		call	zWriteFMII					; Write reg/data pair to YM2612
(1) 2698/     A54 : F1                  		pop	af								; Restore af
(1) 2699/     A55 : 3C                  		inc	a								; Advance to next channel
(1) 2700/     A56 : 10 F8               		djnz	.loop2						; Loop for all channels
(1) 2701/     A58 :                     
(1) 2702/     A58 : 0E 00               		ld	c, 0							; Note off for all operators
(1) 2703/     A5A : 06 07               		ld	b, zNumMusicFMTracks+1			; FM channels + gap between FM3 and FM4
(1) 2704/     A5C : 3E 28               		ld	a, ymKeyOnOff					; Command to send note on/off
(1) 2705/     A5E :                     
(1) 2706/     A5E :                     .loop3:
(1) 2707/     A5E : F5                  		push	af							; Save af
(1) 2708/     A5F : CD BC 00            		call	zWriteFMI					; Write reg/data pair to YM2612
(1) 2709/     A62 : 0C                  		inc	c								; Next channel
(1) 2710/     A63 : F1                  		pop	af								; Restore af
(1) 2711/     A64 : 10 F8               		djnz	.loop3						; Loop for all channels
(1) 2712/     A66 :                     
(1) 2713/     A66 : F1                  		pop	af								; Restore af
(1) 2714/     A67 : C1                  		pop	bc								; restore bc and fall through
(1) 2715/     A68 :                     
(1) 2716/     A68 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2717/     A68 :                     ; Silences all PSG channels, including the noise channel.
(1) 2718/     A68 :                     ;
(1) 2719/     A68 :                     ; Output: a    Damaged
(1) 2720/     A68 :                     ;sub_9BC
(1) 2721/     A68 :                     zPSGSilenceAll:
(1) 2722/     A68 : C5                  		push	bc							; Save bc
(1) 2723/     A69 : 06 04               		ld	b, zNumMusicPSGTracks+1			; Loop 4 times: 3 PSG channels + noise channel
(1) 2724/     A6B : 3E 9F               		ld	a, snPSG1|snPSGVol|0Fh			; Command to silence PSG1
(1) 2725/     A6D :                     
(1) 2726/     A6D :                     .loop:
(1) 2727/     A6D : 32 11 7F            		ld	(zPSG), a						; Write command
(1) 2728/     A70 : C6 20               		add	a, snPSG2-snPSG1				; Next channel
(1) 2729/     A72 : 10 F9               		djnz	.loop						; Loop for all PSG channels
(1) 2730/     A74 : C1                  		pop	bc								; Restore bc
(1) 2731/     A75 : C3 2E 07            		jp	zClearNextSound
(1) 2732/     A78 :                     ; End of function zPSGSilenceAll
(1) 2733/     A78 :                     
(1) 2734/     A78 :                     
(1) 2735/     A78 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2736/     A78 :                     ; Tempo works as divisions of the 60Hz clock (there is a fix supplied for
(1) 2737/     A78 :                     ; PAL that "kind of" keeps it on track.) Every time the internal music clock
(1) 2738/     A78 :                     ; does NOT overflow, it will update. So a tempo of 80h will update every
(1) 2739/     A78 :                     ; other frame, or 30 times a second.
(1) 2740/     A78 :                     ;sub_9CC:
(1) 2741/     A78 :                     TempoWait:
(1) 2742/     A78 : 3A A2 1C            		ld	a, (zCurrentTempo)				; Get current tempo value
(1) 2743/     A7B : 21 9F 1C            		ld	hl, zTempoAccumulator			; hl = pointer to tempo accumulator
(1) 2744/     A7E : 86                  		add	a, (hl)							; a += tempo accumulator
(1) 2745/     A7F : 77                  		ld	(hl), a							; Store it as new accumulator value
(1) 2746/     A80 : D0                  		ret	nc								; If the addition did not overflow, return
(1) 2747/     A81 : 21 C3 1C            		ld	hl, zTracksStart+zTrack.DurationTimeout	; Duration timeout of first track
(1) 2748/     A84 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2749/     A87 : 06 0A               		ld	b, zNumMusicTracks				; Number of tracks
(1) 2750/     A89 :                     
(1) 2751/     A89 :                     .loop:
(1) 2752/     A89 : 34                  		inc	(hl)							; Delay notes another frame
(1) 2753/     A8A : 19                  		add	hl, de							; Advance to next track
(1) 2754/     A8B : 10 FC               		djnz	.loop						; Loop for all channels
(1) 2755/     A8D : C9                  		ret
(1) 2756/     A8E :                     ; End of function TempoWait
(1) 2757/     A8E :                     
(1) 2758/     A8E :                     
(1) 2759/     A8E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2760/     A8E :                     ; Copies over M68K input to the sound queue and clears the input variables
(1) 2761/     A8E :                     ;sub_9E2
(1) 2762/     A8E :                     zFillSoundQueue:
(1) 2763/     A8E : 21 94 1C            		ld	hl, zMusicNumber				; M68K input
(1) 2764/     A91 : 11 8E 1C            		ld	de, zSoundQueue0				; Sound queue
(1) 2765/     A94 : ED A0               		ldi									; *de++ = *hl++
(1) 2766/     A96 : ED A0               		ldi									; *de++ = *hl++
(1) 2767/     A98 : ED A0               		ldi									; *de++ = *hl++
(1) 2768/     A9A : AF                  		xor	a								; a = 0
(1) 2769/     A9B : 2B                  		dec	hl								; Point to zSFXNumber1
(1) 2770/     A9C : 77                  		ld	(hl), a							; Clear it
(1) 2771/     A9D : 2B                  		dec	hl								; Point to zSFXNumber0
(1) 2772/     A9E : 77                  		ld	(hl), a							; Clear it
(1) 2773/     A9F : 2B                  		dec	hl								; Point to zMusicNumber
(1) 2774/     AA0 : 77                  		ld	(hl), a							; Clear it
(1) 2775/     AA1 : C9                  		ret
(1) 2776/     AA2 :                     ; End of function zFillSoundQueue
(1) 2777/     AA2 :                     
(1) 2778/     AA2 :                     
(1) 2779/     AA2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2780/     AA2 :                     ; Sets D1L to minimum, RR to maximum and TL to minimum amplitude for all
(1) 2781/     AA2 :                     ; operators on this track's channel, then sends note off for the same channel.
(1) 2782/     AA2 :                     ;
(1) 2783/     AA2 :                     ; Input:  ix    Pointer to track RAM
(1) 2784/     AA2 :                     ; Output: a     Damaged
(1) 2785/     AA2 :                     ;         b     Damaged
(1) 2786/     AA2 :                     ;         c     Damaged
(1) 2787/     AA2 :                     ;sub_9F6
(1) 2788/     AA2 :                     zFMSilenceChannel:
(1) 2789/     AA2 : CD B2 0A            		call	zSetMaxRelRate
(1) 2790/     AA5 : 3E 40               		ld	a, ymTotalLevel1				; Set total level...
(1) 2791/     AA7 : 0E 7F               		ld	c, 7Fh							; ... to minimum envelope amplitude...
(1) 2792/     AA9 : CD B6 0A            		call	zFMOperatorWriteLoop		; ... for all operators of this track's channel
(1) 2793/     AAC : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)		; Send key off
(1) 2794/     AAF : C3 25 03            		jp	zKeyOnOff
(1) 2795/     AB2 :                     ; End of function zFMSilenceChannel
(1) 2796/     AB2 :                     
(1) 2797/     AB2 :                     
(1) 2798/     AB2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2799/     AB2 :                     ; Sets D1L to minimum and RR to maximum for all operators on this track's
(1) 2800/     AB2 :                     ; channel.
(1) 2801/     AB2 :                     ;
(1) 2802/     AB2 :                     ; Input:  ix    Pointer to track RAM
(1) 2803/     AB2 :                     ; Output: a     Damaged
(1) 2804/     AB2 :                     ;         b     Damaged
(1) 2805/     AB2 :                     ;         c     Damaged
(1) 2806/     AB2 :                     ;sub_A06
(1) 2807/     AB2 :                     ;zSetFMMinD1LRR
(1) 2808/     AB2 :                     zSetMaxRelRate:
(1) 2809/     AB2 : 3E 80               		ld	a, ymSustainLevelReleaseRate1	; Set D1L to minimum and RR to maximum...
(1) 2810/     AB4 : 0E FF               		ld	c, maxSustainLevel|maxReleaseRate	; ... for all operators on this track's channel (fall through)
(1) 2811/     AB6 :                     ; End of function zSetMaxRelRate
(1) 2812/     AB6 :                     
(1) 2813/     AB6 :                     
(1) 2814/     AB6 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2815/     AB6 :                     ; Loops through all of a channel's operators and sets them to the desired value.
(1) 2816/     AB6 :                     ;
(1) 2817/     AB6 :                     ; Input:  ix    Pointer to track RAM
(1) 2818/     AB6 :                     ;         a     YM2612 register to write to
(1) 2819/     AB6 :                     ;         c     Value to write to register
(1) 2820/     AB6 :                     ; Output: b     Damaged
(1) 2821/     AB6 :                     ;sub_A0A
(1) 2822/     AB6 :                     zFMOperatorWriteLoop:
(1) 2823/     AB6 : 06 04               		ld	b, 4							; Loop 4 times
(1) 2824/     AB8 :                     
(1) 2825/     AB8 :                     .loop:
(1) 2826/     AB8 : F5                  		push	af							; Save af
(1) 2827/     AB9 : CD A9 00            		call	zWriteFMIorII				; Write to part I or II, as appropriate
(1) 2828/     ABC : F1                  		pop	af								; Restore af
(1) 2829/     ABD : C6 04               		add	a, 4							; a += 4
(1) 2830/     ABF : 10 F7               		djnz	.loop						; Loop
(1) 2831/     AC1 : C9                  		ret
(1) 2832/     AC2 :                     ; End of function zFMOperatorWriteLoop
(1) 2833/     AC2 :                     ; ---------------------------------------------------------------------------
(1) 2834/     AC2 :                     
(1) 2835/     AC2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2836/     AC2 :                     ; Performs massive restoration and starts fade in of previous music.
(1) 2837/     AC2 :                     ;
(1) 2838/     AC2 :                     ;sub_A20
(1) 2839/     AC2 :                     zFadeInToPrevious:
(1) 2840/     AC2 : AF                  		xor	a								; a = 0
(1) 2841/     AC3 : 32 A0 1C            		ld	(zFadeToPrevFlag), a			; Clear fade-to-prev flag
(1) 2842/     AC6 : 3A A8 1C            		ld	a, (zCurrentTempoSave)			; Get saved current tempo
(1) 2843/     AC9 : 32 A2 1C            		ld	(zCurrentTempo), a				; Restore it
(1) 2844/     ACC : 3A AA 1C            		ld	a, (zTempoSpeedupSave)			; Get saved tempo speed-up
(1) 2845/     ACF : 32 91 1C            		ld	(zTempoSpeedup), a				; Restore it
(1) 2846/     AD2 : 2A A6 1C            		ld	hl, (zVoiceTblPtrSave)			; Get saved voice pointer
(1) 2847/     AD5 : 22 B1 1C            		ld	(zVoiceTblPtr), hl				; Restore it
(1) 2848/     AD8 : 3A A9 1C            		ld	a, (zSongBankSave)				; Get saved song bank ID
(1) 2849/     ADB : 32 B3 1C            		ld	(zSongBank), a					; Restore it
(1) 2850/     ADE : (MACRO)             		bankswitch							; Bank switch to previous song's bank
(1) 2850/     ADE : 21 00 60                            ld      hl, zBankRegister
(1) 2850/     AE1 : 77                                  ld      (hl), a
(1) 2850/     AE2 :                                     rept 7
(1) 2850/     AE2 :                                             rrca
(1) 2850/     AE2 :                                             ld      (hl), a
(1) 2850/     AE2 :                                     endm
(1) 2850/     AE2 : 0F                                          rrca
(1) 2850/     AE3 : 77                                          ld      (hl), a
(1) 2850/     AE4 : 0F                                          rrca
(1) 2850/     AE5 : 77                                          ld      (hl), a
(1) 2850/     AE6 : 0F                                          rrca
(1) 2850/     AE7 : 77                                          ld      (hl), a
(1) 2850/     AE8 : 0F                                          rrca
(1) 2850/     AE9 : 77                                          ld      (hl), a
(1) 2850/     AEA : 0F                                          rrca
(1) 2850/     AEB : 77                                          ld      (hl), a
(1) 2850/     AEC : 0F                                          rrca
(1) 2850/     AED : 77                                          ld      (hl), a
(1) 2850/     AEE : 0F                                          rrca
(1) 2850/     AEF : 77                                          ld      (hl), a
(1) 2850/     AF0 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 2851/     AF1 : 21 52 1E            		ld	hl, zTracksSaveStart			; Start of saved track data
(1) 2852/     AF4 : 11 B8 1C            		ld	de, zTracksStart				; Start of track data
(1) 2853/     AF7 : 01 9A 01            		ld	bc, zTracksSaveEnd-zTracksSaveStart	; Number of bytes to copy
(1) 2854/     AFA : ED B0               		ldir								; while (bc-- > 0) *de++ = *hl++;
(1) 2855/     AFC : AF                  		xor	a								; a = 0
(1) 2856/     AFD : 21 52 1E            		ld	hl, zTracksSaveStart			; Start of saved track data
(1) 2857/     B00 : 11 53 1E            		ld	de, zTracksSaveStart+1			; Start of track data
(1) 2858/     B03 : 77                  		ld	(hl), a							; Prepare to zero-fill save RAM
(1) 2859/     B04 : 01 99 01            		ld	bc, zTracksSaveEnd-zTracksSaveStart-1	; Number of bytes to copy
(1) 2860/     B07 : ED B0               		ldir								; while (bc-- > 0) *de++ = *hl++;
(1) 2861/     B09 : 3A 7B 1C            		ld	a, (zDACEnableSave)				; Get saved DAC enable
(1) 2862/     B0C : 32 7A 1C            		ld	(zDACEnable), a					; Restore it
(1) 2863/     B0F : B7                  		or	a
(1) 2864/     B10 : 28 17               		jr	z, .no_dac
(1) 2865/     B12 : DD 21 B8 1C         		ld	ix, zSongDAC
(1) 2866/     B16 : AF                  		xor	a
(1) 2867/     B17 : DD 77 10            		ld	(ix+zTrack.DACSFXPlaying), a
(1) 2868/     B1A : 3E 90               		ld	a, maskPlayRest					; a = 'track is playing' and 'track is resting' flags
(1) 2869/     B1C : DD B6 00            		or	(ix+zTrack.PlaybackControl)		; Add in track playback control bits
(1) 2870/     B1F : DD 77 00            		ld	(ix+zTrack.PlaybackControl), a	; Save everything
(1) 2871/     B22 : 0E 06               		ld	c, ymFM6						; Get voice control byte for FM6
(1) 2872/     B24 : 3E 28               		ld	a, ymKeyOnOff					; Write to KEY ON/OFF port
(1) 2873/     B26 : CD BC 00            		call	zWriteFMI
(1) 2874/     B29 :                     
(1) 2875/     B29 :                     .no_dac:
(1) 2876/     B29 : DD 21 E1 1C         		ld	ix, zSongFM1					; ix = pointer to FM1 track RAM
(1) 2877/     B2D : 06 09               		ld	b, zNumMusicFMorPSGTracks		; Number of FM+PSG tracks
(1) 2878/     B2F :                     
(1) 2879/     B2F :                     .loop:
(1) 2880/     B2F : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; Get voice bits
(1) 2881/     B32 : FE 06               		cp	ymFM6
(1) 2882/     B34 : 20 06               		jr	nz, .not_fm6
(1) 2883/     B36 : 3A 7A 1C            		ld	a, (zDACEnable)					; Get DAC enable
(1) 2884/     B39 : B7                  		or	a
(1) 2885/     B3A : 20 27               		jr	nz, .skip_track
(1) 2886/     B3C :                     
(1) 2887/     B3C :                     .not_fm6:
(1) 2888/     B3C : DD 7E 00            		ld	a, (ix+zTrack.PlaybackControl)	; a = track playback control
(1) 2889/     B3F : F6 90               		or	maskPlayRest					; Set 'track is playing' and 'track is resting' flags
(1) 2890/     B41 : DD 77 00            		ld	(ix+zTrack.PlaybackControl), a	; Set new value
(1) 2891/     B44 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 2892/     B48 : C2 63 0B            		jp	nz, .skip_track					; Branch if yes
(1) 2893/     B4B : DD CB 00 96         		res	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Clear 'SFX is overriding track' flag
(1) 2894/     B4F : DD 7E 06            		ld	a, (ix+zTrack.Volume)			; Get track volume
(1) 2895/     B52 : C6 40               		add	a, 40h							; Lower volume by 40h
(1) 2896/     B54 : DD 77 06            		ld	(ix+zTrack.Volume), a			; Store new volume
(1) 2897/     B57 : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)		; a = FM instrument
(1) 2898/     B5A : C5                  		push	bc							; Save bc
(1) 2899/     B5B : 47                  		ld	b, a							; b = FM instrument
(1) 2900/     B5C : CD 80 04            		call	zGetFMInstrumentPointer		; hl = pointer to instrument data
(1) 2901/     B5F : CD C8 04            		call	zSendFMInstrument.active	; Send instrument
(1) 2902/     B62 : C1                  		pop	bc								; Restore bc
(1) 2903/     B63 :                     
(1) 2904/     B63 :                     .skip_track:
(1) 2905/     B63 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 2906/     B66 : DD 19               		add	ix, de							; ix = pointer to next track
(1) 2907/     B68 : 10 C5               		djnz	.loop						; Loop for all tracks
(1) 2908/     B6A :                     
(1) 2909/     B6A : 3E 40               		ld	a, 40h							; a = 40h
(1) 2910/     B6C : 32 A5 1C            		ld	(zFadeInTimeout), a				; Start fade
(1) 2911/     B6F : 3E 02               		ld	a, 2							; a = 2
(1) 2912/     B71 : 32 9C 1C            		ld	(zFadeDelayTimeout), a			; Set fade delay timeout
(1) 2913/     B74 : 32 9B 1C            		ld	(zFadeDelay), a					; Set fade delay
(1) 2914/     B77 : C9                  		ret
(1) 2915/     B78 :                     ; End of function zFadeInToPrevious
(1) 2916/     B78 :                     ; ---------------------------------------------------------------------------
(1) 2917/     B78 :                     ;loc_AA5
(1) 2918/     B78 :                     zPSGFrequencies:
(1) 2919/     B78 :                     		; This table differs from the one in Sonic 1 and 2's drivers by
(1) 2920/     B78 :                     		; having an extra octave at the start and two extra notes at
(1) 2921/     B78 :                     		; the end, allowing it to span notes c-0 to b-7.
(1) 2922/     B78 : FF 03 FF 03 FF 03   		dw 3FFh,3FFh,3FFh,3FFh,3FFh,3FFh,3FFh,3FFh,3FFh,3F7h,3BEh,388h
                    FF 03 FF 03 FF 03 
                    FF 03 FF 03 FF 03 
                    F7 03 BE 03 88 03 
(1) 2923/     B90 : 56 03 26 03 F9 02   		dw 356h,326h,2F9h,2CEh,2A5h,280h,25Ch,23Ah,21Ah,1FBh,1DFh,1C4h
                    CE 02 A5 02 80 02 
                    5C 02 3A 02 1A 02 
                    FB 01 DF 01 C4 01 
(1) 2924/     BA8 : AB 01 93 01 7D 01   		dw 1ABh,193h,17Dh,167h,153h,140h,12Eh,11Dh,10Dh,0FEh,0EFh,0E2h
                    67 01 53 01 40 01 
                    2E 01 1D 01 0D 01 
                    FE 00 EF 00 E2 00 
(1) 2925/     BC0 : D6 00 C9 00 BE 00   		dw 0D6h,0C9h,0BEh,0B4h,0A9h,0A0h,097h,08Fh,087h,07Fh,078h,071h
                    B4 00 A9 00 A0 00 
                    97 00 8F 00 87 00 
                    7F 00 78 00 71 00 
(1) 2926/     BD8 : 6B 00 65 00 5F 00   		dw 06Bh,065h,05Fh,05Ah,055h,050h,04Bh,047h,043h,040h,03Ch,039h
                    5A 00 55 00 50 00 
                    4B 00 47 00 43 00 
                    40 00 3C 00 39 00 
(1) 2927/     BF0 : 36 00 33 00 30 00   		dw 036h,033h,030h,02Dh,02Bh,028h,026h,024h,022h,020h,01Fh,01Dh
                    2D 00 2B 00 28 00 
                    26 00 24 00 22 00 
                    20 00 1F 00 1D 00 
(1) 2928/     C08 : 1B 00 1A 00 18 00   		dw 01Bh,01Ah,018h,017h,016h,015h,013h,012h,011h,010h,000h,000h
                    17 00 16 00 15 00 
                    13 00 12 00 11 00 
                    10 00 00 00 00 00 
(1) 2929/     C20 :                     ;loc_B4D
(1) 2930/     C20 :                     zFMFrequencies:
(1) 2931/     C20 :                     		; This table spans only a single octave, as the octave frequency
(1) 2932/     C20 :                     		; is calculated at run-time unlike in Sonic 1 and 2's drivers.
(1) 2933/     C20 : 84 02 AB 02 D3 02   		dw 284h,2ABh,2D3h,2FEh,32Dh,35Ch,38Fh,3C5h,3FFh,43Ch,47Ch,4C0h
                    FE 02 2D 03 5C 03 
                    8F 03 C5 03 FF 03 
                    3C 04 7C 04 C0 04 
(1) 2934/     C38 :                     ; ---------------------------------------------------------------------------
(1) 2935/     C38 :                     
(1) 2936/     C38 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 2937/     C38 :                     ;
(1) 2938/     C38 :                     ;sub_B98
(1) 2939/     C38 :                     zUpdateDACTrack:
(1) 2940/     C38 : DD 35 0B            		dec	(ix+zTrack.DurationTimeout)		; Advance track duration timer
(1) 2941/     C3B : C0                  		ret	nz								; Return if note is still going
(1) 2942/     C3C : DD 5E 03            		ld	e, (ix+zTrack.DataPointerLow)	; e = low byte of track data pointer
(1) 2943/     C3F : DD 56 04            		ld	d, (ix+zTrack.DataPointerHigh)	; d = high byte of track data pointer
(1) 2944/     C42 :                     
(1) 2945/     C42 :                     ;loc_BA2
(1) 2946/     C42 :                     zUpdateDACTrack_cont:
(1) 2947/     C42 : 1A                  		ld	a, (de)							; Get next byte from track
(1) 2948/     C43 : 13                  		inc	de								; Advance pointer
(1) 2949/     C44 : FE E0               		cp	FirstCoordFlag					; Is it a coordination flag?
(1) 2950/     C46 : D2 8B 0C            		jp	nc, zHandleDACCoordFlag			; Branch if yes
(1) 2951/     C49 : B7                  		or	a								; Is it a note?
(1) 2952/     C4A : FA 51 0C            		jp	m, .got_sample					; Branch if yes
(1) 2953/     C4D : 1B                  		dec	de								; We got a duration, so go back to it
(1) 2954/     C4E : DD 7E 0D            		ld	a, (ix+zTrack.SavedDAC)			; Reuse previous DAC sample
(1) 2955/     C51 :                     
(1) 2956/     C51 :                     .got_sample:
(1) 2957/     C51 : DD 77 0D            		ld	(ix+zTrack.SavedDAC), a			; Store new DAC sample
(1) 2958/     C54 : DD 7E 10            		ld	a, (ix+zTrack.DACSFXPlaying)
(1) 2959/     C57 : B7                  		or	a
(1) 2960/     C58 : 20 21               		jr	nz, .get_duration
(1) 2961/     C5A : DD 7E 0D            		ld	a, (ix+zTrack.SavedDAC)
(1) 2962/     C5D : D6 80               		sub	NoteRest						; Is it a rest?
(1) 2963/     C5F : CA 7B 0C            		jp	z, .get_duration				; Branch if yes
(1) 2964/     C62 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding DAC channel?
(1) 2965/     C66 : C2 7B 0C            		jp	nz, .get_duration				; Branch if yes
(1) 2966/     C69 : 32 AC 1C            		ld	(zDACIndex), a					; Queue DAC sample
(1) 2967/     C6C : DD E5               		push	ix							; Save track pointer
(1) 2968/     C6E : DD 21 AE 1D         		ld	ix, zSongFM6					; Get pointer to FM6 track data
(1) 2969/     C72 : DD CB 00 D6         		set	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Mark track as being overridden
(1) 2970/     C76 : CD 19 03            		call	zKeyOffIfActive				; Kill note (will do nothing if 'do not attack' is on)
(1) 2971/     C79 : DD E1               		pop	ix								; Restore track pointer
(1) 2972/     C7B :                     
(1) 2973/     C7B :                     .get_duration:
(1) 2974/     C7B : 1A                  		ld	a, (de)							; Get note duration
(1) 2975/     C7C : 13                  		inc	de								; Advance pointer
(1) 2976/     C7D : B7                  		or	a								; Is it a duration?
(1) 2977/     C7E : F2 CF 02            		jp	p, zStoreDuration				; Branch if yes
(1) 2978/     C81 : 1B                  		dec	de								; Put the byte back to the stream
(1) 2979/     C82 : DD 7E 0C            		ld	a, (ix+zTrack.SavedDuration)	; Reuse last duration
(1) 2980/     C85 : DD 77 0B            		ld	(ix+zTrack.DurationTimeout), a	; Set new duration timeout
(1) 2981/     C88 : C3 D5 02            		jp	zFinishTrackUpdate
(1) 2982/     C8B :                     ; ---------------------------------------------------------------------------
(1) 2983/     C8B :                     ;loc_BE3
(1) 2984/     C8B :                     zHandleDACCoordFlag:
(1) 2985/     C8B : 21 91 0C            		ld	hl, loc_BE9						; hl = desired return address
(1) 2986/     C8E : C3 98 0C            		jp	zHandleCoordFlag
(1) 2987/     C91 :                     ; ---------------------------------------------------------------------------
(1) 2988/     C91 :                     loc_BE9:
(1) 2989/     C91 : 13                  		inc	de								; Advance to next byte in track
(1) 2990/     C92 : C3 42 0C            		jp	zUpdateDACTrack_cont			; Continue processing DAC track
(1) 2991/     C95 :                     ; ---------------------------------------------------------------------------
(1) 2992/     C95 :                     ;loc_BED
(1) 2993/     C95 :                     zHandleFMorPSGCoordFlag:
(1) 2994/     C95 : 21 A1 0C            		ld	hl, loc_BF9						; hl = desired return address
(1) 2995/     C98 :                     
(1) 2996/     C98 :                     ;loc_BF0
(1) 2997/     C98 :                     zHandleCoordFlag:
(1) 2998/     C98 : E5                  		push	hl							; Set return location (ret) to location stored in hl
(1) 2999/     C99 : D6 E0               		sub	FirstCoordFlag					; Make it a zero-based index
(1) 3000/     C9B : 21 A5 0C            		ld	hl, zCoordFlagSwitchTable		; Load switch table into hl
(1) 3001/     C9E : DF                  		rst	PointerTableOffset				; hl = pointer to target location
(1) 3002/     C9F : 1A                  		ld	a, (de)							; a = coordination flag parameter
(1) 3003/     CA0 : E9                  		jp	(hl)							; Indirect jump to coordination flag handler
(1) 3004/     CA1 :                     ; End of function zUpdateDACTrack
(1) 3005/     CA1 :                     ; ---------------------------------------------------------------------------
(1) 3006/     CA1 :                     loc_BF9:
(1) 3007/     CA1 : 13                  		inc	de								; Advance to next byte in track
(1) 3008/     CA2 : C3 45 02            		jp	zGetNextNote_cont				; Continue processing FM/PSG track
(1) 3009/     CA5 :                     ; ---------------------------------------------------------------------------
(1) 3010/     CA5 :                     ;loc_BFD
(1) 3011/     CA5 :                     zCoordFlagSwitchTable:
(1) 3012/     CA5 : 0F 0D               		dw cfPanningAMSFMS					; 0E0h
(1) 3013/     CA7 : 40 0D               		dw cfDetune							; 0E1h
(1) 3014/     CA9 : 44 0D               		dw cfFadeInToPrevious				; 0E2h
(1) 3015/     CAB : 48 0D               		dw cfSilenceStopTrack				; 0E3h
(1) 3016/     CAD : 52 0D               		dw cfSetVolume						; 0E4h
(1) 3017/     CAF : 74 0D               		dw cfChangeVolume2					; 0E5h
(1) 3018/     CB1 : 76 0D               		dw cfChangeVolume					; 0E6h
(1) 3019/     CB3 : C3 0D               		dw cfPreventAttack					; 0E7h
(1) 3020/     CB5 : C9 0D               		dw cfNoteFill						; 0E8h
(1) 3021/     CB7 : 2E 0D               		dw cfSpindashRev					; 0E9h
(1) 3022/     CB9 : 01 0D               		dw cfPlayDACSample					; 0EAh
(1) 3023/     CBB : D3 0D               		dw cfConditionalJump				; 0EBh
(1) 3024/     CBD : E9 0D               		dw cfChangePSGVolume				; 0ECh
(1) 3025/     CBF : 0D 0E               		dw cfSetKey							; 0EDh
(1) 3026/     CC1 : 13 0E               		dw cfSendFMI						; 0EEh
(1) 3027/     CC3 : 1F 0E               		dw cfSetVoice						; 0EFh
(1) 3028/     CC5 : 5C 0E               		dw cfModulation						; 0F0h
(1) 3029/     CC7 : 6A 0E               		dw cfAlterModulation				; 0F1h
(1) 3030/     CC9 : 76 0E               		dw cfStopTrack						; 0F2h
(1) 3031/     CCB : 20 0F               		dw cfSetPSGNoise					; 0F3h
(1) 3032/     CCD : 72 0E               		dw cfSetModulation					; 0F4h
(1) 3033/     CCF : 44 0F               		dw cfSetPSGVolEnv					; 0F5h
(1) 3034/     CD1 : 4D 0F               		dw cfJumpTo							; 0F6h
(1) 3035/     CD3 : 67 0F               		dw cfRepeatAtPos					; 0F7h
(1) 3036/     CD5 : 7E 0F               		dw cfJumpToGosub					; 0F8h
(1) 3037/     CD7 : 98 0F               		dw cfJumpReturn						; 0F9h
(1) 3038/     CD9 : AB 0F               		dw cfDisableModulation				; 0FAh
(1) 3039/     CDB : B1 0F               		dw cfChangeTransposition			; 0FBh
(1) 3040/     CDD : B8 0F               		dw cfLoopContinuousSFX				; 0FCh
(1) 3041/     CDF : D2 0F               		dw cfToggleAltFreqMode				; 0FDh
(1) 3042/     CE1 : DF 0F               		dw cfFM3SpecialMode					; 0FEh
(1) 3043/     CE3 : 22 10               		dw cfMetaCF							; 0FFh
(1) 3044/     CE5 :                     ;loc_C3D
(1) 3045/     CE5 :                     zExtraCoordFlagSwitchTable:
(1) 3046/     CE5 : 29 10               		dw cfSetTempo						; 0FFh 00h
(1) 3047/     CE7 : 2D 10               		dw cfPlaySFXByIndex					; 0FFh 01h
(1) 3048/     CE9 : 3D 10               		dw cfHaltSound						; 0FFh 02h
(1) 3049/     CEB : 78 10               		dw cfCopyData						; 0FFh 03h
(1) 3050/     CED : 86 10               		dw cfSetTempoDivider				; 0FFh 04h
(1) 3051/     CEF : 95 10               		dw cfSetSSGEG						; 0FFh 05h
(1) 3052/     CF1 : C9 10               		dw cfFMVolEnv						; 0FFh 06h
(1) 3053/     CF3 : D2 10               		dw cfResetSpindashRev				; 0FFh 07h
(1) 3054/     CF5 : D8 10               		dw cfChanSetTempoDivider			; 0FFh 08h
(1) 3055/     CF7 : DC 10               		dw cfChanFMCommand					; 0FFh 09h
(1) 3056/     CF9 : CC 0D               		dw cfNoteFillSet					; 0FFh 0Ah
(1) 3057/     CFB : 53 0F               		dw cfPitchSlide						; 0FFh 0Bh
(1) 3058/     CFD : 23 0D               		dw cfSetLFO							; 0FFh 0Ch
(1) 3059/     CFF : 35 10               		dw cfPlayMusicByIndex				; 0FFh 0Dh
(1) 3060/     D01 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3061/     D01 :                     ; Sets a new DAC sample for play.
(1) 3062/     D01 :                     ;
(1) 3063/     D01 :                     ; Has one parameter, the index (1-based) of the DAC sample to play.
(1) 3064/     D01 :                     ;
(1) 3065/     D01 :                     ;sub_C4D
(1) 3066/     D01 :                     cfPlayDACSample:
(1) 3067/     D01 : 32 AC 1C            		ld	(zDACIndex), a					; Set next DAC sample to the parameter byte
(1) 3068/     D04 : 21 B8 1C            		ld	hl, zSongDAC					; Get pointer to DAC track
(1) 3069/     D07 : CB D6               		set	bitSFXOverride, (hl)			; Mark track as being overridden
(1) 3070/     D09 : 21 AE 1D            		ld	hl, zSongFM6					; Get pointer to FM6 track
(1) 3071/     D0C : CB D6               		set	bitSFXOverride, (hl)			; Mark track as being overridden
(1) 3072/     D0E : C9                  		ret
(1) 3073/     D0F :                     ; End of function cfPlayDACSample
(1) 3074/     D0F :                     
(1) 3075/     D0F :                     
(1) 3076/     D0F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3077/     D0F :                     ; Sets panning for track. By accident, you can sometimes set AMS and FMS
(1) 3078/     D0F :                     ; flags -- but only if the bits in question were zero.
(1) 3079/     D0F :                     ;
(1) 3080/     D0F :                     ; Has one parameter byte, the AMS/FMS/panning bits.
(1) 3081/     D0F :                     ;
(1) 3082/     D0F :                     ;sub_C51
(1) 3083/     D0F :                     cfPanningAMSFMS:
(1) 3084/     D0F : 0E 3F               		ld	c, (~maskPanning)&0FFh			; Mask for all but panning
(1) 3085/     D11 :                     
(1) 3086/     D11 :                     zDoChangePan:
(1) 3087/     D11 : DD 7E 0A            		ld	a, (ix+zTrack.AMSFMSPan)		; Get current AMS/FMS/panning
(1) 3088/     D14 : A1                  		and	c								; Mask out L+R
(1) 3089/     D15 : D5                  		push	de							; Store de
(1) 3090/     D16 : EB                  		ex	de, hl							; Exchange de and hl
(1) 3091/     D17 : B6                  		or	(hl)							; Mask in the new panning; may also add AMS/FMS
(1) 3092/     D18 : DD 77 0A            		ld	(ix+zTrack.AMSFMSPan), a		; Store new value in track RAM
(1) 3093/     D1B : 4F                  		ld	c, a							; c = new AMS/FMS/panning
(1) 3094/     D1C : 3E B4               		ld	a, ymPanningAMSensFMSens		; a = YM2612 register to write to
(1) 3095/     D1E : CD A9 00            		call	zWriteFMIorII				; Set new panning/AMS/FMS
(1) 3096/     D21 : D1                  		pop	de								; Restore de
(1) 3097/     D22 : C9                  		ret
(1) 3098/     D23 :                     ; End of function cfPanningAMSFMS
(1) 3099/     D23 :                     
(1) 3100/     D23 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3101/     D23 :                     ; Enables or disables the LFO.
(1) 3102/     D23 :                     ;
(1) 3103/     D23 :                     ; Has two parameter bytes: the first one is sent directly to the LFO enable
(1) 3104/     D23 :                     ; register: bit 3 is the enable flag, bits 0-2 are the frequency of the LFO.
(1) 3105/     D23 :                     ; Second parameter byte specifies AMS/FMS sensibility for the channel.
(1) 3106/     D23 :                     
(1) 3107/     D23 :                     cfSetLFO:
(1) 3108/     D23 : 4F                  		ld	c, a							; Copy parameter byte
(1) 3109/     D24 : 3E 22               		ld	a, ymLFO						; LFO enable/frequency
(1) 3110/     D26 : CD BC 00            		call	zWriteFMI					; Send it
(1) 3111/     D29 : 13                  		inc	de								; Advance pointer
(1) 3112/     D2A : 0E C0               		ld	c, maskPanning					; Mask for only panning
(1) 3113/     D2C : 18 E3               		jr	zDoChangePan
(1) 3114/     D2E :                     
(1) 3115/     D2E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3116/     D2E :                     ; Performs an escalating transposition ("revving") of the track.
(1) 3117/     D2E :                     ;
(1) 3118/     D2E :                     ; The saved value for the spindash rev is reset to zero every time a "normal"
(1) 3119/     D2E :                     ; SFX is played (i.e., not a continuous SFX and not the spindash sound).
(1) 3120/     D2E :                     ; Every time this function is called, the spindash rev value is added to the
(1) 3121/     D2E :                     ; track transposition; unless this sum is exactly 10h, then the spindash rev is
(1) 3122/     D2E :                     ; further increased by 1 for future calls.
(1) 3123/     D2E :                     ;
(1) 3124/     D2E :                     ; Has no parameter bytes.
(1) 3125/     D2E :                     ;
(1) 3126/     D2E :                     ;sub_C65
(1) 3127/     D2E :                     cfSpindashRev:
(1) 3128/     D2E : 21 A3 1C            		ld	hl, zSpindashRev				; hl = pointer to escalating transposition
(1) 3129/     D31 : 7E                  		ld	a, (hl)							; a = value of escalating transposition
(1) 3130/     D32 : DD 86 05            		add	a, (ix+zTrack.Transpose)		; Add in current track transposition
(1) 3131/     D35 : DD 77 05            		ld	(ix+zTrack.Transpose), a		; Store result as new track transposition
(1) 3132/     D38 : FE 10               		cp	10h								; Is the current transposition 10h?
(1) 3133/     D3A : CA 3E 0D            		jp	z, .skip_rev					; Branch if yes
(1) 3134/     D3D : 34                  		inc	(hl)							; Otherwise, increase escalating transposition
(1) 3135/     D3E :                     
(1) 3136/     D3E :                     .skip_rev:
(1) 3137/     D3E : 1B                  		dec	de								; Put parameter byte back
(1) 3138/     D3F : C9                  		ret
(1) 3139/     D40 :                     ; End of function cfSpindashRev
(1) 3140/     D40 :                     
(1) 3141/     D40 :                     
(1) 3142/     D40 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3143/     D40 :                     ; Sets detune (signed). The final note frequency is shifted
(1) 3144/     D40 :                     ; by this value.
(1) 3145/     D40 :                     ;
(1) 3146/     D40 :                     ; Has one parameter byte, the new detune.
(1) 3147/     D40 :                     ;
(1) 3148/     D40 :                     ;sub_C77 cfAlterNoteFreq
(1) 3149/     D40 :                     cfDetune:
(1) 3150/     D40 : DD 77 10            		ld	(ix+zTrack.Detune), a			; Set detune
(1) 3151/     D43 : C9                  		ret
(1) 3152/     D44 :                     ; End of function cfDetune
(1) 3153/     D44 :                     
(1) 3154/     D44 :                     
(1) 3155/     D44 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3156/     D44 :                     ; Fade in to previous song.
(1) 3157/     D44 :                     ;
(1) 3158/     D44 :                     ; Has one parameter byte. If the parameter byte if FFh, the engine will fade
(1) 3159/     D44 :                     ; to the previous song. If the parameter byte is equal to 29h (1-Up ID - 1),
(1) 3160/     D44 :                     ; the driver will prevent new music or SFX from playing as long as the 1-Up
(1) 3161/     D44 :                     ; music is playing (but will not clear the M68K queue). For all other values,
(1) 3162/     D44 :                     ; the queue will work as normal, but no fade-in will be done.
(1) 3163/     D44 :                     ;
(1) 3164/     D44 :                     ;sub_C7B
(1) 3165/     D44 :                     cfFadeInToPrevious:
(1) 3166/     D44 : 32 A0 1C            		ld	(zFadeToPrevFlag), a
(1) 3167/     D47 : C9                  		ret
(1) 3168/     D48 :                     ; End of function cfFadeInToPrevious
(1) 3169/     D48 :                     
(1) 3170/     D48 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3171/     D48 :                     ; Silences FM channel and stops track. Expanded form of coord. flag 0F2h.
(1) 3172/     D48 :                     ;
(1) 3173/     D48 :                     ; Technically, it has a parameter byte, but it is irrelevant and unused.
(1) 3174/     D48 :                     ;
(1) 3175/     D48 :                     ;loc_C7F
(1) 3176/     D48 :                     cfSilenceStopTrack:
(1) 3177/     D48 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3178/     D4C : CC A2 0A            		call	z, zFMSilenceChannel		; If so, don't mess with the YM2612
(1) 3179/     D4F : C3 76 0E            		jp	cfStopTrack
(1) 3180/     D52 :                     ; End of function cfSilenceStopTrack
(1) 3181/     D52 :                     
(1) 3182/     D52 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3183/     D52 :                     ; Sets track volume.
(1) 3184/     D52 :                     ;
(1) 3185/     D52 :                     ; Has one parameter byte, the volume.
(1) 3186/     D52 :                     ;
(1) 3187/     D52 :                     ; For FM tracks, this is a 7-bit value from 0 (lowest volume) to 127 (highest
(1) 3188/     D52 :                     ; volume). The value is XOR'ed with 7Fh before being sent, then stripped of the
(1) 3189/     D52 :                     ; sign bit. The volume change takes effect immediately.
(1) 3190/     D52 :                     ;
(1) 3191/     D52 :                     ; For PSG tracks, this is a 4-bit value ranging from 8 (lowest volume) to 78h
(1) 3192/     D52 :                     ; (highest volume). The value is shifted 3 bits to the right, XOR'ed with 0Fh
(1) 3193/     D52 :                     ; and AND'ed with 0Fh before being uploaded, so the sign bit and the lower 3
(1) 3194/     D52 :                     ; bits are discarded.
(1) 3195/     D52 :                     ;
(1) 3196/     D52 :                     ;loc_C85
(1) 3197/     D52 :                     cfSetVolume:
(1) 3198/     D52 : 2F                  		cpl									; Invert parameter byte
(1) 3199/     D53 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG channel?
(1) 3200/     D57 : 28 0B               		jr	z, .not_psg						; Branch if not
(1) 3201/     D59 :                     		; The following code gets bits 3, 4, 5 and 6 from the parameter byte,
(1) 3202/     D59 :                     		; puts them in positions 0 to 3 and inverts them, discarding all other
(1) 3203/     D59 :                     		; bits in the parameter byte.
(1) 3204/     D59 :                     		; Shift the parameter byte 3 bits to the right
(1) 3205/     D59 : CB 3F               		srl	a
(1) 3206/     D5B : CB 3F               		srl	a
(1) 3207/     D5D : CB 3F               		srl	a
(1) 3208/     D5F : E6 0F               		and	0Fh								; Clear out high nibble
(1) 3209/     D61 : C3 F8 0D            		jp	zStoreTrackVolume
(1) 3210/     D64 :                     ; ---------------------------------------------------------------------------
(1) 3211/     D64 :                     .not_psg:
(1) 3212/     D64 : E6 7F               		and	7Fh								; Strip irrelevant sign bit
(1) 3213/     D66 : DD 77 06            		ld	(ix+zTrack.Volume), a			; Set as new track volume
(1) 3214/     D69 : 18 19               		jr	zSendTL							; Begin using new volume immediately
(1) 3215/     D6B :                     
(1) 3216/     D6B :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3217/     D6B :                     ; Clamps value of FM volume attenuation to [0, 7Fh] range if needed.
(1) 3218/     D6B :                     ;
(1) 3219/     D6B :                     ; Input:  a    Volume attenuation after being changed
(1) 3220/     D6B :                     ;         f    Flags for change of to volume attenuation
(1) 3221/     D6B :                     ; Output: a    Clamped volume attenuation
(1) 3222/     D6B :                     zDoFMVolumeClamp:
(1) 3223/     D6B : F0                  		ret	p								; Return if result is still positive
(1) 3224/     D6C : EA 71 0D            		jp	pe, .overflowed					; Branch if addition overflowed into more than 127 positive
(1) 3225/     D6F : AF                  		xor	a								; Set maximum volume
(1) 3226/     D70 : C9                  		ret
(1) 3227/     D71 :                     ; ---------------------------------------------------------------------------
(1) 3228/     D71 :                     .overflowed:
(1) 3229/     D71 : 3E 7F               		ld	a, 7Fh							; Set minimum volume
(1) 3230/     D73 : C9                  		ret
(1) 3231/     D74 :                     
(1) 3232/     D74 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3233/     D74 :                     ; Change track volume for a FM track.
(1) 3234/     D74 :                     ;
(1) 3235/     D74 :                     ; Has two parameter bytes: the first byte is ignored, the second is the signed
(1) 3236/     D74 :                     ; change in volume. Positive lowers volume, negative increases it.
(1) 3237/     D74 :                     ;
(1) 3238/     D74 :                     ;loc_CA1
(1) 3239/     D74 :                     cfChangeVolume2:
(1) 3240/     D74 : 13                  		inc	de								; Advance pointer
(1) 3241/     D75 : 1A                  		ld	a, (de)							; Get change in volume then fall-through
(1) 3242/     D76 :                     
(1) 3243/     D76 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3244/     D76 :                     ; Change track volume for a FM track.
(1) 3245/     D76 :                     ;
(1) 3246/     D76 :                     ; Has one parameter byte, the signed change in volume. Positive lowers volume,
(1) 3247/     D76 :                     ; negative increases it.
(1) 3248/     D76 :                     ;
(1) 3249/     D76 :                     ;loc_CA3
(1) 3250/     D76 :                     cfChangeVolume:
(1) 3251/     D76 :                     		; S2 places this check further down (and S1 lacks it altogether),
(1) 3252/     D76 :                     		; allowing PSG channels to change their volume. This means the
(1) 3253/     D76 :                     		; likes of S2's SFX $F0 will sound different in this driver
(1) 3254/     D76 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3255/     D7A : C0                  		ret	nz								; Return if yes
(1) 3256/     D7B : DD 86 06            		add	a, (ix+zTrack.Volume)			; Add in track's current volume
(1) 3257/     D7E : CD 6B 0D            		call	zDoFMVolumeClamp			; Clamp if needed
(1) 3258/     D81 : DD 77 06            		ld	(ix+zTrack.Volume), a			; Store new volume
(1) 3259/     D84 :                     
(1) 3260/     D84 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3261/     D84 :                     ; Subroutine to send TL information to YM2612.
(1) 3262/     D84 :                     ;
(1) 3263/     D84 :                     ;sub_CBA
(1) 3264/     D84 :                     zSendTL:
(1) 3265/     D84 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 3266/     D88 : C0                  		ret	nz								; Is so, quit
(1) 3267/     D89 :                     
(1) 3268/     D89 :                     .active:
(1) 3269/     D89 : FD E5               		push	iy							; Save iy
(1) 3270/     D8B : D5                  		push	de							; Save de
(1) 3271/     D8C : 11 AE 04            		ld	de, zFMInstrumentTLTable		; de = pointer to FM TL register table
(1) 3272/     D8F : (MACRO)             		zGetFMPartPointer					; Point iy to appropriate FM part
(1) 3272/     D8F : DD 4E 01                            ld      c, (ix+zTrack.VoiceControl)             ; Get voice control bits for future use
(1) 3272/     D92 : FD 21 00 40                         ld      iy, zYM2612_A0                                  ; Point to part I
(1) 3272/     D96 : CB 51                               bit     ymPartII, c                                             ; Is this the DAC channel or FM4 or FM5 or FM6?
(1) 3272/     D98 : 28 06                               jr      z, .notFMII                                             ; If not, write reg/data pair to part I
(1) 3272/     D9A : CB 91                               res     ymPartII, c                                             ; Strip 'bound to part II regs' bit
(1) 3272/     D9C : FD 21 02 40                         ld      iy, zYM2612_A1                                  ; Point to part II
(1) 3272/     DA0 :                     .notFMII:
(1) 3273/     DA0 : DD 6E 15            		ld	l, (ix+zTrack.TLPtrLow)			; l = low byte of pointer to instrument's TL data
(1) 3274/     DA3 : DD 66 16            		ld	h, (ix+zTrack.TLPtrHigh)		; h = high byte of pointer to instrument's TL data
(1) 3275/     DA6 :                     
(1) 3276/     DA6 :                     .got_pointers:
(1) 3277/     DA6 : 06 04               		ld	b, zFMInstrumentTLTable_End-zFMInstrumentTLTable	; Number of entries
(1) 3278/     DA8 :                     
(1) 3279/     DA8 :                     .loop:
(1) 3280/     DA8 : (MACRO)             		zFastWriteFM (de), (hl), calcVolume
(1) 3280/     DA8 : 1A                                  ld      a, (DE)                                                  ; Get register to write to
(1) 3280/     DA9 : 81                                  add     a, c                                                    ; Add the channel bits to the register address
(1) 3280/     DAA : FD 77 00                            ld      (iy+0), a                                               ; Select YM2612 register
(1) 3280/     DAD : 7E                                  ld      a, (HL)                                                 ; a = (HL) to send
(1) 3280/     DAE :  (MACRO-2)                                  CALCVOLUME
(1) 3280/     DAE : B7                                  or      a                                                               ; Is it positive?
(1) 3280/     DAF : F2 B8 0D                            jp      p, .skip_track_vol                              ; Branch if yes
(1) 3280/     DB2 : DD 86 06                            add     a, (ix+zTrack.Volume)                   ; Add track's volume to it
(1) 3280/     DB5 : 30 01                               jr      nc, .skip_track_vol
(1) 3280/     DB7 : 9F                                  sbc     a, a                                                    ; Clamp volume attenuation as it overflowed
(1) 3280/     DB8 :                     .skip_track_vol:
(1) 3280/     DB8 : FD 77 01                            ld      (iy+1), a                                               ; Send (HL) to register
(1) 3281/     DBB : 13                  		inc	de								; Advance pointer
(1) 3282/     DBC : 23                  		inc	hl								; Advance pointer
(1) 3283/     DBD : 10 E9               		djnz	.loop						; Loop
(1) 3284/     DBF :                     
(1) 3285/     DBF : D1                  		pop	de								; Restore de
(1) 3286/     DC0 : FD E1               		pop	iy								; Restore iy
(1) 3287/     DC2 : C9                  		ret
(1) 3288/     DC3 :                     ; End of function zSendTL
(1) 3289/     DC3 :                     
(1) 3290/     DC3 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3291/     DC3 :                     ; Prevents next note from attacking.
(1) 3292/     DC3 :                     ;
(1) 3293/     DC3 :                     ; Has no parameter bytes.
(1) 3294/     DC3 :                     ;
(1) 3295/     DC3 :                     ;loc_CDB
(1) 3296/     DC3 :                     cfPreventAttack:
(1) 3297/     DC3 : DD CB 00 CE         		set	bitNoAttack, (ix+zTrack.PlaybackControl)	; Set flag to prevent attack
(1) 3298/     DC7 : 1B                  		dec	de								; Put parameter byte back
(1) 3299/     DC8 : C9                  		ret
(1) 3300/     DC9 :                     
(1) 3301/     DC9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3302/     DC9 :                     ; Sets the note fill.
(1) 3303/     DC9 :                     ;
(1) 3304/     DC9 :                     ; Has one parameter byte, the new note fill. This value is multiplied by the
(1) 3305/     DC9 :                     ; tempo divider, and so may overflow.
(1) 3306/     DC9 :                     ;
(1) 3307/     DC9 :                     ;loc_CE1
(1) 3308/     DC9 :                     cfNoteFill:
(1) 3309/     DC9 : CD F7 02            		call	zComputeNoteDuration		; Multiply note fill by tempo divider
(1) 3310/     DCC :                     
(1) 3311/     DCC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3312/     DCC :                     ; Sets the note fill.
(1) 3313/     DCC :                     ;
(1) 3314/     DCC :                     ; Has one parameter byte, the new note fill. This value is stored as is.
(1) 3315/     DCC :                     ;
(1) 3316/     DCC :                     cfNoteFillSet:
(1) 3317/     DCC : DD 77 17            		ld	(ix+zTrack.NoteFillTimeout), a	; Store result into note fill timeout
(1) 3318/     DCF : DD 77 18            		ld	(ix+zTrack.NoteFillMaster), a	; Store master copy of note fill
(1) 3319/     DD2 : C9                  		ret
(1) 3320/     DD3 :                     
(1) 3321/     DD3 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3322/     DD3 :                     ; Jump timeout. Shares the same loop counters as coord. flag 0E7h, so it has
(1) 3323/     DD3 :                     ; to be coordinated with these. Each time this coord. flag is encountered, it
(1) 3324/     DD3 :                     ; tests if the associated loop counter is 1. If it is, it will jump to the
(1) 3325/     DD3 :                     ; target location and the loop counter will be set to zero; otherwise, nothing
(1) 3326/     DD3 :                     ; happens.
(1) 3327/     DD3 :                     ;
(1) 3328/     DD3 :                     ; Has 3 parameter bytes: a loop counter index (identical to that of coord. flag
(1) 3329/     DD3 :                     ; 0E7h), and a 2-byte jump target.
(1) 3330/     DD3 :                     ;
(1) 3331/     DD3 :                     ;loc_CEB
(1) 3332/     DD3 :                     cfConditionalJump:
(1) 3333/     DD3 : 13                  		inc	de								; Advance track pointer
(1) 3334/     DD4 : C6 21               		add	a, zTrack.LoopCounters			; Add offset into loop counters
(1) 3335/     DD6 : 4F                  		ld	c, a							; c = offset of current loop counter
(1) 3336/     DD7 : 06 00               		ld	b, 0							; bc = sign-extended offset to current loop counter
(1) 3337/     DD9 : DD E5               		push	ix							; Save track RAM pointer
(1) 3338/     DDB : E1                  		pop	hl								; hl = pointer to track RAM
(1) 3339/     DDC : 09                  		add	hl, bc							; hl = pointer in RAM to current loop counter
(1) 3340/     DDD : 7E                  		ld	a, (hl)							; a = value of current loop counter
(1) 3341/     DDE : 3D                  		dec	a								; Decrement loop counter (note: value is not saved!)
(1) 3342/     DDF : CA E4 0D            		jp	z, .do_jump						; Branch if result is zero
(1) 3343/     DE2 : 13                  		inc	de								; Skip another byte
(1) 3344/     DE3 : C9                  		ret
(1) 3345/     DE4 :                     ; ---------------------------------------------------------------------------
(1) 3346/     DE4 :                     .do_jump:
(1) 3347/     DE4 : AF                  		xor	a								; a = 0
(1) 3348/     DE5 : 77                  		ld	(hl), a							; Clear loop counter
(1) 3349/     DE6 : C3 4D 0F            		jp	cfJumpTo
(1) 3350/     DE9 :                     
(1) 3351/     DE9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3352/     DE9 :                     ; Change PSG volume. Has no effect on FM or DAC channels.
(1) 3353/     DE9 :                     ;
(1) 3354/     DE9 :                     ; Has one parameter byte, the change in volume. The value is signed, but any
(1) 3355/     DE9 :                     ; result greater than 0Fh will result in no output, while any result less than
(1) 3356/     DE9 :                     ; 0 will result in maximum volume.
(1) 3357/     DE9 :                     ;
(1) 3358/     DE9 :                     ;loc_D01
(1) 3359/     DE9 :                     cfChangePSGVolume:
(1) 3360/     DE9 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG channel?
(1) 3361/     DED : C8                  		ret	z								; Return if not
(1) 3362/     DEE : DD CB 00 A6         		res	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Clear 'track is resting' flag
(1) 3363/     DF2 : DD 35 11            		dec	(ix+zTrack.VolEnv)				; Decrement envelope index
(1) 3364/     DF5 : CD FC 0D            		call	zDoPSGVolumeClamp			; Add track's current volume and clamp
(1) 3365/     DF8 :                     
(1) 3366/     DF8 :                     ;loc_D17
(1) 3367/     DF8 :                     zStoreTrackVolume:
(1) 3368/     DF8 : DD 77 06            		ld	(ix+zTrack.Volume), a			; Store new volume
(1) 3369/     DFB : C9                  		ret
(1) 3370/     DFC :                     
(1) 3371/     DFC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3372/     DFC :                     ; Adds value to PSG volume attenuation and clamps to [0, 0Fh] range
(1) 3373/     DFC :                     ; if needed.
(1) 3374/     DFC :                     ;
(1) 3375/     DFC :                     ; Input:  a    Change in volume attenuation
(1) 3376/     DFC :                     ;         ix   Pointer to track data
(1) 3377/     DFC :                     ; Output: a    Clamped volume attenuation
(1) 3378/     DFC :                     zDoPSGVolumeClamp:
(1) 3379/     DFC : DD 86 06            		add	a, (ix+zTrack.Volume)			; Add track's current volume
(1) 3380/     DFF : F2 07 0E            		jp	p, .check_clamp					; Branch if result is positive
(1) 3381/     E02 : EA 0A 0E            		jp	pe, .do_clamp					; Branch if addition overflowed
(1) 3382/     E05 : AF                  		xor	a								; Set maximum volume
(1) 3383/     E06 : C9                  		ret
(1) 3384/     E07 :                     ; ---------------------------------------------------------------------------
(1) 3385/     E07 :                     .check_clamp:
(1) 3386/     E07 : FE 0F               		cp	0Fh								; Is it 0Fh or more?
(1) 3387/     E09 : D8                  		ret	c								; Return if not
(1) 3388/     E0A :                     
(1) 3389/     E0A :                     .do_clamp:
(1) 3390/     E0A : 3E 0F               		ld	a, 0Fh							; Limit to 0Fh (silence)
(1) 3391/     E0C : C9                  		ret
(1) 3392/     E0D :                     
(1) 3393/     E0D :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3394/     E0D :                     ; Changes the track's transposition.
(1) 3395/     E0D :                     ;
(1) 3396/     E0D :                     ; There is a single parameter byte, the new track transposition + 40h (that is,
(1) 3397/     E0D :                     ; 40h is subtracted from the parameter byte before the transposition is set)
(1) 3398/     E0D :                     ;
(1) 3399/     E0D :                     ;loc_D1B
(1) 3400/     E0D :                     cfSetKey:
(1) 3401/     E0D : D6 40               		sub	40h								; Subtract 40h from transposition
(1) 3402/     E0F : DD 77 05            		ld	(ix+zTrack.Transpose), a		; Store result as new transposition
(1) 3403/     E12 : C9                  		ret
(1) 3404/     E13 :                     
(1) 3405/     E13 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3406/     E13 :                     ; Sends an FM command to the YM2612. The command is sent to part I, so not all
(1) 3407/     E13 :                     ; registers can be set using this coord. flag (in particular, channels FM4,
(1) 3408/     E13 :                     ; FM5 and FM6 cannot (in general) be affected).
(1) 3409/     E13 :                     ;
(1) 3410/     E13 :                     ; Has 2 parameter bytes: a 1-byte register selector and a 1-byte register data.
(1) 3411/     E13 :                     ;
(1) 3412/     E13 :                     ;loc_D21
(1) 3413/     E13 :                     cfSendFMI:
(1) 3414/     E13 : CD 19 0E            		call	zGetFMParams				; Get parameters for FM command
(1) 3415/     E16 : C3 BC 00            		jp	zWriteFMI						; Send it to YM2612
(1) 3416/     E19 :                     
(1) 3417/     E19 :                     ;loc_D28
(1) 3418/     E19 :                     zGetFMParams:
(1) 3419/     E19 : EB                  		ex	de, hl							; Exchange de and hl
(1) 3420/     E1A : 7E                  		ld	a, (hl)							; Get YM2612 register selector
(1) 3421/     E1B : 23                  		inc	hl								; Advance pointer
(1) 3422/     E1C : 4E                  		ld	c, (hl)							; Get YM2612 register data
(1) 3423/     E1D : EB                  		ex	de, hl							; Exchange back de and hl
(1) 3424/     E1E : C9                  		ret
(1) 3425/     E1F :                     ; End of function cfSendFMI
(1) 3426/     E1F :                     
(1) 3427/     E1F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3428/     E1F :                     ; Change current instrument (FM), tone (PSG) or sample (DAC).
(1) 3429/     E1F :                     ;
(1) 3430/     E1F :                     ; Has either a single positive parameter byte or a pair of parameter bytes of
(1) 3431/     E1F :                     ; which the first is negative.
(1) 3432/     E1F :                     ;
(1) 3433/     E1F :                     ; If positive, the first parameter byte is the index of voice to use.
(1) 3434/     E1F :                     ;
(1) 3435/     E1F :                     ; If negative, and on a PSG track, then the first parameter byte is the index
(1) 3436/     E1F :                     ; of voice to use while the second parameter byte is ignored.
(1) 3437/     E1F :                     ;
(1) 3438/     E1F :                     ; If negative and on a FM or DAC track, the first parameter byte is 80h + index
(1) 3439/     E1F :                     ; of voice to use, while the second parameter byte is 7Fh + index of song whose
(1) 3440/     E1F :                     ; voice bank is to be used (here, the AIZ1 song is index 1, not zero).
(1) 3441/     E1F :                     ;
(1) 3442/     E1F :                     ; The uploading of an FM instrument is irrelevant for the DAC.
(1) 3443/     E1F :                     ;
(1) 3444/     E1F :                     ;loc_D2E
(1) 3445/     E1F :                     cfSetVoice:
(1) 3446/     E1F : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3447/     E23 : 20 2F               		jr	nz, zSetVoicePSG				; Branch if yes
(1) 3448/     E25 : CD B2 0A            		call	zSetMaxRelRate				; Set minimum D1L/RR for channel
(1) 3449/     E28 : 1A                  		ld	a, (de)							; Get voice index
(1) 3450/     E29 : DD 77 08            		ld	(ix+zTrack.VoiceIndex), a		; Store to track RAM
(1) 3451/     E2C : B7                  		or	a								; Is it negative?
(1) 3452/     E2D : F2 4A 0E            		jp	p, zSetVoiceUpload				; Branch if not
(1) 3453/     E30 : 13                  		inc	de								; Advance pointer
(1) 3454/     E31 : 1A                  		ld	a, (de)							; Get song ID whose bank is desired
(1) 3455/     E32 : DD 77 0F            		ld	(ix+zTrack.VoiceSongID), a		; Store to track RAM and fall-through
(1) 3456/     E35 :                     
(1) 3457/     E35 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3458/     E35 :                     ; Uploads the FM instrument from another song's voice bank.
(1) 3459/     E35 :                     ;
(1) 3460/     E35 :                     ;sub_D44
(1) 3461/     E35 :                     zSetVoiceUploadAlter:
(1) 3462/     E35 : D5                  		push	de							; Save de
(1) 3463/     E36 : DD 7E 0F            		ld	a, (ix+zTrack.VoiceSongID)		; Get saved song ID for instrument data
(1) 3464/     E39 : D6 81               		sub	81h								; Convert it to a zero-based index
(1) 3465/     E3B : 0E 00               		ld	c, zID_MusicPointers			; Value for music pointer table
(1) 3466/     E3D : CF                  		rst	GetPointerTable					; hl = pointer to music data
(1) 3467/     E3E : E7                  		rst	ReadPointer						; hl = pointer to music voice data
(1) 3468/     E3F : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)		; Get voice index
(1) 3469/     E42 : E6 7F               		and	7Fh								; Strip sign bit
(1) 3470/     E44 : 47                  		ld	b, a							; b = voice index
(1) 3471/     E45 : CD 8F 04            		call	zGetFMInstrumentOffset		; hl = pointer to voice data
(1) 3472/     E48 : 18 05               		jr	zSetVoiceDoUpload
(1) 3473/     E4A :                     ; ---------------------------------------------------------------------------
(1) 3474/     E4A :                     ;loc_D5A
(1) 3475/     E4A :                     zSetVoiceUpload:
(1) 3476/     E4A : D5                  		push	de							; Save de
(1) 3477/     E4B : 47                  		ld	b, a							; b = instrument index
(1) 3478/     E4C : CD 80 04            		call	zGetFMInstrumentPointer		; hl = pointer to instrument data
(1) 3479/     E4F :                     
(1) 3480/     E4F :                     zSetVoiceDoUpload:
(1) 3481/     E4F : CD B6 04            		call	zSendFMInstrument			; Upload instrument data to YM2612
(1) 3482/     E52 : D1                  		pop	de								; Restore de
(1) 3483/     E53 : C9                  		ret
(1) 3484/     E54 :                     ; End of function cfSetVoice
(1) 3485/     E54 :                     ; ---------------------------------------------------------------------------
(1) 3486/     E54 :                     ;loc_D64:
(1) 3487/     E54 :                     zSetVoicePSG:
(1) 3488/     E54 : B7                  		or	a								; Is the voice index positive?
(1) 3489/     E55 : F2 49 0F            		jp	p, cfStoreNewVoice				; Branch if yes
(1) 3490/     E58 : 13                  		inc	de								; Otherwise, advance song data pointer
(1) 3491/     E59 : C3 49 0F            		jp	cfStoreNewVoice
(1) 3492/     E5C :                     ; ---------------------------------------------------------------------------
(1) 3493/     E5C :                     
(1) 3494/     E5C :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3495/     E5C :                     ; Turns on modulation on the channel.
(1) 3496/     E5C :                     ;
(1) 3497/     E5C :                     ; Has four 1-byte parameters: delay before modulation starts, modulation speed,
(1) 3498/     E5C :                     ; modulation change per step, number of steps in modulation.
(1) 3499/     E5C :                     ;
(1) 3500/     E5C :                     ;loc_D6D
(1) 3501/     E5C :                     cfModulation:
(1) 3502/     E5C : DD 73 19            		ld	(ix+zTrack.ModulationPtrLow), e		; Store low byte of modulation data pointer
(1) 3503/     E5F : DD 72 1A            		ld	(ix+zTrack.ModulationPtrHigh), d	; Store high byte of modulation data pointer
(1) 3504/     E62 : DD 36 07 80         		ld	(ix+zTrack.ModulationCtrl), 80h	; Toggle modulation on
(1) 3505/     E66 : 13                  		inc	de								; Advance pointer...
(1) 3506/     E67 : 13                  		inc	de								; ... again...
(1) 3507/     E68 : 13                  		inc	de								; ... and again.
(1) 3508/     E69 : C9                  		ret
(1) 3509/     E6A :                     
(1) 3510/     E6A :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3511/     E6A :                     ; Sets modulation status according to parameter bytes.
(1) 3512/     E6A :                     ;
(1) 3513/     E6A :                     ; Has 2 1-byte parameters: the first byte is the new modulation state for PSG
(1) 3514/     E6A :                     ; tracks, while the second byte is the new modulation state for FM tracks.
(1) 3515/     E6A :                     ;
(1) 3516/     E6A :                     ;loc_D7B
(1) 3517/     E6A :                     cfAlterModulation:
(1) 3518/     E6A : 13                  		inc	de								; Advance track pointer
(1) 3519/     E6B : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3520/     E6F : 20 01               		jr	nz, cfSetModulation				; Branch if yes
(1) 3521/     E71 : 1A                  		ld	a, (de)							; Get new modulation status
(1) 3522/     E72 :                     
(1) 3523/     E72 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3524/     E72 :                     ; Sets modulation status.
(1) 3525/     E72 :                     ;
(1) 3526/     E72 :                     ; Has one parameter byte, the new modulation status.
(1) 3527/     E72 :                     ;
(1) 3528/     E72 :                     ;loc_D83
(1) 3529/     E72 :                     cfSetModulation:
(1) 3530/     E72 : DD 77 07            		ld	(ix+zTrack.ModulationCtrl), a	; Set modulation status
(1) 3531/     E75 : C9                  		ret
(1) 3532/     E76 :                     
(1) 3533/     E76 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3534/     E76 :                     ; Stops the current track.
(1) 3535/     E76 :                     ;
(1) 3536/     E76 :                     ; Technically, it has a parameter byte, but it is irrelevant and unused.
(1) 3537/     E76 :                     ;
(1) 3538/     E76 :                     ;loc_D87
(1) 3539/     E76 :                     cfStopTrack:
(1) 3540/     E76 : DD CB 00 BE         		res	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Clear 'track playing' flag
(1) 3541/     E7A : CD 19 03            		call	zKeyOffIfActive				; Send key off for track channel
(1) 3542/     E7D : CD 88 11            		call	zSilencePSGChannel			; Silence PSG channel
(1) 3543/     E80 : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)		; c = voice control bits
(1) 3544/     E83 : DD E5               		push	ix							; Save track pointer
(1) 3545/     E85 : CD 15 08            		call	zGetSFXChannelPointers		; ix = track pointer, hl = overridden track pointer
(1) 3546/     E88 : 3A A1 1C            		ld	a, (zUpdatingSFX)				; Get flag
(1) 3547/     E8B : B7                  		or	a								; Are we updating SFX?
(1) 3548/     E8C : CA 09 0F            		jp	z, zStopCleanExit				; Exit if not
(1) 3549/     E8F : E5                  		push	hl							; Save hl
(1) 3550/     E90 : 2A B1 1C            		ld	hl, (zVoiceTblPtr)				; hl = pointer to voice table
(1) 3551/     E93 : DD E1               		pop	ix								; ix = overridden track's pointer
(1) 3552/     E95 : DD CB 00 96         		res	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Clear 'SFX is overriding' bit
(1) 3553/     E99 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG channel?
(1) 3554/     E9D : 20 6F               		jr	nz, zStopPSGTrack				; Branch if yes
(1) 3555/     E9F : DD CB 00 7E         		bit	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Is 'track playing' bit set?
(1) 3556/     EA3 : 28 64               		jr	z, zStopCleanExit				; Exit if not
(1) 3557/     EA5 : 3E 02               		ld	a, ymFM3						; a = 2 (FM3)
(1) 3558/     EA7 : DD BE 01            		cp	(ix+zTrack.VoiceControl)		; Is this track for FM3?
(1) 3559/     EAA : 20 0D               		jr	nz, .not_fm3					; Branch if not
(1) 3560/     EAC : 3E 4F               		ld	a, maskFM3Special|maskEnableLoadTimers	; FM3 settings: special mode, enable and load A/B
(1) 3561/     EAE : DD CB 00 46         		bit	bitFM3Special, (ix+zTrack.PlaybackControl)	; Is FM3 in special mode?
(1) 3562/     EB2 : 20 02               		jr	nz, .do_fm3_settings			; Branch if yes
(1) 3563/     EB4 : E6 0F               		and	maskFM3Normal|maskEnableLoadTimers	; FM3 settings: normal mode, enable and load A/B
(1) 3564/     EB6 :                     
(1) 3565/     EB6 :                     .do_fm3_settings:
(1) 3566/     EB6 : CD 08 10            		call	zWriteFM3Settings			; Set the above FM3 settings
(1) 3567/     EB9 :                     
(1) 3568/     EB9 :                     .not_fm3:
(1) 3569/     EB9 : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)		; Get FM instrument
(1) 3570/     EBC : B7                  		or	a								; Is it positive?
(1) 3571/     EBD : F2 C5 0E            		jp	p, .switch_to_music				; Branch if yes
(1) 3572/     EC0 : CD 35 0E            		call	zSetVoiceUploadAlter		; Upload the voice from another song's voice bank
(1) 3573/     EC3 : 18 41               		jr	.send_ssg_eg
(1) 3574/     EC5 :                     ; ---------------------------------------------------------------------------
(1) 3575/     EC5 :                     .switch_to_music:
(1) 3576/     EC5 : 47                  		ld	b, a							; b = FM instrument
(1) 3577/     EC6 : E5                  		push	hl							; Save hl
(1) 3578/     EC7 : (MACRO)             		bankswitchToMusic					; Bank switch to song bank
(1) 3578/     EC7 : 3A B3 1C                            ld      a, (zSongBank)
(1) 3578/     ECA :  (MACRO-2)                          bankswitch
(1) 3578/     ECA : 21 00 60                            ld      hl, zBankRegister
(1) 3578/     ECD : 77                                  ld      (hl), a
(1) 3578/     ECE :                                     rept 7
(1) 3578/     ECE :                                             rrca
(1) 3578/     ECE :                                             ld      (hl), a
(1) 3578/     ECE :                                     endm
(1) 3578/     ECE : 0F                                          rrca
(1) 3578/     ECF : 77                                          ld      (hl), a
(1) 3578/     ED0 : 0F                                          rrca
(1) 3578/     ED1 : 77                                          ld      (hl), a
(1) 3578/     ED2 : 0F                                          rrca
(1) 3578/     ED3 : 77                                          ld      (hl), a
(1) 3578/     ED4 : 0F                                          rrca
(1) 3578/     ED5 : 77                                          ld      (hl), a
(1) 3578/     ED6 : 0F                                          rrca
(1) 3578/     ED7 : 77                                          ld      (hl), a
(1) 3578/     ED8 : 0F                                          rrca
(1) 3578/     ED9 : 77                                          ld      (hl), a
(1) 3578/     EDA : 0F                                          rrca
(1) 3578/     EDB : 77                                          ld      (hl), a
(1) 3578/     EDC : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 3579/     EDD : E1                  		pop	hl								; Restore hl
(1) 3580/     EDE : CD 8F 04            		call	zGetFMInstrumentOffset		; hl = pointer to instrument data
(1) 3581/     EE1 : CD C8 04            		call	zSendFMInstrument.active	; Send FM instrument
(1) 3582/     EE4 : 3E 05               		ld	a, zmake68kBank(SndBank)		; Get SFX bank
(1) 3583/     EE6 : (MACRO)             		bankswitch							; Bank switch to it
(1) 3583/     EE6 : 21 00 60                            ld      hl, zBankRegister
(1) 3583/     EE9 : 77                                  ld      (hl), a
(1) 3583/     EEA :                                     rept 7
(1) 3583/     EEA :                                             rrca
(1) 3583/     EEA :                                             ld      (hl), a
(1) 3583/     EEA :                                     endm
(1) 3583/     EEA : 0F                                          rrca
(1) 3583/     EEB : 77                                          ld      (hl), a
(1) 3583/     EEC : 0F                                          rrca
(1) 3583/     EED : 77                                          ld      (hl), a
(1) 3583/     EEE : 0F                                          rrca
(1) 3583/     EEF : 77                                          ld      (hl), a
(1) 3583/     EF0 : 0F                                          rrca
(1) 3583/     EF1 : 77                                          ld      (hl), a
(1) 3583/     EF2 : 0F                                          rrca
(1) 3583/     EF3 : 77                                          ld      (hl), a
(1) 3583/     EF4 : 0F                                          rrca
(1) 3583/     EF5 : 77                                          ld      (hl), a
(1) 3583/     EF6 : 0F                                          rrca
(1) 3583/     EF7 : 77                                          ld      (hl), a
(1) 3583/     EF8 : 74                                  ld      (hl), h                                                 ; The low bit of h is 0
(1) 3584/     EF9 : DD 7E 12            		ld	a, (ix+zTrack.HaveSSGEGFlag)	; Get custom SSG-EG flag
(1) 3585/     EFC : B7                  		or	a								; Does track have custom SSG-EG data?
(1) 3586/     EFD : F2 09 0F            		jp	p, zStopCleanExit				; Exit if not
(1) 3587/     F00 : DD 5E 13            		ld	e, (ix+zTrack.SSGEGPointerLow)	; e = low byte of pointer to SSG-EG data
(1) 3588/     F03 : DD 56 14            		ld	d, (ix+zTrack.SSGEGPointerHigh)	; d = high byte of pointer to SSG-EG data
(1) 3589/     F06 :                     
(1) 3590/     F06 :                     .send_ssg_eg:
(1) 3591/     F06 : CD 9F 10            		call	zSendSSGEGData				; Upload custom SSG-EG data
(1) 3592/     F09 :                     
(1) 3593/     F09 :                     ;loc_E22
(1) 3594/     F09 :                     zStopCleanExit:
(1) 3595/     F09 : DD E1               		pop	ix								; Restore ix
(1) 3596/     F0B : E1                  		pop	hl								; Pop return value from stack
(1) 3597/     F0C : E1                  		pop	hl								; Pop another return value from stack
(1) 3598/     F0D : C9                  		ret
(1) 3599/     F0E :                     ; ---------------------------------------------------------------------------
(1) 3600/     F0E :                     ;loc_E27
(1) 3601/     F0E :                     zStopPSGTrack:
(1) 3602/     F0E : DD CB 00 46         		bit	bitPSGNoise, (ix+zTrack.PlaybackControl)	; Is this a noise channel?
(1) 3603/     F12 : 28 F5               		jr	z, zStopCleanExit				; Exit if not
(1) 3604/     F14 : DD 7E 14            		ld	a, (ix+zTrack.PSGNoise)			; Get track's PSG noise setting
(1) 3605/     F17 : B7                  		or	a								; Is it an actual noise?
(1) 3606/     F18 : F2 1E 0F            		jp	p, .skip_command				; Branch if not
(1) 3607/     F1B : 32 11 7F            		ld	(zPSG), a						; Send it to PSG
(1) 3608/     F1E :                     
(1) 3609/     F1E :                     .skip_command:
(1) 3610/     F1E : 18 E9               		jr	zStopCleanExit
(1) 3611/     F20 :                     
(1) 3612/     F20 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3613/     F20 :                     ; Change PSG noise to parameter, and silences PSG3 channel.
(1) 3614/     F20 :                     ;
(1) 3615/     F20 :                     ; Has one parameter byte: if zero, the channel is changed back to a normal PSG
(1) 3616/     F20 :                     ; channel and the noise is silenced; if non-zero, it must be in the 0E0h-0E7h
(1) 3617/     F20 :                     ; range, and sets the noise type to use (and sets the channel as being a noise
(1) 3618/     F20 :                     ; channel).
(1) 3619/     F20 :                     ;
(1) 3620/     F20 :                     ;loc_E39
(1) 3621/     F20 :                     cfSetPSGNoise:
(1) 3622/     F20 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3623/     F24 : C8                  		ret	z								; Return if not
(1) 3624/     F25 : DD 77 14            		ld	(ix+zTrack.PSGNoise), a			; Store to track RAM
(1) 3625/     F28 : DD CB 00 C6         		set	bitPSGNoise, (ix+zTrack.PlaybackControl)	; Mark PSG track as being noise
(1) 3626/     F2C : B7                  		or	a								; Test noise value
(1) 3627/     F2D : 3E DF               		ld	a, snPSG3|snPSGVol|0Fh			; Command to silence PSG3
(1) 3628/     F2F : 20 06               		jr	nz, .skip_noise_silence			; If nonzero, branch
(1) 3629/     F31 : DD CB 00 86         		res	bitPSGNoise, (ix+zTrack.PlaybackControl)	; Otherwise, mark track as not being a noise channel
(1) 3630/     F35 : 3E FF               		ld	a, snNoise|snPSGVol|0Fh			; Command to silence the noise channel
(1) 3631/     F37 :                     
(1) 3632/     F37 :                     .skip_noise_silence:
(1) 3633/     F37 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 3634/     F3B : C0                  		ret	nz								; Return if yes
(1) 3635/     F3C : 32 11 7F            		ld	(zPSG), a						; Execute it
(1) 3636/     F3F : 1A                  		ld	a, (de)							; Get PSG noise value
(1) 3637/     F40 : 32 11 7F            		ld	(zPSG), a						; Send command to PSG
(1) 3638/     F43 : C9                  		ret
(1) 3639/     F44 :                     
(1) 3640/     F44 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3641/     F44 :                     ; Set PSG tone.
(1) 3642/     F44 :                     ;
(1) 3643/     F44 :                     ; Has one parameter byte, the new PSG tone to use.
(1) 3644/     F44 :                     ;
(1) 3645/     F44 :                     ;loc_E58
(1) 3646/     F44 :                     ;cfSetPSGTone
(1) 3647/     F44 :                     cfSetPSGVolEnv:
(1) 3648/     F44 : DD CB 01 7E         		bit	bitIsPSG, (ix+zTrack.VoiceControl)	; Is this a PSG track?
(1) 3649/     F48 : C8                  		ret	z								; Return if not
(1) 3650/     F49 :                     
(1) 3651/     F49 :                     ;loc_E5D
(1) 3652/     F49 :                     cfStoreNewVoice:
(1) 3653/     F49 : DD 77 08            		ld	(ix+zTrack.VoiceIndex), a		; Store voice
(1) 3654/     F4C : C9                  		ret
(1) 3655/     F4D :                     
(1) 3656/     F4D :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3657/     F4D :                     ; Jump to specified location.
(1) 3658/     F4D :                     ;
(1) 3659/     F4D :                     ; Has a 2-byte parameter, indicating target location for jump.
(1) 3660/     F4D :                     ;
(1) 3661/     F4D :                     ;loc_E61
(1) 3662/     F4D :                     cfJumpTo:
(1) 3663/     F4D : EB                  		ex	de, hl							; Exchange de and hl
(1) 3664/     F4E : 5E                  		ld	e, (hl)							; e = low byte of target location
(1) 3665/     F4F : 23                  		inc	hl								; Advance pointer
(1) 3666/     F50 : 56                  		ld	d, (hl)							; d = high byte of target location
(1) 3667/     F51 : 1B                  		dec	de								; Put destination byte back
(1) 3668/     F52 : C9                  		ret
(1) 3669/     F53 :                     
(1) 3670/     F53 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3671/     F53 :                     ; Starts or stops pitch sliding. Ported from Battletoads driver.
(1) 3672/     F53 :                     ;
(1) 3673/     F53 :                     ; Has a single parameter byte: if nonzero enables pitch slide, disables otherwise.
(1) 3674/     F53 :                     cfPitchSlide:
(1) 3675/     F53 : B7                  		or	a								; Is parameter nonzero?
(1) 3676/     F54 : 28 05               		jr	z, .disable_slide				; Branch if not
(1) 3677/     F56 : DD CB 00 EE         		set	bitPitchSlide, (ix+zTrack.PlaybackControl)	; Enable pitch slide
(1) 3678/     F5A : C9                  		ret
(1) 3679/     F5B :                     ; ---------------------------------------------------------------------------
(1) 3680/     F5B :                     .disable_slide:
(1) 3681/     F5B : DD CB 00 8E         		res	bitNoAttack, (ix+zTrack.PlaybackControl)	; Clear 'don't attack' flag
(1) 3682/     F5F : DD CB 00 AE         		res	bitPitchSlide, (ix+zTrack.PlaybackControl)	; Stop pitch slide
(1) 3683/     F63 : DD 77 10            		ld	(ix+zTrack.Detune), a			; Clear detune (we already know a is zero)
(1) 3684/     F66 : C9                  		ret
(1) 3685/     F67 :                     
(1) 3686/     F67 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3687/     F67 :                     ; Loop section of music.
(1) 3688/     F67 :                     ;
(1) 3689/     F67 :                     ; Has four parameter bytes: a loop counter index (exactly like coord. flag 0EBh),
(1) 3690/     F67 :                     ; a repeat count, and a 2-byte jump target.
(1) 3691/     F67 :                     ;
(1) 3692/     F67 :                     ;loc_E67
(1) 3693/     F67 :                     cfRepeatAtPos:
(1) 3694/     F67 : 13                  		inc	de								; Advance track pointer
(1) 3695/     F68 : C6 21               		add	a, zTrack.LoopCounters			; Add offset into loop counters
(1) 3696/     F6A : 4F                  		ld	c, a							; c = offset of current loop counter
(1) 3697/     F6B : 06 00               		ld	b, 0							; bc = sign-extended offset to current loop counter
(1) 3698/     F6D : DD E5               		push	ix							; Save track RAM pointer
(1) 3699/     F6F : E1                  		pop	hl								; hl = pointer to track RAM
(1) 3700/     F70 : 09                  		add	hl, bc							; hl = pointer in RAM to current loop counter
(1) 3701/     F71 : 7E                  		ld	a, (hl)							; a = value of current loop counter
(1) 3702/     F72 : B7                  		or	a								; Is loop counter zero?
(1) 3703/     F73 : 20 02               		jr	nz, .run_counter				; Branch if not
(1) 3704/     F75 : 1A                  		ld	a, (de)							; Get repeat counter
(1) 3705/     F76 : 77                  		ld	(hl), a							; Reset loop counter to it
(1) 3706/     F77 :                     
(1) 3707/     F77 :                     .run_counter:
(1) 3708/     F77 : 13                  		inc	de								; Advance track pointer
(1) 3709/     F78 : 35                  		dec	(hl)							; Decrement loop counter
(1) 3710/     F79 : C2 4D 0F            		jp	nz, cfJumpTo					; Loop if it is nonzero
(1) 3711/     F7C : 13                  		inc	de								; Advance track pointer
(1) 3712/     F7D : C9                  		ret
(1) 3713/     F7E :                     
(1) 3714/     F7E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3715/     F7E :                     ; Call subroutine. Stores current location on track-specific stack so that
(1) 3716/     F7E :                     ; coord. flag 0F9h can be used to return to current location.
(1) 3717/     F7E :                     ;
(1) 3718/     F7E :                     ; Has one 2-byte parameter, the target subroutine's address.
(1) 3719/     F7E :                     ;
(1) 3720/     F7E :                     ;loc_E7E
(1) 3721/     F7E :                     cfJumpToGosub:
(1) 3722/     F7E : 4F                  		ld	c, a							; c = low byte of target address
(1) 3723/     F7F : 13                  		inc	de								; Advance track pointer
(1) 3724/     F80 : 1A                  		ld	a, (de)							; a = high byte of target address
(1) 3725/     F81 : 47                  		ld	b, a							; bc = target address
(1) 3726/     F82 : C5                  		push	bc							; Save bc
(1) 3727/     F83 : DD E5               		push	ix							; Save ix
(1) 3728/     F85 : E1                  		pop	hl								; hl = pointer to track RAM
(1) 3729/     F86 : DD 35 09            		dec	(ix+zTrack.StackPointer)		; Decrement track stack pointer
(1) 3730/     F89 : DD 4E 09            		ld	c, (ix+zTrack.StackPointer)		; c = track stack pointer
(1) 3731/     F8C : DD 35 09            		dec	(ix+zTrack.StackPointer)		; Decrement track stack pointer again
(1) 3732/     F8F : 06 00               		ld	b, 0							; b = 0
(1) 3733/     F91 : 09                  		add	hl, bc							; hl = offset of high byte of return address
(1) 3734/     F92 : 72                  		ld	(hl), d							; Store high byte of return address
(1) 3735/     F93 : 2B                  		dec	hl								; Move pointer to target location
(1) 3736/     F94 : 73                  		ld	(hl), e							; Store low byte of return address
(1) 3737/     F95 : D1                  		pop	de								; de = jump target address
(1) 3738/     F96 : 1B                  		dec	de								; Put back the byte
(1) 3739/     F97 : C9                  		ret
(1) 3740/     F98 :                     
(1) 3741/     F98 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3742/     F98 :                     ; Returns from subroutine call. Does NOT check for stack overflows!
(1) 3743/     F98 :                     ;
(1) 3744/     F98 :                     ; Has no parameter bytes.
(1) 3745/     F98 :                     ;
(1) 3746/     F98 :                     ;loc_E98
(1) 3747/     F98 :                     cfJumpReturn:
(1) 3748/     F98 : DD E5               		push	ix							; Save track RAM address
(1) 3749/     F9A : E1                  		pop	hl								; hl = pointer to track RAM
(1) 3750/     F9B : DD 4E 09            		ld	c, (ix+zTrack.StackPointer)		; c = offset to top of return stack
(1) 3751/     F9E : 06 00               		ld	b, 0							; b = 0
(1) 3752/     FA0 : 09                  		add	hl, bc							; hl = pointer to top of return stack
(1) 3753/     FA1 : 5E                  		ld	e, (hl)							; e = low byte of return address
(1) 3754/     FA2 : 23                  		inc	hl								; Advance pointer
(1) 3755/     FA3 : 56                  		ld	d, (hl)							; de = return address
(1) 3756/     FA4 : DD 34 09            		inc	(ix+zTrack.StackPointer)		; Pop byte from return stack
(1) 3757/     FA7 : DD 34 09            		inc	(ix+zTrack.StackPointer)		; Pop byte from return stack
(1) 3758/     FAA : C9                  		ret
(1) 3759/     FAB :                     
(1) 3760/     FAB :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3761/     FAB :                     ; Clears sign bit of modulation control, disabling normal modulation.
(1) 3762/     FAB :                     ;
(1) 3763/     FAB :                     ; Has no parameter bytes.
(1) 3764/     FAB :                     ;
(1) 3765/     FAB :                     ;loc_EAB
(1) 3766/     FAB :                     cfDisableModulation:
(1) 3767/     FAB : DD CB 07 BE         		res	7, (ix+zTrack.ModulationCtrl)	; Clear bit 7 of modulation control
(1) 3768/     FAF : 1B                  		dec	de								; Put byte back
(1) 3769/     FB0 : C9                  		ret
(1) 3770/     FB1 :                     
(1) 3771/     FB1 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3772/     FB1 :                     ; Adds a signed value to channel transposition.
(1) 3773/     FB1 :                     ;
(1) 3774/     FB1 :                     ; Has one parameter byte, the change in channel transposition.
(1) 3775/     FB1 :                     ;
(1) 3776/     FB1 :                     ;loc_EB1 cfAddKey
(1) 3777/     FB1 :                     cfChangeTransposition:
(1) 3778/     FB1 : DD 86 05            		add	a, (ix+zTrack.Transpose)		; Add current transposition to parameter
(1) 3779/     FB4 : DD 77 05            		ld	(ix+zTrack.Transpose), a		; Store result as new transposition
(1) 3780/     FB7 : C9                  		ret
(1) 3781/     FB8 :                     
(1) 3782/     FB8 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3783/     FB8 :                     ; If a continuous SFX is playing, it will continue playing from target address.
(1) 3784/     FB8 :                     ; A loop counter is decremented (it is initialized to number of SFX tracks)
(1) 3785/     FB8 :                     ; for continuous SFX; if the result is zero, the continuous SFX will be flagged
(1) 3786/     FB8 :                     ; to stop.
(1) 3787/     FB8 :                     ; Non-continuous SFX do not loop.
(1) 3788/     FB8 :                     ;
(1) 3789/     FB8 :                     ; Has a 2-byte parameter, the jump target address.
(1) 3790/     FB8 :                     ;
(1) 3791/     FB8 :                     ;loc_EB8
(1) 3792/     FB8 :                     cfLoopContinuousSFX:
(1) 3793/     FB8 : 3A 98 1C            		ld	a, (zContinuousSFXFlag)			; Get 'continuous sound effect' flag
(1) 3794/     FBB : B7                  		or	a								; Is it set?
(1) 3795/     FBC : C2 C4 0F            		jp	nz, .run_counter				; Branch if yes
(1) 3796/     FBF :                     		; If we got here, a is zero.
(1) 3797/     FBF : 32 97 1C            		ld	(zContinuousSFX), a				; Clear last continuous SFX played
(1) 3798/     FC2 : 13                  		inc	de								; Skip a byte
(1) 3799/     FC3 : C9                  		ret
(1) 3800/     FC4 :                     ; ---------------------------------------------------------------------------
(1) 3801/     FC4 :                     .run_counter:
(1) 3802/     FC4 : 21 99 1C            		ld	hl, zContSFXLoopCnt				; Get number loops to perform
(1) 3803/     FC7 : 35                  		dec	(hl)							; Decrement it...
(1) 3804/     FC8 : C2 4D 0F            		jp	nz, cfJumpTo					; If result is non-zero, jump to target address
(1) 3805/     FCB : AF                  		xor	a								; a = 0
(1) 3806/     FCC : 32 98 1C            		ld	(zContinuousSFXFlag), a			; Clear continuous sound effect flag
(1) 3807/     FCF : C3 4D 0F            		jp	cfJumpTo						; Jump to target address
(1) 3808/     FD2 :                     
(1) 3809/     FD2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3810/     FD2 :                     ; Toggles alternate frequency mode according to parameter.
(1) 3811/     FD2 :                     ;
(1) 3812/     FD2 :                     ; Has a single byte parameter: is 1, enables alternate frequency mode, otherwise
(1) 3813/     FD2 :                     ; disables it.
(1) 3814/     FD2 :                     ;
(1) 3815/     FD2 :                     ;loc_EDA
(1) 3816/     FD2 :                     ;cfToggleAlternateSMPS
(1) 3817/     FD2 :                     cfToggleAltFreqMode:
(1) 3818/     FD2 : B7                  		or	a								; Is parameter equal to 0?
(1) 3819/     FD3 : 28 05               		jr	z, .stop_altfreq_mode			; Branch if so
(1) 3820/     FD5 : DD CB 00 DE         		set	bitAltFreqMode, (ix+zTrack.PlaybackControl)	; Start alternate frequency mode for track
(1) 3821/     FD9 : C9                  		ret
(1) 3822/     FDA :                     ; ---------------------------------------------------------------------------
(1) 3823/     FDA :                     .stop_altfreq_mode:
(1) 3824/     FDA : DD CB 00 9E         		res	bitAltFreqMode, (ix+zTrack.PlaybackControl)	; Stop alternate frequency mode for track
(1) 3825/     FDE : C9                  		ret
(1) 3826/     FDF :                     
(1) 3827/     FDF :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3828/     FDF :                     ; If current track is FM3, it is put into special mode.
(1) 3829/     FDF :                     ;
(1) 3830/     FDF :                     ; It has 4 1-byte parameters: all of them are indexes into a lookup table of
(1) 3831/     FDF :                     ; frequency shifts, and must be in the 0-7 range. Each parameter corresponds
(1) 3832/     FDF :                     ; to one of the operators for channel 3.
(1) 3833/     FDF :                     ;
(1) 3834/     FDF :                     ;loc_EE8
(1) 3835/     FDF :                     cfFM3SpecialMode:
(1) 3836/     FDF : DD 7E 01            		ld	a, (ix+zTrack.VoiceControl)		; Get track's voice control
(1) 3837/     FE2 : FE 02               		cp	ymFM3							; Is this FM3?
(1) 3838/     FE4 : 20 28               		jr	nz, zTrackSkip3bytes			; Branch if not
(1) 3839/     FE6 : DD CB 00 C6         		set	bitFM3Special, (ix+zTrack.PlaybackControl)	; Put FM3 in special mode
(1) 3840/     FEA : EB                  		ex	de, hl							; Exchange de and hl
(1) 3841/     FEB : CD 2B 02            		call	zGetSpecialFM3DataPointer	; de = pointer to saved FM3 frequency shifts
(1) 3842/     FEE : 06 04               		ld	b, 4							; Loop counter: 4 parameter bytes
(1) 3843/     FF0 :                     
(1) 3844/     FF0 :                     .loop:
(1) 3845/     FF0 : C5                  		push	bc							; Save bc
(1) 3846/     FF1 : 7E                  		ld	a, (hl)							; Get parameter byte
(1) 3847/     FF2 : 23                  		inc	hl								; Advance pointer
(1) 3848/     FF3 : E5                  		push	hl							; Save hl
(1) 3849/     FF4 : 21 12 10            		ld	hl, zFM3FreqShiftTable			; hl = pointer to lookup table
(1) 3850/     FF7 : 87                  		add	a, a							; Multiply a by 2
(1) 3851/     FF8 : 4F                  		ld	c, a							; c = a
(1) 3852/     FF9 : 06 00               		ld	b, 0							; b = 0
(1) 3853/     FFB : 09                  		add	hl, bc							; hl = offset into lookup table
(1) 3854/     FFC : ED A0               		ldi									; *de++ = *hl++
(1) 3855/     FFE : ED A0               		ldi									; *de++ = *hl++
(1) 3856/    1000 : E1                  		pop	hl								; Restore hl
(1) 3857/    1001 : C1                  		pop	bc								; Restore bc
(1) 3858/    1002 : 10 EC               		djnz	.loop						; Loop for all parameters
(1) 3859/    1004 :                     
(1) 3860/    1004 : EB                  		ex	de, hl							; Exchange back de and hl
(1) 3861/    1005 : 1B                  		dec	de								; Put back last byte
(1) 3862/    1006 : 3E 4F               		ld	a, 4Fh							; FM3 settings: special mode, enable and load A/B
(1) 3863/    1008 :                     
(1) 3864/    1008 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3865/    1008 :                     ; Set up FM3 special settings
(1) 3866/    1008 :                     ;
(1) 3867/    1008 :                     ; Input:   a    Settings for FM3
(1) 3868/    1008 :                     ; Output:  c    Damaged
(1) 3869/    1008 :                     ;sub_F11
(1) 3870/    1008 :                     zWriteFM3Settings:
(1) 3871/    1008 : 4F                  		ld	c, a							; c = FM3 settings
(1) 3872/    1009 : 3E 27               		ld	a, ymTimerControlFm3Mode		; Write data to FM3 settings register
(1) 3873/    100B : C3 BC 00            		jp	zWriteFMI						; Do it
(1) 3874/    100E :                     ; End of function zWriteFM3Settings
(1) 3875/    100E :                     
(1) 3876/    100E :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3877/    100E :                     ; Eats 3 bytes from the song.
(1) 3878/    100E :                     zTrackSkip3bytes:
(1) 3879/    100E : 13                  		inc	de								; Advance pointer...
(1) 3880/    100F : 13                  		inc	de								; ... again...
(1) 3881/    1010 : 13                  		inc	de								; ... and again.
(1) 3882/    1011 : C9                  		ret
(1) 3883/    1012 :                     ; ---------------------------------------------------------------------------
(1) 3884/    1012 :                     ; Frequency shift data used in cfFM3SpecialMode, above.
(1) 3885/    1012 :                     ;loc_F1F
(1) 3886/    1012 :                     zFM3FreqShiftTable:
(1) 3887/    1012 : 00 00 32 01 8E 01   		dw    0, 132h, 18Eh, 1E4h, 234h, 27Eh, 2C2h, 2F0h
                    E4 01 34 02 7E 02 
                    C2 02 F0 02       
(1) 3888/    1022 :                     
(1) 3889/    1022 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3890/    1022 :                     ; Meta coordination flag: the first parameter byte is an index into an extra
(1) 3891/    1022 :                     ; coord. flag handler table.
(1) 3892/    1022 :                     ;
(1) 3893/    1022 :                     ; Has at least one parameter byte, the index into the jump table.
(1) 3894/    1022 :                     ;
(1) 3895/    1022 :                     ;loc_F2F
(1) 3896/    1022 :                     cfMetaCF:
(1) 3897/    1022 : 21 E5 0C            		ld	hl, zExtraCoordFlagSwitchTable	; Load extra coordination flag switch table
(1) 3898/    1025 : DF                  		rst	PointerTableOffset				; hl = jump target for parameter
(1) 3899/    1026 : 13                  		inc	de								; Advance track pointer
(1) 3900/    1027 : 1A                  		ld	a, (de)							; Get another parameter byte
(1) 3901/    1028 : E9                  		jp	(hl)							; Jump to coordination flag handler
(1) 3902/    1029 :                     
(1) 3903/    1029 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3904/    1029 :                     ; Sets current tempo to parameter byte.
(1) 3905/    1029 :                     ;
(1) 3906/    1029 :                     ; Has one parameter byte, the new value for current tempo.
(1) 3907/    1029 :                     ;
(1) 3908/    1029 :                     ;loc_F36
(1) 3909/    1029 :                     cfSetTempo:
(1) 3910/    1029 : 32 A2 1C            		ld	(zCurrentTempo), a				; Set current tempo to parameter
(1) 3911/    102C : C9                  		ret
(1) 3912/    102D :                     
(1) 3913/    102D :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3914/    102D :                     ; Plays another SFX.
(1) 3915/    102D :                     ;
(1) 3916/    102D :                     ; Has one parameter byte, the ID of what is to be played.
(1) 3917/    102D :                     ;
(1) 3918/    102D :                     ; DO NOT USE THIS TO PLAY THE SEGA PCM! It tampers with the stack pointer, and
(1) 3919/    102D :                     ; will wreak havok with the track update.
(1) 3920/    102D :                     ;
(1) 3921/    102D :                     ;loc_F3A:
(1) 3922/    102D :                     cfPlaySFXByIndex:
(1) 3923/    102D : DD E5               		push	ix							; Save track pointer
(1) 3924/    102F : CD 3D 05            		call	zPlaySFXByIndex				; Play sound specified by parameter
(1) 3925/    1032 : DD E1               		pop	ix								; Restore track pointer
(1) 3926/    1034 : C9                  		ret
(1) 3927/    1035 :                     
(1) 3928/    1035 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3929/    1035 :                     ; Plays another song.
(1) 3930/    1035 :                     ;
(1) 3931/    1035 :                     ; Has one parameter byte, the ID of what is to be played.
(1) 3932/    1035 :                     ;
(1) 3933/    1035 :                     ; DO NOT USE THIS TO PLAY THE SEGA PCM! It tampers with the stack pointer, and
(1) 3934/    1035 :                     ; will wreak havok with the track update.
(1) 3935/    1035 :                     ;
(1) 3936/    1035 :                     ;loc_F3A:
(1) 3937/    1035 :                     cfPlayMusicByIndex:
(1) 3938/    1035 : DD E5               		push	ix							; Save track pointer
(1) 3939/    1037 : CD 65 05            		call	zPlaySoundByIndex			; Play sound specified by parameter
(1) 3940/    103A : DD E1               		pop	ix								; Restore track pointer
(1) 3941/    103C : C9                  		ret
(1) 3942/    103D :                     
(1) 3943/    103D :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3944/    103D :                     ; Halts or resumes all tracks according to parameter.
(1) 3945/    103D :                     ;
(1) 3946/    103D :                     ; Has one parameter byte, which is zero to resume all tracks and non-zero to
(1) 3947/    103D :                     ; halt them.
(1) 3948/    103D :                     ;
(1) 3949/    103D :                     ;loc_F42
(1) 3950/    103D :                     cfHaltSound:
(1) 3951/    103D : 32 9E 1C            		ld	(zHaltFlag), a					; Set new mute flag
(1) 3952/    1040 : B7                  		or	a								; Is it set now?
(1) 3953/    1041 : 28 1D               		jr	z, .resume						; Branch if not
(1) 3954/    1043 : DD E5               		push	ix							; Save ix
(1) 3955/    1045 : D5                  		push	de							; Save de
(1) 3956/    1046 : DD 21 B8 1C         		ld	ix, zTracksStart				; Start of song RAM
(1) 3957/    104A : 06 0A               		ld	b, zNumMusicTracks				; Number of tracks
(1) 3958/    104C : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 3959/    104F :                     
(1) 3960/    104F :                     .loop1:
(1) 3961/    104F : DD CB 00 BE         		res	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Clear 'track is playing' bit
(1) 3962/    1053 : CD 1F 03            		call	zKeyOff						; Stop current note
(1) 3963/    1056 : DD 19               		add	ix, de							; Advance to next track
(1) 3964/    1058 : 10 F5               		djnz	.loop1						; Loop for all tracks
(1) 3965/    105A : D1                  		pop	de								; Restore de
(1) 3966/    105B : DD E1               		pop	ix								; Restore ix
(1) 3967/    105D : C3 68 0A            		jp	zPSGSilenceAll
(1) 3968/    1060 :                     ; ---------------------------------------------------------------------------
(1) 3969/    1060 :                     .resume:
(1) 3970/    1060 : DD E5               		push	ix							; Save ix
(1) 3971/    1062 : D5                  		push	de							; Save de
(1) 3972/    1063 : DD 21 B8 1C         		ld	ix, zTracksStart				; Start of song RAM
(1) 3973/    1067 : 06 0A               		ld	b, zNumMusicTracks				; Number of tracks
(1) 3974/    1069 : 11 29 00            		ld	de, zTrack.len					; Spacing between tracks
(1) 3975/    106C :                     
(1) 3976/    106C :                     .loop2:
(1) 3977/    106C : DD CB 00 FE         		set	bitTrackPlaying, (ix+zTrack.PlaybackControl)	; Set 'track is playing' bit
(1) 3978/    1070 : DD 19               		add	ix, de							; Advance to next track
(1) 3979/    1072 : 10 F8               		djnz	.loop2						; Loop for all tracks
(1) 3980/    1074 : D1                  		pop	de								; Restore de
(1) 3981/    1075 : DD E1               		pop	ix								; Restore ix
(1) 3982/    1077 : C9                  		ret
(1) 3983/    1078 :                     
(1) 3984/    1078 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 3985/    1078 :                     ; Copies data from selected location to current track. Playback will continue
(1) 3986/    1078 :                     ; after the last byte copied.
(1) 3987/    1078 :                     ;
(1) 3988/    1078 :                     ; Has 3 parameter bytes, a 2-byte pointer to data to be copied and a 1-byte
(1) 3989/    1078 :                     ; number of bytes to copy. The data is copied to the track's byte stream,
(1) 3990/    1078 :                     ; starting after the parameters of this coord. flag, and will overwrite the data
(1) 3991/    1078 :                     ; that what was there before. This likely will not work unless the song/SFX was
(1) 3992/    1078 :                     ; copied to Z80 RAM in the first place.
(1) 3993/    1078 :                     ;
(1) 3994/    1078 :                     ;loc_F7D
(1) 3995/    1078 :                     cfCopyData:
(1) 3996/    1078 : EB                  		ex	de, hl							; Exchange de and hl
(1) 3997/    1079 : 5E                  		ld	e, (hl)							; e = low byte of pointer to new song data
(1) 3998/    107A : 23                  		inc	hl								; Advance track pointer
(1) 3999/    107B : 56                  		ld	d, (hl)							; d = high byte of pointer to new song data
(1) 4000/    107C : 23                  		inc	hl								; Advance track pointer
(1) 4001/    107D : 4E                  		ld	c, (hl)							; c = number of bytes to copy
(1) 4002/    107E : 06 00               		ld	b, 0							; b = 0
(1) 4003/    1080 : 23                  		inc	hl								; Advance track pointer
(1) 4004/    1081 : EB                  		ex	de, hl							; Exchange back de and hl
(1) 4005/    1082 : ED B0               		ldir								; while (bc-- > 0) *de++ = *hl++;
(1) 4006/    1084 : 1B                  		dec	de								; Put back last byte
(1) 4007/    1085 : C9                  		ret
(1) 4008/    1086 :                     
(1) 4009/    1086 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4010/    1086 :                     ; Sets tempo divider for all tracks. Does not take effect until the next note
(1) 4011/    1086 :                     ; duration is set.
(1) 4012/    1086 :                     ;
(1) 4013/    1086 :                     ; Has one parameter, the new tempo divider.
(1) 4014/    1086 :                     ;
(1) 4015/    1086 :                     ;loc_F8B
(1) 4016/    1086 :                     cfSetTempoDivider:
(1) 4017/    1086 : 06 0A               		ld	b, zNumMusicTracks				; Number of tracks
(1) 4018/    1088 : 21 BA 1C            		ld	hl, zTracksStart+zTrack.TempoDivider	; Want to change tempo dividers
(1) 4019/    108B :                     
(1) 4020/    108B :                     .loop:
(1) 4021/    108B : C5                  		push	bc							; Save bc
(1) 4022/    108C : 01 29 00            		ld	bc, zTrack.len					; Spacing between tracks
(1) 4023/    108F : 77                  		ld	(hl), a							; Set tempo divider for track
(1) 4024/    1090 : 09                  		add	hl, bc							; Advance to next track
(1) 4025/    1091 : C1                  		pop	bc								; Restore bc
(1) 4026/    1092 : 10 F7               		djnz	.loop
(1) 4027/    1094 : C9                  		ret
(1) 4028/    1095 :                     
(1) 4029/    1095 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4030/    1095 :                     ; Sets SSG-EG data for current track.
(1) 4031/    1095 :                     ;
(1) 4032/    1095 :                     ; Has 4 parameter bytes, the operator parameters for SSG-EG data desired.
(1) 4033/    1095 :                     ;
(1) 4034/    1095 :                     ;loc_F9A
(1) 4035/    1095 :                     cfSetSSGEG:
(1) 4036/    1095 : DD 36 12 80         		ld	(ix+zTrack.HaveSSGEGFlag), 80h	; Set custom SSG-EG data flag
(1) 4037/    1099 : DD 73 13            		ld	(ix+zTrack.SSGEGPointerLow), e	; Save low byte of SSG-EG data pointer
(1) 4038/    109C : DD 72 14            		ld	(ix+zTrack.SSGEGPointerHigh), d	; Save high byte of SSG-EG data pointer
(1) 4039/    109F :                     
(1) 4040/    109F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4041/    109F :                     ; Sends SSG-EG data pointed to by de to appropriate registers in YM2612.
(1) 4042/    109F :                     ;
(1) 4043/    109F :                     ;sub_FA4
(1) 4044/    109F :                     zSendSSGEGData:
(1) 4045/    109F :                     		; This fix is even better than what is done in Ristar's sound driver:
(1) 4046/    109F :                     		; we preserve rate scaling, whereas that driver sets it to 0.
(1) 4047/    109F : DD 6E 15            		ld	l, (ix+zTrack.TLPtrLow)			; l = low byte of pointer to TL data
(1) 4048/    10A2 : DD 66 16            		ld	h, (ix+zTrack.TLPtrHigh)		; hl = pointer to TL data
(1) 4049/    10A5 : 01 F0 FF            		ld	bc, zFMInstrumentRSARTable-zFMInstrumentTLTable	; bc = -10h
(1) 4050/    10A8 : 09                  		add	hl, bc							; hl = pointer to RS/AR data
(1) 4051/    10A9 : E5                  		push	hl							; Save hl (**)
(1) 4052/    10AA : 21 B2 04            		ld	hl, zFMInstrumentSSGEGTable		; hl = pointer to registers for SSG-EG data
(1) 4053/    10AD : 06 04               		ld	b, zFMInstrumentSSGEGTable_End-zFMInstrumentSSGEGTable	; Number of entries
(1) 4054/    10AF :                     
(1) 4055/    10AF :                     .loop:
(1) 4056/    10AF : 1A                  		ld	a, (de)							; Get data to sent to SSG-EG register
(1) 4057/    10B0 : 13                  		inc	de								; Advance pointer
(1) 4058/    10B1 : 4F                  		ld	c, a							; c = data to send
(1) 4059/    10B2 : 7E                  		ld	a, (hl)							; a = register to send to
(1) 4060/    10B3 : CD A9 00            		call	zWriteFMIorII				; Send data to correct channel
(1) 4061/    10B6 : E3                  		ex	(sp), hl						; Save hl, hl = pointer to RS/AR data (see line marked (**) above)
(1) 4062/    10B7 : 7E                  		ld	a, (hl)							; a = RS/AR value for operator
(1) 4063/    10B8 : 23                  		inc	hl								; Advance pointer
(1) 4064/    10B9 : E3                  		ex	(sp), hl						; Save hl, hl = pointer to registers for SSG-EG data
(1) 4065/    10BA : F6 1F               		or	maxAttackRate					; Set AR to maximum, but keep RS intact
(1) 4066/    10BC : 4F                  		ld	c, a							; c = RS/AR
(1) 4067/    10BD : 7E                  		ld	a, (hl)							; a = register to send to
(1) 4068/    10BE : D6 40               		sub	ymSSGEG1-ymRateScaleAttackRate1	; Convert into command to set RS/AR
(1) 4069/    10C0 : 23                  		inc	hl								; Advance pointer
(1) 4070/    10C1 : CD A9 00            		call	zWriteFMIorII				; Send data to correct channel
(1) 4071/    10C4 : 10 E9               		djnz	.loop						; Loop for all registers
(1) 4072/    10C6 : E1                  		pop	hl								; Remove from stack (see line marked (**) above)
(1) 4073/    10C7 : 1B                  		dec	de								; Rewind data pointer a bit
(1) 4074/    10C8 : C9                  		ret
(1) 4075/    10C9 :                     ; End of function zSendSSGEGData
(1) 4076/    10C9 :                     
(1) 4077/    10C9 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4078/    10C9 :                     ; Starts or controls FM volume envelope effects, according to the parameters.
(1) 4079/    10C9 :                     ;
(1) 4080/    10C9 :                     ; Has two parameter bytes: the first is a (1-based) index into the PSG envelope
(1) 4081/    10C9 :                     ; table indicating how the envelope should go, while the second is a bitmask
(1) 4082/    10C9 :                     ; indicating which operators should be affected (in the form %00004231) for
(1) 4083/    10C9 :                     ; the current channel.
(1) 4084/    10C9 :                     ;
(1) 4085/    10C9 :                     ;loc_FB5
(1) 4086/    10C9 :                     ;cfFMFlutter
(1) 4087/    10C9 :                     cfFMVolEnv:
(1) 4088/    10C9 : DD 77 12            		ld	(ix+zTrack.FMVolEnv), a			; Store envelope index
(1) 4089/    10CC : 13                  		inc	de								; Advance track pointer
(1) 4090/    10CD : 1A                  		ld	a, (de)							; Get envelope mask
(1) 4091/    10CE : DD 77 13            		ld	(ix+zTrack.FMVolEnvMask), a		; Store envelope bitmask
(1) 4092/    10D1 : C9                  		ret
(1) 4093/    10D2 :                     
(1) 4094/    10D2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4095/    10D2 :                     ; Resets spindash rev counter.
(1) 4096/    10D2 :                     ;
(1) 4097/    10D2 :                     ; Has no parameter bytes.
(1) 4098/    10D2 :                     ;
(1) 4099/    10D2 :                     ;loc_FBE
(1) 4100/    10D2 :                     cfResetSpindashRev:
(1) 4101/    10D2 : AF                  		xor	a								; a = 0
(1) 4102/    10D3 : 32 A3 1C            		ld	(zSpindashRev), a				; Reset spindash rev
(1) 4103/    10D6 : 1B                  		dec	de								; Put byte back
(1) 4104/    10D7 : C9                  		ret
(1) 4105/    10D8 :                     
(1) 4106/    10D8 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4107/    10D8 :                     ; Sets tempo divider of a single track.
(1) 4108/    10D8 :                     ;
(1) 4109/    10D8 :                     ; Has one parameter, the new tempo divider.
(1) 4110/    10D8 :                     ;
(1) 4111/    10D8 :                     cfChanSetTempoDivider:
(1) 4112/    10D8 : DD 77 02            		ld	(ix+zTrack.TempoDivider), a		; Set tempo divider for this track
(1) 4113/    10DB : C9                  		ret
(1) 4114/    10DC :                     
(1) 4115/    10DC :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4116/    10DC :                     ; Sends an FM command to the YM2612. The command is sent to the adequate part
(1) 4117/    10DC :                     ; for the current track, so it is only appropriate for those registers that
(1) 4118/    10DC :                     ; affect specific channels.
(1) 4119/    10DC :                     ;
(1) 4120/    10DC :                     ; Has 2 parameter bytes: a 1-byte register selector and a 1-byte register data.
(1) 4121/    10DC :                     ;
(1) 4122/    10DC :                     ;loc_D21
(1) 4123/    10DC :                     cfChanFMCommand:
(1) 4124/    10DC : CD 19 0E            		call	zGetFMParams				; Get parameters for FM command
(1) 4125/    10DF : C3 A9 00            		jp	zWriteFMIorII					; Send it to YM2612
(1) 4126/    10E2 :                     ; End of function cfChanFMCommand
(1) 4127/    10E2 :                     
(1) 4128/    10E2 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4129/    10E2 :                     ; Updates a PSG track.
(1) 4130/    10E2 :                     ;
(1) 4131/    10E2 :                     ; Input:   ix    Pointer to track RAM
(1) 4132/    10E2 :                     ;
(1) 4133/    10E2 :                     ;loc_FC4
(1) 4134/    10E2 :                     zUpdatePSGTrack:
(1) 4135/    10E2 : DD 35 0B            		dec	(ix+zTrack.DurationTimeout)		; Run note timer
(1) 4136/    10E5 : 20 0D               		jr	nz, .note_going					; Branch if note hasn't expired yet
(1) 4137/    10E7 : CD 37 02            		call	zGetNextNote				; Get next note for PSG track
(1) 4138/    10EA : DD CB 00 66         		bit	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Is track resting?
(1) 4139/    10EE : C0                  		ret	nz								; Return if yes
(1) 4140/    10EF : CD 6F 03            		call	zPrepareModulation			; Initialize modulation
(1) 4141/    10F2 : 18 0C               		jr	.skip_fill
(1) 4142/    10F4 :                     ; ---------------------------------------------------------------------------
(1) 4143/    10F4 :                     .note_going:
(1) 4144/    10F4 : DD 7E 17            		ld	a, (ix+zTrack.NoteFillTimeout)	; Get note fill
(1) 4145/    10F7 : B7                  		or	a								; Has timeout expired?
(1) 4146/    10F8 : 28 06               		jr	z, .skip_fill					; Branch if yes
(1) 4147/    10FA : DD 35 17            		dec	(ix+zTrack.NoteFillTimeout)		; Update note fill
(1) 4148/    10FD : CA 7F 11            		jp	z, zRestTrack					; Put PSG track at rest if needed
(1) 4149/    1100 :                     
(1) 4150/    1100 :                     .skip_fill:
(1) 4151/    1100 : CD 3E 04            		call	zDoPitchSlide				; Apply pitch slide and detune
(1) 4152/    1103 : CD 9A 03            		call	zDoModulation				; Do modulation
(1) 4153/    1106 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 4154/    110A : C0                  		ret	nz								; Return if yes
(1) 4155/    110B : DD 4E 01            		ld	c, (ix+zTrack.VoiceControl)		; c = voice control byte
(1) 4156/    110E : 7D                  		ld	a, l							; a = low byte of new frequency
(1) 4157/    110F : E6 0F               		and	0Fh								; Get only lower nibble
(1) 4158/    1111 : B1                  		or	c								; OR in PSG channel bits
(1) 4159/    1112 : 32 11 7F            		ld	(zPSG), a						; Send to PSG, latching register
(1) 4160/    1115 : 7D                  		ld	a, l							; a = low byte of new frequency
(1) 4161/    1116 : E6 F0               		and	0F0h							; Get high nibble now
(1) 4162/    1118 : B4                  		or	h								; OR in the high byte of the new frequency
(1) 4163/    1119 :                     		; Swap nibbles
(1) 4164/    1119 : 0F                  		rrca
(1) 4165/    111A : 0F                  		rrca
(1) 4166/    111B : 0F                  		rrca
(1) 4167/    111C : 0F                  		rrca
(1) 4168/    111D : 32 11 7F            		ld	(zPSG), a						; Send to PSG, to latched register
(1) 4169/    1120 : DD 7E 08            		ld	a, (ix+zTrack.VoiceIndex)		; Get PSG tone
(1) 4170/    1123 : B7                  		or	a								; Test if it is zero
(1) 4171/    1124 : 0E 00               		ld	c, 0							; c = 0
(1) 4172/    1126 : 28 08               		jr	z, .no_volenv					; Branch if no PSG tone
(1) 4173/    1128 : 3D                  		dec	a								; Make it into a 0-based index
(1) 4174/    1129 : 0E 06               		ld	c, zID_VolEnvPointers			; Value for volume envelope pointer table
(1) 4175/    112B : CF                  		rst	GetPointerTable					; hl = pointer to volume envelope for track
(1) 4176/    112C : CD 4D 11            		call	zDoVolEnv					; Get new volume envelope
(1) 4177/    112F : 4F                  		ld	c, a							; c = new volume envelope
(1) 4178/    1130 :                     
(1) 4179/    1130 :                     .no_volenv:
(1) 4180/    1130 : DD CB 00 66         		bit	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Is track resting?
(1) 4181/    1134 : C0                  		ret	nz								; Return if yes
(1) 4182/    1135 : 79                  		ld	a, c							; Copy volume attenuation
(1) 4183/    1136 : CD FC 0D            		call	zDoPSGVolumeClamp			; Add track's current volume and clamp
(1) 4184/    1139 : DD B6 01            		or	(ix+zTrack.VoiceControl)		; Mask in the PSG channel bits
(1) 4185/    113C : C6 10               		add	a, snPSGVol						; Flag to latch volume
(1) 4186/    113E : DD CB 00 46         		bit	bitPSGNoise, (ix+zTrack.PlaybackControl)	; Is this a noise channel?
(1) 4187/    1142 : 28 02               		jr	z, .not_noise					; Branch if not
(1) 4188/    1144 : C6 20               		add	a, snNoise-snPSG3				; Change to noise channel
(1) 4189/    1146 :                     
(1) 4190/    1146 :                     .not_noise:
(1) 4191/    1146 : 32 11 7F            		ld	(zPSG), a						; Set channel volume
(1) 4192/    1149 : C9                  		ret
(1) 4193/    114A :                     ; ---------------------------------------------------------------------------
(1) 4194/    114A :                     ;loc_1037
(1) 4195/    114A :                     ;zDoFlutterSetValue
(1) 4196/    114A :                     zDoVolEnvSetValue:
(1) 4197/    114A : DD 77 11            		ld	(ix+zTrack.VolEnv), a			; Set new value for PSG envelope index and fall through
(1) 4198/    114D :                     
(1) 4199/    114D :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4200/    114D :                     ; Get next PSG volume envelope value.
(1) 4201/    114D :                     ;
(1) 4202/    114D :                     ; Input:   ix    Pointer to track RAM
(1) 4203/    114D :                     ;          hl    Pointer to current PSG volume envelope
(1) 4204/    114D :                     ; Output:  a     New volume envelope value
(1) 4205/    114D :                     ;          bc    Trashed
(1) 4206/    114D :                     ;
(1) 4207/    114D :                     ;sub_103A
(1) 4208/    114D :                     ;zDoFlutter
(1) 4209/    114D :                     zDoVolEnv:
(1) 4210/    114D : E5                  		push	hl							; Save hl
(1) 4211/    114E : DD 4E 11            		ld	c, (ix+zTrack.VolEnv)			; Get current PSG envelope index
(1) 4212/    1151 : 06 00               		ld	b, 0							; b = 0
(1) 4213/    1153 : 09                  		add	hl, bc							; Offset into PSG envelope table
(1) 4214/    1154 :                     		; Fix based on similar code from Space Harrier II's sound driver.
(1) 4215/    1154 :                     		; This is better than the previous fix, which was based on Ristar's driver.
(1) 4216/    1154 : 4D                  		ld	c, l
(1) 4217/    1155 : 44                  		ld	b, h
(1) 4218/    1156 : 0A                  		ld	a, (bc)							; a = PSG volume envelope
(1) 4219/    1157 : E1                  		pop	hl								; Restore hl
(1) 4220/    1158 : CB 7F               		bit	7, a							; Is it a terminator?
(1) 4221/    115A : 28 1F               		jr	z, zDoVolEnvAdvance				; Branch if not
(1) 4222/    115C : FE 81               		cp	VolEnvRestTrack					; Is it a command to set rest flag on PSG channel?
(1) 4223/    115E : 28 15               		jr	z, zDoVolEnvRest				; Branch if yes
(1) 4224/    1160 : FE 80               		cp	VolEnvReset						; Is it a command to reset envelope?
(1) 4225/    1162 : 28 0E               		jr	z, zDoVolEnvReset				; Branch if yes
(1) 4226/    1164 : FE 83               		cp	VolEnvStopTrack					; Is it a command to put PSG channel to rest?
(1) 4227/    1166 : 28 06               		jr	z, zDoVolEnvFullRest			; Branch if yes
(1) 4228/    1168 : 30 11               		jr	nc, zDoVolEnvAdvance			; Branch if more than 83h
(1) 4229/    116A :                     		; Only 82h can get here.
(1) 4230/    116A : 03                  		inc	bc								; Increment envelope position
(1) 4231/    116B : 0A                  		ld	a, (bc)							; Get next byte from volume envelope
(1) 4232/    116C : 18 DC               		jr	zDoVolEnvSetValue				; Use this as new envelope index
(1) 4233/    116E :                     ; ---------------------------------------------------------------------------
(1) 4234/    116E :                     ;loc_1057
(1) 4235/    116E :                     ;zDoFlutterFullRest
(1) 4236/    116E :                     zDoVolEnvFullRest:
(1) 4237/    116E : E1                  		pop	hl								; Pop return value from stack (causes a 'ret' to return to caller of zUpdatePSGTrack)
(1) 4238/    116F : C3 7F 11            		jp	zRestTrack						; Put track at rest
(1) 4239/    1172 :                     ; ---------------------------------------------------------------------------
(1) 4240/    1172 :                     ;loc_105F
(1) 4241/    1172 :                     ;zDoFlutterReset
(1) 4242/    1172 :                     zDoVolEnvReset:
(1) 4243/    1172 : AF                  		xor	a								; a = 0
(1) 4244/    1173 : 18 D5               		jr	zDoVolEnvSetValue
(1) 4245/    1175 :                     ; ---------------------------------------------------------------------------
(1) 4246/    1175 :                     ;loc_1062
(1) 4247/    1175 :                     ;zDoFlutterRest
(1) 4248/    1175 :                     zDoVolEnvRest:
(1) 4249/    1175 : E1                  		pop	hl								; Pop return value from stack (causes a 'ret' to return to caller of zUpdatePSGTrack)
(1) 4250/    1176 : DD CB 00 E6         		set	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Set 'track is resting' bit
(1) 4251/    117A : C9                  		ret									; Do NOT silence PSG channel
(1) 4252/    117B :                     ; ---------------------------------------------------------------------------
(1) 4253/    117B :                     ;loc_1068
(1) 4254/    117B :                     ;zDoFlutterAdvance
(1) 4255/    117B :                     zDoVolEnvAdvance:
(1) 4256/    117B : DD 34 11            		inc	(ix+zTrack.VolEnv)				; Advance envelope
(1) 4257/    117E : C9                  		ret
(1) 4258/    117F :                     ; End of function zDoVolEnv
(1) 4259/    117F :                     
(1) 4260/    117F :                     
(1) 4261/    117F :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4262/    117F :                     ;
(1) 4263/    117F :                     ;sub_106C
(1) 4264/    117F :                     zRestTrack:
(1) 4265/    117F : DD CB 00 E6         		set	bitTrackAtRest, (ix+zTrack.PlaybackControl)	; Set 'track is resting' bit
(1) 4266/    1183 : DD CB 00 56         		bit	bitSFXOverride, (ix+zTrack.PlaybackControl)	; Is SFX overriding this track?
(1) 4267/    1187 : C0                  		ret	nz								; Return if so
(1) 4268/    1188 :                     ; End of function zRestTrack
(1) 4269/    1188 :                     
(1) 4270/    1188 :                     
(1) 4271/    1188 :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4272/    1188 :                     ;
(1) 4273/    1188 :                     ;sub_1075
(1) 4274/    1188 :                     zSilencePSGChannel:
(1) 4275/    1188 : 3E 1F               		ld	a, snPSGVol|0Fh					; Set volume to zero on PSG channel
(1) 4276/    118A : DD 86 01            		add	a, (ix+zTrack.VoiceControl)		; Add in the PSG channel selector
(1) 4277/    118D : B7                  		or	a								; Is it an actual PSG channel?
(1) 4278/    118E : F0                  		ret	p								; Return if not
(1) 4279/    118F : 32 11 7F            		ld	(zPSG), a						; Silence this channel
(1) 4280/    1192 : FE DF               		cp	snPSG3|snPSGVol|0Fh				; Was this PSG3/Noise?
(1) 4281/    1194 : C0                  		ret	nz								; Return if not
(1) 4282/    1195 : 3E FF               		ld	a, snNoise|snPSGVol|0Fh			; Command to silence Noise channel
(1) 4283/    1197 : 32 11 7F            		ld	(zPSG), a						; Do it
(1) 4284/    119A : C9                  		ret
(1) 4285/    119B :                     ; End of function zSilencePSGChannel
(1) 4286/    119B :                     
(1) 4287/    119B :                     
(1) 4288/    119B :                     ; =============== S U B	R O U T	I N E =======================================
(1) 4289/    119B :                     ;
(1) 4290/    119B :                     ; Plays digital audio on the DAC, if any is queued. The z80 will be stuck in
(1) 4291/    119B :                     ; this function unless an interrupt occurs (that is, V-Int); after the V-Int
(1) 4292/    119B :                     ; is processed, the z80 will return back here.
(1) 4293/    119B :                     ;loc_108A
(1) 4294/    119B :                     zPlayDigitalAudio:
(1) 4295/    119B : F3                  		di									; Disable interrupts
(1) 4296/    119C : 3E 2B               		ld	a, ymDACEnable					; DAC enable/disable register
(1) 4297/    119E : 0E 00               		ld	c, maskDACDisable				; Value to disable DAC
(1) 4298/    11A0 : CD BC 00            		call	zWriteFMI					; Send YM2612 command
(1) 4299/    11A3 : 21 AE 1D            		ld	hl, zSongFM6					; Get pointer to FM6 track
(1) 4300/    11A6 : 3A 7A 1C            		ld	a, (zDACEnable)					; Get DAC enable
(1) 4301/    11A9 : B7                  		or	a								; Is DAC supposed to be enabled?
(1) 4302/    11AA : 28 09               		jr	z, .enabletrack					; Branch if not
(1) 4303/    11AC : 21 B8 1C            		ld	hl, zSongDAC					; Get pointer to DAC track
(1) 4304/    11AF :                     		; Don't allow music DAC to be re-enabled by DAC SFX ending during fading
(1) 4305/    11AF : 3A A5 1C            		ld	a, (zFadeInTimeout)				; Get fading timeout
(1) 4306/    11B2 : B7                  		or	a								; Is music being faded?
(1) 4307/    11B3 : 20 02               		jr	nz, .dac_idle_loop				; Branch if yes
(1) 4308/    11B5 :                     
(1) 4309/    11B5 :                     .enabletrack:
(1) 4310/    11B5 : CB 96               		res	bitSFXOverride, (hl)			; Mark track as no longer being overridden
(1) 4311/    11B7 :                     
(1) 4312/    11B7 :                     .dac_idle_loop:
(1) 4313/    11B7 : FB                  		ei									; Enable interrupts
(1) 4314/    11B8 : 3A AC 1C            		ld	a, (zDACIndex)					; a = DAC index/flag
(1) 4315/    11BB : B7                  		or	a								; Is DAC channel being used?
(1) 4316/    11BC : 28 F9               		jr	z, .dac_idle_loop				; Loop if not
(1) 4317/    11BE : 3E 2B               		ld	a, ymDACEnable					; DAC enable/disable register
(1) 4318/    11C0 : 0E 80               		ld	c, maskDACEnable				; Value to enable DAC
(1) 4319/    11C2 : F3                  		di									; Disable interrupts
(1) 4320/    11C3 : CD BC 00            		call	zWriteFMI					; Send YM2612 command
(1) 4321/    11C6 : FB                  		ei									; Re-enable interrupts
(1) 4322/    11C7 : FD 21 3E 12         		ld	iy, DecTable					; iy = pointer to jman2050 decode lookup table
(1) 4323/    11CB : 21 AC 1C            		ld	hl, zDACIndex					; hl = pointer to DAC index/flag
(1) 4324/    11CE : 7E                  		ld	a, (hl)							; a = DAC index
(1) 4325/    11CF : 3D                  		dec	a								; a -= 1
(1) 4326/    11D0 : CB FE               		set	7, (hl)							; Set bit 7 to indicate that DAC sample is being played
(1) 4327/    11D2 : 21 00 80            		ld	hl, zmake68kPtr(DACPointers)	; hl = pointer to ROM window
(1) 4328/    11D5 : 4F                  		ld	c, a
(1) 4329/    11D6 : 06 00               		ld	b, 0
(1) 4330/    11D8 : 09                  		add	hl, bc
(1) 4331/    11D9 : 09                  		add	hl, bc
(1) 4332/    11DA : 09                  		add	hl, bc
(1) 4333/    11DB : 09                  		add	hl, bc
(1) 4334/    11DC : 09                  		add	hl, bc
(1) 4335/    11DD : 0E 80               		ld	c, 80h							; c is an accumulator below; this initializes it to 80h
(1) 4336/    11DF : 7E                  		ld	a, (hl)							; a = DAC rate
(1) 4337/    11E0 : 32 F0 11            		ld	(.sample1_rate+1), a			; Store into following instruction (self-modifying code)
(1) 4338/    11E3 : 32 0D 12            		ld	(.sample2_rate+1), a			; Store into following instruction (self-modifying code)
(1) 4339/    11E6 : 23                  		inc	hl								; hl = pointer to low byte of DAC sample's length
(1) 4340/    11E7 : 5E                  		ld	e, (hl)							; e = low byte of DAC sample's length
(1) 4341/    11E8 : 23                  		inc	hl								; hl = pointer to high byte of DAC sample's length
(1) 4342/    11E9 : 56                  		ld	d, (hl)							; d = high byte of DAC sample's length
(1) 4343/    11EA : 23                  		inc	hl								; hl = pointer to low byte of DAC sample's in-bank location
(1) 4344/    11EB : 7E                  		ld	a, (hl)							; a = low byte of DAC sample's in-bank location
(1) 4345/    11EC : 23                  		inc	hl								; hl = pointer to high byte of DAC sample's in-bank location
(1) 4346/    11ED : 66                  		ld	h, (hl)							; h = high byte of DAC sample's in-bank location
(1) 4347/    11EE : 6F                  		ld	l, a							; l = low byte of DAC sample's in-bank location
(1) 4348/    11EF :                     		; hl is now pointer to DAC data, while de is the DAC sample's length
(1) 4349/    11EF :                     
(1) 4350/    11EF :                     .dac_playback_loop:
(1) 4351/    11EF :                     .sample1_rate:
(1) 4352/    11EF : 06 0A               		ld	b, 0Ah							; self-modified code; b is set to DAC rate
(1) 4353/    11F1 : FB                  		ei									; Enable interrupts
(1) 4354/    11F2 : 10 FE               		djnz	$							; Loop in this instruction, decrementing b each iteration, until b = 0
(1) 4355/    11F4 :                     
(1) 4356/    11F4 : F3                  		di									; Disable interrupts
(1) 4357/    11F5 : 3E 2A               		ld	a, ymDACPCM						; DAC channel register
(1) 4358/    11F7 : 32 00 40            		ld	(zYM2612_A0), a					; Send to YM2612
(1) 4359/    11FA : 7E                  		ld	a, (hl)							; a = next byte of DAC sample
(1) 4360/    11FB :                     		; Want only the high nibble now, so shift it into position
(1) 4361/    11FB : 07                  		rlca
(1) 4362/    11FC : 07                  		rlca
(1) 4363/    11FD : 07                  		rlca
(1) 4364/    11FE : 07                  		rlca
(1) 4365/    11FF : E6 0F               		and	0Fh								; Get only low nibble (which was the high nibble originally)
(1) 4366/    1201 : 32 07 12            		ld	(.sample1_index+2), a			; Store into following instruction (self-modifying code)
(1) 4367/    1204 : 79                  		ld	a, c							; a = c
(1) 4368/    1205 :                     
(1) 4369/    1205 :                     .sample1_index:
(1) 4370/    1205 : FD 86 00            		add	a, (iy+0)						; Self-modified code: the index offset is not zero, but what was set above
(1) 4371/    1208 : 32 01 40            		ld	(zYM2612_D0), a					; Send byte to DAC
(1) 4372/    120B : 4F                  		ld	c, a							; Set c to the new value of a
(1) 4373/    120C :                     
(1) 4374/    120C :                     .sample2_rate:
(1) 4375/    120C : 06 0A               		ld	b, 0Ah							; self-modified code; b is set to DAC rate
(1) 4376/    120E : FB                  		ei									; Enable interrupts
(1) 4377/    120F : 10 FE               		djnz	$							; Loop in this instruction, decrementing b each iteration, until b = 0
(1) 4378/    1211 :                     
(1) 4379/    1211 : F3                  		di									; Disable interrupts
(1) 4380/    1212 : 3E 2A               		ld	a, ymDACPCM						; DAC channel register
(1) 4381/    1214 : 32 00 40            		ld	(zYM2612_A0), a					; Send to YM2612
(1) 4382/    1217 : 7E                  		ld	a, (hl)							; a = next byte of DAC sample
(1) 4383/    1218 : E6 0F               		and	0Fh								; Want only the low nibble
(1) 4384/    121A : 32 20 12            		ld	(.sample2_index+2), a			; Store into following instruction (self-modifying code)
(1) 4385/    121D : 79                  		ld	a, c							; a = c
(1) 4386/    121E :                     
(1) 4387/    121E :                     .sample2_index:
(1) 4388/    121E : FD 86 00            		add	a, (iy+0)						; Self-modified code: the index offset is not zero, but what was set above
(1) 4389/    1221 : 32 01 40            		ld	(zYM2612_D0), a					; Send byte to DAC
(1) 4390/    1224 : FB                  		ei									; Enable interrupts
(1) 4391/    1225 : 4F                  		ld	c, a							; Set c to the new value of a
(1) 4392/    1226 : 3A AC 1C            		ld	a, (zDACIndex)					; a = DAC index/flag
(1) 4393/    1229 : B7                  		or	a								; Is playing flag set?
(1) 4394/    122A : F2 B7 11            		jp	p, .dac_idle_loop				; Branch if not
(1) 4395/    122D :                     
(1) 4396/    122D : 23                  		inc	hl								; Advance to next sample byte
(1) 4397/    122E : 1B                  		dec	de								; Mark one byte as being done
(1) 4398/    122F : 7A                  		ld	a, d							; a = d
(1) 4399/    1230 : B3                  		or	e								; Is length zero?
(1) 4400/    1231 : C2 EF 11            		jp	nz, .dac_playback_loop			; Loop if not
(1) 4401/    1234 :                     
(1) 4402/    1234 : AF                  		xor	a								; a = 0
(1) 4403/    1235 : 32 AC 1C            		ld	(zDACIndex), a					; Mark DAC as being idle
(1) 4404/    1238 : 32 C8 1C            		ld	(zSongDAC.DACSFXPlaying),a
(1) 4405/    123B : C3 9B 11            		jp	zPlayDigitalAudio				; Loop
(1) 4406/    123E :                     ; ---------------------------------------------------------------------------
(1) 4407/    123E :                     ; ===========================================================================
(1) 4408/    123E :                     ; JMan2050's DAC decode lookup table
(1) 4409/    123E :                     ; ===========================================================================
(1) 4410/    123E :                     DecTable:
(1) 4411/    123E : 00 01 02 04 08 10   		db	   0,  1,   2,   4,   8,  10h,  20h,  40h
                    20 40             
(1) 4412/    1246 : 80 FF FE FC F8 F0   		db	 80h, -1,  -2,  -4,  -8, -10h, -20h, -40h
                    E0 C0             
(1) 4413/    124E :                     ; ---------------------------------------------------------------------------
(1) 4414/    124E :                     ; ===========================================================================
(1) 4415/    124E :                     ; DAC BANKS
(1) 4416/    124E :                     ; ===========================================================================
(1) 4417/    124E :                     ; Note: this table has a dummy first entry for the case when there is no DAC
(1) 4418/    124E :                     ; sample being played -- the code still results in a valid bank switch, and
(1) 4419/    124E :                     ; does not need to worry about special cases.
(1) 4420/    124E :                     DAC_Banks:
(1) 4421/    124E :                     ; Set to zero to not use S3/S&K DAC samples:
(1) 4422/    124E : 01                  		db		zmake68kBank(DacBank1)
(1) 4424/    124F : 01                  		db	zmake68kBank(DAC_81_Data)
(1) 4425/    1250 : 01                  		db	zmake68kBank(DAC_82_83_84_85_Data)
(1) 4426/    1251 : 01                  		db	zmake68kBank(DAC_82_83_84_85_Data)
(1) 4427/    1252 : 01                  		db	zmake68kBank(DAC_82_83_84_85_Data)
(1) 4428/    1253 : 01                  		db	zmake68kBank(DAC_82_83_84_85_Data)
(1) 4429/    1254 : 01                  		db	zmake68kBank(DAC_86_Data)
(1) 4430/    1255 : 01                  		db	zmake68kBank(DAC_87_Data)
(1) 4431/    1256 : 01                  		db	zmake68kBank(DAC_88_Data)
(1) 4432/    1257 : 01                  		db	zmake68kBank(DAC_89_Data)
(1) 4433/    1258 : 01                  		db	zmake68kBank(DAC_8A_8B_Data)
(1) 4434/    1259 : 01                  		db	zmake68kBank(DAC_8A_8B_Data)
(1) 4435/    125A : 01                  		db	zmake68kBank(DAC_8C_Data)
(1) 4436/    125B : 01                  		db	zmake68kBank(DAC_8D_8E_Data)
(1) 4437/    125C : 01                  		db	zmake68kBank(DAC_8D_8E_Data)
(1) 4438/    125D : 01                  		db	zmake68kBank(DAC_8F_Data)
(1) 4439/    125E : 01                  		db	zmake68kBank(DAC_90_91_92_93_Data)
(1) 4440/    125F : 01                  		db	zmake68kBank(DAC_90_91_92_93_Data)
(1) 4441/    1260 : 01                  		db	zmake68kBank(DAC_90_91_92_93_Data)
(1) 4442/    1261 : 01                  		db	zmake68kBank(DAC_90_91_92_93_Data)
(1) 4443/    1262 : 01                  		db	zmake68kBank(DAC_94_95_96_97_Data)
(1) 4444/    1263 : 01                  		db	zmake68kBank(DAC_94_95_96_97_Data)
(1) 4445/    1264 : 01                  		db	zmake68kBank(DAC_94_95_96_97_Data)
(1) 4446/    1265 : 01                  		db	zmake68kBank(DAC_94_95_96_97_Data)
(1) 4447/    1266 : 01                  		db	zmake68kBank(DAC_98_99_9A_Data)
(1) 4448/    1267 : 01                  		db	zmake68kBank(DAC_98_99_9A_Data)
(1) 4449/    1268 : 01                  		db	zmake68kBank(DAC_98_99_9A_Data)
(1) 4450/    1269 : 01                  		db	zmake68kBank(DAC_9B_Data)
(1) 4451/    126A : 02                  		db	zmake68kBank(DAC_9C_Data)
(1) 4452/    126B : 02                  		db	zmake68kBank(DAC_9D_Data)
(1) 4453/    126C : 02                  		db	zmake68kBank(DAC_9E_Data)
(1) 4456/    126D : 02                  		db	zmake68kBank(DAC_9F_Data)
(1) 4457/    126E : 02                  		db	zmake68kBank(DAC_A0_Data)
(1) 4458/    126F : 02                  		db	zmake68kBank(DAC_A1_Data)
(1) 4459/    1270 : 02                  		db	zmake68kBank(DAC_A2_Data)
(1) 4460/    1271 : 02                  		db	zmake68kBank(DAC_A3_Data)
(1) 4461/    1272 : 02                  		db	zmake68kBank(DAC_A4_Data)
(1) 4462/    1273 : 02                  		db	zmake68kBank(DAC_A5_Data)
(1) 4463/    1274 : 02                  		db	zmake68kBank(DAC_A6_Data)
(1) 4464/    1275 : 02                  		db	zmake68kBank(DAC_A7_Data)
(1) 4465/    1276 : 02                  		db	zmake68kBank(DAC_A8_Data)
(1) 4466/    1277 : 02                  		db	zmake68kBank(DAC_A9_Data)
(1) 4467/    1278 : 02                  		db	zmake68kBank(DAC_AA_Data)
(1) 4468/    1279 : 03                  		db	zmake68kBank(DAC_AB_Data)
(1) 4469/    127A : 03                  		db	zmake68kBank(DAC_AC_Data)
(1) 4470/    127B : 03                  		db	zmake68kBank(DAC_AD_AE_Data)
(1) 4471/    127C : 03                  		db	zmake68kBank(DAC_AD_AE_Data)
(1) 4472/    127D : 03                  		db	zmake68kBank(DAC_AF_B0_Data)
(1) 4473/    127E : 03                  		db	zmake68kBank(DAC_AF_B0_Data)
(1) 4474/    127F : 03                  		db	zmake68kBank(DAC_B1_Data)
(1) 4475/    1280 : 01                  		db	zmake68kBank(DAC_B2_B3_Data)
(1) 4476/    1281 : 01                  		db	zmake68kBank(DAC_B2_B3_Data)
(1) 4477/    1282 : 03                  		db	zmake68kBank(DAC_B4_C1_C2_C3_C4_Data)
(1) 4478/    1283 : 03                  		db	zmake68kBank(DAC_B5_Data)
(1) 4479/    1284 : 03                  		db	zmake68kBank(DAC_B6_Data)
(1) 4480/    1285 : 03                  		db	zmake68kBank(DAC_B7_Data)
(1) 4481/    1286 : 03                  		db	zmake68kBank(DAC_B8_B9_Data)
(1) 4482/    1287 : 03                  		db	zmake68kBank(DAC_B8_B9_Data)
(1) 4483/    1288 : 03                  		db	zmake68kBank(DAC_BA_Data)
(1) 4484/    1289 : 03                  		db	zmake68kBank(DAC_BB_Data)
(1) 4485/    128A : 03                  		db	zmake68kBank(DAC_BC_Data)
(1) 4486/    128B : 03                  		db	zmake68kBank(DAC_BD_Data)
(1) 4487/    128C : 03                  		db	zmake68kBank(DAC_BE_Data)
(1) 4488/    128D : 03                  		db	zmake68kBank(DAC_BF_Data)
(1) 4489/    128E : 03                  		db	zmake68kBank(DAC_C0_Data)
(1) 4490/    128F : 03                  		db	zmake68kBank(DAC_B4_C1_C2_C3_C4_Data)
(1) 4491/    1290 : 03                  		db	zmake68kBank(DAC_B4_C1_C2_C3_C4_Data)
(1) 4492/    1291 : 03                  		db	zmake68kBank(DAC_B4_C1_C2_C3_C4_Data)
(1) 4493/    1292 : 03                  		db	zmake68kBank(DAC_B4_C1_C2_C3_C4_Data)
(1) 4496/    1293 : 04                  		db	zmake68kBank(DAC_C5_Data)
(1) 4497/    1294 : 04                  		db	zmake68kBank(DAC_C6_Data)
(1) 4498/    1295 : 04                  		db	zmake68kBank(DAC_C7_Data)
(1) 4499/    1296 : 04                  		db	zmake68kBank(DAC_C8_Data)
(1) 4500/    1297 : 04                  		db	zmake68kBank(DAC_C9_CC_CD_CE_CF_Data)
(1) 4501/    1298 : 04                  		db	zmake68kBank(DAC_CA_D0_D1_D2_Data)
(1) 4502/    1299 : 04                  		db	zmake68kBank(DAC_CB_D3_D4_D5_Data)
(1) 4503/    129A : 04                  		db	zmake68kBank(DAC_C9_CC_CD_CE_CF_Data)
(1) 4504/    129B : 04                  		db	zmake68kBank(DAC_C9_CC_CD_CE_CF_Data)
(1) 4505/    129C : 04                  		db	zmake68kBank(DAC_C9_CC_CD_CE_CF_Data)
(1) 4506/    129D : 04                  		db	zmake68kBank(DAC_C9_CC_CD_CE_CF_Data)
(1) 4507/    129E : 04                  		db	zmake68kBank(DAC_CA_D0_D1_D2_Data)
(1) 4508/    129F : 04                  		db	zmake68kBank(DAC_CA_D0_D1_D2_Data)
(1) 4509/    12A0 : 04                  		db	zmake68kBank(DAC_CA_D0_D1_D2_Data)
(1) 4510/    12A1 : 04                  		db	zmake68kBank(DAC_CB_D3_D4_D5_Data)
(1) 4511/    12A2 : 04                  		db	zmake68kBank(DAC_CB_D3_D4_D5_Data)
(1) 4512/    12A3 : 04                  		db	zmake68kBank(DAC_CB_D3_D4_D5_Data)
(1) 4515/    12A4 : 04                  		db	zmake68kBank(DAC_D6_Data)
(1) 4516/    12A5 : 04                  		db	zmake68kBank(DAC_D7_Data)
(1) 4519/    12A6 : 01                  		db	zmake68kBank(DAC_D8_D9_Data)
(1) 4520/    12A7 : 01                  		db	zmake68kBank(DAC_D8_D9_Data)
(1) 4522/    12A8 :                     ; ---------------------------------------------------------------------------
(1) 4523/    12A8 :                     ; ===========================================================================
(1) 4524/    12A8 :                     ; Pointers
(1) 4525/    12A8 :                     ; ===========================================================================
(1) 4526/    12A8 :                     z80_SoundDriverPointers:
(1) 4527/    12A8 : 00 80               		dw	zmake68kPtr(MusicPointers)
(1) 4528/    12AA : 00 80               		dw	zmake68kPtr(SFXPointers)
(1) 4529/    12AC : B0 12               		dw	z80_ModEnvPointers
(1) 4530/    12AE : 29 13               		dw	z80_VolEnvPointers
(1) 4531/    12B0 :                     ; ---------------------------------------------------------------------------
(1) 4532/    12B0 :                     ; ===========================================================================
(1) 4533/    12B0 :                     ; Modulation Envelope Pointers
(1) 4534/    12B0 :                     ; ===========================================================================
(1) 4535/    12B0 :                     ;z80_FreqFlutterPointers
(1) 4536/    12B0 :                     z80_ModEnvPointers:
(1) 4537/    12B0 : C1 12               		dw	ModEnv_00
(1) 4538/    12B2 : C0 12               		dw	ModEnv_01
(1) 4539/    12B4 : CD 12               		dw	ModEnv_02
(1) 4540/    12B6 : DA 12               		dw	ModEnv_03
(1) 4541/    12B8 : E8 12               		dw	ModEnv_04
(1) 4542/    12BA : F4 12               		dw	ModEnv_05
(1) 4543/    12BC : 06 13               		dw	ModEnv_06
(1) 4544/    12BE : 17 13               		dw	ModEnv_07
(1) 4545/    12C0 : 00                  ModEnv_01:	db    0
(1) 4546/    12C1 : 01 02 01 00 FF FE   ModEnv_00:	db    1,   2,   1,   0,  -1,  -2,  -3,  -4,  -3,  -2,  -1, ModEnvSustain
                    FD FC FD FE FF 83 
(1) 4547/    12CD : 00 00 00 00 13 26   ModEnv_02:	db    0,   0,   0,   0, 13h, 26h, 39h, 4Ch, 5Fh, 72h, 7Fh, 72h, ModEnvSustain
                    39 4C 5F 72 7F 72 
                    83                
(1) 4548/    12DA : 01 02 03 02 01 00   ModEnv_03:	db    1,   2,   3,   2,   1,   0,  -1,  -2,  -3,  -2,  -1,   0, ModEnvJumpTo,   0
                    FF FE FD FE FF 00 
                    82 00             
(1) 4549/    12E8 : 00 00 01 03 01 00   ModEnv_04:	db    0,   0,   1,   3,   1,   0,  -1,  -3,  -1,   0, ModEnvJumpTo,   2
                    FF FD FF 00 82 02 
(1) 4550/    12F4 : 00 00 00 00 00 0A   ModEnv_05:	db    0,   0,   0,   0,   0, 0Ah, 14h, 1Eh, 14h, 0Ah,   0, -10, -20, -30, -20, -10
                    14 1E 14 0A 00 F6 
                    EC E2 EC F6       
(1) 4551/    1304 : 82 04                         	db  ModEnvJumpTo,   4
(1) 4552/    1306 : 00 00 00 00 16 2C   ModEnv_06:	db    0,   0,   0,   0, 16h, 2Ch, 42h, 2Ch, 16h,   0, -22, -44, -66, -44, -22
                    42 2C 16 00 EA D4 
                    BE D4 EA          
(1) 4553/    1315 : 82 03                         	db    ModEnvJumpTo, 3
(1) 4554/    1317 : 01 02 03 04 03 02   ModEnv_07:	db    1,   2,   3,   4,   3,   2,   1,   0,  -1,  -2,  -3,  -4,  -3,  -2,  -1,   0
                    01 00 FF FE FD FC 
                    FD FE FF 00       
(1) 4555/    1327 : 82 01                         	db  ModEnvJumpTo,   1
(1) 4556/    1329 :                     ; ---------------------------------------------------------------------------
(1) 4557/    1329 :                     ; ===========================================================================
(1) 4558/    1329 :                     ; Volume Envelope Pointers
(1) 4559/    1329 :                     ; ===========================================================================
(1) 4560/    1329 :                     ;z80_PSGTonePointers
(1) 4561/    1329 :                     z80_VolEnvPointers:
(1) 4562/    1329 : 91 13 93 13 9A 13   		dw		VolEnv_00,VolEnv_01,VolEnv_02,VolEnv_03,VolEnv_04,VolEnv_05
                    B3 13 BF 13 CA 13 
(1) 4563/    1335 : D9 13 E2 13 F3 13   		dw		VolEnv_06,VolEnv_07,VolEnv_08,VolEnv_09,VolEnv_0A,VolEnv_0B
                    FE 13 13 14 1D 14 
(1) 4564/    1341 : 26 14 28 14 93 13   		dw		VolEnv_0C,VolEnv_0D,VolEnv_0E,VolEnv_0F,VolEnv_10,VolEnv_11
                    2A 14 49 14 50 14 
(1) 4565/    134D : 5B 14 6A 14 70 14   		dw		VolEnv_12,VolEnv_13,VolEnv_14,VolEnv_15,VolEnv_16,VolEnv_17
                    81 14 8C 14 A1 14 
(1) 4566/    1359 : AA 14 B3 14 BA 14   		dw		VolEnv_18,VolEnv_19,VolEnv_1A,VolEnv_1B,VolEnv_1C,VolEnv_1D
                    C3 14 D4 14 01 15 
(1) 4567/    1365 : 04 15 08 15 15 15   		dw		VolEnv_1E,VolEnv_1F,VolEnv_20,VolEnv_21,VolEnv_22,VolEnv_23
                    27 15 2E 15 37 15 
(1) 4568/    1371 : 3B 15 4D 15 B0 15   		dw		VolEnv_24,VolEnv_25,VolEnv_26,VolEnv_27,VolEnv_28,VolEnv_29
                    BD 15 D4 15 DB 15 
(1) 4569/    137D : EC 15 06 16 F7 15   		dw		VolEnv_2A,VolEnv_2B,VolEnv_2C,VolEnv_2D,VolEnv_2E,VolEnv_2F
                    30 16 4C 16 74 16 
(1) 4570/    1389 : 85 16 C3 16 DF 16   		dw		VolEnv_30,VolEnv_31,VolEnv_32,VolEnv_33
                    5F 17             
(1) 4571/    1391 : 02 83               VolEnv_00:	db    2, VolEnvStopTrack
(1) 4572/    1393 :                     VolEnv_01:
(1) 4573/    1393 : 00 02 04 06 08 10   VolEnv_0E:	db    0,   2,   4,   6,   8, 10h, VolEnvStopTrack
                    83                
(1) 4574/    139A : 02 01 00 00 01 02   VolEnv_02:	db    2,   1,   0,   0,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2
                    02 02 02 02 02 02 
                    02 02 02 02       
(1) 4575/    13AA : 02 03 03 03 04 04             	db    2,   3,   3,   3,   4,   4,   4,   5, VolEnvRestTrack
                    04 05 81          
(1) 4576/    13B3 : 00 00 02 03 04 04   VolEnv_03:	db    0,   0,   2,   3,   4,   4,   5,   5,   5,   6,   6, VolEnvRestTrack
                    05 05 05 06 06 81 
(1) 4577/    13BF : 03 00 01 01 01 02   VolEnv_04:	db    3,   0,   1,   1,   1,   2,   3,   4,   4,   5, VolEnvRestTrack
                    03 04 04 05 81    
(1) 4578/    13CA : 00 00 01 01 02 03   VolEnv_05:	db    0,   0,   1,   1,   2,   3,   4,   5,   5,   6,   8,   7,   7,   6, VolEnvRestTrack
                    04 05 05 06 08 07 
                    07 06 81          
(1) 4579/    13D9 : 01 0C 03 0F 02 07   VolEnv_06:	db    1, 0Ch,   3, 0Fh,   2,   7,   3, 0Fh, VolEnvReset
                    03 0F 80          
(1) 4580/    13E2 : 00 00 00 02 03 03   VolEnv_07:	db    0,   0,   0,   2,   3,   3,   4,   5,   6,   7,   8,   9, 0Ah, 0Bh, 0Eh, 0Fh
                    04 05 06 07 08 09 
                    0A 0B 0E 0F       
(1) 4581/    13F2 : 83                            	db  VolEnvStopTrack
(1) 4582/    13F3 : 03 02 01 01 00 00   VolEnv_08:	db    3,   2,   1,   1,   0,   0,   1,   2,   3,   4, VolEnvRestTrack
                    01 02 03 04 81    
(1) 4583/    13FE : 01 00 00 00 00 01   VolEnv_09:	db    1,   0,   0,   0,   0,   1,   1,   1,   2,   2,   2,   3,   3,   3,   3,   4
                    01 01 02 02 02 03 
                    03 03 03 04       
(1) 4584/    140E : 04 04 05 05 81                	db    4,   4,   5,   5, VolEnvRestTrack
(1) 4585/    1413 : 10 20 30 40 30 20   VolEnv_0A:	db  10h, 20h, 30h, 40h, 30h, 20h, 10h,   0,-10h, VolEnvReset
                    10 00 F0 80       
(1) 4586/    141D : 00 00 01 01 03 03   VolEnv_0B:	db    0,   0,   1,   1,   3,   3,   4,   5, VolEnvStopTrack
                    04 05 83          
(1) 4587/    1426 : 00 81               VolEnv_0C:	db    0, VolEnvRestTrack
(1) 4588/    1428 : 02 83               VolEnv_0D:	db    2, VolEnvStopTrack
(1) 4589/    142A : 09 09 09 08 08 08   VolEnv_0F:	db    9,   9,   9,   8,   8,   8,   7,   7,   7,   6,   6,   6,   5,   5,   5,   4
                    07 07 07 06 06 06 
                    05 05 05 04       
(1) 4590/    143A : 04 04 03 03 03 02             	db    4,   4,   3,   3,   3,   2,   2,   2,   1,   1,   1,   0,   0,   0, VolEnvRestTrack
                    02 02 01 01 01 00 
                    00 00 81          
(1) 4591/    1449 : 01 01 01 00 00 00   VolEnv_10:	db    1,   1,   1,   0,   0,   0, VolEnvRestTrack
                    81                
(1) 4592/    1450 : 03 00 01 01 01 02   VolEnv_11:	db    3,   0,   1,   1,   1,   2,   3,   4,   4,   5, VolEnvRestTrack
                    03 04 04 05 81    
(1) 4593/    145B : 00 00 01 01 02 03   VolEnv_12:	db    0,   0,   1,   1,   2,   3,   4,   5,   5,   6,   8,   7,   7,   6, VolEnvRestTrack
                    04 05 05 06 08 07 
                    07 06 81          
(1) 4594/    146A : 0A 05 00 04 08 83   VolEnv_13:	db  0Ah,   5,   0,   4,   8, VolEnvStopTrack
(1) 4595/    1470 : 00 00 00 02 03 03   VolEnv_14:	db    0,   0,   0,   2,   3,   3,   4,   5,   6,   7,   8,   9, 0Ah, 0Bh, 0Eh, 0Fh
                    04 05 06 07 08 09 
                    0A 0B 0E 0F       
(1) 4596/    1480 : 83                            	db  VolEnvStopTrack
(1) 4597/    1481 : 03 02 01 01 00 00   VolEnv_15:	db    3,   2,   1,   1,   0,   0,   1,   2,   3,   4, VolEnvRestTrack
                    01 02 03 04 81    
(1) 4598/    148C : 01 00 00 00 00 01   VolEnv_16:	db    1,   0,   0,   0,   0,   1,   1,   1,   2,   2,   2,   3,   3,   3,   3,   4
                    01 01 02 02 02 03 
                    03 03 03 04       
(1) 4599/    149C : 04 04 05 05 81                	db    4,   4,   5,   5, VolEnvRestTrack
(1) 4600/    14A1 : 10 20 30 40 30 20   VolEnv_17:	db  10h, 20h, 30h, 40h, 30h, 20h, 10h,   0, VolEnvReset
                    10 00 80          
(1) 4601/    14AA : 00 00 01 01 03 03   VolEnv_18:	db    0,   0,   1,   1,   3,   3,   4,   5, VolEnvStopTrack
                    04 05 83          
(1) 4602/    14B3 : 00 02 04 06 08 16   VolEnv_19:	db    0,   2,   4,   6,   8, 16h, VolEnvStopTrack
                    83                
(1) 4603/    14BA : 00 00 01 01 03 03   VolEnv_1A:	db    0,   0,   1,   1,   3,   3,   4,   5, VolEnvStopTrack
                    04 05 83          
(1) 4604/    14C3 : 04 04 04 04 03 03   VolEnv_1B:	db    4,   4,   4,   4,   3,   3,   3,   3,   2,   2,   2,   2,   1,   1,   1,   1
                    03 03 02 02 02 02 
                    01 01 01 01       
(1) 4605/    14D3 : 83                            	db  VolEnvStopTrack
(1) 4606/    14D4 : 00 00 00 00 01 01   VolEnv_1C:	db    0,   0,   0,   0,   1,   1,   1,   1,   2,   2,   2,   2,   3,   3,   3,   3
                    01 01 02 02 02 02 
                    03 03 03 03       
(1) 4607/    14E4 : 04 04 04 04 05 05             	db    4,   4,   4,   4,   5,   5,   5,   5,   6,   6,   6,   6,   7,   7,   7,   7
                    05 05 06 06 06 06 
                    07 07 07 07       
(1) 4608/    14F4 : 08 08 08 08 09 09             	db    8,   8,   8,   8,   9,   9,   9,   9, 0Ah, 0Ah, 0Ah, 0Ah, VolEnvRestTrack
                    09 09 0A 0A 0A 0A 
                    81                
(1) 4609/    1501 : 00 0A 83            VolEnv_1D:	db    0, 0Ah, VolEnvStopTrack
(1) 4610/    1504 : 00 02 04 81         VolEnv_1E:	db    0,   2,   4, VolEnvRestTrack
(1) 4611/    1508 : 30 20 10 00 00 00   VolEnv_1F:	db  30h, 20h, 10h,   0,   0,   0,   0,   0,   8, 10h, 20h, 30h, VolEnvRestTrack
                    00 00 08 10 20 30 
                    81                
(1) 4612/    1515 : 00 04 04 04 04 04   VolEnv_20:	db    0,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   6,   6,   6,   8,   8
                    04 04 04 04 04 06 
                    06 06 08 08       
(1) 4613/    1525 : 0A 83                         	db  0Ah, VolEnvStopTrack
(1) 4614/    1527 : 00 02 03 04 06 07   VolEnv_21:	db    0,   2,   3,   4,   6,   7, VolEnvRestTrack
                    81                
(1) 4615/    152E : 02 01 00 00 00 02   VolEnv_22:	db    2,   1,   0,   0,   0,   2,   4,   7, VolEnvRestTrack
                    04 07 81          
(1) 4616/    1537 : 0F 01 05 83         VolEnv_23:	db  0Fh,   1,   5, VolEnvStopTrack
(1) 4617/    153B : 08 06 02 03 04 05   VolEnv_24:	db    8,   6,   2,   3,   4,   5,   6,   7,   8,   9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
                    06 07 08 09 0A 0B 
                    0C 0D 0E 0F       
(1) 4618/    154B : 10 83                         	db  10h, VolEnvStopTrack
(1) 4619/    154D : 00 00 00 00 00 00   VolEnv_25:	db    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                    00 00 00 00 01 01 
                    01 01 01 01       
(1) 4620/    155D : 01 01 01 01 02 02             	db    1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3
                    02 02 02 02 02 02 
                    02 02 03 03       
(1) 4621/    156D : 03 03 03 03 03 03             	db    3,   3,   3,   3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   4,   4,   4
                    03 03 04 04 04 04 
                    04 04 04 04       
(1) 4622/    157D : 04 04 05 05 05 05             	db    4,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   6,   6,   6,   6
                    05 05 05 05 05 05 
                    06 06 06 06       
(1) 4623/    158D : 06 06 06 06 06 06             	db    6,   6,   6,   6,   6,   6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7
                    07 07 07 07 07 07 
                    07 07 07 07       
(1) 4624/    159D : 08 08 08 08 08 08             	db    8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   9,   9,   9,   9,   9,   9
                    08 08 08 08 09 09 
                    09 09 09 09       
(1) 4625/    15AD : 09 09 83                      	db    9,   9, VolEnvStopTrack
(1) 4626/    15B0 : 00 02 02 02 03 03   VolEnv_26:	db    0,   2,   2,   2,   3,   3,   3,   4,   4,   4,   5,   5, VolEnvStopTrack
                    03 04 04 04 05 05 
                    83                
(1) 4627/    15BD : 00 00 00 01 01 01   VolEnv_27:	db	  0,   0,   0,   1,   1,   1,   2,   2,   2,   3,   3,   3,   4,   4,   4,   5
                    02 02 02 03 03 03 
                    04 04 04 05       
(1) 4628/    15CD : 05 05 06 06 06 07             	db	  5,   5,   6,   6,   6,   7, VolEnvRestTrack
                    81                
(1) 4629/    15D4 : 00 02 04 06 08 10   VolEnv_28:	db    0,   2,   4,   6,   8, 10h, VolEnvRestTrack
                    81                
(1) 4630/    15DB : 00 00 01 01 02 02   VolEnv_29:	db	  0,   0,   1,   1,   2,   2,   3,   3,   4,   4,   5,   5,   6,   6,   7,   7, VolEnvRestTrack
                    03 03 04 04 05 05 
                    06 06 07 07 81    
(1) 4631/    15EC : 00 00 02 03 04 04   VolEnv_2A:	db	  0,   0,   2,   3,   4,   4,   5,   5,   5,   6, VolEnvRestTrack
                    05 05 05 06 81    
(1) 4632/    15F7 : 03 03 03 02 02 02   VolEnv_2C:	db	  3,   3,   3,   2,   2,   2,   2,   1,   1,   1,   0,   0,   0,   0, VolEnvRestTrack
                    02 01 01 01 00 00 
                    00 00 81          
(1) 4633/    1606 : 00 00 00 00 00 00   VolEnv_2B:	db	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1
                    00 00 00 00 01 01 
(1) 4634/    1612 : 01 01 01 01 01 01             	db	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2
                    01 01 01 01 01 01 
                    02 02 02 02       
(1) 4635/    1622 : 02 02 02 02 03 03             	db	  2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   3,   3,   4, VolEnvRestTrack
                    03 03 03 03 03 03 
                    04 81             
(1) 4636/    1630 : 00 00 00 00 00 00   VolEnv_2D:	db	  0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2
                    01 01 01 01 01 02 
                    02 02 02 02       
(1) 4637/    1640 : 03 03 03 04 04 04             	db	  3,   3,   3,   4,   4,   4,   5,   5,   5,   6,   7, VolEnvRestTrack
                    05 05 05 06 07 81 
(1) 4638/    164C : 00 00 00 00 00 01   VolEnv_2E:	db	  0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2
                    01 01 01 01 02 02 
                    02 02 02 02       
(1) 4639/    165C : 03 03 03 03 03 04             	db	  3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   5,   5,   5,   5,   5,   6
                    04 04 04 04 05 05 
                    05 05 05 06       
(1) 4640/    166C : 06 06 06 06 07 07             	db	  6,   6,   6,   6,   7,   7,   7, VolEnvRestTrack
                    07 81             
(1) 4641/    1674 : 00 01 02 03 04 05   VolEnv_2F:	db	  0,   1,   2,   3,   4,   5,   6,   7,   8,   9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh, VolEnvRestTrack
                    06 07 08 09 0A 0B 
                    0C 0D 0E 0F 81    
(1) 4642/    1685 : 00 00 00 00 00 00   VolEnv_30:	db	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1
                    00 00 00 00 01 01 
                    01 01 01 01       
(1) 4643/    1695 : 01 01 01 01 01 01             	db	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                    01 01 01 01 01 01 
                    01 01 01 01       
(1) 4644/    16A5 : 01 01 01 01 01 01             	db	  1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2
                    01 01 02 02 02 02 
                    02 02 02 02       
(1) 4645/    16B5 : 02 02 03 03 03 03             	db	  2,   2,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   4, VolEnvRestTrack
                    03 03 03 03 03 03 
                    04 81             
(1) 4646/    16C3 : 04 04 04 03 03 03   VolEnv_31:	db	  4,   4,   4,   3,   3,   3,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1
                    02 02 02 01 01 01 
                    01 01 01 01       
(1) 4647/    16D3 : 02 02 02 02 02 03             	db	  2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   4, VolEnvRestTrack
                    03 03 03 03 04 81 
(1) 4648/    16DF : 04 04 03 03 02 02   VolEnv_32:	db	  4,   4,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
                    01 01 01 01 01 01 
                    01 01 01 01       
(1) 4649/    16EF : 01 01 01 01 01 01             	db	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2
                    01 01 01 01 02 02 
                    02 02 02 02       
(1) 4650/    16FF : 02 02 02 02 02 02             	db	  2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3
                    02 02 02 02 02 02 
                    02 02 03 03       
(1) 4651/    170F : 03 03 03 03 03 03             	db	  3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3
                    03 03 03 03 03 03 
                    03 03 03 03       
(1) 4652/    171F : 03 03 04 04 04 04             	db	  3,   3,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4
                    04 04 04 04 04 04 
                    04 04 04 04       
(1) 4653/    172F : 04 04 04 04 04 04             	db	  4,   4,   4,   4,   4,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5
                    05 05 05 05 05 05 
                    05 05 05 05       
(1) 4654/    173F : 05 05 05 05 05 05             	db	  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   6,   6,   6,   6,   6,   6
                    05 05 05 05 06 06 
                    06 06 06 06       
(1) 4655/    174F : 06 06 06 06 06 06             	db	  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   7, VolEnvRestTrack
                    06 06 06 06 06 06 
                    06 06 07 81       
(1) 4656/    175F : 0E 0D 0C 0B 0A 09   VolEnv_33:	db	0Eh, 0Dh, 0Ch, 0Bh, 0Ah,   9,   8,   7,   6,   5,   4,   3,   2,   1,   0, VolEnvRestTrack
                    08 07 06 05 04 03 
                    02 01 00 81       
(1) 4657/    176F :                     ; ---------------------------------------------------------------------------
(1) 4658/    176F :                     ; ===========================================================================
(1) 4659/    176F :                     ; MUSIC BANKS
(1) 4660/    176F :                     ; ===========================================================================
(1) 4661/    176F :                     z80_MusicBanks:
(1) 4662/    176F : 05                  	db zmake68kBank(MusData_Default)
(1) 4663/    1770 :                     ; ---------------------------------------------------------------------------
Z80 free space before stack: 4AAh bytes
(1) 4667/    1770 :                     		message "Z80 free space before stack: \{z80_stack_top-$}h bytes"
(1) 4669/    1770 :                     
(1) 4670/    1770 :                     z80_SoundDriverPointersEnd:
(1) 4671/    1770 :                     ; ---------------------------------------------------------------------------
(1) 4672/    1770 :                     ; ===========================================================================
(1) 4673/    1770 :                     ; END OF SOUND DRIVER
(1) 4674/    1770 :                     ; ===========================================================================
(1) 4675/    1770 : ALL                 		restore
(1) 4676/    1770 :                     		padding off
(1) 4677/    1A52 :                     		!org		z80_SoundDriver+Size_of_Snd_driver_guess
(1) 4678/    1A52 :                     
(1) 4679/    1A52 :                     Z80_Snd_Driver_End:
(1) 4680/    1A52 :                     
(1) 4681/    1A52 :                     little_endian function x,((x)<<8)&$FF00|((x)>>8)&$FF
(1) 4682/    1A52 :                     
(1) 4683/    1A52 :                     ; Function to make a little endian (z80) pointer
(1) 4684/    1A52 :                     k68z80Pointer function addr,little_endian((addr&$7FFF)+$8000)
(1) 4685/    1A52 :                     
(1) 4686/    1A52 :                     startBank macro {INTLABEL}
(1) 4687/    1A52 :                     	set	soundBankDecl,*
(1) 4688/    1A52 :                     	align	$8000
(1) 4689/    1A52 :                     __LABEL__ label *
(1) 4690/    1A52 :                     	set	soundBankStart,__LABEL__
(1) 4691/    1A52 :                     	set	soundBankPadding,soundBankStart - soundBankDecl
(1) 4692/    1A52 :                     	set	soundBankName,"__LABEL__"
(1) 4693/    1A52 :                     	endm
(1) 4694/    1A52 :                     
(1) 4695/    1A52 : =$1                 DebugSoundbanks = 1
(1) 4696/    1A52 :                     
(1) 4697/    1A52 :                     finishBank macro
(1) 4698/    1A52 :                     	if * > soundBankStart + $8000
(1) 4699/    1A52 :                     		fatal "soundBank \{soundBankName} must fit in $8000 bytes but was $\{*-soundBankStart}. Try moving something to the other bank."
(1) 4700/    1A52 :                     	elseif (DebugSoundbanks<>0)&&(MOMPASS>1)
(1) 4701/    1A52 :                     		message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4702/    1A52 :                     	endif
(1) 4703/    1A52 :                     	endm
(1) 4704/    1A52 :                     
(1) 4705/    1A52 :                     ; macro to declare an entry in an offset table rooted at a bank
(1) 4706/    1A52 :                     offsetBankTableEntry macro ptr
(1) 4707/    1A52 :                     	dc.ATTRIBUTE k68z80Pointer(ptr)
(1) 4708/    1A52 :                     	endm
(1) 4709/    1A52 :                     
(1) 4710/    1A52 :                     ; Special BINCLUDE wrapper function
(1) 4711/    1A52 :                     DACBINCLUDE macro file,{INTLABEL}
(1) 4712/    1A52 :                     __LABEL__ label *
(1) 4713/    1A52 :                     	BINCLUDE file
(1) 4714/    1A52 :                     __LABEL___Len  = little_endian(*-__LABEL__)
(1) 4715/    1A52 :                     __LABEL___Ptr  = k68z80Pointer(__LABEL__-soundBankStart)
(1) 4716/    1A52 :                     __LABEL___Bank = soundBankStart
(1) 4717/    1A52 :                     	endm
(1) 4718/    1A52 :                     
(1) 4719/    1A52 :                     ; Setup macro for DAC samples.
(1) 4720/    1A52 :                     DAC_Setup macro rate,dacptr
(1) 4721/    1A52 :                     	dc.b	rate
(1) 4722/    1A52 :                     	dc.w	dacptr_Len
(1) 4723/    1A52 :                     	dc.w	dacptr_Ptr
(1) 4724/    1A52 :                     	endm
(1) 4725/    1A52 :                     
(1) 4726/    1A52 :                     ; Macro for printing the DAC master table
(1) 4727/    1A52 :                     DAC_Master_Table macro
(1) 4728/    1A52 :                     	ifndef DACPointers
(1) 4729/    1A52 :                     DACPointers label *
(1) 4730/    1A52 :                     	elseif (DACPointers&$7FFF)<>((*)&$7FFF)
(1) 4731/    1A52 :                     		fatal "Inconsistent placement of DAC_Master_Table macro on bank \{soundBankName}"
(1) 4732/    1A52 :                     	endif
(1) 4733/    1A52 :                     	if (use_s3_samples<>0)||(use_sk_samples<>0)||(use_s3d_samples<>0)
(1) 4734/    1A52 :                     		DAC_Setup $04,DAC_81_Data
(1) 4735/    1A52 :                     		DAC_Setup $0E,DAC_82_83_84_85_Data
(1) 4736/    1A52 :                     		DAC_Setup $14,DAC_82_83_84_85_Data
(1) 4737/    1A52 :                     		DAC_Setup $1A,DAC_82_83_84_85_Data
(1) 4738/    1A52 :                     		DAC_Setup $20,DAC_82_83_84_85_Data
(1) 4739/    1A52 :                     		DAC_Setup $04,DAC_86_Data
(1) 4740/    1A52 :                     		DAC_Setup $04,DAC_87_Data
(1) 4741/    1A52 :                     		DAC_Setup $06,DAC_88_Data
(1) 4742/    1A52 :                     		DAC_Setup $0A,DAC_89_Data
(1) 4743/    1A52 :                     		DAC_Setup $14,DAC_8A_8B_Data
(1) 4744/    1A52 :                     		DAC_Setup $1B,DAC_8A_8B_Data
(1) 4745/    1A52 :                     		DAC_Setup $08,DAC_8C_Data
(1) 4746/    1A52 :                     		DAC_Setup $0B,DAC_8D_8E_Data
(1) 4747/    1A52 :                     		DAC_Setup $11,DAC_8D_8E_Data
(1) 4748/    1A52 :                     		DAC_Setup $08,DAC_8F_Data
(1) 4749/    1A52 :                     		DAC_Setup $03,DAC_90_91_92_93_Data
(1) 4750/    1A52 :                     		DAC_Setup $07,DAC_90_91_92_93_Data
(1) 4751/    1A52 :                     		DAC_Setup $0A,DAC_90_91_92_93_Data
(1) 4752/    1A52 :                     		DAC_Setup $0E,DAC_90_91_92_93_Data
(1) 4753/    1A52 :                     		DAC_Setup $06,DAC_94_95_96_97_Data
(1) 4754/    1A52 :                     		DAC_Setup $0A,DAC_94_95_96_97_Data
(1) 4755/    1A52 :                     		DAC_Setup $0D,DAC_94_95_96_97_Data
(1) 4756/    1A52 :                     		DAC_Setup $12,DAC_94_95_96_97_Data
(1) 4757/    1A52 :                     		DAC_Setup $0B,DAC_98_99_9A_Data
(1) 4758/    1A52 :                     		DAC_Setup $13,DAC_98_99_9A_Data
(1) 4759/    1A52 :                     		DAC_Setup $16,DAC_98_99_9A_Data
(1) 4760/    1A52 :                     		DAC_Setup $0C,DAC_9B_Data
(1) 4761/    1A52 :                     		DAC_Setup $0A,DAC_9C_Data
(1) 4762/    1A52 :                     		DAC_Setup $18,DAC_9D_Data
(1) 4763/    1A52 :                     		DAC_Setup $18,DAC_9E_Data
(1) 4764/    1A52 :                     	endif
(1) 4765/    1A52 :                     	if (use_s3_samples<>0)||(use_sk_samples<>0)
(1) 4766/    1A52 :                     		DAC_Setup $0C,DAC_9F_Data
(1) 4767/    1A52 :                     		DAC_Setup $0C,DAC_A0_Data
(1) 4768/    1A52 :                     		DAC_Setup $0A,DAC_A1_Data
(1) 4769/    1A52 :                     		DAC_Setup $0A,DAC_A2_Data
(1) 4770/    1A52 :                     		DAC_Setup $18,DAC_A3_Data
(1) 4771/    1A52 :                     		DAC_Setup $18,DAC_A4_Data
(1) 4772/    1A52 :                     		DAC_Setup $0C,DAC_A5_Data
(1) 4773/    1A52 :                     		DAC_Setup $09,DAC_A6_Data
(1) 4774/    1A52 :                     		DAC_Setup $18,DAC_A7_Data
(1) 4775/    1A52 :                     		DAC_Setup $18,DAC_A8_Data
(1) 4776/    1A52 :                     		DAC_Setup $0C,DAC_A9_Data
(1) 4777/    1A52 :                     		DAC_Setup $0A,DAC_AA_Data
(1) 4778/    1A52 :                     		DAC_Setup $0D,DAC_AB_Data
(1) 4779/    1A52 :                     		DAC_Setup $06,DAC_AC_Data
(1) 4780/    1A52 :                     		DAC_Setup $10,DAC_AD_AE_Data
(1) 4781/    1A52 :                     		DAC_Setup $18,DAC_AD_AE_Data
(1) 4782/    1A52 :                     		DAC_Setup $09,DAC_AF_B0_Data
(1) 4783/    1A52 :                     		DAC_Setup $12,DAC_AF_B0_Data
(1) 4784/    1A52 :                     		DAC_Setup $18,DAC_B1_Data
(1) 4785/    1A52 :                     		DAC_Setup $16,DAC_B2_B3_Data
(1) 4786/    1A52 :                     		DAC_Setup $20,DAC_B2_B3_Data
(1) 4787/    1A52 :                     		DAC_Setup $0C,DAC_B4_C1_C2_C3_C4_Data
(1) 4788/    1A52 :                     		DAC_Setup $0C,DAC_B5_Data
(1) 4789/    1A52 :                     		DAC_Setup $0C,DAC_B6_Data
(1) 4790/    1A52 :                     		DAC_Setup $18,DAC_B7_Data
(1) 4791/    1A52 :                     		DAC_Setup $0C,DAC_B8_B9_Data
(1) 4792/    1A52 :                     		DAC_Setup $0C,DAC_B8_B9_Data
(1) 4793/    1A52 :                     		DAC_Setup $18,DAC_BA_Data
(1) 4794/    1A52 :                     		DAC_Setup $18,DAC_BB_Data
(1) 4795/    1A52 :                     		DAC_Setup $18,DAC_BC_Data
(1) 4796/    1A52 :                     		DAC_Setup $0C,DAC_BD_Data
(1) 4797/    1A52 :                     		DAC_Setup $0C,DAC_BE_Data
(1) 4798/    1A52 :                     		DAC_Setup $1C,DAC_BF_Data
(1) 4799/    1A52 :                     		DAC_Setup $0B,DAC_C0_Data
(1) 4800/    1A52 :                     		DAC_Setup $0F,DAC_B4_C1_C2_C3_C4_Data
(1) 4801/    1A52 :                     		DAC_Setup $11,DAC_B4_C1_C2_C3_C4_Data
(1) 4802/    1A52 :                     		DAC_Setup $12,DAC_B4_C1_C2_C3_C4_Data
(1) 4803/    1A52 :                     		DAC_Setup $0B,DAC_B4_C1_C2_C3_C4_Data
(1) 4804/    1A52 :                     	endif
(1) 4805/    1A52 :                     	if (use_s2_samples<>0)
(1) 4806/    1A52 :                     		DAC_Setup $17,DAC_C5_Data
(1) 4807/    1A52 :                     		DAC_Setup $01,DAC_C6_Data
(1) 4808/    1A52 :                     		DAC_Setup $06,DAC_C7_Data
(1) 4809/    1A52 :                     		DAC_Setup $08,DAC_C8_Data
(1) 4810/    1A52 :                     		DAC_Setup $1B,DAC_C9_CC_CD_CE_CF_Data
(1) 4811/    1A52 :                     		DAC_Setup $0A,DAC_CA_D0_D1_D2_Data
(1) 4812/    1A52 :                     		DAC_Setup $1B,DAC_CB_D3_D4_D5_Data
(1) 4813/    1A52 :                     		DAC_Setup $12,DAC_C9_CC_CD_CE_CF_Data
(1) 4814/    1A52 :                     		DAC_Setup $15,DAC_C9_CC_CD_CE_CF_Data
(1) 4815/    1A52 :                     		DAC_Setup $1C,DAC_C9_CC_CD_CE_CF_Data
(1) 4816/    1A52 :                     		DAC_Setup $1D,DAC_C9_CC_CD_CE_CF_Data
(1) 4817/    1A52 :                     		DAC_Setup $02,DAC_CA_D0_D1_D2_Data
(1) 4818/    1A52 :                     		DAC_Setup $05,DAC_CA_D0_D1_D2_Data
(1) 4819/    1A52 :                     		DAC_Setup $08,DAC_CA_D0_D1_D2_Data
(1) 4820/    1A52 :                     		DAC_Setup $08,DAC_CB_D3_D4_D5_Data
(1) 4821/    1A52 :                     		DAC_Setup $0B,DAC_CB_D3_D4_D5_Data
(1) 4822/    1A52 :                     		DAC_Setup $12,DAC_CB_D3_D4_D5_Data
(1) 4823/    1A52 :                     	endif
(1) 4824/    1A52 :                     	if (use_s3d_samples<>0)
(1) 4825/    1A52 :                     		DAC_Setup $01,DAC_D6_Data
(1) 4826/    1A52 :                     		DAC_Setup $12,DAC_D7_Data
(1) 4827/    1A52 :                     	endif
(1) 4828/    1A52 :                     	if (use_s3_samples<>0)
(1) 4829/    1A52 :                     		DAC_Setup $16,DAC_D8_D9_Data
(1) 4830/    1A52 :                     		DAC_Setup $20,DAC_D8_D9_Data
(1) 4831/    1A52 :                     	endif
(1) 4832/    1A52 :                     	endm
(1) 4833/    1A52 :                     
(1) 4834/    1A52 :                     declsong macro song
(1) 4835/    1A52 :                     	ifndef song_Ptr
(1) 4836/    1A52 :                     song_Ptr	label *
(1) 4837/    1A52 :                     	endif
(1) 4838/    1A52 :                     	dc.w	k68z80Pointer(song)
(1) 4839/    1A52 :                     	endm
(1) 4840/    1A52 :                     
(1) 4841/    1A52 :                     Music_Master_Table macro
(1) 4842/    1A52 :                     	ifndef MusicPointers
(1) 4843/    1A52 :                     MusicPointers label *
(1) 4844/    1A52 :                     	elseif (MusicPointers&$7FFF)<>((*)&$7FFF)
(1) 4845/    1A52 :                     		fatal "Inconsistent placement of Music_Master_Table macro on bank"
(1) 4846/    1A52 :                     	endif
(1) 4847/    1A52 :                     	declsong MusData_Default
(1) 4848/    1A52 :                     	ifndef zMusIDPtr__End
(1) 4849/    1A52 :                     zMusIDPtr__End label *
(1) 4850/    1A52 :                     	endif
(1) 4851/    1A52 :                     	endm
(1) 4852/    1A52 :                     ; ---------------------------------------------------------------------------
(1) 4853/    1A52 :                     
(1) 4854/    1A52 :                     ; ---------------------------------------------------------------------------
(1) 4855/    1A52 :                     ; ===========================================================================
(1) 4856/    1A52 :                     ; DAC Banks
(1) 4857/    1A52 :                     ; ===========================================================================
(1) 4858/    1A52 :                     
(1) 4859/    1A52 :                     ; ---------------------------------------------------------------------------
(1) 4860/    1A52 :                     ; DAC Bank 1
(1) 4861/    1A52 :                     ; ---------------------------------------------------------------------------
(1) 4862/    1A52 : (MACRO)             DacBank1:			startBank
(1) 4862/    1A52 : =$1A52                      set     soundBankDecl,*
(1) 4862/    1A52 :  (MACRO-2)                  align   $8000
(1) 4862/    1A52 :   (MACRO-3)                 cnop 0,$8000
(1) 4862/    1A52 :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4862/    1A52 : =$65AE              .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4862/    1A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    1A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    1E52 : =$61AE              .diff := .diff - 1024
(1) 4862/    1E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    1E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    2252 : =$5DAE              .diff := .diff - 1024
(1) 4862/    2252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    2252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    2652 : =$59AE              .diff := .diff - 1024
(1) 4862/    2652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    2652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    2A52 : =$55AE              .diff := .diff - 1024
(1) 4862/    2A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    2A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    2E52 : =$51AE              .diff := .diff - 1024
(1) 4862/    2E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    2E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    3252 : =$4DAE              .diff := .diff - 1024
(1) 4862/    3252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    3252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    3652 : =$49AE              .diff := .diff - 1024
(1) 4862/    3652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    3652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    3A52 : =$45AE              .diff := .diff - 1024
(1) 4862/    3A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    3A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    3E52 : =$41AE              .diff := .diff - 1024
(1) 4862/    3E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    3E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    4252 : =$3DAE              .diff := .diff - 1024
(1) 4862/    4252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    4252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    4652 : =$39AE              .diff := .diff - 1024
(1) 4862/    4652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    4652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    4A52 : =$35AE              .diff := .diff - 1024
(1) 4862/    4A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    4A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    4E52 : =$31AE              .diff := .diff - 1024
(1) 4862/    4E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    4E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    5252 : =$2DAE              .diff := .diff - 1024
(1) 4862/    5252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    5252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    5652 : =$29AE              .diff := .diff - 1024
(1) 4862/    5652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    5652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    5A52 : =$25AE              .diff := .diff - 1024
(1) 4862/    5A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    5A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    5E52 : =$21AE              .diff := .diff - 1024
(1) 4862/    5E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    5E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    6252 : =$1DAE              .diff := .diff - 1024
(1) 4862/    6252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    6252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    6652 : =$19AE              .diff := .diff - 1024
(1) 4862/    6652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    6652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    6A52 : =$15AE              .diff := .diff - 1024
(1) 4862/    6A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    6A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    6E52 : =$11AE              .diff := .diff - 1024
(1) 4862/    6E52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    6E52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    7252 : =$DAE               .diff := .diff - 1024
(1) 4862/    7252 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    7252 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    7652 : =$9AE               .diff := .diff - 1024
(1) 4862/    7652 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    7652 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    7A52 : =$5AE               .diff := .diff - 1024
(1) 4862/    7A52 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4862/    7A52 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    7E52 : =$1AE               .diff := .diff - 1024
(1) 4862/    7E52 :                     
(1) 4862/    7E52 : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4862/    8000 : =$8000              DacBank1 label *
(1) 4862/    8000 : =$8000                      set     soundBankStart,DacBank1
(1) 4862/    8000 : =$65AE                      set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4862/    8000 : =DacBank1                   set     soundBankName,"DacBank1"
(1) 4863/    8000 : (MACRO)             	DAC_Master_Table
(1) 4863/    8000 : =$8000              DACPointers label *
(1) 4863/    8000 :  (MACRO-2)                          DAC_Setup $04,DAC_81_Data
(1) 4863/    8000 : 04                          dc.b    $04
(1) 4863/    8001 : 7E07                        dc.w    DAC_81_DATA_Len
(1) 4863/    8003 : 8C84                        dc.w    DAC_81_DATA_Ptr
(1) 4863/    8005 :  (MACRO-2)                          DAC_Setup $0E,DAC_82_83_84_85_Data
(1) 4863/    8005 : 0E                          dc.b    $0E
(1) 4863/    8006 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4863/    8008 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4863/    800A :  (MACRO-2)                          DAC_Setup $14,DAC_82_83_84_85_Data
(1) 4863/    800A : 14                          dc.b    $14
(1) 4863/    800B : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4863/    800D : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4863/    800F :  (MACRO-2)                          DAC_Setup $1A,DAC_82_83_84_85_Data
(1) 4863/    800F : 1A                          dc.b    $1A
(1) 4863/    8010 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4863/    8012 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4863/    8014 :  (MACRO-2)                          DAC_Setup $20,DAC_82_83_84_85_Data
(1) 4863/    8014 : 20                          dc.b    $20
(1) 4863/    8015 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4863/    8017 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4863/    8019 :  (MACRO-2)                          DAC_Setup $04,DAC_86_Data
(1) 4863/    8019 : 04                          dc.b    $04
(1) 4863/    801A : CF02                        dc.w    DAC_86_DATA_Len
(1) 4863/    801C : BD81                        dc.w    DAC_86_DATA_Ptr
(1) 4863/    801E :  (MACRO-2)                          DAC_Setup $04,DAC_87_Data
(1) 4863/    801E : 04                          dc.b    $04
(1) 4863/    801F : 1C07                        dc.w    DAC_87_DATA_Len
(1) 4863/    8021 : 62B8                        dc.w    DAC_87_DATA_Ptr
(1) 4863/    8023 :  (MACRO-2)                          DAC_Setup $06,DAC_88_Data
(1) 4863/    8023 : 06                          dc.b    $06
(1) 4863/    8024 : 2712                        dc.w    DAC_88_DATA_Len
(1) 4863/    8026 : F49F                        dc.w    DAC_88_DATA_Ptr
(1) 4863/    8028 :  (MACRO-2)                          DAC_Setup $0A,DAC_89_Data
(1) 4863/    8028 : 0A                          dc.b    $0A
(1) 4863/    8029 : FD09                        dc.w    DAC_89_DATA_Len
(1) 4863/    802B : 6DC4                        dc.w    DAC_89_DATA_Ptr
(1) 4863/    802D :  (MACRO-2)                          DAC_Setup $14,DAC_8A_8B_Data
(1) 4863/    802D : 14                          dc.b    $14
(1) 4863/    802E : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4863/    8030 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4863/    8032 :  (MACRO-2)                          DAC_Setup $1B,DAC_8A_8B_Data
(1) 4863/    8032 : 1B                          dc.b    $1B
(1) 4863/    8033 : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4863/    8035 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4863/    8037 :  (MACRO-2)                          DAC_Setup $08,DAC_8C_Data
(1) 4863/    8037 : 08                          dc.b    $08
(1) 4863/    8038 : 6000                        dc.w    DAC_8C_DATA_Len
(1) 4863/    803A : 7BB3                        dc.w    DAC_8C_DATA_Ptr
(1) 4863/    803C :  (MACRO-2)                          DAC_Setup $0B,DAC_8D_8E_Data
(1) 4863/    803C : 0B                          dc.b    $0B
(1) 4863/    803D : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4863/    803F : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4863/    8041 :  (MACRO-2)                          DAC_Setup $11,DAC_8D_8E_Data
(1) 4863/    8041 : 11                          dc.b    $11
(1) 4863/    8042 : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4863/    8044 : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4863/    8046 :  (MACRO-2)                          DAC_Setup $08,DAC_8F_Data
(1) 4863/    8046 : 08                          dc.b    $08
(1) 4863/    8047 : EF04                        dc.w    DAC_8F_DATA_Len
(1) 4863/    8049 : 7EBF                        dc.w    DAC_8F_DATA_Ptr
(1) 4863/    804B :  (MACRO-2)                          DAC_Setup $03,DAC_90_91_92_93_Data
(1) 4863/    804B : 03                          dc.b    $03
(1) 4863/    804C : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4863/    804E : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4863/    8050 :  (MACRO-2)                          DAC_Setup $07,DAC_90_91_92_93_Data
(1) 4863/    8050 : 07                          dc.b    $07
(1) 4863/    8051 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4863/    8053 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4863/    8055 :  (MACRO-2)                          DAC_Setup $0A,DAC_90_91_92_93_Data
(1) 4863/    8055 : 0A                          dc.b    $0A
(1) 4863/    8056 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4863/    8058 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4863/    805A :  (MACRO-2)                          DAC_Setup $0E,DAC_90_91_92_93_Data
(1) 4863/    805A : 0E                          dc.b    $0E
(1) 4863/    805B : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4863/    805D : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4863/    805F :  (MACRO-2)                          DAC_Setup $06,DAC_94_95_96_97_Data
(1) 4863/    805F : 06                          dc.b    $06
(1) 4863/    8060 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4863/    8062 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4863/    8064 :  (MACRO-2)                          DAC_Setup $0A,DAC_94_95_96_97_Data
(1) 4863/    8064 : 0A                          dc.b    $0A
(1) 4863/    8065 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4863/    8067 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4863/    8069 :  (MACRO-2)                          DAC_Setup $0D,DAC_94_95_96_97_Data
(1) 4863/    8069 : 0D                          dc.b    $0D
(1) 4863/    806A : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4863/    806C : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4863/    806E :  (MACRO-2)                          DAC_Setup $12,DAC_94_95_96_97_Data
(1) 4863/    806E : 12                          dc.b    $12
(1) 4863/    806F : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4863/    8071 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4863/    8073 :  (MACRO-2)                          DAC_Setup $0B,DAC_98_99_9A_Data
(1) 4863/    8073 : 0B                          dc.b    $0B
(1) 4863/    8074 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4863/    8076 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4863/    8078 :  (MACRO-2)                          DAC_Setup $13,DAC_98_99_9A_Data
(1) 4863/    8078 : 13                          dc.b    $13
(1) 4863/    8079 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4863/    807B : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4863/    807D :  (MACRO-2)                          DAC_Setup $16,DAC_98_99_9A_Data
(1) 4863/    807D : 16                          dc.b    $16
(1) 4863/    807E : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4863/    8080 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4863/    8082 :  (MACRO-2)                          DAC_Setup $0C,DAC_9B_Data
(1) 4863/    8082 : 0C                          dc.b    $0C
(1) 4863/    8083 : 2006                        dc.w    DAC_9B_DATA_Len
(1) 4863/    8085 : D2DA                        dc.w    DAC_9B_DATA_Ptr
(1) 4863/    8087 :  (MACRO-2)                          DAC_Setup $0A,DAC_9C_Data
(1) 4863/    8087 : 0A                          dc.b    $0A
(1) 4863/    8088 : 3203                        dc.w    DAC_9C_DATA_Len
(1) 4863/    808A : BD81                        dc.w    DAC_9C_DATA_Ptr
(1) 4863/    808C :  (MACRO-2)                          DAC_Setup $18,DAC_9D_Data
(1) 4863/    808C : 18                          dc.b    $18
(1) 4863/    808D : 4902                        dc.w    DAC_9D_DATA_Len
(1) 4863/    808F : EF84                        dc.w    DAC_9D_DATA_Ptr
(1) 4863/    8091 :  (MACRO-2)                          DAC_Setup $18,DAC_9E_Data
(1) 4863/    8091 : 18                          dc.b    $18
(1) 4863/    8092 : 8002                        dc.w    DAC_9E_DATA_Len
(1) 4863/    8094 : 3887                        dc.w    DAC_9E_DATA_Ptr
(1) 4863/    8096 :  (MACRO-2)                          DAC_Setup $0C,DAC_9F_Data
(1) 4863/    8096 : 0C                          dc.b    $0C
(1) 4863/    8097 : A512                        dc.w    DAC_9F_DATA_Len
(1) 4863/    8099 : B889                        dc.w    DAC_9F_DATA_Ptr
(1) 4863/    809B :  (MACRO-2)                          DAC_Setup $0C,DAC_A0_Data
(1) 4863/    809B : 0C                          dc.b    $0C
(1) 4863/    809C : BA0D                        dc.w    DAC_A0_DATA_Len
(1) 4863/    809E : 5D9C                        dc.w    DAC_A0_DATA_Ptr
(1) 4863/    80A0 :  (MACRO-2)                          DAC_Setup $0A,DAC_A1_Data
(1) 4863/    80A0 : 0A                          dc.b    $0A
(1) 4863/    80A1 : A80B                        dc.w    DAC_A1_DATA_Len
(1) 4863/    80A3 : 17AA                        dc.w    DAC_A1_DATA_Ptr
(1) 4863/    80A5 :  (MACRO-2)                          DAC_Setup $0A,DAC_A2_Data
(1) 4863/    80A5 : 0A                          dc.b    $0A
(1) 4863/    80A6 : 580D                        dc.w    DAC_A2_DATA_Len
(1) 4863/    80A8 : BFB5                        dc.w    DAC_A2_DATA_Ptr
(1) 4863/    80AA :  (MACRO-2)                          DAC_Setup $18,DAC_A3_Data
(1) 4863/    80AA : 18                          dc.b    $18
(1) 4863/    80AB : 9E02                        dc.w    DAC_A3_DATA_Len
(1) 4863/    80AD : 17C3                        dc.w    DAC_A3_DATA_Ptr
(1) 4863/    80AF :  (MACRO-2)                          DAC_Setup $18,DAC_A4_Data
(1) 4863/    80AF : 18                          dc.b    $18
(1) 4863/    80B0 : 8A02                        dc.w    DAC_A4_DATA_Len
(1) 4863/    80B2 : B5C5                        dc.w    DAC_A4_DATA_Ptr
(1) 4863/    80B4 :  (MACRO-2)                          DAC_Setup $0C,DAC_A5_Data
(1) 4863/    80B4 : 0C                          dc.b    $0C
(1) 4863/    80B5 : 600C                        dc.w    DAC_A5_DATA_Len
(1) 4863/    80B7 : 3FC8                        dc.w    DAC_A5_DATA_Ptr
(1) 4863/    80B9 :  (MACRO-2)                          DAC_Setup $09,DAC_A6_Data
(1) 4863/    80B9 : 09                          dc.b    $09
(1) 4863/    80BA : D606                        dc.w    DAC_A6_DATA_Len
(1) 4863/    80BC : 9FD4                        dc.w    DAC_A6_DATA_Ptr
(1) 4863/    80BE :  (MACRO-2)                          DAC_Setup $18,DAC_A7_Data
(1) 4863/    80BE : 18                          dc.b    $18
(1) 4863/    80BF : F206                        dc.w    DAC_A7_DATA_Len
(1) 4863/    80C1 : 75DB                        dc.w    DAC_A7_DATA_Ptr
(1) 4863/    80C3 :  (MACRO-2)                          DAC_Setup $18,DAC_A8_Data
(1) 4863/    80C3 : 18                          dc.b    $18
(1) 4863/    80C4 : 7A03                        dc.w    DAC_A8_DATA_Len
(1) 4863/    80C6 : 67E2                        dc.w    DAC_A8_DATA_Ptr
(1) 4863/    80C8 :  (MACRO-2)                          DAC_Setup $0C,DAC_A9_Data
(1) 4863/    80C8 : 0C                          dc.b    $0C
(1) 4863/    80C9 : 4F0A                        dc.w    DAC_A9_DATA_Len
(1) 4863/    80CB : E1E5                        dc.w    DAC_A9_DATA_Ptr
(1) 4863/    80CD :  (MACRO-2)                          DAC_Setup $0A,DAC_AA_Data
(1) 4863/    80CD : 0A                          dc.b    $0A
(1) 4863/    80CE : 8E06                        dc.w    DAC_AA_DATA_Len
(1) 4863/    80D0 : 30F0                        dc.w    DAC_AA_DATA_Ptr
(1) 4863/    80D2 :  (MACRO-2)                          DAC_Setup $0D,DAC_AB_Data
(1) 4863/    80D2 : 0D                          dc.b    $0D
(1) 4863/    80D3 : 0409                        dc.w    DAC_AB_DATA_Len
(1) 4863/    80D5 : BD81                        dc.w    DAC_AB_DATA_Ptr
(1) 4863/    80D7 :  (MACRO-2)                          DAC_Setup $06,DAC_AC_Data
(1) 4863/    80D7 : 06                          dc.b    $06
(1) 4863/    80D8 : 8105                        dc.w    DAC_AC_DATA_Len
(1) 4863/    80DA : C18A                        dc.w    DAC_AC_DATA_Ptr
(1) 4863/    80DC :  (MACRO-2)                          DAC_Setup $10,DAC_AD_AE_Data
(1) 4863/    80DC : 10                          dc.b    $10
(1) 4863/    80DD : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4863/    80DF : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4863/    80E1 :  (MACRO-2)                          DAC_Setup $18,DAC_AD_AE_Data
(1) 4863/    80E1 : 18                          dc.b    $18
(1) 4863/    80E2 : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4863/    80E4 : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4863/    80E6 :  (MACRO-2)                          DAC_Setup $09,DAC_AF_B0_Data
(1) 4863/    80E6 : 09                          dc.b    $09
(1) 4863/    80E7 : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4863/    80E9 : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4863/    80EB :  (MACRO-2)                          DAC_Setup $12,DAC_AF_B0_Data
(1) 4863/    80EB : 12                          dc.b    $12
(1) 4863/    80EC : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4863/    80EE : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4863/    80F0 :  (MACRO-2)                          DAC_Setup $18,DAC_B1_Data
(1) 4863/    80F0 : 18                          dc.b    $18
(1) 4863/    80F1 : 850B                        dc.w    DAC_B1_DATA_Len
(1) 4863/    80F3 : 6A95                        dc.w    DAC_B1_DATA_Ptr
(1) 4863/    80F5 :  (MACRO-2)                          DAC_Setup $16,DAC_B2_B3_Data
(1) 4863/    80F5 : 16                          dc.b    $16
(1) 4863/    80F6 : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4863/    80F8 : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4863/    80FA :  (MACRO-2)                          DAC_Setup $20,DAC_B2_B3_Data
(1) 4863/    80FA : 20                          dc.b    $20
(1) 4863/    80FB : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4863/    80FD : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4863/    80FF :  (MACRO-2)                          DAC_Setup $0C,DAC_B4_C1_C2_C3_C4_Data
(1) 4863/    80FF : 0C                          dc.b    $0C
(1) 4863/    8100 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4863/    8102 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4863/    8104 :  (MACRO-2)                          DAC_Setup $0C,DAC_B5_Data
(1) 4863/    8104 : 0C                          dc.b    $0C
(1) 4863/    8105 : 4006                        dc.w    DAC_B5_DATA_Len
(1) 4863/    8107 : ECA6                        dc.w    DAC_B5_DATA_Ptr
(1) 4863/    8109 :  (MACRO-2)                          DAC_Setup $0C,DAC_B6_Data
(1) 4863/    8109 : 0C                          dc.b    $0C
(1) 4863/    810A : 5505                        dc.w    DAC_B6_DATA_Len
(1) 4863/    810C : 2CAD                        dc.w    DAC_B6_DATA_Ptr
(1) 4863/    810E :  (MACRO-2)                          DAC_Setup $18,DAC_B7_Data
(1) 4863/    810E : 18                          dc.b    $18
(1) 4863/    810F : B104                        dc.w    DAC_B7_DATA_Len
(1) 4863/    8111 : 81B2                        dc.w    DAC_B7_DATA_Ptr
(1) 4863/    8113 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4863/    8113 : 0C                          dc.b    $0C
(1) 4863/    8114 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4863/    8116 : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4863/    8118 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4863/    8118 : 0C                          dc.b    $0C
(1) 4863/    8119 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4863/    811B : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4863/    811D :  (MACRO-2)                          DAC_Setup $18,DAC_BA_Data
(1) 4863/    811D : 18                          dc.b    $18
(1) 4863/    811E : B304                        dc.w    DAC_BA_DATA_Len
(1) 4863/    8120 : 6CBD                        dc.w    DAC_BA_DATA_Ptr
(1) 4863/    8122 :  (MACRO-2)                          DAC_Setup $18,DAC_BB_Data
(1) 4863/    8122 : 18                          dc.b    $18
(1) 4863/    8123 : B601                        dc.w    DAC_BB_DATA_Len
(1) 4863/    8125 : 1FC2                        dc.w    DAC_BB_DATA_Ptr
(1) 4863/    8127 :  (MACRO-2)                          DAC_Setup $18,DAC_BC_Data
(1) 4863/    8127 : 18                          dc.b    $18
(1) 4863/    8128 : B708                        dc.w    DAC_BC_DATA_Len
(1) 4863/    812A : D5C3                        dc.w    DAC_BC_DATA_Ptr
(1) 4863/    812C :  (MACRO-2)                          DAC_Setup $0C,DAC_BD_Data
(1) 4863/    812C : 0C                          dc.b    $0C
(1) 4863/    812D : BE05                        dc.w    DAC_BD_DATA_Len
(1) 4863/    812F : 8CCC                        dc.w    DAC_BD_DATA_Ptr
(1) 4863/    8131 :  (MACRO-2)                          DAC_Setup $0C,DAC_BE_Data
(1) 4863/    8131 : 0C                          dc.b    $0C
(1) 4863/    8132 : 1007                        dc.w    DAC_BE_DATA_Len
(1) 4863/    8134 : 4AD2                        dc.w    DAC_BE_DATA_Ptr
(1) 4863/    8136 :  (MACRO-2)                          DAC_Setup $1C,DAC_BF_Data
(1) 4863/    8136 : 1C                          dc.b    $1C
(1) 4863/    8137 : DC01                        dc.w    DAC_BF_DATA_Len
(1) 4863/    8139 : 5AD9                        dc.w    DAC_BF_DATA_Ptr
(1) 4863/    813B :  (MACRO-2)                          DAC_Setup $0B,DAC_C0_Data
(1) 4863/    813B : 0B                          dc.b    $0B
(1) 4863/    813C : 3608                        dc.w    DAC_C0_DATA_Len
(1) 4863/    813E : 36DB                        dc.w    DAC_C0_DATA_Ptr
(1) 4863/    8140 :  (MACRO-2)                          DAC_Setup $0F,DAC_B4_C1_C2_C3_C4_Data
(1) 4863/    8140 : 0F                          dc.b    $0F
(1) 4863/    8141 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4863/    8143 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4863/    8145 :  (MACRO-2)                          DAC_Setup $11,DAC_B4_C1_C2_C3_C4_Data
(1) 4863/    8145 : 11                          dc.b    $11
(1) 4863/    8146 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4863/    8148 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4863/    814A :  (MACRO-2)                          DAC_Setup $12,DAC_B4_C1_C2_C3_C4_Data
(1) 4863/    814A : 12                          dc.b    $12
(1) 4863/    814B : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4863/    814D : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4863/    814F :  (MACRO-2)                          DAC_Setup $0B,DAC_B4_C1_C2_C3_C4_Data
(1) 4863/    814F : 0B                          dc.b    $0B
(1) 4863/    8150 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4863/    8152 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4863/    8154 :  (MACRO-2)                          DAC_Setup $17,DAC_C5_Data
(1) 4863/    8154 : 17                          dc.b    $17
(1) 4863/    8155 : 9402                        dc.w    DAC_C5_DATA_Len
(1) 4863/    8157 : BD81                        dc.w    DAC_C5_DATA_Ptr
(1) 4863/    8159 :  (MACRO-2)                          DAC_Setup $01,DAC_C6_Data
(1) 4863/    8159 : 01                          dc.b    $01
(1) 4863/    815A : 2307                        dc.w    DAC_C6_DATA_Len
(1) 4863/    815C : 5184                        dc.w    DAC_C6_DATA_Ptr
(1) 4863/    815E :  (MACRO-2)                          DAC_Setup $06,DAC_C7_Data
(1) 4863/    815E : 06                          dc.b    $06
(1) 4863/    815F : 7605                        dc.w    DAC_C7_DATA_Len
(1) 4863/    8161 : 748B                        dc.w    DAC_C7_DATA_Ptr
(1) 4863/    8163 :  (MACRO-2)                          DAC_Setup $08,DAC_C8_Data
(1) 4863/    8163 : 08                          dc.b    $08
(1) 4863/    8164 : 4C07                        dc.w    DAC_C8_DATA_Len
(1) 4863/    8166 : EA90                        dc.w    DAC_C8_DATA_Ptr
(1) 4863/    8168 :  (MACRO-2)                          DAC_Setup $1B,DAC_C9_CC_CD_CE_CF_Data
(1) 4863/    8168 : 1B                          dc.b    $1B
(1) 4863/    8169 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4863/    816B : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4863/    816D :  (MACRO-2)                          DAC_Setup $0A,DAC_CA_D0_D1_D2_Data
(1) 4863/    816D : 0A                          dc.b    $0A
(1) 4863/    816E : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4863/    8170 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4863/    8172 :  (MACRO-2)                          DAC_Setup $1B,DAC_CB_D3_D4_D5_Data
(1) 4863/    8172 : 1B                          dc.b    $1B
(1) 4863/    8173 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4863/    8175 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4863/    8177 :  (MACRO-2)                          DAC_Setup $12,DAC_C9_CC_CD_CE_CF_Data
(1) 4863/    8177 : 12                          dc.b    $12
(1) 4863/    8178 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4863/    817A : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4863/    817C :  (MACRO-2)                          DAC_Setup $15,DAC_C9_CC_CD_CE_CF_Data
(1) 4863/    817C : 15                          dc.b    $15
(1) 4863/    817D : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4863/    817F : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4863/    8181 :  (MACRO-2)                          DAC_Setup $1C,DAC_C9_CC_CD_CE_CF_Data
(1) 4863/    8181 : 1C                          dc.b    $1C
(1) 4863/    8182 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4863/    8184 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4863/    8186 :  (MACRO-2)                          DAC_Setup $1D,DAC_C9_CC_CD_CE_CF_Data
(1) 4863/    8186 : 1D                          dc.b    $1D
(1) 4863/    8187 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4863/    8189 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4863/    818B :  (MACRO-2)                          DAC_Setup $02,DAC_CA_D0_D1_D2_Data
(1) 4863/    818B : 02                          dc.b    $02
(1) 4863/    818C : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4863/    818E : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4863/    8190 :  (MACRO-2)                          DAC_Setup $05,DAC_CA_D0_D1_D2_Data
(1) 4863/    8190 : 05                          dc.b    $05
(1) 4863/    8191 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4863/    8193 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4863/    8195 :  (MACRO-2)                          DAC_Setup $08,DAC_CA_D0_D1_D2_Data
(1) 4863/    8195 : 08                          dc.b    $08
(1) 4863/    8196 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4863/    8198 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4863/    819A :  (MACRO-2)                          DAC_Setup $08,DAC_CB_D3_D4_D5_Data
(1) 4863/    819A : 08                          dc.b    $08
(1) 4863/    819B : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4863/    819D : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4863/    819F :  (MACRO-2)                          DAC_Setup $0B,DAC_CB_D3_D4_D5_Data
(1) 4863/    819F : 0B                          dc.b    $0B
(1) 4863/    81A0 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4863/    81A2 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4863/    81A4 :  (MACRO-2)                          DAC_Setup $12,DAC_CB_D3_D4_D5_Data
(1) 4863/    81A4 : 12                          dc.b    $12
(1) 4863/    81A5 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4863/    81A7 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4863/    81A9 :  (MACRO-2)                          DAC_Setup $01,DAC_D6_Data
(1) 4863/    81A9 : 01                          dc.b    $01
(1) 4863/    81AA : 7E15                        dc.w    DAC_D6_DATA_Len
(1) 4863/    81AC : BDB0                        dc.w    DAC_D6_DATA_Ptr
(1) 4863/    81AE :  (MACRO-2)                          DAC_Setup $12,DAC_D7_Data
(1) 4863/    81AE : 12                          dc.b    $12
(1) 4863/    81AF : 4F0A                        dc.w    DAC_D7_DATA_Len
(1) 4863/    81B1 : 3BC6                        dc.w    DAC_D7_DATA_Ptr
(1) 4863/    81B3 :  (MACRO-2)                          DAC_Setup $16,DAC_D8_D9_Data
(1) 4863/    81B3 : 16                          dc.b    $16
(1) 4863/    81B4 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4863/    81B6 : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4863/    81B8 :  (MACRO-2)                          DAC_Setup $20,DAC_D8_D9_Data
(1) 4863/    81B8 : 20                          dc.b    $20
(1) 4863/    81B9 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4863/    81BB : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4864/    81BD :                     
(1) 4866/    81BD : (MACRO)             DAC_86_Data:			DACBINCLUDE "Sound/DAC/86.bin"
(1) 4866/    81BD : =$81BD              DAC_86_Data label *
(1) 4866/    81BD :                             BINCLUDE "Sound/DAC/86.bin"
(1) 4866/    848C : =$CF02              DAC_86_Data_Len  = little_endian(*-DAC_86_Data)
(1) 4866/    848C : =$BD81              DAC_86_Data_Ptr  = k68z80Pointer(DAC_86_Data-soundBankStart)
(1) 4866/    848C : =$8000              DAC_86_Data_Bank = soundBankStart
(1) 4867/    848C : (MACRO)             DAC_81_Data:			DACBINCLUDE "Sound/DAC/81.bin"
(1) 4867/    848C : =$848C              DAC_81_Data label *
(1) 4867/    848C :                             BINCLUDE "Sound/DAC/81.bin"
(1) 4867/    8C0A : =$7E07              DAC_81_Data_Len  = little_endian(*-DAC_81_Data)
(1) 4867/    8C0A : =$8C84              DAC_81_Data_Ptr  = k68z80Pointer(DAC_81_Data-soundBankStart)
(1) 4867/    8C0A : =$8000              DAC_81_Data_Bank = soundBankStart
(1) 4868/    8C0A : (MACRO)             DAC_82_83_84_85_Data:	DACBINCLUDE "Sound/DAC/82-85.bin"
(1) 4868/    8C0A : =$8C0A              DAC_82_83_84_85_Data label *
(1) 4868/    8C0A :                             BINCLUDE "Sound/DAC/82-85.bin"
(1) 4868/    9077 : =$6D04              DAC_82_83_84_85_Data_Len  = little_endian(*-DAC_82_83_84_85_Data)
(1) 4868/    9077 : =$A8C               DAC_82_83_84_85_Data_Ptr  = k68z80Pointer(DAC_82_83_84_85_Data-soundBankStart)
(1) 4868/    9077 : =$8000              DAC_82_83_84_85_Data_Bank = soundBankStart
(1) 4869/    9077 : (MACRO)             DAC_94_95_96_97_Data:	DACBINCLUDE "Sound/DAC/94-97.bin"
(1) 4869/    9077 : =$9077              DAC_94_95_96_97_Data label *
(1) 4869/    9077 :                             BINCLUDE "Sound/DAC/94-97.bin"
(1) 4869/    99D2 : =$5B09              DAC_94_95_96_97_Data_Len  = little_endian(*-DAC_94_95_96_97_Data)
(1) 4869/    99D2 : =$7790              DAC_94_95_96_97_Data_Ptr  = k68z80Pointer(DAC_94_95_96_97_Data-soundBankStart)
(1) 4869/    99D2 : =$8000              DAC_94_95_96_97_Data_Bank = soundBankStart
(1) 4870/    99D2 : (MACRO)             DAC_90_91_92_93_Data:	DACBINCLUDE "Sound/DAC/90-93.bin"
(1) 4870/    99D2 : =$99D2              DAC_90_91_92_93_Data label *
(1) 4870/    99D2 :                             BINCLUDE "Sound/DAC/90-93.bin"
(1) 4870/    9FF4 : =$2206              DAC_90_91_92_93_Data_Len  = little_endian(*-DAC_90_91_92_93_Data)
(1) 4870/    9FF4 : =$D299              DAC_90_91_92_93_Data_Ptr  = k68z80Pointer(DAC_90_91_92_93_Data-soundBankStart)
(1) 4870/    9FF4 : =$8000              DAC_90_91_92_93_Data_Bank = soundBankStart
(1) 4871/    9FF4 : (MACRO)             DAC_88_Data:			DACBINCLUDE "Sound/DAC/88.bin"
(1) 4871/    9FF4 : =$9FF4              DAC_88_Data label *
(1) 4871/    9FF4 :                             BINCLUDE "Sound/DAC/88.bin"
(1) 4871/    B21B : =$2712              DAC_88_Data_Len  = little_endian(*-DAC_88_Data)
(1) 4871/    B21B : =$F49F              DAC_88_Data_Ptr  = k68z80Pointer(DAC_88_Data-soundBankStart)
(1) 4871/    B21B : =$8000              DAC_88_Data_Bank = soundBankStart
(1) 4872/    B21B : (MACRO)             DAC_8A_8B_Data:			DACBINCLUDE "Sound/DAC/8A-8B.bin"
(1) 4872/    B21B : =$B21B              DAC_8A_8B_Data label *
(1) 4872/    B21B :                             BINCLUDE "Sound/DAC/8A-8B.bin"
(1) 4872/    B37B : =$6001              DAC_8A_8B_Data_Len  = little_endian(*-DAC_8A_8B_Data)
(1) 4872/    B37B : =$1BB2              DAC_8A_8B_Data_Ptr  = k68z80Pointer(DAC_8A_8B_Data-soundBankStart)
(1) 4872/    B37B : =$8000              DAC_8A_8B_Data_Bank = soundBankStart
(1) 4873/    B37B : (MACRO)             DAC_8C_Data:			DACBINCLUDE "Sound/DAC/8C.bin"
(1) 4873/    B37B : =$B37B              DAC_8C_Data label *
(1) 4873/    B37B :                             BINCLUDE "Sound/DAC/8C.bin"
(1) 4873/    B3DB : =$6000              DAC_8C_Data_Len  = little_endian(*-DAC_8C_Data)
(1) 4873/    B3DB : =$7BB3              DAC_8C_Data_Ptr  = k68z80Pointer(DAC_8C_Data-soundBankStart)
(1) 4873/    B3DB : =$8000              DAC_8C_Data_Bank = soundBankStart
(1) 4874/    B3DB : (MACRO)             DAC_8D_8E_Data:			DACBINCLUDE "Sound/DAC/8D-8E.bin"
(1) 4874/    B3DB : =$B3DB              DAC_8D_8E_Data label *
(1) 4874/    B3DB :                             BINCLUDE "Sound/DAC/8D-8E.bin"
(1) 4874/    B862 : =$8704              DAC_8D_8E_Data_Len  = little_endian(*-DAC_8D_8E_Data)
(1) 4874/    B862 : =$DBB3              DAC_8D_8E_Data_Ptr  = k68z80Pointer(DAC_8D_8E_Data-soundBankStart)
(1) 4874/    B862 : =$8000              DAC_8D_8E_Data_Bank = soundBankStart
(1) 4875/    B862 : (MACRO)             DAC_87_Data:			DACBINCLUDE "Sound/DAC/87.bin"
(1) 4875/    B862 : =$B862              DAC_87_Data label *
(1) 4875/    B862 :                             BINCLUDE "Sound/DAC/87.bin"
(1) 4875/    BF7E : =$1C07              DAC_87_Data_Len  = little_endian(*-DAC_87_Data)
(1) 4875/    BF7E : =$62B8              DAC_87_Data_Ptr  = k68z80Pointer(DAC_87_Data-soundBankStart)
(1) 4875/    BF7E : =$8000              DAC_87_Data_Bank = soundBankStart
(1) 4876/    BF7E : (MACRO)             DAC_8F_Data:			DACBINCLUDE "Sound/DAC/8F.bin"
(1) 4876/    BF7E : =$BF7E              DAC_8F_Data label *
(1) 4876/    BF7E :                             BINCLUDE "Sound/DAC/8F.bin"
(1) 4876/    C46D : =$EF04              DAC_8F_Data_Len  = little_endian(*-DAC_8F_Data)
(1) 4876/    C46D : =$7EBF              DAC_8F_Data_Ptr  = k68z80Pointer(DAC_8F_Data-soundBankStart)
(1) 4876/    C46D : =$8000              DAC_8F_Data_Bank = soundBankStart
(1) 4877/    C46D : (MACRO)             DAC_89_Data:			DACBINCLUDE "Sound/DAC/89.bin"
(1) 4877/    C46D : =$C46D              DAC_89_Data label *
(1) 4877/    C46D :                             BINCLUDE "Sound/DAC/89.bin"
(1) 4877/    CE6A : =$FD09              DAC_89_Data_Len  = little_endian(*-DAC_89_Data)
(1) 4877/    CE6A : =$6DC4              DAC_89_Data_Ptr  = k68z80Pointer(DAC_89_Data-soundBankStart)
(1) 4877/    CE6A : =$8000              DAC_89_Data_Bank = soundBankStart
(1) 4878/    CE6A : (MACRO)             DAC_98_99_9A_Data:		DACBINCLUDE "Sound/DAC/98-9A.bin"
(1) 4878/    CE6A : =$CE6A              DAC_98_99_9A_Data label *
(1) 4878/    CE6A :                             BINCLUDE "Sound/DAC/98-9A.bin"
(1) 4878/    DAD2 : =$680C              DAC_98_99_9A_Data_Len  = little_endian(*-DAC_98_99_9A_Data)
(1) 4878/    DAD2 : =$6ACE              DAC_98_99_9A_Data_Ptr  = k68z80Pointer(DAC_98_99_9A_Data-soundBankStart)
(1) 4878/    DAD2 : =$8000              DAC_98_99_9A_Data_Bank = soundBankStart
(1) 4879/    DAD2 : (MACRO)             DAC_9B_Data:			DACBINCLUDE "Sound/DAC/9B.bin"
(1) 4879/    DAD2 : =$DAD2              DAC_9B_Data label *
(1) 4879/    DAD2 :                             BINCLUDE "Sound/DAC/9B.bin"
(1) 4879/    E0F2 : =$2006              DAC_9B_Data_Len  = little_endian(*-DAC_9B_Data)
(1) 4879/    E0F2 : =$D2DA              DAC_9B_Data_Ptr  = k68z80Pointer(DAC_9B_Data-soundBankStart)
(1) 4879/    E0F2 : =$8000              DAC_9B_Data_Bank = soundBankStart
(1) 4881/    E0F2 :                     
(1) 4883/    E0F2 : (MACRO)             DAC_B2_B3_Data:			DACBINCLUDE "Sound/DAC/B2-B3.bin"
(1) 4883/    E0F2 : =$E0F2              DAC_B2_B3_Data label *
(1) 4883/    E0F2 :                             BINCLUDE "Sound/DAC/B2-B3.bin"
(1) 4883/    E93A : =$4808              DAC_B2_B3_Data_Len  = little_endian(*-DAC_B2_B3_Data)
(1) 4883/    E93A : =$F2E0              DAC_B2_B3_Data_Ptr  = k68z80Pointer(DAC_B2_B3_Data-soundBankStart)
(1) 4883/    E93A : =$8000              DAC_B2_B3_Data_Bank = soundBankStart
(1) 4884/    E93A :                     
(1) 4886/    E93A : (MACRO)             DAC_D8_D9_Data:			DACBINCLUDE "Sound/DAC/D8-D9.bin"
(1) 4886/    E93A : =$E93A              DAC_D8_D9_Data label *
(1) 4886/    E93A :                             BINCLUDE "Sound/DAC/D8-D9.bin"
(1) 4886/    F182 : =$4808              DAC_D8_D9_Data_Len  = little_endian(*-DAC_D8_D9_Data)
(1) 4886/    F182 : =$3AE9              DAC_D8_D9_Data_Ptr  = k68z80Pointer(DAC_D8_D9_Data-soundBankStart)
(1) 4886/    F182 : =$8000              DAC_D8_D9_Data_Bank = soundBankStart
(1) 4888/    F182 :                     
(1) 4890/    F182 :                     
(1) 4891/    F182 : (MACRO)             	finishBank
soundBank DacBank1 has $E7E bytes free at end, needed $65AE bytes padding at start.
(1) 4891/    F182 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4892/    F182 :                     
(1) 4893/    F182 :                     ; ---------------------------------------------------------------------------
(1) 4894/    F182 :                     ; Dac Bank 2
(1) 4895/    F182 :                     ; ---------------------------------------------------------------------------
(1) 4896/    F182 : (MACRO)             DacBank2:			startBank
(1) 4896/    F182 : =$F182                      set     soundBankDecl,*
(1) 4896/    F182 :  (MACRO-2)                  align   $8000
(1) 4896/    F182 :   (MACRO-3)                 cnop 0,$8000
(1) 4896/    F182 :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4896/    F182 : =$E7E               .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4896/    F182 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4896/    F182 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4896/    F582 : =$A7E               .diff := .diff - 1024
(1) 4896/    F582 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4896/    F582 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4896/    F982 : =$67E               .diff := .diff - 1024
(1) 4896/    F982 :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4896/    F982 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4896/    FD82 : =$27E               .diff := .diff - 1024
(1) 4896/    FD82 :                     
(1) 4896/    FD82 : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF             
(1) 4896/   10000 : =$10000             DacBank2 label *
(1) 4896/   10000 : =$10000                     set     soundBankStart,DacBank2
(1) 4896/   10000 : =$E7E                       set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4896/   10000 : =DacBank2                   set     soundBankName,"DacBank2"
(1) 4897/   10000 : (MACRO)             	DAC_Master_Table
(1) 4897/   10000 :  (MACRO-2)                          DAC_Setup $04,DAC_81_Data
(1) 4897/   10000 : 04                          dc.b    $04
(1) 4897/   10001 : 7E07                        dc.w    DAC_81_DATA_Len
(1) 4897/   10003 : 8C84                        dc.w    DAC_81_DATA_Ptr
(1) 4897/   10005 :  (MACRO-2)                          DAC_Setup $0E,DAC_82_83_84_85_Data
(1) 4897/   10005 : 0E                          dc.b    $0E
(1) 4897/   10006 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4897/   10008 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4897/   1000A :  (MACRO-2)                          DAC_Setup $14,DAC_82_83_84_85_Data
(1) 4897/   1000A : 14                          dc.b    $14
(1) 4897/   1000B : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4897/   1000D : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4897/   1000F :  (MACRO-2)                          DAC_Setup $1A,DAC_82_83_84_85_Data
(1) 4897/   1000F : 1A                          dc.b    $1A
(1) 4897/   10010 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4897/   10012 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4897/   10014 :  (MACRO-2)                          DAC_Setup $20,DAC_82_83_84_85_Data
(1) 4897/   10014 : 20                          dc.b    $20
(1) 4897/   10015 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4897/   10017 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4897/   10019 :  (MACRO-2)                          DAC_Setup $04,DAC_86_Data
(1) 4897/   10019 : 04                          dc.b    $04
(1) 4897/   1001A : CF02                        dc.w    DAC_86_DATA_Len
(1) 4897/   1001C : BD81                        dc.w    DAC_86_DATA_Ptr
(1) 4897/   1001E :  (MACRO-2)                          DAC_Setup $04,DAC_87_Data
(1) 4897/   1001E : 04                          dc.b    $04
(1) 4897/   1001F : 1C07                        dc.w    DAC_87_DATA_Len
(1) 4897/   10021 : 62B8                        dc.w    DAC_87_DATA_Ptr
(1) 4897/   10023 :  (MACRO-2)                          DAC_Setup $06,DAC_88_Data
(1) 4897/   10023 : 06                          dc.b    $06
(1) 4897/   10024 : 2712                        dc.w    DAC_88_DATA_Len
(1) 4897/   10026 : F49F                        dc.w    DAC_88_DATA_Ptr
(1) 4897/   10028 :  (MACRO-2)                          DAC_Setup $0A,DAC_89_Data
(1) 4897/   10028 : 0A                          dc.b    $0A
(1) 4897/   10029 : FD09                        dc.w    DAC_89_DATA_Len
(1) 4897/   1002B : 6DC4                        dc.w    DAC_89_DATA_Ptr
(1) 4897/   1002D :  (MACRO-2)                          DAC_Setup $14,DAC_8A_8B_Data
(1) 4897/   1002D : 14                          dc.b    $14
(1) 4897/   1002E : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4897/   10030 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4897/   10032 :  (MACRO-2)                          DAC_Setup $1B,DAC_8A_8B_Data
(1) 4897/   10032 : 1B                          dc.b    $1B
(1) 4897/   10033 : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4897/   10035 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4897/   10037 :  (MACRO-2)                          DAC_Setup $08,DAC_8C_Data
(1) 4897/   10037 : 08                          dc.b    $08
(1) 4897/   10038 : 6000                        dc.w    DAC_8C_DATA_Len
(1) 4897/   1003A : 7BB3                        dc.w    DAC_8C_DATA_Ptr
(1) 4897/   1003C :  (MACRO-2)                          DAC_Setup $0B,DAC_8D_8E_Data
(1) 4897/   1003C : 0B                          dc.b    $0B
(1) 4897/   1003D : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4897/   1003F : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4897/   10041 :  (MACRO-2)                          DAC_Setup $11,DAC_8D_8E_Data
(1) 4897/   10041 : 11                          dc.b    $11
(1) 4897/   10042 : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4897/   10044 : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4897/   10046 :  (MACRO-2)                          DAC_Setup $08,DAC_8F_Data
(1) 4897/   10046 : 08                          dc.b    $08
(1) 4897/   10047 : EF04                        dc.w    DAC_8F_DATA_Len
(1) 4897/   10049 : 7EBF                        dc.w    DAC_8F_DATA_Ptr
(1) 4897/   1004B :  (MACRO-2)                          DAC_Setup $03,DAC_90_91_92_93_Data
(1) 4897/   1004B : 03                          dc.b    $03
(1) 4897/   1004C : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4897/   1004E : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4897/   10050 :  (MACRO-2)                          DAC_Setup $07,DAC_90_91_92_93_Data
(1) 4897/   10050 : 07                          dc.b    $07
(1) 4897/   10051 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4897/   10053 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4897/   10055 :  (MACRO-2)                          DAC_Setup $0A,DAC_90_91_92_93_Data
(1) 4897/   10055 : 0A                          dc.b    $0A
(1) 4897/   10056 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4897/   10058 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4897/   1005A :  (MACRO-2)                          DAC_Setup $0E,DAC_90_91_92_93_Data
(1) 4897/   1005A : 0E                          dc.b    $0E
(1) 4897/   1005B : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4897/   1005D : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4897/   1005F :  (MACRO-2)                          DAC_Setup $06,DAC_94_95_96_97_Data
(1) 4897/   1005F : 06                          dc.b    $06
(1) 4897/   10060 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4897/   10062 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4897/   10064 :  (MACRO-2)                          DAC_Setup $0A,DAC_94_95_96_97_Data
(1) 4897/   10064 : 0A                          dc.b    $0A
(1) 4897/   10065 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4897/   10067 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4897/   10069 :  (MACRO-2)                          DAC_Setup $0D,DAC_94_95_96_97_Data
(1) 4897/   10069 : 0D                          dc.b    $0D
(1) 4897/   1006A : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4897/   1006C : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4897/   1006E :  (MACRO-2)                          DAC_Setup $12,DAC_94_95_96_97_Data
(1) 4897/   1006E : 12                          dc.b    $12
(1) 4897/   1006F : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4897/   10071 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4897/   10073 :  (MACRO-2)                          DAC_Setup $0B,DAC_98_99_9A_Data
(1) 4897/   10073 : 0B                          dc.b    $0B
(1) 4897/   10074 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4897/   10076 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4897/   10078 :  (MACRO-2)                          DAC_Setup $13,DAC_98_99_9A_Data
(1) 4897/   10078 : 13                          dc.b    $13
(1) 4897/   10079 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4897/   1007B : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4897/   1007D :  (MACRO-2)                          DAC_Setup $16,DAC_98_99_9A_Data
(1) 4897/   1007D : 16                          dc.b    $16
(1) 4897/   1007E : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4897/   10080 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4897/   10082 :  (MACRO-2)                          DAC_Setup $0C,DAC_9B_Data
(1) 4897/   10082 : 0C                          dc.b    $0C
(1) 4897/   10083 : 2006                        dc.w    DAC_9B_DATA_Len
(1) 4897/   10085 : D2DA                        dc.w    DAC_9B_DATA_Ptr
(1) 4897/   10087 :  (MACRO-2)                          DAC_Setup $0A,DAC_9C_Data
(1) 4897/   10087 : 0A                          dc.b    $0A
(1) 4897/   10088 : 3203                        dc.w    DAC_9C_DATA_Len
(1) 4897/   1008A : BD81                        dc.w    DAC_9C_DATA_Ptr
(1) 4897/   1008C :  (MACRO-2)                          DAC_Setup $18,DAC_9D_Data
(1) 4897/   1008C : 18                          dc.b    $18
(1) 4897/   1008D : 4902                        dc.w    DAC_9D_DATA_Len
(1) 4897/   1008F : EF84                        dc.w    DAC_9D_DATA_Ptr
(1) 4897/   10091 :  (MACRO-2)                          DAC_Setup $18,DAC_9E_Data
(1) 4897/   10091 : 18                          dc.b    $18
(1) 4897/   10092 : 8002                        dc.w    DAC_9E_DATA_Len
(1) 4897/   10094 : 3887                        dc.w    DAC_9E_DATA_Ptr
(1) 4897/   10096 :  (MACRO-2)                          DAC_Setup $0C,DAC_9F_Data
(1) 4897/   10096 : 0C                          dc.b    $0C
(1) 4897/   10097 : A512                        dc.w    DAC_9F_DATA_Len
(1) 4897/   10099 : B889                        dc.w    DAC_9F_DATA_Ptr
(1) 4897/   1009B :  (MACRO-2)                          DAC_Setup $0C,DAC_A0_Data
(1) 4897/   1009B : 0C                          dc.b    $0C
(1) 4897/   1009C : BA0D                        dc.w    DAC_A0_DATA_Len
(1) 4897/   1009E : 5D9C                        dc.w    DAC_A0_DATA_Ptr
(1) 4897/   100A0 :  (MACRO-2)                          DAC_Setup $0A,DAC_A1_Data
(1) 4897/   100A0 : 0A                          dc.b    $0A
(1) 4897/   100A1 : A80B                        dc.w    DAC_A1_DATA_Len
(1) 4897/   100A3 : 17AA                        dc.w    DAC_A1_DATA_Ptr
(1) 4897/   100A5 :  (MACRO-2)                          DAC_Setup $0A,DAC_A2_Data
(1) 4897/   100A5 : 0A                          dc.b    $0A
(1) 4897/   100A6 : 580D                        dc.w    DAC_A2_DATA_Len
(1) 4897/   100A8 : BFB5                        dc.w    DAC_A2_DATA_Ptr
(1) 4897/   100AA :  (MACRO-2)                          DAC_Setup $18,DAC_A3_Data
(1) 4897/   100AA : 18                          dc.b    $18
(1) 4897/   100AB : 9E02                        dc.w    DAC_A3_DATA_Len
(1) 4897/   100AD : 17C3                        dc.w    DAC_A3_DATA_Ptr
(1) 4897/   100AF :  (MACRO-2)                          DAC_Setup $18,DAC_A4_Data
(1) 4897/   100AF : 18                          dc.b    $18
(1) 4897/   100B0 : 8A02                        dc.w    DAC_A4_DATA_Len
(1) 4897/   100B2 : B5C5                        dc.w    DAC_A4_DATA_Ptr
(1) 4897/   100B4 :  (MACRO-2)                          DAC_Setup $0C,DAC_A5_Data
(1) 4897/   100B4 : 0C                          dc.b    $0C
(1) 4897/   100B5 : 600C                        dc.w    DAC_A5_DATA_Len
(1) 4897/   100B7 : 3FC8                        dc.w    DAC_A5_DATA_Ptr
(1) 4897/   100B9 :  (MACRO-2)                          DAC_Setup $09,DAC_A6_Data
(1) 4897/   100B9 : 09                          dc.b    $09
(1) 4897/   100BA : D606                        dc.w    DAC_A6_DATA_Len
(1) 4897/   100BC : 9FD4                        dc.w    DAC_A6_DATA_Ptr
(1) 4897/   100BE :  (MACRO-2)                          DAC_Setup $18,DAC_A7_Data
(1) 4897/   100BE : 18                          dc.b    $18
(1) 4897/   100BF : F206                        dc.w    DAC_A7_DATA_Len
(1) 4897/   100C1 : 75DB                        dc.w    DAC_A7_DATA_Ptr
(1) 4897/   100C3 :  (MACRO-2)                          DAC_Setup $18,DAC_A8_Data
(1) 4897/   100C3 : 18                          dc.b    $18
(1) 4897/   100C4 : 7A03                        dc.w    DAC_A8_DATA_Len
(1) 4897/   100C6 : 67E2                        dc.w    DAC_A8_DATA_Ptr
(1) 4897/   100C8 :  (MACRO-2)                          DAC_Setup $0C,DAC_A9_Data
(1) 4897/   100C8 : 0C                          dc.b    $0C
(1) 4897/   100C9 : 4F0A                        dc.w    DAC_A9_DATA_Len
(1) 4897/   100CB : E1E5                        dc.w    DAC_A9_DATA_Ptr
(1) 4897/   100CD :  (MACRO-2)                          DAC_Setup $0A,DAC_AA_Data
(1) 4897/   100CD : 0A                          dc.b    $0A
(1) 4897/   100CE : 8E06                        dc.w    DAC_AA_DATA_Len
(1) 4897/   100D0 : 30F0                        dc.w    DAC_AA_DATA_Ptr
(1) 4897/   100D2 :  (MACRO-2)                          DAC_Setup $0D,DAC_AB_Data
(1) 4897/   100D2 : 0D                          dc.b    $0D
(1) 4897/   100D3 : 0409                        dc.w    DAC_AB_DATA_Len
(1) 4897/   100D5 : BD81                        dc.w    DAC_AB_DATA_Ptr
(1) 4897/   100D7 :  (MACRO-2)                          DAC_Setup $06,DAC_AC_Data
(1) 4897/   100D7 : 06                          dc.b    $06
(1) 4897/   100D8 : 8105                        dc.w    DAC_AC_DATA_Len
(1) 4897/   100DA : C18A                        dc.w    DAC_AC_DATA_Ptr
(1) 4897/   100DC :  (MACRO-2)                          DAC_Setup $10,DAC_AD_AE_Data
(1) 4897/   100DC : 10                          dc.b    $10
(1) 4897/   100DD : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4897/   100DF : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4897/   100E1 :  (MACRO-2)                          DAC_Setup $18,DAC_AD_AE_Data
(1) 4897/   100E1 : 18                          dc.b    $18
(1) 4897/   100E2 : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4897/   100E4 : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4897/   100E6 :  (MACRO-2)                          DAC_Setup $09,DAC_AF_B0_Data
(1) 4897/   100E6 : 09                          dc.b    $09
(1) 4897/   100E7 : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4897/   100E9 : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4897/   100EB :  (MACRO-2)                          DAC_Setup $12,DAC_AF_B0_Data
(1) 4897/   100EB : 12                          dc.b    $12
(1) 4897/   100EC : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4897/   100EE : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4897/   100F0 :  (MACRO-2)                          DAC_Setup $18,DAC_B1_Data
(1) 4897/   100F0 : 18                          dc.b    $18
(1) 4897/   100F1 : 850B                        dc.w    DAC_B1_DATA_Len
(1) 4897/   100F3 : 6A95                        dc.w    DAC_B1_DATA_Ptr
(1) 4897/   100F5 :  (MACRO-2)                          DAC_Setup $16,DAC_B2_B3_Data
(1) 4897/   100F5 : 16                          dc.b    $16
(1) 4897/   100F6 : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4897/   100F8 : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4897/   100FA :  (MACRO-2)                          DAC_Setup $20,DAC_B2_B3_Data
(1) 4897/   100FA : 20                          dc.b    $20
(1) 4897/   100FB : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4897/   100FD : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4897/   100FF :  (MACRO-2)                          DAC_Setup $0C,DAC_B4_C1_C2_C3_C4_Data
(1) 4897/   100FF : 0C                          dc.b    $0C
(1) 4897/   10100 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4897/   10102 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4897/   10104 :  (MACRO-2)                          DAC_Setup $0C,DAC_B5_Data
(1) 4897/   10104 : 0C                          dc.b    $0C
(1) 4897/   10105 : 4006                        dc.w    DAC_B5_DATA_Len
(1) 4897/   10107 : ECA6                        dc.w    DAC_B5_DATA_Ptr
(1) 4897/   10109 :  (MACRO-2)                          DAC_Setup $0C,DAC_B6_Data
(1) 4897/   10109 : 0C                          dc.b    $0C
(1) 4897/   1010A : 5505                        dc.w    DAC_B6_DATA_Len
(1) 4897/   1010C : 2CAD                        dc.w    DAC_B6_DATA_Ptr
(1) 4897/   1010E :  (MACRO-2)                          DAC_Setup $18,DAC_B7_Data
(1) 4897/   1010E : 18                          dc.b    $18
(1) 4897/   1010F : B104                        dc.w    DAC_B7_DATA_Len
(1) 4897/   10111 : 81B2                        dc.w    DAC_B7_DATA_Ptr
(1) 4897/   10113 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4897/   10113 : 0C                          dc.b    $0C
(1) 4897/   10114 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4897/   10116 : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4897/   10118 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4897/   10118 : 0C                          dc.b    $0C
(1) 4897/   10119 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4897/   1011B : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4897/   1011D :  (MACRO-2)                          DAC_Setup $18,DAC_BA_Data
(1) 4897/   1011D : 18                          dc.b    $18
(1) 4897/   1011E : B304                        dc.w    DAC_BA_DATA_Len
(1) 4897/   10120 : 6CBD                        dc.w    DAC_BA_DATA_Ptr
(1) 4897/   10122 :  (MACRO-2)                          DAC_Setup $18,DAC_BB_Data
(1) 4897/   10122 : 18                          dc.b    $18
(1) 4897/   10123 : B601                        dc.w    DAC_BB_DATA_Len
(1) 4897/   10125 : 1FC2                        dc.w    DAC_BB_DATA_Ptr
(1) 4897/   10127 :  (MACRO-2)                          DAC_Setup $18,DAC_BC_Data
(1) 4897/   10127 : 18                          dc.b    $18
(1) 4897/   10128 : B708                        dc.w    DAC_BC_DATA_Len
(1) 4897/   1012A : D5C3                        dc.w    DAC_BC_DATA_Ptr
(1) 4897/   1012C :  (MACRO-2)                          DAC_Setup $0C,DAC_BD_Data
(1) 4897/   1012C : 0C                          dc.b    $0C
(1) 4897/   1012D : BE05                        dc.w    DAC_BD_DATA_Len
(1) 4897/   1012F : 8CCC                        dc.w    DAC_BD_DATA_Ptr
(1) 4897/   10131 :  (MACRO-2)                          DAC_Setup $0C,DAC_BE_Data
(1) 4897/   10131 : 0C                          dc.b    $0C
(1) 4897/   10132 : 1007                        dc.w    DAC_BE_DATA_Len
(1) 4897/   10134 : 4AD2                        dc.w    DAC_BE_DATA_Ptr
(1) 4897/   10136 :  (MACRO-2)                          DAC_Setup $1C,DAC_BF_Data
(1) 4897/   10136 : 1C                          dc.b    $1C
(1) 4897/   10137 : DC01                        dc.w    DAC_BF_DATA_Len
(1) 4897/   10139 : 5AD9                        dc.w    DAC_BF_DATA_Ptr
(1) 4897/   1013B :  (MACRO-2)                          DAC_Setup $0B,DAC_C0_Data
(1) 4897/   1013B : 0B                          dc.b    $0B
(1) 4897/   1013C : 3608                        dc.w    DAC_C0_DATA_Len
(1) 4897/   1013E : 36DB                        dc.w    DAC_C0_DATA_Ptr
(1) 4897/   10140 :  (MACRO-2)                          DAC_Setup $0F,DAC_B4_C1_C2_C3_C4_Data
(1) 4897/   10140 : 0F                          dc.b    $0F
(1) 4897/   10141 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4897/   10143 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4897/   10145 :  (MACRO-2)                          DAC_Setup $11,DAC_B4_C1_C2_C3_C4_Data
(1) 4897/   10145 : 11                          dc.b    $11
(1) 4897/   10146 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4897/   10148 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4897/   1014A :  (MACRO-2)                          DAC_Setup $12,DAC_B4_C1_C2_C3_C4_Data
(1) 4897/   1014A : 12                          dc.b    $12
(1) 4897/   1014B : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4897/   1014D : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4897/   1014F :  (MACRO-2)                          DAC_Setup $0B,DAC_B4_C1_C2_C3_C4_Data
(1) 4897/   1014F : 0B                          dc.b    $0B
(1) 4897/   10150 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4897/   10152 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4897/   10154 :  (MACRO-2)                          DAC_Setup $17,DAC_C5_Data
(1) 4897/   10154 : 17                          dc.b    $17
(1) 4897/   10155 : 9402                        dc.w    DAC_C5_DATA_Len
(1) 4897/   10157 : BD81                        dc.w    DAC_C5_DATA_Ptr
(1) 4897/   10159 :  (MACRO-2)                          DAC_Setup $01,DAC_C6_Data
(1) 4897/   10159 : 01                          dc.b    $01
(1) 4897/   1015A : 2307                        dc.w    DAC_C6_DATA_Len
(1) 4897/   1015C : 5184                        dc.w    DAC_C6_DATA_Ptr
(1) 4897/   1015E :  (MACRO-2)                          DAC_Setup $06,DAC_C7_Data
(1) 4897/   1015E : 06                          dc.b    $06
(1) 4897/   1015F : 7605                        dc.w    DAC_C7_DATA_Len
(1) 4897/   10161 : 748B                        dc.w    DAC_C7_DATA_Ptr
(1) 4897/   10163 :  (MACRO-2)                          DAC_Setup $08,DAC_C8_Data
(1) 4897/   10163 : 08                          dc.b    $08
(1) 4897/   10164 : 4C07                        dc.w    DAC_C8_DATA_Len
(1) 4897/   10166 : EA90                        dc.w    DAC_C8_DATA_Ptr
(1) 4897/   10168 :  (MACRO-2)                          DAC_Setup $1B,DAC_C9_CC_CD_CE_CF_Data
(1) 4897/   10168 : 1B                          dc.b    $1B
(1) 4897/   10169 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4897/   1016B : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4897/   1016D :  (MACRO-2)                          DAC_Setup $0A,DAC_CA_D0_D1_D2_Data
(1) 4897/   1016D : 0A                          dc.b    $0A
(1) 4897/   1016E : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4897/   10170 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4897/   10172 :  (MACRO-2)                          DAC_Setup $1B,DAC_CB_D3_D4_D5_Data
(1) 4897/   10172 : 1B                          dc.b    $1B
(1) 4897/   10173 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4897/   10175 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4897/   10177 :  (MACRO-2)                          DAC_Setup $12,DAC_C9_CC_CD_CE_CF_Data
(1) 4897/   10177 : 12                          dc.b    $12
(1) 4897/   10178 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4897/   1017A : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4897/   1017C :  (MACRO-2)                          DAC_Setup $15,DAC_C9_CC_CD_CE_CF_Data
(1) 4897/   1017C : 15                          dc.b    $15
(1) 4897/   1017D : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4897/   1017F : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4897/   10181 :  (MACRO-2)                          DAC_Setup $1C,DAC_C9_CC_CD_CE_CF_Data
(1) 4897/   10181 : 1C                          dc.b    $1C
(1) 4897/   10182 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4897/   10184 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4897/   10186 :  (MACRO-2)                          DAC_Setup $1D,DAC_C9_CC_CD_CE_CF_Data
(1) 4897/   10186 : 1D                          dc.b    $1D
(1) 4897/   10187 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4897/   10189 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4897/   1018B :  (MACRO-2)                          DAC_Setup $02,DAC_CA_D0_D1_D2_Data
(1) 4897/   1018B : 02                          dc.b    $02
(1) 4897/   1018C : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4897/   1018E : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4897/   10190 :  (MACRO-2)                          DAC_Setup $05,DAC_CA_D0_D1_D2_Data
(1) 4897/   10190 : 05                          dc.b    $05
(1) 4897/   10191 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4897/   10193 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4897/   10195 :  (MACRO-2)                          DAC_Setup $08,DAC_CA_D0_D1_D2_Data
(1) 4897/   10195 : 08                          dc.b    $08
(1) 4897/   10196 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4897/   10198 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4897/   1019A :  (MACRO-2)                          DAC_Setup $08,DAC_CB_D3_D4_D5_Data
(1) 4897/   1019A : 08                          dc.b    $08
(1) 4897/   1019B : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4897/   1019D : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4897/   1019F :  (MACRO-2)                          DAC_Setup $0B,DAC_CB_D3_D4_D5_Data
(1) 4897/   1019F : 0B                          dc.b    $0B
(1) 4897/   101A0 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4897/   101A2 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4897/   101A4 :  (MACRO-2)                          DAC_Setup $12,DAC_CB_D3_D4_D5_Data
(1) 4897/   101A4 : 12                          dc.b    $12
(1) 4897/   101A5 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4897/   101A7 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4897/   101A9 :  (MACRO-2)                          DAC_Setup $01,DAC_D6_Data
(1) 4897/   101A9 : 01                          dc.b    $01
(1) 4897/   101AA : 7E15                        dc.w    DAC_D6_DATA_Len
(1) 4897/   101AC : BDB0                        dc.w    DAC_D6_DATA_Ptr
(1) 4897/   101AE :  (MACRO-2)                          DAC_Setup $12,DAC_D7_Data
(1) 4897/   101AE : 12                          dc.b    $12
(1) 4897/   101AF : 4F0A                        dc.w    DAC_D7_DATA_Len
(1) 4897/   101B1 : 3BC6                        dc.w    DAC_D7_DATA_Ptr
(1) 4897/   101B3 :  (MACRO-2)                          DAC_Setup $16,DAC_D8_D9_Data
(1) 4897/   101B3 : 16                          dc.b    $16
(1) 4897/   101B4 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4897/   101B6 : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4897/   101B8 :  (MACRO-2)                          DAC_Setup $20,DAC_D8_D9_Data
(1) 4897/   101B8 : 20                          dc.b    $20
(1) 4897/   101B9 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4897/   101BB : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4898/   101BD :                     
(1) 4900/   101BD : (MACRO)             DAC_9C_Data:			DACBINCLUDE "Sound/DAC/9C.bin"
(1) 4900/   101BD : =$101BD             DAC_9C_Data label *
(1) 4900/   101BD :                             BINCLUDE "Sound/DAC/9C.bin"
(1) 4900/   104EF : =$3203              DAC_9C_Data_Len  = little_endian(*-DAC_9C_Data)
(1) 4900/   104EF : =$BD81              DAC_9C_Data_Ptr  = k68z80Pointer(DAC_9C_Data-soundBankStart)
(1) 4900/   104EF : =$10000             DAC_9C_Data_Bank = soundBankStart
(1) 4901/   104EF : (MACRO)             DAC_9D_Data:			DACBINCLUDE "Sound/DAC/9D.bin"
(1) 4901/   104EF : =$104EF             DAC_9D_Data label *
(1) 4901/   104EF :                             BINCLUDE "Sound/DAC/9D.bin"
(1) 4901/   10738 : =$4902              DAC_9D_Data_Len  = little_endian(*-DAC_9D_Data)
(1) 4901/   10738 : =$EF84              DAC_9D_Data_Ptr  = k68z80Pointer(DAC_9D_Data-soundBankStart)
(1) 4901/   10738 : =$10000             DAC_9D_Data_Bank = soundBankStart
(1) 4902/   10738 : (MACRO)             DAC_9E_Data:			DACBINCLUDE "Sound/DAC/9E.bin"
(1) 4902/   10738 : =$10738             DAC_9E_Data label *
(1) 4902/   10738 :                             BINCLUDE "Sound/DAC/9E.bin"
(1) 4902/   109B8 : =$8002              DAC_9E_Data_Len  = little_endian(*-DAC_9E_Data)
(1) 4902/   109B8 : =$3887              DAC_9E_Data_Ptr  = k68z80Pointer(DAC_9E_Data-soundBankStart)
(1) 4902/   109B8 : =$10000             DAC_9E_Data_Bank = soundBankStart
(1) 4904/   109B8 :                     
(1) 4906/   109B8 : (MACRO)             DAC_9F_Data:			DACBINCLUDE "Sound/DAC/9F.bin"
(1) 4906/   109B8 : =$109B8             DAC_9F_Data label *
(1) 4906/   109B8 :                             BINCLUDE "Sound/DAC/9F.bin"
(1) 4906/   11C5D : =$A512              DAC_9F_Data_Len  = little_endian(*-DAC_9F_Data)
(1) 4906/   11C5D : =$B889              DAC_9F_Data_Ptr  = k68z80Pointer(DAC_9F_Data-soundBankStart)
(1) 4906/   11C5D : =$10000             DAC_9F_Data_Bank = soundBankStart
(1) 4907/   11C5D : (MACRO)             DAC_A0_Data:			DACBINCLUDE "Sound/DAC/A0.bin"
(1) 4907/   11C5D : =$11C5D             DAC_A0_Data label *
(1) 4907/   11C5D :                             BINCLUDE "Sound/DAC/A0.bin"
(1) 4907/   12A17 : =$BA0D              DAC_A0_Data_Len  = little_endian(*-DAC_A0_Data)
(1) 4907/   12A17 : =$5D9C              DAC_A0_Data_Ptr  = k68z80Pointer(DAC_A0_Data-soundBankStart)
(1) 4907/   12A17 : =$10000             DAC_A0_Data_Bank = soundBankStart
(1) 4908/   12A17 : (MACRO)             DAC_A1_Data:			DACBINCLUDE "Sound/DAC/A1.bin"
(1) 4908/   12A17 : =$12A17             DAC_A1_Data label *
(1) 4908/   12A17 :                             BINCLUDE "Sound/DAC/A1.bin"
(1) 4908/   135BF : =$A80B              DAC_A1_Data_Len  = little_endian(*-DAC_A1_Data)
(1) 4908/   135BF : =$17AA              DAC_A1_Data_Ptr  = k68z80Pointer(DAC_A1_Data-soundBankStart)
(1) 4908/   135BF : =$10000             DAC_A1_Data_Bank = soundBankStart
(1) 4909/   135BF : (MACRO)             DAC_A2_Data:			DACBINCLUDE "Sound/DAC/A2.bin"
(1) 4909/   135BF : =$135BF             DAC_A2_Data label *
(1) 4909/   135BF :                             BINCLUDE "Sound/DAC/A2.bin"
(1) 4909/   14317 : =$580D              DAC_A2_Data_Len  = little_endian(*-DAC_A2_Data)
(1) 4909/   14317 : =$BFB5              DAC_A2_Data_Ptr  = k68z80Pointer(DAC_A2_Data-soundBankStart)
(1) 4909/   14317 : =$10000             DAC_A2_Data_Bank = soundBankStart
(1) 4910/   14317 : (MACRO)             DAC_A3_Data:			DACBINCLUDE "Sound/DAC/A3.bin"
(1) 4910/   14317 : =$14317             DAC_A3_Data label *
(1) 4910/   14317 :                             BINCLUDE "Sound/DAC/A3.bin"
(1) 4910/   145B5 : =$9E02              DAC_A3_Data_Len  = little_endian(*-DAC_A3_Data)
(1) 4910/   145B5 : =$17C3              DAC_A3_Data_Ptr  = k68z80Pointer(DAC_A3_Data-soundBankStart)
(1) 4910/   145B5 : =$10000             DAC_A3_Data_Bank = soundBankStart
(1) 4911/   145B5 : (MACRO)             DAC_A4_Data:			DACBINCLUDE "Sound/DAC/A4.bin"
(1) 4911/   145B5 : =$145B5             DAC_A4_Data label *
(1) 4911/   145B5 :                             BINCLUDE "Sound/DAC/A4.bin"
(1) 4911/   1483F : =$8A02              DAC_A4_Data_Len  = little_endian(*-DAC_A4_Data)
(1) 4911/   1483F : =$B5C5              DAC_A4_Data_Ptr  = k68z80Pointer(DAC_A4_Data-soundBankStart)
(1) 4911/   1483F : =$10000             DAC_A4_Data_Bank = soundBankStart
(1) 4912/   1483F : (MACRO)             DAC_A5_Data:			DACBINCLUDE "Sound/DAC/A5.bin"
(1) 4912/   1483F : =$1483F             DAC_A5_Data label *
(1) 4912/   1483F :                             BINCLUDE "Sound/DAC/A5.bin"
(1) 4912/   1549F : =$600C              DAC_A5_Data_Len  = little_endian(*-DAC_A5_Data)
(1) 4912/   1549F : =$3FC8              DAC_A5_Data_Ptr  = k68z80Pointer(DAC_A5_Data-soundBankStart)
(1) 4912/   1549F : =$10000             DAC_A5_Data_Bank = soundBankStart
(1) 4913/   1549F : (MACRO)             DAC_A6_Data:			DACBINCLUDE "Sound/DAC/A6.bin"
(1) 4913/   1549F : =$1549F             DAC_A6_Data label *
(1) 4913/   1549F :                             BINCLUDE "Sound/DAC/A6.bin"
(1) 4913/   15B75 : =$D606              DAC_A6_Data_Len  = little_endian(*-DAC_A6_Data)
(1) 4913/   15B75 : =$9FD4              DAC_A6_Data_Ptr  = k68z80Pointer(DAC_A6_Data-soundBankStart)
(1) 4913/   15B75 : =$10000             DAC_A6_Data_Bank = soundBankStart
(1) 4914/   15B75 : (MACRO)             DAC_A7_Data:			DACBINCLUDE "Sound/DAC/A7.bin"
(1) 4914/   15B75 : =$15B75             DAC_A7_Data label *
(1) 4914/   15B75 :                             BINCLUDE "Sound/DAC/A7.bin"
(1) 4914/   16267 : =$F206              DAC_A7_Data_Len  = little_endian(*-DAC_A7_Data)
(1) 4914/   16267 : =$75DB              DAC_A7_Data_Ptr  = k68z80Pointer(DAC_A7_Data-soundBankStart)
(1) 4914/   16267 : =$10000             DAC_A7_Data_Bank = soundBankStart
(1) 4915/   16267 : (MACRO)             DAC_A8_Data:			DACBINCLUDE "Sound/DAC/A8.bin"
(1) 4915/   16267 : =$16267             DAC_A8_Data label *
(1) 4915/   16267 :                             BINCLUDE "Sound/DAC/A8.bin"
(1) 4915/   165E1 : =$7A03              DAC_A8_Data_Len  = little_endian(*-DAC_A8_Data)
(1) 4915/   165E1 : =$67E2              DAC_A8_Data_Ptr  = k68z80Pointer(DAC_A8_Data-soundBankStart)
(1) 4915/   165E1 : =$10000             DAC_A8_Data_Bank = soundBankStart
(1) 4916/   165E1 : (MACRO)             DAC_A9_Data:			DACBINCLUDE "Sound/DAC/A9.bin"
(1) 4916/   165E1 : =$165E1             DAC_A9_Data label *
(1) 4916/   165E1 :                             BINCLUDE "Sound/DAC/A9.bin"
(1) 4916/   17030 : =$4F0A              DAC_A9_Data_Len  = little_endian(*-DAC_A9_Data)
(1) 4916/   17030 : =$E1E5              DAC_A9_Data_Ptr  = k68z80Pointer(DAC_A9_Data-soundBankStart)
(1) 4916/   17030 : =$10000             DAC_A9_Data_Bank = soundBankStart
(1) 4917/   17030 : (MACRO)             DAC_AA_Data:			DACBINCLUDE "Sound/DAC/AA.bin"
(1) 4917/   17030 : =$17030             DAC_AA_Data label *
(1) 4917/   17030 :                             BINCLUDE "Sound/DAC/AA.bin"
(1) 4917/   176BE : =$8E06              DAC_AA_Data_Len  = little_endian(*-DAC_AA_Data)
(1) 4917/   176BE : =$30F0              DAC_AA_Data_Ptr  = k68z80Pointer(DAC_AA_Data-soundBankStart)
(1) 4917/   176BE : =$10000             DAC_AA_Data_Bank = soundBankStart
(1) 4918/   176BE :                     
(1) 4919/   176BE : (MACRO)             	finishBank
soundBank DacBank2 has $942 bytes free at end, needed $E7E bytes padding at start.
(1) 4919/   176BE :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4920/   176BE :                     
(1) 4921/   176BE :                     ; ---------------------------------------------------------------------------
(1) 4922/   176BE :                     ; Dac Bank 3
(1) 4923/   176BE :                     ; ---------------------------------------------------------------------------
(1) 4924/   176BE : (MACRO)             DacBank3:			startBank
(1) 4924/   176BE : =$176BE                     set     soundBankDecl,*
(1) 4924/   176BE :  (MACRO-2)                  align   $8000
(1) 4924/   176BE :   (MACRO-3)                 cnop 0,$8000
(1) 4924/   176BE :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4924/   176BE : =$942               .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4924/   176BE :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4924/   176BE : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4924/   17ABE : =$542               .diff := .diff - 1024
(1) 4924/   17ABE :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4924/   17ABE : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4924/   17EBE : =$142               .diff := .diff - 1024
(1) 4924/   17EBE :                     
(1) 4924/   17EBE : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4924/   18000 : =$18000             DacBank3 label *
(1) 4924/   18000 : =$18000                     set     soundBankStart,DacBank3
(1) 4924/   18000 : =$942                       set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4924/   18000 : =DacBank3                   set     soundBankName,"DacBank3"
(1) 4925/   18000 : (MACRO)             	DAC_Master_Table
(1) 4925/   18000 :  (MACRO-2)                          DAC_Setup $04,DAC_81_Data
(1) 4925/   18000 : 04                          dc.b    $04
(1) 4925/   18001 : 7E07                        dc.w    DAC_81_DATA_Len
(1) 4925/   18003 : 8C84                        dc.w    DAC_81_DATA_Ptr
(1) 4925/   18005 :  (MACRO-2)                          DAC_Setup $0E,DAC_82_83_84_85_Data
(1) 4925/   18005 : 0E                          dc.b    $0E
(1) 4925/   18006 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4925/   18008 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4925/   1800A :  (MACRO-2)                          DAC_Setup $14,DAC_82_83_84_85_Data
(1) 4925/   1800A : 14                          dc.b    $14
(1) 4925/   1800B : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4925/   1800D : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4925/   1800F :  (MACRO-2)                          DAC_Setup $1A,DAC_82_83_84_85_Data
(1) 4925/   1800F : 1A                          dc.b    $1A
(1) 4925/   18010 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4925/   18012 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4925/   18014 :  (MACRO-2)                          DAC_Setup $20,DAC_82_83_84_85_Data
(1) 4925/   18014 : 20                          dc.b    $20
(1) 4925/   18015 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4925/   18017 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4925/   18019 :  (MACRO-2)                          DAC_Setup $04,DAC_86_Data
(1) 4925/   18019 : 04                          dc.b    $04
(1) 4925/   1801A : CF02                        dc.w    DAC_86_DATA_Len
(1) 4925/   1801C : BD81                        dc.w    DAC_86_DATA_Ptr
(1) 4925/   1801E :  (MACRO-2)                          DAC_Setup $04,DAC_87_Data
(1) 4925/   1801E : 04                          dc.b    $04
(1) 4925/   1801F : 1C07                        dc.w    DAC_87_DATA_Len
(1) 4925/   18021 : 62B8                        dc.w    DAC_87_DATA_Ptr
(1) 4925/   18023 :  (MACRO-2)                          DAC_Setup $06,DAC_88_Data
(1) 4925/   18023 : 06                          dc.b    $06
(1) 4925/   18024 : 2712                        dc.w    DAC_88_DATA_Len
(1) 4925/   18026 : F49F                        dc.w    DAC_88_DATA_Ptr
(1) 4925/   18028 :  (MACRO-2)                          DAC_Setup $0A,DAC_89_Data
(1) 4925/   18028 : 0A                          dc.b    $0A
(1) 4925/   18029 : FD09                        dc.w    DAC_89_DATA_Len
(1) 4925/   1802B : 6DC4                        dc.w    DAC_89_DATA_Ptr
(1) 4925/   1802D :  (MACRO-2)                          DAC_Setup $14,DAC_8A_8B_Data
(1) 4925/   1802D : 14                          dc.b    $14
(1) 4925/   1802E : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4925/   18030 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4925/   18032 :  (MACRO-2)                          DAC_Setup $1B,DAC_8A_8B_Data
(1) 4925/   18032 : 1B                          dc.b    $1B
(1) 4925/   18033 : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4925/   18035 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4925/   18037 :  (MACRO-2)                          DAC_Setup $08,DAC_8C_Data
(1) 4925/   18037 : 08                          dc.b    $08
(1) 4925/   18038 : 6000                        dc.w    DAC_8C_DATA_Len
(1) 4925/   1803A : 7BB3                        dc.w    DAC_8C_DATA_Ptr
(1) 4925/   1803C :  (MACRO-2)                          DAC_Setup $0B,DAC_8D_8E_Data
(1) 4925/   1803C : 0B                          dc.b    $0B
(1) 4925/   1803D : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4925/   1803F : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4925/   18041 :  (MACRO-2)                          DAC_Setup $11,DAC_8D_8E_Data
(1) 4925/   18041 : 11                          dc.b    $11
(1) 4925/   18042 : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4925/   18044 : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4925/   18046 :  (MACRO-2)                          DAC_Setup $08,DAC_8F_Data
(1) 4925/   18046 : 08                          dc.b    $08
(1) 4925/   18047 : EF04                        dc.w    DAC_8F_DATA_Len
(1) 4925/   18049 : 7EBF                        dc.w    DAC_8F_DATA_Ptr
(1) 4925/   1804B :  (MACRO-2)                          DAC_Setup $03,DAC_90_91_92_93_Data
(1) 4925/   1804B : 03                          dc.b    $03
(1) 4925/   1804C : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4925/   1804E : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4925/   18050 :  (MACRO-2)                          DAC_Setup $07,DAC_90_91_92_93_Data
(1) 4925/   18050 : 07                          dc.b    $07
(1) 4925/   18051 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4925/   18053 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4925/   18055 :  (MACRO-2)                          DAC_Setup $0A,DAC_90_91_92_93_Data
(1) 4925/   18055 : 0A                          dc.b    $0A
(1) 4925/   18056 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4925/   18058 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4925/   1805A :  (MACRO-2)                          DAC_Setup $0E,DAC_90_91_92_93_Data
(1) 4925/   1805A : 0E                          dc.b    $0E
(1) 4925/   1805B : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4925/   1805D : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4925/   1805F :  (MACRO-2)                          DAC_Setup $06,DAC_94_95_96_97_Data
(1) 4925/   1805F : 06                          dc.b    $06
(1) 4925/   18060 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4925/   18062 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4925/   18064 :  (MACRO-2)                          DAC_Setup $0A,DAC_94_95_96_97_Data
(1) 4925/   18064 : 0A                          dc.b    $0A
(1) 4925/   18065 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4925/   18067 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4925/   18069 :  (MACRO-2)                          DAC_Setup $0D,DAC_94_95_96_97_Data
(1) 4925/   18069 : 0D                          dc.b    $0D
(1) 4925/   1806A : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4925/   1806C : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4925/   1806E :  (MACRO-2)                          DAC_Setup $12,DAC_94_95_96_97_Data
(1) 4925/   1806E : 12                          dc.b    $12
(1) 4925/   1806F : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4925/   18071 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4925/   18073 :  (MACRO-2)                          DAC_Setup $0B,DAC_98_99_9A_Data
(1) 4925/   18073 : 0B                          dc.b    $0B
(1) 4925/   18074 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4925/   18076 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4925/   18078 :  (MACRO-2)                          DAC_Setup $13,DAC_98_99_9A_Data
(1) 4925/   18078 : 13                          dc.b    $13
(1) 4925/   18079 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4925/   1807B : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4925/   1807D :  (MACRO-2)                          DAC_Setup $16,DAC_98_99_9A_Data
(1) 4925/   1807D : 16                          dc.b    $16
(1) 4925/   1807E : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4925/   18080 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4925/   18082 :  (MACRO-2)                          DAC_Setup $0C,DAC_9B_Data
(1) 4925/   18082 : 0C                          dc.b    $0C
(1) 4925/   18083 : 2006                        dc.w    DAC_9B_DATA_Len
(1) 4925/   18085 : D2DA                        dc.w    DAC_9B_DATA_Ptr
(1) 4925/   18087 :  (MACRO-2)                          DAC_Setup $0A,DAC_9C_Data
(1) 4925/   18087 : 0A                          dc.b    $0A
(1) 4925/   18088 : 3203                        dc.w    DAC_9C_DATA_Len
(1) 4925/   1808A : BD81                        dc.w    DAC_9C_DATA_Ptr
(1) 4925/   1808C :  (MACRO-2)                          DAC_Setup $18,DAC_9D_Data
(1) 4925/   1808C : 18                          dc.b    $18
(1) 4925/   1808D : 4902                        dc.w    DAC_9D_DATA_Len
(1) 4925/   1808F : EF84                        dc.w    DAC_9D_DATA_Ptr
(1) 4925/   18091 :  (MACRO-2)                          DAC_Setup $18,DAC_9E_Data
(1) 4925/   18091 : 18                          dc.b    $18
(1) 4925/   18092 : 8002                        dc.w    DAC_9E_DATA_Len
(1) 4925/   18094 : 3887                        dc.w    DAC_9E_DATA_Ptr
(1) 4925/   18096 :  (MACRO-2)                          DAC_Setup $0C,DAC_9F_Data
(1) 4925/   18096 : 0C                          dc.b    $0C
(1) 4925/   18097 : A512                        dc.w    DAC_9F_DATA_Len
(1) 4925/   18099 : B889                        dc.w    DAC_9F_DATA_Ptr
(1) 4925/   1809B :  (MACRO-2)                          DAC_Setup $0C,DAC_A0_Data
(1) 4925/   1809B : 0C                          dc.b    $0C
(1) 4925/   1809C : BA0D                        dc.w    DAC_A0_DATA_Len
(1) 4925/   1809E : 5D9C                        dc.w    DAC_A0_DATA_Ptr
(1) 4925/   180A0 :  (MACRO-2)                          DAC_Setup $0A,DAC_A1_Data
(1) 4925/   180A0 : 0A                          dc.b    $0A
(1) 4925/   180A1 : A80B                        dc.w    DAC_A1_DATA_Len
(1) 4925/   180A3 : 17AA                        dc.w    DAC_A1_DATA_Ptr
(1) 4925/   180A5 :  (MACRO-2)                          DAC_Setup $0A,DAC_A2_Data
(1) 4925/   180A5 : 0A                          dc.b    $0A
(1) 4925/   180A6 : 580D                        dc.w    DAC_A2_DATA_Len
(1) 4925/   180A8 : BFB5                        dc.w    DAC_A2_DATA_Ptr
(1) 4925/   180AA :  (MACRO-2)                          DAC_Setup $18,DAC_A3_Data
(1) 4925/   180AA : 18                          dc.b    $18
(1) 4925/   180AB : 9E02                        dc.w    DAC_A3_DATA_Len
(1) 4925/   180AD : 17C3                        dc.w    DAC_A3_DATA_Ptr
(1) 4925/   180AF :  (MACRO-2)                          DAC_Setup $18,DAC_A4_Data
(1) 4925/   180AF : 18                          dc.b    $18
(1) 4925/   180B0 : 8A02                        dc.w    DAC_A4_DATA_Len
(1) 4925/   180B2 : B5C5                        dc.w    DAC_A4_DATA_Ptr
(1) 4925/   180B4 :  (MACRO-2)                          DAC_Setup $0C,DAC_A5_Data
(1) 4925/   180B4 : 0C                          dc.b    $0C
(1) 4925/   180B5 : 600C                        dc.w    DAC_A5_DATA_Len
(1) 4925/   180B7 : 3FC8                        dc.w    DAC_A5_DATA_Ptr
(1) 4925/   180B9 :  (MACRO-2)                          DAC_Setup $09,DAC_A6_Data
(1) 4925/   180B9 : 09                          dc.b    $09
(1) 4925/   180BA : D606                        dc.w    DAC_A6_DATA_Len
(1) 4925/   180BC : 9FD4                        dc.w    DAC_A6_DATA_Ptr
(1) 4925/   180BE :  (MACRO-2)                          DAC_Setup $18,DAC_A7_Data
(1) 4925/   180BE : 18                          dc.b    $18
(1) 4925/   180BF : F206                        dc.w    DAC_A7_DATA_Len
(1) 4925/   180C1 : 75DB                        dc.w    DAC_A7_DATA_Ptr
(1) 4925/   180C3 :  (MACRO-2)                          DAC_Setup $18,DAC_A8_Data
(1) 4925/   180C3 : 18                          dc.b    $18
(1) 4925/   180C4 : 7A03                        dc.w    DAC_A8_DATA_Len
(1) 4925/   180C6 : 67E2                        dc.w    DAC_A8_DATA_Ptr
(1) 4925/   180C8 :  (MACRO-2)                          DAC_Setup $0C,DAC_A9_Data
(1) 4925/   180C8 : 0C                          dc.b    $0C
(1) 4925/   180C9 : 4F0A                        dc.w    DAC_A9_DATA_Len
(1) 4925/   180CB : E1E5                        dc.w    DAC_A9_DATA_Ptr
(1) 4925/   180CD :  (MACRO-2)                          DAC_Setup $0A,DAC_AA_Data
(1) 4925/   180CD : 0A                          dc.b    $0A
(1) 4925/   180CE : 8E06                        dc.w    DAC_AA_DATA_Len
(1) 4925/   180D0 : 30F0                        dc.w    DAC_AA_DATA_Ptr
(1) 4925/   180D2 :  (MACRO-2)                          DAC_Setup $0D,DAC_AB_Data
(1) 4925/   180D2 : 0D                          dc.b    $0D
(1) 4925/   180D3 : 0409                        dc.w    DAC_AB_DATA_Len
(1) 4925/   180D5 : BD81                        dc.w    DAC_AB_DATA_Ptr
(1) 4925/   180D7 :  (MACRO-2)                          DAC_Setup $06,DAC_AC_Data
(1) 4925/   180D7 : 06                          dc.b    $06
(1) 4925/   180D8 : 8105                        dc.w    DAC_AC_DATA_Len
(1) 4925/   180DA : C18A                        dc.w    DAC_AC_DATA_Ptr
(1) 4925/   180DC :  (MACRO-2)                          DAC_Setup $10,DAC_AD_AE_Data
(1) 4925/   180DC : 10                          dc.b    $10
(1) 4925/   180DD : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4925/   180DF : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4925/   180E1 :  (MACRO-2)                          DAC_Setup $18,DAC_AD_AE_Data
(1) 4925/   180E1 : 18                          dc.b    $18
(1) 4925/   180E2 : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4925/   180E4 : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4925/   180E6 :  (MACRO-2)                          DAC_Setup $09,DAC_AF_B0_Data
(1) 4925/   180E6 : 09                          dc.b    $09
(1) 4925/   180E7 : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4925/   180E9 : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4925/   180EB :  (MACRO-2)                          DAC_Setup $12,DAC_AF_B0_Data
(1) 4925/   180EB : 12                          dc.b    $12
(1) 4925/   180EC : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4925/   180EE : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4925/   180F0 :  (MACRO-2)                          DAC_Setup $18,DAC_B1_Data
(1) 4925/   180F0 : 18                          dc.b    $18
(1) 4925/   180F1 : 850B                        dc.w    DAC_B1_DATA_Len
(1) 4925/   180F3 : 6A95                        dc.w    DAC_B1_DATA_Ptr
(1) 4925/   180F5 :  (MACRO-2)                          DAC_Setup $16,DAC_B2_B3_Data
(1) 4925/   180F5 : 16                          dc.b    $16
(1) 4925/   180F6 : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4925/   180F8 : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4925/   180FA :  (MACRO-2)                          DAC_Setup $20,DAC_B2_B3_Data
(1) 4925/   180FA : 20                          dc.b    $20
(1) 4925/   180FB : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4925/   180FD : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4925/   180FF :  (MACRO-2)                          DAC_Setup $0C,DAC_B4_C1_C2_C3_C4_Data
(1) 4925/   180FF : 0C                          dc.b    $0C
(1) 4925/   18100 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4925/   18102 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4925/   18104 :  (MACRO-2)                          DAC_Setup $0C,DAC_B5_Data
(1) 4925/   18104 : 0C                          dc.b    $0C
(1) 4925/   18105 : 4006                        dc.w    DAC_B5_DATA_Len
(1) 4925/   18107 : ECA6                        dc.w    DAC_B5_DATA_Ptr
(1) 4925/   18109 :  (MACRO-2)                          DAC_Setup $0C,DAC_B6_Data
(1) 4925/   18109 : 0C                          dc.b    $0C
(1) 4925/   1810A : 5505                        dc.w    DAC_B6_DATA_Len
(1) 4925/   1810C : 2CAD                        dc.w    DAC_B6_DATA_Ptr
(1) 4925/   1810E :  (MACRO-2)                          DAC_Setup $18,DAC_B7_Data
(1) 4925/   1810E : 18                          dc.b    $18
(1) 4925/   1810F : B104                        dc.w    DAC_B7_DATA_Len
(1) 4925/   18111 : 81B2                        dc.w    DAC_B7_DATA_Ptr
(1) 4925/   18113 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4925/   18113 : 0C                          dc.b    $0C
(1) 4925/   18114 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4925/   18116 : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4925/   18118 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4925/   18118 : 0C                          dc.b    $0C
(1) 4925/   18119 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4925/   1811B : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4925/   1811D :  (MACRO-2)                          DAC_Setup $18,DAC_BA_Data
(1) 4925/   1811D : 18                          dc.b    $18
(1) 4925/   1811E : B304                        dc.w    DAC_BA_DATA_Len
(1) 4925/   18120 : 6CBD                        dc.w    DAC_BA_DATA_Ptr
(1) 4925/   18122 :  (MACRO-2)                          DAC_Setup $18,DAC_BB_Data
(1) 4925/   18122 : 18                          dc.b    $18
(1) 4925/   18123 : B601                        dc.w    DAC_BB_DATA_Len
(1) 4925/   18125 : 1FC2                        dc.w    DAC_BB_DATA_Ptr
(1) 4925/   18127 :  (MACRO-2)                          DAC_Setup $18,DAC_BC_Data
(1) 4925/   18127 : 18                          dc.b    $18
(1) 4925/   18128 : B708                        dc.w    DAC_BC_DATA_Len
(1) 4925/   1812A : D5C3                        dc.w    DAC_BC_DATA_Ptr
(1) 4925/   1812C :  (MACRO-2)                          DAC_Setup $0C,DAC_BD_Data
(1) 4925/   1812C : 0C                          dc.b    $0C
(1) 4925/   1812D : BE05                        dc.w    DAC_BD_DATA_Len
(1) 4925/   1812F : 8CCC                        dc.w    DAC_BD_DATA_Ptr
(1) 4925/   18131 :  (MACRO-2)                          DAC_Setup $0C,DAC_BE_Data
(1) 4925/   18131 : 0C                          dc.b    $0C
(1) 4925/   18132 : 1007                        dc.w    DAC_BE_DATA_Len
(1) 4925/   18134 : 4AD2                        dc.w    DAC_BE_DATA_Ptr
(1) 4925/   18136 :  (MACRO-2)                          DAC_Setup $1C,DAC_BF_Data
(1) 4925/   18136 : 1C                          dc.b    $1C
(1) 4925/   18137 : DC01                        dc.w    DAC_BF_DATA_Len
(1) 4925/   18139 : 5AD9                        dc.w    DAC_BF_DATA_Ptr
(1) 4925/   1813B :  (MACRO-2)                          DAC_Setup $0B,DAC_C0_Data
(1) 4925/   1813B : 0B                          dc.b    $0B
(1) 4925/   1813C : 3608                        dc.w    DAC_C0_DATA_Len
(1) 4925/   1813E : 36DB                        dc.w    DAC_C0_DATA_Ptr
(1) 4925/   18140 :  (MACRO-2)                          DAC_Setup $0F,DAC_B4_C1_C2_C3_C4_Data
(1) 4925/   18140 : 0F                          dc.b    $0F
(1) 4925/   18141 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4925/   18143 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4925/   18145 :  (MACRO-2)                          DAC_Setup $11,DAC_B4_C1_C2_C3_C4_Data
(1) 4925/   18145 : 11                          dc.b    $11
(1) 4925/   18146 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4925/   18148 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4925/   1814A :  (MACRO-2)                          DAC_Setup $12,DAC_B4_C1_C2_C3_C4_Data
(1) 4925/   1814A : 12                          dc.b    $12
(1) 4925/   1814B : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4925/   1814D : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4925/   1814F :  (MACRO-2)                          DAC_Setup $0B,DAC_B4_C1_C2_C3_C4_Data
(1) 4925/   1814F : 0B                          dc.b    $0B
(1) 4925/   18150 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4925/   18152 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4925/   18154 :  (MACRO-2)                          DAC_Setup $17,DAC_C5_Data
(1) 4925/   18154 : 17                          dc.b    $17
(1) 4925/   18155 : 9402                        dc.w    DAC_C5_DATA_Len
(1) 4925/   18157 : BD81                        dc.w    DAC_C5_DATA_Ptr
(1) 4925/   18159 :  (MACRO-2)                          DAC_Setup $01,DAC_C6_Data
(1) 4925/   18159 : 01                          dc.b    $01
(1) 4925/   1815A : 2307                        dc.w    DAC_C6_DATA_Len
(1) 4925/   1815C : 5184                        dc.w    DAC_C6_DATA_Ptr
(1) 4925/   1815E :  (MACRO-2)                          DAC_Setup $06,DAC_C7_Data
(1) 4925/   1815E : 06                          dc.b    $06
(1) 4925/   1815F : 7605                        dc.w    DAC_C7_DATA_Len
(1) 4925/   18161 : 748B                        dc.w    DAC_C7_DATA_Ptr
(1) 4925/   18163 :  (MACRO-2)                          DAC_Setup $08,DAC_C8_Data
(1) 4925/   18163 : 08                          dc.b    $08
(1) 4925/   18164 : 4C07                        dc.w    DAC_C8_DATA_Len
(1) 4925/   18166 : EA90                        dc.w    DAC_C8_DATA_Ptr
(1) 4925/   18168 :  (MACRO-2)                          DAC_Setup $1B,DAC_C9_CC_CD_CE_CF_Data
(1) 4925/   18168 : 1B                          dc.b    $1B
(1) 4925/   18169 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4925/   1816B : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4925/   1816D :  (MACRO-2)                          DAC_Setup $0A,DAC_CA_D0_D1_D2_Data
(1) 4925/   1816D : 0A                          dc.b    $0A
(1) 4925/   1816E : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4925/   18170 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4925/   18172 :  (MACRO-2)                          DAC_Setup $1B,DAC_CB_D3_D4_D5_Data
(1) 4925/   18172 : 1B                          dc.b    $1B
(1) 4925/   18173 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4925/   18175 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4925/   18177 :  (MACRO-2)                          DAC_Setup $12,DAC_C9_CC_CD_CE_CF_Data
(1) 4925/   18177 : 12                          dc.b    $12
(1) 4925/   18178 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4925/   1817A : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4925/   1817C :  (MACRO-2)                          DAC_Setup $15,DAC_C9_CC_CD_CE_CF_Data
(1) 4925/   1817C : 15                          dc.b    $15
(1) 4925/   1817D : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4925/   1817F : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4925/   18181 :  (MACRO-2)                          DAC_Setup $1C,DAC_C9_CC_CD_CE_CF_Data
(1) 4925/   18181 : 1C                          dc.b    $1C
(1) 4925/   18182 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4925/   18184 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4925/   18186 :  (MACRO-2)                          DAC_Setup $1D,DAC_C9_CC_CD_CE_CF_Data
(1) 4925/   18186 : 1D                          dc.b    $1D
(1) 4925/   18187 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4925/   18189 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4925/   1818B :  (MACRO-2)                          DAC_Setup $02,DAC_CA_D0_D1_D2_Data
(1) 4925/   1818B : 02                          dc.b    $02
(1) 4925/   1818C : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4925/   1818E : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4925/   18190 :  (MACRO-2)                          DAC_Setup $05,DAC_CA_D0_D1_D2_Data
(1) 4925/   18190 : 05                          dc.b    $05
(1) 4925/   18191 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4925/   18193 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4925/   18195 :  (MACRO-2)                          DAC_Setup $08,DAC_CA_D0_D1_D2_Data
(1) 4925/   18195 : 08                          dc.b    $08
(1) 4925/   18196 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4925/   18198 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4925/   1819A :  (MACRO-2)                          DAC_Setup $08,DAC_CB_D3_D4_D5_Data
(1) 4925/   1819A : 08                          dc.b    $08
(1) 4925/   1819B : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4925/   1819D : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4925/   1819F :  (MACRO-2)                          DAC_Setup $0B,DAC_CB_D3_D4_D5_Data
(1) 4925/   1819F : 0B                          dc.b    $0B
(1) 4925/   181A0 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4925/   181A2 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4925/   181A4 :  (MACRO-2)                          DAC_Setup $12,DAC_CB_D3_D4_D5_Data
(1) 4925/   181A4 : 12                          dc.b    $12
(1) 4925/   181A5 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4925/   181A7 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4925/   181A9 :  (MACRO-2)                          DAC_Setup $01,DAC_D6_Data
(1) 4925/   181A9 : 01                          dc.b    $01
(1) 4925/   181AA : 7E15                        dc.w    DAC_D6_DATA_Len
(1) 4925/   181AC : BDB0                        dc.w    DAC_D6_DATA_Ptr
(1) 4925/   181AE :  (MACRO-2)                          DAC_Setup $12,DAC_D7_Data
(1) 4925/   181AE : 12                          dc.b    $12
(1) 4925/   181AF : 4F0A                        dc.w    DAC_D7_DATA_Len
(1) 4925/   181B1 : 3BC6                        dc.w    DAC_D7_DATA_Ptr
(1) 4925/   181B3 :  (MACRO-2)                          DAC_Setup $16,DAC_D8_D9_Data
(1) 4925/   181B3 : 16                          dc.b    $16
(1) 4925/   181B4 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4925/   181B6 : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4925/   181B8 :  (MACRO-2)                          DAC_Setup $20,DAC_D8_D9_Data
(1) 4925/   181B8 : 20                          dc.b    $20
(1) 4925/   181B9 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4925/   181BB : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4926/   181BD :                     
(1) 4927/   181BD : (MACRO)             DAC_AB_Data:			DACBINCLUDE "Sound/DAC/AB.bin"
(1) 4927/   181BD : =$181BD             DAC_AB_Data label *
(1) 4927/   181BD :                             BINCLUDE "Sound/DAC/AB.bin"
(1) 4927/   18AC1 : =$409               DAC_AB_Data_Len  = little_endian(*-DAC_AB_Data)
(1) 4927/   18AC1 : =$BD81              DAC_AB_Data_Ptr  = k68z80Pointer(DAC_AB_Data-soundBankStart)
(1) 4927/   18AC1 : =$18000             DAC_AB_Data_Bank = soundBankStart
(1) 4928/   18AC1 : (MACRO)             DAC_AC_Data:			DACBINCLUDE "Sound/DAC/AC.bin"
(1) 4928/   18AC1 : =$18AC1             DAC_AC_Data label *
(1) 4928/   18AC1 :                             BINCLUDE "Sound/DAC/AC.bin"
(1) 4928/   19042 : =$8105              DAC_AC_Data_Len  = little_endian(*-DAC_AC_Data)
(1) 4928/   19042 : =$C18A              DAC_AC_Data_Ptr  = k68z80Pointer(DAC_AC_Data-soundBankStart)
(1) 4928/   19042 : =$18000             DAC_AC_Data_Bank = soundBankStart
(1) 4929/   19042 : (MACRO)             DAC_AD_AE_Data:			DACBINCLUDE "Sound/DAC/AD-AE.bin"
(1) 4929/   19042 : =$19042             DAC_AD_AE_Data label *
(1) 4929/   19042 :                             BINCLUDE "Sound/DAC/AD-AE.bin"
(1) 4929/   191FE : =$BC01              DAC_AD_AE_Data_Len  = little_endian(*-DAC_AD_AE_Data)
(1) 4929/   191FE : =$4290              DAC_AD_AE_Data_Ptr  = k68z80Pointer(DAC_AD_AE_Data-soundBankStart)
(1) 4929/   191FE : =$18000             DAC_AD_AE_Data_Bank = soundBankStart
(1) 4930/   191FE : (MACRO)             DAC_AF_B0_Data:			DACBINCLUDE "Sound/DAC/AF-B0.bin"
(1) 4930/   191FE : =$191FE             DAC_AF_B0_Data label *
(1) 4930/   191FE :                             BINCLUDE "Sound/DAC/AF-B0.bin"
(1) 4930/   1956A : =$6C03              DAC_AF_B0_Data_Len  = little_endian(*-DAC_AF_B0_Data)
(1) 4930/   1956A : =$FE91              DAC_AF_B0_Data_Ptr  = k68z80Pointer(DAC_AF_B0_Data-soundBankStart)
(1) 4930/   1956A : =$18000             DAC_AF_B0_Data_Bank = soundBankStart
(1) 4931/   1956A : (MACRO)             DAC_B1_Data:			DACBINCLUDE "Sound/DAC/B1.bin"
(1) 4931/   1956A : =$1956A             DAC_B1_Data label *
(1) 4931/   1956A :                             BINCLUDE "Sound/DAC/B1.bin"
(1) 4931/   1A0EF : =$850B              DAC_B1_Data_Len  = little_endian(*-DAC_B1_Data)
(1) 4931/   1A0EF : =$6A95              DAC_B1_Data_Ptr  = k68z80Pointer(DAC_B1_Data-soundBankStart)
(1) 4931/   1A0EF : =$18000             DAC_B1_Data_Bank = soundBankStart
(1) 4932/   1A0EF : (MACRO)             DAC_B4_C1_C2_C3_C4_Data:DACBINCLUDE "Sound/DAC/B4C1-C4.bin"
(1) 4932/   1A0EF : =$1A0EF             DAC_B4_C1_C2_C3_C4_Data label *
(1) 4932/   1A0EF :                             BINCLUDE "Sound/DAC/B4C1-C4.bin"
(1) 4932/   1A6EC : =$FD05              DAC_B4_C1_C2_C3_C4_Data_Len  = little_endian(*-DAC_B4_C1_C2_C3_C4_Data)
(1) 4932/   1A6EC : =$EFA0              DAC_B4_C1_C2_C3_C4_Data_Ptr  = k68z80Pointer(DAC_B4_C1_C2_C3_C4_Data-soundBankStart)
(1) 4932/   1A6EC : =$18000             DAC_B4_C1_C2_C3_C4_Data_Bank = soundBankStart
(1) 4933/   1A6EC : (MACRO)             DAC_B5_Data:			DACBINCLUDE "Sound/DAC/B5.bin"
(1) 4933/   1A6EC : =$1A6EC             DAC_B5_Data label *
(1) 4933/   1A6EC :                             BINCLUDE "Sound/DAC/B5.bin"
(1) 4933/   1AD2C : =$4006              DAC_B5_Data_Len  = little_endian(*-DAC_B5_Data)
(1) 4933/   1AD2C : =$ECA6              DAC_B5_Data_Ptr  = k68z80Pointer(DAC_B5_Data-soundBankStart)
(1) 4933/   1AD2C : =$18000             DAC_B5_Data_Bank = soundBankStart
(1) 4934/   1AD2C : (MACRO)             DAC_B6_Data:			DACBINCLUDE "Sound/DAC/B6.bin"
(1) 4934/   1AD2C : =$1AD2C             DAC_B6_Data label *
(1) 4934/   1AD2C :                             BINCLUDE "Sound/DAC/B6.bin"
(1) 4934/   1B281 : =$5505              DAC_B6_Data_Len  = little_endian(*-DAC_B6_Data)
(1) 4934/   1B281 : =$2CAD              DAC_B6_Data_Ptr  = k68z80Pointer(DAC_B6_Data-soundBankStart)
(1) 4934/   1B281 : =$18000             DAC_B6_Data_Bank = soundBankStart
(1) 4935/   1B281 : (MACRO)             DAC_B7_Data:			DACBINCLUDE "Sound/DAC/B7.bin"
(1) 4935/   1B281 : =$1B281             DAC_B7_Data label *
(1) 4935/   1B281 :                             BINCLUDE "Sound/DAC/B7.bin"
(1) 4935/   1B732 : =$B104              DAC_B7_Data_Len  = little_endian(*-DAC_B7_Data)
(1) 4935/   1B732 : =$81B2              DAC_B7_Data_Ptr  = k68z80Pointer(DAC_B7_Data-soundBankStart)
(1) 4935/   1B732 : =$18000             DAC_B7_Data_Bank = soundBankStart
(1) 4936/   1B732 : (MACRO)             DAC_B8_B9_Data:			DACBINCLUDE "Sound/DAC/B8-B9.bin"
(1) 4936/   1B732 : =$1B732             DAC_B8_B9_Data label *
(1) 4936/   1B732 :                             BINCLUDE "Sound/DAC/B8-B9.bin"
(1) 4936/   1BD6C : =$3A06              DAC_B8_B9_Data_Len  = little_endian(*-DAC_B8_B9_Data)
(1) 4936/   1BD6C : =$32B7              DAC_B8_B9_Data_Ptr  = k68z80Pointer(DAC_B8_B9_Data-soundBankStart)
(1) 4936/   1BD6C : =$18000             DAC_B8_B9_Data_Bank = soundBankStart
(1) 4937/   1BD6C : (MACRO)             DAC_BA_Data:			DACBINCLUDE "Sound/DAC/BA.bin"
(1) 4937/   1BD6C : =$1BD6C             DAC_BA_Data label *
(1) 4937/   1BD6C :                             BINCLUDE "Sound/DAC/BA.bin"
(1) 4937/   1C21F : =$B304              DAC_BA_Data_Len  = little_endian(*-DAC_BA_Data)
(1) 4937/   1C21F : =$6CBD              DAC_BA_Data_Ptr  = k68z80Pointer(DAC_BA_Data-soundBankStart)
(1) 4937/   1C21F : =$18000             DAC_BA_Data_Bank = soundBankStart
(1) 4938/   1C21F : (MACRO)             DAC_BB_Data:			DACBINCLUDE "Sound/DAC/BB.bin"
(1) 4938/   1C21F : =$1C21F             DAC_BB_Data label *
(1) 4938/   1C21F :                             BINCLUDE "Sound/DAC/BB.bin"
(1) 4938/   1C3D5 : =$B601              DAC_BB_Data_Len  = little_endian(*-DAC_BB_Data)
(1) 4938/   1C3D5 : =$1FC2              DAC_BB_Data_Ptr  = k68z80Pointer(DAC_BB_Data-soundBankStart)
(1) 4938/   1C3D5 : =$18000             DAC_BB_Data_Bank = soundBankStart
(1) 4939/   1C3D5 : (MACRO)             DAC_BC_Data:			DACBINCLUDE "Sound/DAC/BC.bin"
(1) 4939/   1C3D5 : =$1C3D5             DAC_BC_Data label *
(1) 4939/   1C3D5 :                             BINCLUDE "Sound/DAC/BC.bin"
(1) 4939/   1CC8C : =$B708              DAC_BC_Data_Len  = little_endian(*-DAC_BC_Data)
(1) 4939/   1CC8C : =$D5C3              DAC_BC_Data_Ptr  = k68z80Pointer(DAC_BC_Data-soundBankStart)
(1) 4939/   1CC8C : =$18000             DAC_BC_Data_Bank = soundBankStart
(1) 4940/   1CC8C : (MACRO)             DAC_BD_Data:			DACBINCLUDE "Sound/DAC/BD.bin"
(1) 4940/   1CC8C : =$1CC8C             DAC_BD_Data label *
(1) 4940/   1CC8C :                             BINCLUDE "Sound/DAC/BD.bin"
(1) 4940/   1D24A : =$BE05              DAC_BD_Data_Len  = little_endian(*-DAC_BD_Data)
(1) 4940/   1D24A : =$8CCC              DAC_BD_Data_Ptr  = k68z80Pointer(DAC_BD_Data-soundBankStart)
(1) 4940/   1D24A : =$18000             DAC_BD_Data_Bank = soundBankStart
(1) 4941/   1D24A : (MACRO)             DAC_BE_Data:			DACBINCLUDE "Sound/DAC/BE.bin"
(1) 4941/   1D24A : =$1D24A             DAC_BE_Data label *
(1) 4941/   1D24A :                             BINCLUDE "Sound/DAC/BE.bin"
(1) 4941/   1D95A : =$1007              DAC_BE_Data_Len  = little_endian(*-DAC_BE_Data)
(1) 4941/   1D95A : =$4AD2              DAC_BE_Data_Ptr  = k68z80Pointer(DAC_BE_Data-soundBankStart)
(1) 4941/   1D95A : =$18000             DAC_BE_Data_Bank = soundBankStart
(1) 4942/   1D95A : (MACRO)             DAC_BF_Data:			DACBINCLUDE "Sound/DAC/BF.bin"
(1) 4942/   1D95A : =$1D95A             DAC_BF_Data label *
(1) 4942/   1D95A :                             BINCLUDE "Sound/DAC/BF.bin"
(1) 4942/   1DB36 : =$DC01              DAC_BF_Data_Len  = little_endian(*-DAC_BF_Data)
(1) 4942/   1DB36 : =$5AD9              DAC_BF_Data_Ptr  = k68z80Pointer(DAC_BF_Data-soundBankStart)
(1) 4942/   1DB36 : =$18000             DAC_BF_Data_Bank = soundBankStart
(1) 4943/   1DB36 : (MACRO)             DAC_C0_Data:			DACBINCLUDE "Sound/DAC/C0.bin"
(1) 4943/   1DB36 : =$1DB36             DAC_C0_Data label *
(1) 4943/   1DB36 :                             BINCLUDE "Sound/DAC/C0.bin"
(1) 4943/   1E36C : =$3608              DAC_C0_Data_Len  = little_endian(*-DAC_C0_Data)
(1) 4943/   1E36C : =$36DB              DAC_C0_Data_Ptr  = k68z80Pointer(DAC_C0_Data-soundBankStart)
(1) 4943/   1E36C : =$18000             DAC_C0_Data_Bank = soundBankStart
(1) 4944/   1E36C :                     
(1) 4945/   1E36C : (MACRO)             	finishBank
soundBank DacBank3 has $1C94 bytes free at end, needed $942 bytes padding at start.
(1) 4945/   1E36C :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4947/   1E36C :                     
(1) 4949/   1E36C :                     ; ---------------------------------------------------------------------------
(1) 4950/   1E36C :                     ; Dac Bank 4
(1) 4951/   1E36C :                     ; ---------------------------------------------------------------------------
(1) 4952/   1E36C : (MACRO)             DacBank4:			startBank
(1) 4952/   1E36C : =$1E36C                     set     soundBankDecl,*
(1) 4952/   1E36C :  (MACRO-2)                  align   $8000
(1) 4952/   1E36C :   (MACRO-3)                 cnop 0,$8000
(1) 4952/   1E36C :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4952/   1E36C : =$1C94              .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4952/   1E36C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1E36C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1E76C : =$1894              .diff := .diff - 1024
(1) 4952/   1E76C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1E76C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1EB6C : =$1494              .diff := .diff - 1024
(1) 4952/   1EB6C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1EB6C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1EF6C : =$1094              .diff := .diff - 1024
(1) 4952/   1EF6C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1EF6C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1F36C : =$C94               .diff := .diff - 1024
(1) 4952/   1F36C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1F36C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1F76C : =$894               .diff := .diff - 1024
(1) 4952/   1F76C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1F76C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1FB6C : =$494               .diff := .diff - 1024
(1) 4952/   1FB6C :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4952/   1FB6C : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   1FF6C : =$94                .diff := .diff - 1024
(1) 4952/   1FF6C :                     
(1) 4952/   1FF6C : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4952/   20000 : =$20000             DacBank4 label *
(1) 4952/   20000 : =$20000                     set     soundBankStart,DacBank4
(1) 4952/   20000 : =$1C94                      set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4952/   20000 : =DacBank4                   set     soundBankName,"DacBank4"
(1) 4953/   20000 : (MACRO)             	DAC_Master_Table
(1) 4953/   20000 :  (MACRO-2)                          DAC_Setup $04,DAC_81_Data
(1) 4953/   20000 : 04                          dc.b    $04
(1) 4953/   20001 : 7E07                        dc.w    DAC_81_DATA_Len
(1) 4953/   20003 : 8C84                        dc.w    DAC_81_DATA_Ptr
(1) 4953/   20005 :  (MACRO-2)                          DAC_Setup $0E,DAC_82_83_84_85_Data
(1) 4953/   20005 : 0E                          dc.b    $0E
(1) 4953/   20006 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4953/   20008 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4953/   2000A :  (MACRO-2)                          DAC_Setup $14,DAC_82_83_84_85_Data
(1) 4953/   2000A : 14                          dc.b    $14
(1) 4953/   2000B : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4953/   2000D : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4953/   2000F :  (MACRO-2)                          DAC_Setup $1A,DAC_82_83_84_85_Data
(1) 4953/   2000F : 1A                          dc.b    $1A
(1) 4953/   20010 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4953/   20012 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4953/   20014 :  (MACRO-2)                          DAC_Setup $20,DAC_82_83_84_85_Data
(1) 4953/   20014 : 20                          dc.b    $20
(1) 4953/   20015 : 6D04                        dc.w    DAC_82_83_84_85_DATA_Len
(1) 4953/   20017 : 0A8C                        dc.w    DAC_82_83_84_85_DATA_Ptr
(1) 4953/   20019 :  (MACRO-2)                          DAC_Setup $04,DAC_86_Data
(1) 4953/   20019 : 04                          dc.b    $04
(1) 4953/   2001A : CF02                        dc.w    DAC_86_DATA_Len
(1) 4953/   2001C : BD81                        dc.w    DAC_86_DATA_Ptr
(1) 4953/   2001E :  (MACRO-2)                          DAC_Setup $04,DAC_87_Data
(1) 4953/   2001E : 04                          dc.b    $04
(1) 4953/   2001F : 1C07                        dc.w    DAC_87_DATA_Len
(1) 4953/   20021 : 62B8                        dc.w    DAC_87_DATA_Ptr
(1) 4953/   20023 :  (MACRO-2)                          DAC_Setup $06,DAC_88_Data
(1) 4953/   20023 : 06                          dc.b    $06
(1) 4953/   20024 : 2712                        dc.w    DAC_88_DATA_Len
(1) 4953/   20026 : F49F                        dc.w    DAC_88_DATA_Ptr
(1) 4953/   20028 :  (MACRO-2)                          DAC_Setup $0A,DAC_89_Data
(1) 4953/   20028 : 0A                          dc.b    $0A
(1) 4953/   20029 : FD09                        dc.w    DAC_89_DATA_Len
(1) 4953/   2002B : 6DC4                        dc.w    DAC_89_DATA_Ptr
(1) 4953/   2002D :  (MACRO-2)                          DAC_Setup $14,DAC_8A_8B_Data
(1) 4953/   2002D : 14                          dc.b    $14
(1) 4953/   2002E : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4953/   20030 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4953/   20032 :  (MACRO-2)                          DAC_Setup $1B,DAC_8A_8B_Data
(1) 4953/   20032 : 1B                          dc.b    $1B
(1) 4953/   20033 : 6001                        dc.w    DAC_8A_8B_DATA_Len
(1) 4953/   20035 : 1BB2                        dc.w    DAC_8A_8B_DATA_Ptr
(1) 4953/   20037 :  (MACRO-2)                          DAC_Setup $08,DAC_8C_Data
(1) 4953/   20037 : 08                          dc.b    $08
(1) 4953/   20038 : 6000                        dc.w    DAC_8C_DATA_Len
(1) 4953/   2003A : 7BB3                        dc.w    DAC_8C_DATA_Ptr
(1) 4953/   2003C :  (MACRO-2)                          DAC_Setup $0B,DAC_8D_8E_Data
(1) 4953/   2003C : 0B                          dc.b    $0B
(1) 4953/   2003D : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4953/   2003F : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4953/   20041 :  (MACRO-2)                          DAC_Setup $11,DAC_8D_8E_Data
(1) 4953/   20041 : 11                          dc.b    $11
(1) 4953/   20042 : 8704                        dc.w    DAC_8D_8E_DATA_Len
(1) 4953/   20044 : DBB3                        dc.w    DAC_8D_8E_DATA_Ptr
(1) 4953/   20046 :  (MACRO-2)                          DAC_Setup $08,DAC_8F_Data
(1) 4953/   20046 : 08                          dc.b    $08
(1) 4953/   20047 : EF04                        dc.w    DAC_8F_DATA_Len
(1) 4953/   20049 : 7EBF                        dc.w    DAC_8F_DATA_Ptr
(1) 4953/   2004B :  (MACRO-2)                          DAC_Setup $03,DAC_90_91_92_93_Data
(1) 4953/   2004B : 03                          dc.b    $03
(1) 4953/   2004C : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4953/   2004E : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4953/   20050 :  (MACRO-2)                          DAC_Setup $07,DAC_90_91_92_93_Data
(1) 4953/   20050 : 07                          dc.b    $07
(1) 4953/   20051 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4953/   20053 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4953/   20055 :  (MACRO-2)                          DAC_Setup $0A,DAC_90_91_92_93_Data
(1) 4953/   20055 : 0A                          dc.b    $0A
(1) 4953/   20056 : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4953/   20058 : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4953/   2005A :  (MACRO-2)                          DAC_Setup $0E,DAC_90_91_92_93_Data
(1) 4953/   2005A : 0E                          dc.b    $0E
(1) 4953/   2005B : 2206                        dc.w    DAC_90_91_92_93_DATA_Len
(1) 4953/   2005D : D299                        dc.w    DAC_90_91_92_93_DATA_Ptr
(1) 4953/   2005F :  (MACRO-2)                          DAC_Setup $06,DAC_94_95_96_97_Data
(1) 4953/   2005F : 06                          dc.b    $06
(1) 4953/   20060 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4953/   20062 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4953/   20064 :  (MACRO-2)                          DAC_Setup $0A,DAC_94_95_96_97_Data
(1) 4953/   20064 : 0A                          dc.b    $0A
(1) 4953/   20065 : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4953/   20067 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4953/   20069 :  (MACRO-2)                          DAC_Setup $0D,DAC_94_95_96_97_Data
(1) 4953/   20069 : 0D                          dc.b    $0D
(1) 4953/   2006A : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4953/   2006C : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4953/   2006E :  (MACRO-2)                          DAC_Setup $12,DAC_94_95_96_97_Data
(1) 4953/   2006E : 12                          dc.b    $12
(1) 4953/   2006F : 5B09                        dc.w    DAC_94_95_96_97_DATA_Len
(1) 4953/   20071 : 7790                        dc.w    DAC_94_95_96_97_DATA_Ptr
(1) 4953/   20073 :  (MACRO-2)                          DAC_Setup $0B,DAC_98_99_9A_Data
(1) 4953/   20073 : 0B                          dc.b    $0B
(1) 4953/   20074 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4953/   20076 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4953/   20078 :  (MACRO-2)                          DAC_Setup $13,DAC_98_99_9A_Data
(1) 4953/   20078 : 13                          dc.b    $13
(1) 4953/   20079 : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4953/   2007B : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4953/   2007D :  (MACRO-2)                          DAC_Setup $16,DAC_98_99_9A_Data
(1) 4953/   2007D : 16                          dc.b    $16
(1) 4953/   2007E : 680C                        dc.w    DAC_98_99_9A_DATA_Len
(1) 4953/   20080 : 6ACE                        dc.w    DAC_98_99_9A_DATA_Ptr
(1) 4953/   20082 :  (MACRO-2)                          DAC_Setup $0C,DAC_9B_Data
(1) 4953/   20082 : 0C                          dc.b    $0C
(1) 4953/   20083 : 2006                        dc.w    DAC_9B_DATA_Len
(1) 4953/   20085 : D2DA                        dc.w    DAC_9B_DATA_Ptr
(1) 4953/   20087 :  (MACRO-2)                          DAC_Setup $0A,DAC_9C_Data
(1) 4953/   20087 : 0A                          dc.b    $0A
(1) 4953/   20088 : 3203                        dc.w    DAC_9C_DATA_Len
(1) 4953/   2008A : BD81                        dc.w    DAC_9C_DATA_Ptr
(1) 4953/   2008C :  (MACRO-2)                          DAC_Setup $18,DAC_9D_Data
(1) 4953/   2008C : 18                          dc.b    $18
(1) 4953/   2008D : 4902                        dc.w    DAC_9D_DATA_Len
(1) 4953/   2008F : EF84                        dc.w    DAC_9D_DATA_Ptr
(1) 4953/   20091 :  (MACRO-2)                          DAC_Setup $18,DAC_9E_Data
(1) 4953/   20091 : 18                          dc.b    $18
(1) 4953/   20092 : 8002                        dc.w    DAC_9E_DATA_Len
(1) 4953/   20094 : 3887                        dc.w    DAC_9E_DATA_Ptr
(1) 4953/   20096 :  (MACRO-2)                          DAC_Setup $0C,DAC_9F_Data
(1) 4953/   20096 : 0C                          dc.b    $0C
(1) 4953/   20097 : A512                        dc.w    DAC_9F_DATA_Len
(1) 4953/   20099 : B889                        dc.w    DAC_9F_DATA_Ptr
(1) 4953/   2009B :  (MACRO-2)                          DAC_Setup $0C,DAC_A0_Data
(1) 4953/   2009B : 0C                          dc.b    $0C
(1) 4953/   2009C : BA0D                        dc.w    DAC_A0_DATA_Len
(1) 4953/   2009E : 5D9C                        dc.w    DAC_A0_DATA_Ptr
(1) 4953/   200A0 :  (MACRO-2)                          DAC_Setup $0A,DAC_A1_Data
(1) 4953/   200A0 : 0A                          dc.b    $0A
(1) 4953/   200A1 : A80B                        dc.w    DAC_A1_DATA_Len
(1) 4953/   200A3 : 17AA                        dc.w    DAC_A1_DATA_Ptr
(1) 4953/   200A5 :  (MACRO-2)                          DAC_Setup $0A,DAC_A2_Data
(1) 4953/   200A5 : 0A                          dc.b    $0A
(1) 4953/   200A6 : 580D                        dc.w    DAC_A2_DATA_Len
(1) 4953/   200A8 : BFB5                        dc.w    DAC_A2_DATA_Ptr
(1) 4953/   200AA :  (MACRO-2)                          DAC_Setup $18,DAC_A3_Data
(1) 4953/   200AA : 18                          dc.b    $18
(1) 4953/   200AB : 9E02                        dc.w    DAC_A3_DATA_Len
(1) 4953/   200AD : 17C3                        dc.w    DAC_A3_DATA_Ptr
(1) 4953/   200AF :  (MACRO-2)                          DAC_Setup $18,DAC_A4_Data
(1) 4953/   200AF : 18                          dc.b    $18
(1) 4953/   200B0 : 8A02                        dc.w    DAC_A4_DATA_Len
(1) 4953/   200B2 : B5C5                        dc.w    DAC_A4_DATA_Ptr
(1) 4953/   200B4 :  (MACRO-2)                          DAC_Setup $0C,DAC_A5_Data
(1) 4953/   200B4 : 0C                          dc.b    $0C
(1) 4953/   200B5 : 600C                        dc.w    DAC_A5_DATA_Len
(1) 4953/   200B7 : 3FC8                        dc.w    DAC_A5_DATA_Ptr
(1) 4953/   200B9 :  (MACRO-2)                          DAC_Setup $09,DAC_A6_Data
(1) 4953/   200B9 : 09                          dc.b    $09
(1) 4953/   200BA : D606                        dc.w    DAC_A6_DATA_Len
(1) 4953/   200BC : 9FD4                        dc.w    DAC_A6_DATA_Ptr
(1) 4953/   200BE :  (MACRO-2)                          DAC_Setup $18,DAC_A7_Data
(1) 4953/   200BE : 18                          dc.b    $18
(1) 4953/   200BF : F206                        dc.w    DAC_A7_DATA_Len
(1) 4953/   200C1 : 75DB                        dc.w    DAC_A7_DATA_Ptr
(1) 4953/   200C3 :  (MACRO-2)                          DAC_Setup $18,DAC_A8_Data
(1) 4953/   200C3 : 18                          dc.b    $18
(1) 4953/   200C4 : 7A03                        dc.w    DAC_A8_DATA_Len
(1) 4953/   200C6 : 67E2                        dc.w    DAC_A8_DATA_Ptr
(1) 4953/   200C8 :  (MACRO-2)                          DAC_Setup $0C,DAC_A9_Data
(1) 4953/   200C8 : 0C                          dc.b    $0C
(1) 4953/   200C9 : 4F0A                        dc.w    DAC_A9_DATA_Len
(1) 4953/   200CB : E1E5                        dc.w    DAC_A9_DATA_Ptr
(1) 4953/   200CD :  (MACRO-2)                          DAC_Setup $0A,DAC_AA_Data
(1) 4953/   200CD : 0A                          dc.b    $0A
(1) 4953/   200CE : 8E06                        dc.w    DAC_AA_DATA_Len
(1) 4953/   200D0 : 30F0                        dc.w    DAC_AA_DATA_Ptr
(1) 4953/   200D2 :  (MACRO-2)                          DAC_Setup $0D,DAC_AB_Data
(1) 4953/   200D2 : 0D                          dc.b    $0D
(1) 4953/   200D3 : 0409                        dc.w    DAC_AB_DATA_Len
(1) 4953/   200D5 : BD81                        dc.w    DAC_AB_DATA_Ptr
(1) 4953/   200D7 :  (MACRO-2)                          DAC_Setup $06,DAC_AC_Data
(1) 4953/   200D7 : 06                          dc.b    $06
(1) 4953/   200D8 : 8105                        dc.w    DAC_AC_DATA_Len
(1) 4953/   200DA : C18A                        dc.w    DAC_AC_DATA_Ptr
(1) 4953/   200DC :  (MACRO-2)                          DAC_Setup $10,DAC_AD_AE_Data
(1) 4953/   200DC : 10                          dc.b    $10
(1) 4953/   200DD : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4953/   200DF : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4953/   200E1 :  (MACRO-2)                          DAC_Setup $18,DAC_AD_AE_Data
(1) 4953/   200E1 : 18                          dc.b    $18
(1) 4953/   200E2 : BC01                        dc.w    DAC_AD_AE_DATA_Len
(1) 4953/   200E4 : 4290                        dc.w    DAC_AD_AE_DATA_Ptr
(1) 4953/   200E6 :  (MACRO-2)                          DAC_Setup $09,DAC_AF_B0_Data
(1) 4953/   200E6 : 09                          dc.b    $09
(1) 4953/   200E7 : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4953/   200E9 : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4953/   200EB :  (MACRO-2)                          DAC_Setup $12,DAC_AF_B0_Data
(1) 4953/   200EB : 12                          dc.b    $12
(1) 4953/   200EC : 6C03                        dc.w    DAC_AF_B0_DATA_Len
(1) 4953/   200EE : FE91                        dc.w    DAC_AF_B0_DATA_Ptr
(1) 4953/   200F0 :  (MACRO-2)                          DAC_Setup $18,DAC_B1_Data
(1) 4953/   200F0 : 18                          dc.b    $18
(1) 4953/   200F1 : 850B                        dc.w    DAC_B1_DATA_Len
(1) 4953/   200F3 : 6A95                        dc.w    DAC_B1_DATA_Ptr
(1) 4953/   200F5 :  (MACRO-2)                          DAC_Setup $16,DAC_B2_B3_Data
(1) 4953/   200F5 : 16                          dc.b    $16
(1) 4953/   200F6 : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4953/   200F8 : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4953/   200FA :  (MACRO-2)                          DAC_Setup $20,DAC_B2_B3_Data
(1) 4953/   200FA : 20                          dc.b    $20
(1) 4953/   200FB : 4808                        dc.w    DAC_B2_B3_DATA_Len
(1) 4953/   200FD : F2E0                        dc.w    DAC_B2_B3_DATA_Ptr
(1) 4953/   200FF :  (MACRO-2)                          DAC_Setup $0C,DAC_B4_C1_C2_C3_C4_Data
(1) 4953/   200FF : 0C                          dc.b    $0C
(1) 4953/   20100 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4953/   20102 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4953/   20104 :  (MACRO-2)                          DAC_Setup $0C,DAC_B5_Data
(1) 4953/   20104 : 0C                          dc.b    $0C
(1) 4953/   20105 : 4006                        dc.w    DAC_B5_DATA_Len
(1) 4953/   20107 : ECA6                        dc.w    DAC_B5_DATA_Ptr
(1) 4953/   20109 :  (MACRO-2)                          DAC_Setup $0C,DAC_B6_Data
(1) 4953/   20109 : 0C                          dc.b    $0C
(1) 4953/   2010A : 5505                        dc.w    DAC_B6_DATA_Len
(1) 4953/   2010C : 2CAD                        dc.w    DAC_B6_DATA_Ptr
(1) 4953/   2010E :  (MACRO-2)                          DAC_Setup $18,DAC_B7_Data
(1) 4953/   2010E : 18                          dc.b    $18
(1) 4953/   2010F : B104                        dc.w    DAC_B7_DATA_Len
(1) 4953/   20111 : 81B2                        dc.w    DAC_B7_DATA_Ptr
(1) 4953/   20113 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4953/   20113 : 0C                          dc.b    $0C
(1) 4953/   20114 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4953/   20116 : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4953/   20118 :  (MACRO-2)                          DAC_Setup $0C,DAC_B8_B9_Data
(1) 4953/   20118 : 0C                          dc.b    $0C
(1) 4953/   20119 : 3A06                        dc.w    DAC_B8_B9_DATA_Len
(1) 4953/   2011B : 32B7                        dc.w    DAC_B8_B9_DATA_Ptr
(1) 4953/   2011D :  (MACRO-2)                          DAC_Setup $18,DAC_BA_Data
(1) 4953/   2011D : 18                          dc.b    $18
(1) 4953/   2011E : B304                        dc.w    DAC_BA_DATA_Len
(1) 4953/   20120 : 6CBD                        dc.w    DAC_BA_DATA_Ptr
(1) 4953/   20122 :  (MACRO-2)                          DAC_Setup $18,DAC_BB_Data
(1) 4953/   20122 : 18                          dc.b    $18
(1) 4953/   20123 : B601                        dc.w    DAC_BB_DATA_Len
(1) 4953/   20125 : 1FC2                        dc.w    DAC_BB_DATA_Ptr
(1) 4953/   20127 :  (MACRO-2)                          DAC_Setup $18,DAC_BC_Data
(1) 4953/   20127 : 18                          dc.b    $18
(1) 4953/   20128 : B708                        dc.w    DAC_BC_DATA_Len
(1) 4953/   2012A : D5C3                        dc.w    DAC_BC_DATA_Ptr
(1) 4953/   2012C :  (MACRO-2)                          DAC_Setup $0C,DAC_BD_Data
(1) 4953/   2012C : 0C                          dc.b    $0C
(1) 4953/   2012D : BE05                        dc.w    DAC_BD_DATA_Len
(1) 4953/   2012F : 8CCC                        dc.w    DAC_BD_DATA_Ptr
(1) 4953/   20131 :  (MACRO-2)                          DAC_Setup $0C,DAC_BE_Data
(1) 4953/   20131 : 0C                          dc.b    $0C
(1) 4953/   20132 : 1007                        dc.w    DAC_BE_DATA_Len
(1) 4953/   20134 : 4AD2                        dc.w    DAC_BE_DATA_Ptr
(1) 4953/   20136 :  (MACRO-2)                          DAC_Setup $1C,DAC_BF_Data
(1) 4953/   20136 : 1C                          dc.b    $1C
(1) 4953/   20137 : DC01                        dc.w    DAC_BF_DATA_Len
(1) 4953/   20139 : 5AD9                        dc.w    DAC_BF_DATA_Ptr
(1) 4953/   2013B :  (MACRO-2)                          DAC_Setup $0B,DAC_C0_Data
(1) 4953/   2013B : 0B                          dc.b    $0B
(1) 4953/   2013C : 3608                        dc.w    DAC_C0_DATA_Len
(1) 4953/   2013E : 36DB                        dc.w    DAC_C0_DATA_Ptr
(1) 4953/   20140 :  (MACRO-2)                          DAC_Setup $0F,DAC_B4_C1_C2_C3_C4_Data
(1) 4953/   20140 : 0F                          dc.b    $0F
(1) 4953/   20141 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4953/   20143 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4953/   20145 :  (MACRO-2)                          DAC_Setup $11,DAC_B4_C1_C2_C3_C4_Data
(1) 4953/   20145 : 11                          dc.b    $11
(1) 4953/   20146 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4953/   20148 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4953/   2014A :  (MACRO-2)                          DAC_Setup $12,DAC_B4_C1_C2_C3_C4_Data
(1) 4953/   2014A : 12                          dc.b    $12
(1) 4953/   2014B : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4953/   2014D : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4953/   2014F :  (MACRO-2)                          DAC_Setup $0B,DAC_B4_C1_C2_C3_C4_Data
(1) 4953/   2014F : 0B                          dc.b    $0B
(1) 4953/   20150 : FD05                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Len
(1) 4953/   20152 : EFA0                        dc.w    DAC_B4_C1_C2_C3_C4_DATA_Ptr
(1) 4953/   20154 :  (MACRO-2)                          DAC_Setup $17,DAC_C5_Data
(1) 4953/   20154 : 17                          dc.b    $17
(1) 4953/   20155 : 9402                        dc.w    DAC_C5_DATA_Len
(1) 4953/   20157 : BD81                        dc.w    DAC_C5_DATA_Ptr
(1) 4953/   20159 :  (MACRO-2)                          DAC_Setup $01,DAC_C6_Data
(1) 4953/   20159 : 01                          dc.b    $01
(1) 4953/   2015A : 2307                        dc.w    DAC_C6_DATA_Len
(1) 4953/   2015C : 5184                        dc.w    DAC_C6_DATA_Ptr
(1) 4953/   2015E :  (MACRO-2)                          DAC_Setup $06,DAC_C7_Data
(1) 4953/   2015E : 06                          dc.b    $06
(1) 4953/   2015F : 7605                        dc.w    DAC_C7_DATA_Len
(1) 4953/   20161 : 748B                        dc.w    DAC_C7_DATA_Ptr
(1) 4953/   20163 :  (MACRO-2)                          DAC_Setup $08,DAC_C8_Data
(1) 4953/   20163 : 08                          dc.b    $08
(1) 4953/   20164 : 4C07                        dc.w    DAC_C8_DATA_Len
(1) 4953/   20166 : EA90                        dc.w    DAC_C8_DATA_Ptr
(1) 4953/   20168 :  (MACRO-2)                          DAC_Setup $1B,DAC_C9_CC_CD_CE_CF_Data
(1) 4953/   20168 : 1B                          dc.b    $1B
(1) 4953/   20169 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4953/   2016B : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4953/   2016D :  (MACRO-2)                          DAC_Setup $0A,DAC_CA_D0_D1_D2_Data
(1) 4953/   2016D : 0A                          dc.b    $0A
(1) 4953/   2016E : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4953/   20170 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4953/   20172 :  (MACRO-2)                          DAC_Setup $1B,DAC_CB_D3_D4_D5_Data
(1) 4953/   20172 : 1B                          dc.b    $1B
(1) 4953/   20173 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4953/   20175 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4953/   20177 :  (MACRO-2)                          DAC_Setup $12,DAC_C9_CC_CD_CE_CF_Data
(1) 4953/   20177 : 12                          dc.b    $12
(1) 4953/   20178 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4953/   2017A : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4953/   2017C :  (MACRO-2)                          DAC_Setup $15,DAC_C9_CC_CD_CE_CF_Data
(1) 4953/   2017C : 15                          dc.b    $15
(1) 4953/   2017D : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4953/   2017F : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4953/   20181 :  (MACRO-2)                          DAC_Setup $1C,DAC_C9_CC_CD_CE_CF_Data
(1) 4953/   20181 : 1C                          dc.b    $1C
(1) 4953/   20182 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4953/   20184 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4953/   20186 :  (MACRO-2)                          DAC_Setup $1D,DAC_C9_CC_CD_CE_CF_Data
(1) 4953/   20186 : 1D                          dc.b    $1D
(1) 4953/   20187 : B50B                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Len
(1) 4953/   20189 : 3698                        dc.w    DAC_C9_CC_CD_CE_CF_DATA_Ptr
(1) 4953/   2018B :  (MACRO-2)                          DAC_Setup $02,DAC_CA_D0_D1_D2_Data
(1) 4953/   2018B : 02                          dc.b    $02
(1) 4953/   2018C : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4953/   2018E : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4953/   20190 :  (MACRO-2)                          DAC_Setup $05,DAC_CA_D0_D1_D2_Data
(1) 4953/   20190 : 05                          dc.b    $05
(1) 4953/   20191 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4953/   20193 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4953/   20195 :  (MACRO-2)                          DAC_Setup $08,DAC_CA_D0_D1_D2_Data
(1) 4953/   20195 : 08                          dc.b    $08
(1) 4953/   20196 : 0E07                        dc.w    DAC_CA_D0_D1_D2_DATA_Len
(1) 4953/   20198 : EBA3                        dc.w    DAC_CA_D0_D1_D2_DATA_Ptr
(1) 4953/   2019A :  (MACRO-2)                          DAC_Setup $08,DAC_CB_D3_D4_D5_Data
(1) 4953/   2019A : 08                          dc.b    $08
(1) 4953/   2019B : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4953/   2019D : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4953/   2019F :  (MACRO-2)                          DAC_Setup $0B,DAC_CB_D3_D4_D5_Data
(1) 4953/   2019F : 0B                          dc.b    $0B
(1) 4953/   201A0 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4953/   201A2 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4953/   201A4 :  (MACRO-2)                          DAC_Setup $12,DAC_CB_D3_D4_D5_Data
(1) 4953/   201A4 : 12                          dc.b    $12
(1) 4953/   201A5 : C405                        dc.w    DAC_CB_D3_D4_D5_DATA_Len
(1) 4953/   201A7 : F9AA                        dc.w    DAC_CB_D3_D4_D5_DATA_Ptr
(1) 4953/   201A9 :  (MACRO-2)                          DAC_Setup $01,DAC_D6_Data
(1) 4953/   201A9 : 01                          dc.b    $01
(1) 4953/   201AA : 7E15                        dc.w    DAC_D6_DATA_Len
(1) 4953/   201AC : BDB0                        dc.w    DAC_D6_DATA_Ptr
(1) 4953/   201AE :  (MACRO-2)                          DAC_Setup $12,DAC_D7_Data
(1) 4953/   201AE : 12                          dc.b    $12
(1) 4953/   201AF : 4F0A                        dc.w    DAC_D7_DATA_Len
(1) 4953/   201B1 : 3BC6                        dc.w    DAC_D7_DATA_Ptr
(1) 4953/   201B3 :  (MACRO-2)                          DAC_Setup $16,DAC_D8_D9_Data
(1) 4953/   201B3 : 16                          dc.b    $16
(1) 4953/   201B4 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4953/   201B6 : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4953/   201B8 :  (MACRO-2)                          DAC_Setup $20,DAC_D8_D9_Data
(1) 4953/   201B8 : 20                          dc.b    $20
(1) 4953/   201B9 : 4808                        dc.w    DAC_D8_D9_DATA_Len
(1) 4953/   201BB : 3AE9                        dc.w    DAC_D8_D9_DATA_Ptr
(1) 4955/   201BD : (MACRO)             DAC_C5_Data:			DACBINCLUDE "Sound/DAC/C5.bin"
(1) 4955/   201BD : =$201BD             DAC_C5_Data label *
(1) 4955/   201BD :                             BINCLUDE "Sound/DAC/C5.bin"
(1) 4955/   20451 : =$9402              DAC_C5_Data_Len  = little_endian(*-DAC_C5_Data)
(1) 4955/   20451 : =$BD81              DAC_C5_Data_Ptr  = k68z80Pointer(DAC_C5_Data-soundBankStart)
(1) 4955/   20451 : =$20000             DAC_C5_Data_Bank = soundBankStart
(1) 4956/   20451 : (MACRO)             DAC_C6_Data:			DACBINCLUDE "Sound/DAC/C6.bin"
(1) 4956/   20451 : =$20451             DAC_C6_Data label *
(1) 4956/   20451 :                             BINCLUDE "Sound/DAC/C6.bin"
(1) 4956/   20B74 : =$2307              DAC_C6_Data_Len  = little_endian(*-DAC_C6_Data)
(1) 4956/   20B74 : =$5184              DAC_C6_Data_Ptr  = k68z80Pointer(DAC_C6_Data-soundBankStart)
(1) 4956/   20B74 : =$20000             DAC_C6_Data_Bank = soundBankStart
(1) 4957/   20B74 : (MACRO)             DAC_C7_Data:			DACBINCLUDE "Sound/DAC/C7.bin"
(1) 4957/   20B74 : =$20B74             DAC_C7_Data label *
(1) 4957/   20B74 :                             BINCLUDE "Sound/DAC/C7.bin"
(1) 4957/   210EA : =$7605              DAC_C7_Data_Len  = little_endian(*-DAC_C7_Data)
(1) 4957/   210EA : =$748B              DAC_C7_Data_Ptr  = k68z80Pointer(DAC_C7_Data-soundBankStart)
(1) 4957/   210EA : =$20000             DAC_C7_Data_Bank = soundBankStart
(1) 4958/   210EA : (MACRO)             DAC_C8_Data:			DACBINCLUDE "Sound/DAC/C8.bin"
(1) 4958/   210EA : =$210EA             DAC_C8_Data label *
(1) 4958/   210EA :                             BINCLUDE "Sound/DAC/C8.bin"
(1) 4958/   21836 : =$4C07              DAC_C8_Data_Len  = little_endian(*-DAC_C8_Data)
(1) 4958/   21836 : =$EA90              DAC_C8_Data_Ptr  = k68z80Pointer(DAC_C8_Data-soundBankStart)
(1) 4958/   21836 : =$20000             DAC_C8_Data_Bank = soundBankStart
(1) 4959/   21836 : (MACRO)             DAC_C9_CC_CD_CE_CF_Data:DACBINCLUDE "Sound/DAC/C9CC-CF.bin"
(1) 4959/   21836 : =$21836             DAC_C9_CC_CD_CE_CF_Data label *
(1) 4959/   21836 :                             BINCLUDE "Sound/DAC/C9CC-CF.bin"
(1) 4959/   223EB : =$B50B              DAC_C9_CC_CD_CE_CF_Data_Len  = little_endian(*-DAC_C9_CC_CD_CE_CF_Data)
(1) 4959/   223EB : =$3698              DAC_C9_CC_CD_CE_CF_Data_Ptr  = k68z80Pointer(DAC_C9_CC_CD_CE_CF_Data-soundBankStart)
(1) 4959/   223EB : =$20000             DAC_C9_CC_CD_CE_CF_Data_Bank = soundBankStart
(1) 4960/   223EB : (MACRO)             DAC_CA_D0_D1_D2_Data:	DACBINCLUDE "Sound/DAC/CAD0-D2.bin"
(1) 4960/   223EB : =$223EB             DAC_CA_D0_D1_D2_Data label *
(1) 4960/   223EB :                             BINCLUDE "Sound/DAC/CAD0-D2.bin"
(1) 4960/   22AF9 : =$E07               DAC_CA_D0_D1_D2_Data_Len  = little_endian(*-DAC_CA_D0_D1_D2_Data)
(1) 4960/   22AF9 : =$EBA3              DAC_CA_D0_D1_D2_Data_Ptr  = k68z80Pointer(DAC_CA_D0_D1_D2_Data-soundBankStart)
(1) 4960/   22AF9 : =$20000             DAC_CA_D0_D1_D2_Data_Bank = soundBankStart
(1) 4961/   22AF9 : (MACRO)             DAC_CB_D3_D4_D5_Data:	DACBINCLUDE "Sound/DAC/CBD3-D5.bin"
(1) 4961/   22AF9 : =$22AF9             DAC_CB_D3_D4_D5_Data label *
(1) 4961/   22AF9 :                             BINCLUDE "Sound/DAC/CBD3-D5.bin"
(1) 4961/   230BD : =$C405              DAC_CB_D3_D4_D5_Data_Len  = little_endian(*-DAC_CB_D3_D4_D5_Data)
(1) 4961/   230BD : =$F9AA              DAC_CB_D3_D4_D5_Data_Ptr  = k68z80Pointer(DAC_CB_D3_D4_D5_Data-soundBankStart)
(1) 4961/   230BD : =$20000             DAC_CB_D3_D4_D5_Data_Bank = soundBankStart
(1) 4963/   230BD :                     
(1) 4965/   230BD : (MACRO)             DAC_D6_Data:			DACBINCLUDE "Sound/DAC/D6.bin"
(1) 4965/   230BD : =$230BD             DAC_D6_Data label *
(1) 4965/   230BD :                             BINCLUDE "Sound/DAC/D6.bin"
(1) 4965/   2463B : =$7E15              DAC_D6_Data_Len  = little_endian(*-DAC_D6_Data)
(1) 4965/   2463B : =$BDB0              DAC_D6_Data_Ptr  = k68z80Pointer(DAC_D6_Data-soundBankStart)
(1) 4965/   2463B : =$20000             DAC_D6_Data_Bank = soundBankStart
(1) 4966/   2463B : (MACRO)             DAC_D7_Data:			DACBINCLUDE "Sound/DAC/D7.bin"
(1) 4966/   2463B : =$2463B             DAC_D7_Data label *
(1) 4966/   2463B :                             BINCLUDE "Sound/DAC/D7.bin"
(1) 4966/   2508A : =$4F0A              DAC_D7_Data_Len  = little_endian(*-DAC_D7_Data)
(1) 4966/   2508A : =$3BC6              DAC_D7_Data_Ptr  = k68z80Pointer(DAC_D7_Data-soundBankStart)
(1) 4966/   2508A : =$20000             DAC_D7_Data_Bank = soundBankStart
(1) 4968/   2508A :                     
(1) 4969/   2508A : (MACRO)             	finishBank
soundBank DacBank4 has $2F76 bytes free at end, needed $1C94 bytes padding at start.
(1) 4969/   2508A :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4971/   2508A :                     
(1) 4972/   2508A :                     ; ---------------------------------------------------------------------------
(1) 4973/   2508A :                     	include "Sound/Flamedriver/_smps2asm_inc.asm"
(2)    1/   2508A :                     ; ===========================================================================
(2)    2/   2508A :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(2)    3/   2508A :                     ; ===========================================================================
(2)    4/   2508A :                     ; Permission to use, copy, modify, and/or distribute this software for any
(2)    5/   2508A :                     ; purpose with or without fee is hereby granted.
(2)    6/   2508A :                     ;
(2)    7/   2508A :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(2)    8/   2508A :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(2)    9/   2508A :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(2)   10/   2508A :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(2)   11/   2508A :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(2)   12/   2508A :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(2)   13/   2508A :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(2)   14/   2508A :                     ; ===========================================================================
(2)   15/   2508A :                     
(2)   16/   2508A : =$1                 SMPS2ASMVer	= 1
(2)   17/   2508A :                     
(2)   18/   2508A :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(2)   19/   2508A : =$C                 psgdelta	EQU 12
(2)   20/   2508A :                     ; ---------------------------------------------------------------------------
(2)   21/   2508A :                     ; Standard Octave Pitch Equates
(2)   22/   2508A :                     	enumconf	$C
(2)   23/   2508A : =$88..$B8           	enum		smpsPitch10lo=$88,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
(2)   24/   2508A : =$C4..$F4           	nextenum	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
(2)   25/   2508A : =$0..$30            	enum		smpsPitch00=$00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
(2)   26/   2508A : =$3C..$6C           	nextenum	smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
(2)   27/   2508A : =$78                	nextenum	smpsPitch10hi
(2)   28/   2508A :                     	enumconf	1
(2)   29/   2508A :                     ; ---------------------------------------------------------------------------
(2)   30/   2508A :                     ; Note Equates
(2)   31/   2508A : =$80..$8F           	enum		nRst=$80,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(2)   32/   2508A : =$90..$9F           	nextenum	nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(2)   33/   2508A : =$A0..$AF           	nextenum	nG2,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(2)   34/   2508A : =$B0..$BF           	nextenum	nB3,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(2)   35/   2508A : =$C0..$CF           	nextenum	nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(2)   36/   2508A : =$D0..$DF           	nextenum	nG6,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(2)   37/   2508A :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(2)   38/   2508A :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(2)   39/   2508A :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(2)   40/   2508A :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(2)   46/   2508A : =$C7                nMaxPSG				EQU nBb6-psgdelta
(2)   47/   2508A : =$D3                nMaxPSG1			EQU nBb6
(2)   48/   2508A : =$D4                nMaxPSG2			EQU nB6
(2)   50/   2508A :                     ; ---------------------------------------------------------------------------
(2)   51/   2508A :                     ; PSG volume envelope equates
(2)   61/   2508A : =$1..$6             			enum		sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(2)   62/   2508A : =$7..$C             			nextenum	sTone_07,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(2)   63/   2508A : =$D..$12            			nextenum	sTone_0D,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(2)   64/   2508A : =$13..$18           			nextenum	sTone_13,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(2)   65/   2508A : =$19..$1E           			nextenum	sTone_19,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(2)   66/   2508A : =$1F..$24           			nextenum	sTone_1F,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(2)   67/   2508A : =$25..$27           			nextenum	sTone_25,sTone_26,sTone_27
(2)   68/   2508A :                     			; For conversions:
(2)   70/   2508A : =$28..$2D           				nextenum	fTone_01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(2)   71/   2508A : =$2E..$33           				nextenum	fTone_07,fTone_08,fTone_09,fTone_0A,fTone_0B,fTone_0C
(2)   72/   2508A : =$34                				nextenum	fTone_0D
(2)   75/   2508A :                     ; ---------------------------------------------------------------------------
(2)   76/   2508A :                     ; DAC Equates
(2)   87/   2508A : =$81..$87           				enum		dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(2)   88/   2508A : =$88..$8C           				nextenum	dCrashCymbal,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(2)   89/   2508A : =$8D..$90           				nextenum	dHigherMetalHit,dMidMetalHit,dClapS3,dElectricHighTom
(2)   90/   2508A : =$91..$93           				nextenum	dElectricMidTom,dElectricLowTom,dElectricFloorTom
(2)   91/   2508A : =$94..$97           				nextenum	dTightSnare,dMidpitchSnare,dLooseSnare,dLooserSnare
(2)   92/   2508A : =$98..$9B           				nextenum	dHiTimpaniS3,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(2)   93/   2508A : =$9C..$9E           				nextenum	dClick,dPowerKick,dQuickGlassCrash
(2)   96/   2508A : =$9F..$A2           				nextenum	dGlassCrashSnare,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(2)   97/   2508A : =$A3..$A7           				nextenum	dOddSnareKick,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(2)   98/   2508A : =$A8..$AE           				nextenum	dModLooseKick,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(2)   99/   2508A : =$AF..$B2           				nextenum	dHiHitDrum,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(2)  100/   2508A : =$B3..$B5           				nextenum	dLowerEchoedClapHit,dHipHopHitKick,dHipHopHitPowerKick
(2)  101/   2508A : =$B6..$B9           				nextenum	dBassHey,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(2)  102/   2508A : =$BA..$BD           				nextenum	dReverseFadingWind,dScratchS3,dLooseSnareNoise,dPowerKick2
(2)  103/   2508A : =$BE..$C1           				nextenum	dCrashingNoiseWoo,dQuickHit,dKickHey,dPowerKickHit
(2)  104/   2508A : =$C2..$C4           				nextenum	dLowPowerKickHit,dLowerPowerKickHit,dLowestPowerKickHit
(2)  106/   2508A :                     			; For conversions:
(2)  109/   2508A : =$C5                					nextenum	dKick
(2)  113/   2508A : =$C6..$CD           				nextenum	dSnare,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(2)  114/   2508A : =$CE..$D3           				nextenum	dLowTimpani,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(2)  115/   2508A : =$D4..$D5           				nextenum	dMidClap,dLowClap
(2)  118/   2508A : =$D6..$D7           				nextenum	dFinalFightMetalCrash,dIntroKick
(2)  121/   2508A : =$D8..$D9           				nextenum	dEchoedClapHit_S3,dLowerEchoedClapHit_S3
(2)  124/   2508A :                     ; ---------------------------------------------------------------------------
(2)  125/   2508A :                     ; Channel IDs for SFX
(2)  126/   2508A : =$80                cPSG1				EQU $80
(2)  127/   2508A : =$A0                cPSG2				EQU $A0
(2)  128/   2508A : =$C0                cPSG3				EQU $C0
(2)  129/   2508A : =$E0                cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(2)  130/   2508A : =$2                 cFM3				EQU $02
(2)  131/   2508A : =$4                 cFM4				EQU $04
(2)  132/   2508A : =$5                 cFM5				EQU $05
(2)  133/   2508A : =$6                 cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(2)  134/   2508A :                     ; ---------------------------------------------------------------------------
(2)  135/   2508A :                     ; Conversion macros and functions
(2)  136/   2508A :                     
(2)  137/   2508A :                     conv0To256  function n,((n==0)<<8)|n
(2)  138/   2508A :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(2)  139/   2508A :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(2)  140/   2508A :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(2)  141/   2508A :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(2)  142/   2508A :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(2)  143/   2508A :                     s3TempotoS2 function n,s2TempotoS3(n)
(2)  144/   2508A :                     
(2)  145/   2508A :                     convertMainTempoMod macro mod
(2)  146/   2508A :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(2)  147/   2508A :                     		dc.b	mod
(2)  148/   2508A :                     	elseif SourceDriver==1
(2)  149/   2508A :                     		if mod==1
(2)  150/   2508A :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(2)  151/   2508A :                     		endif
(2)  152/   2508A :                     		if SonicDriverVer==2
(2)  153/   2508A :                     			dc.b	s1TempotoS2(mod)
(2)  154/   2508A :                     		else;if SonicDriverVer>=3
(2)  155/   2508A :                     			dc.b	s1TempotoS3(mod)
(2)  156/   2508A :                     		endif
(2)  157/   2508A :                     	elseif SourceDriver==2
(2)  158/   2508A :                     		if mod==0
(2)  159/   2508A :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(2)  160/   2508A :                     		endif
(2)  161/   2508A :                     		if SonicDriverVer==1
(2)  162/   2508A :                     			dc.b	s2TempotoS1(mod)
(2)  163/   2508A :                     		else;if SonicDriverVer>=3
(2)  164/   2508A :                     			dc.b	s2TempotoS3(mod)
(2)  165/   2508A :                     		endif
(2)  166/   2508A :                     	else;if SourceDriver>=3
(2)  167/   2508A :                     		if mod==0
(2)  168/   2508A :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(2)  169/   2508A :                     		endif
(2)  170/   2508A :                     		if SonicDriverVer==1
(2)  171/   2508A :                     			dc.b	s3TempotoS1(mod)
(2)  172/   2508A :                     		else;if SonicDriverVer==2
(2)  173/   2508A :                     			dc.b	s3TempotoS2(mod)
(2)  174/   2508A :                     		endif
(2)  175/   2508A :                     	endif
(2)  176/   2508A :                     	endm
(2)  177/   2508A :                     
(2)  178/   2508A :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(2)  179/   2508A :                     PSGPitchConvert macro pitch
(2)  180/   2508A :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  181/   2508A :                     		dc.b	(pitch+psgdelta)&$FF
(2)  182/   2508A :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  183/   2508A :                     		dc.b	(pitch-psgdelta)&$FF
(2)  184/   2508A :                     	else
(2)  185/   2508A :                     		dc.b	pitch
(2)  186/   2508A :                     	endif
(2)  187/   2508A :                     	endm
(2)  188/   2508A :                     
(2)  189/   2508A :                     CheckedChannelPointer macro loc
(2)  190/   2508A :                     	if SonicDriverVer<>1
(2)  191/   2508A :                     		dc.w	z80_ptr(loc)
(2)  192/   2508A :                     	else
(2)  193/   2508A :                     		if MOMPASS>1
(2)  194/   2508A :                     			if loc<songStart
(2)  195/   2508A :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(2)  196/   2508A :                     			endif
(2)  197/   2508A :                     		endif
(2)  198/   2508A :                     		dc.w	loc-songStart
(2)  199/   2508A :                     	endif
(2)  200/   2508A :                     	endm
(2)  201/   2508A :                     ; ---------------------------------------------------------------------------
(2)  202/   2508A :                     ; Header Macros
(2)  203/   2508A :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(2)  204/   2508A :                     
(2)  205/   2508A :                     SourceDriver set ver
(2)  206/   2508A :                     
(2)  207/   2508A :                     	if ("sourcesmps2asmver"<>"")
(2)  208/   2508A :                     		set SourceSMPS2ASM,sourcesmps2asmver
(2)  209/   2508A :                     	else
(2)  210/   2508A :                     		set SourceSMPS2ASM,0
(2)  211/   2508A :                     	endif
(2)  212/   2508A :                     
(2)  213/   2508A :                     songStart set *
(2)  214/   2508A :                     
(2)  215/   2508A :                     	if MOMPASS>1
(2)  216/   2508A :                     		if SMPS2ASMVer < SourceSMPS2ASM
(2)  217/   2508A :                     			message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(2)  218/   2508A :                     		endif
(2)  219/   2508A :                     	endif
(2)  220/   2508A :                     
(2)  221/   2508A :                     	endm
(2)  222/   2508A :                     
(2)  223/   2508A :                     smpsHeaderVoiceNull macro
(2)  224/   2508A :                     	if songStart<>*
(2)  225/   2508A :                     		fatal "Missing smpsHeaderStartSong"
(2)  226/   2508A :                     	endif
(2)  227/   2508A :                     	dc.w	$0000
(2)  228/   2508A :                     	endm
(2)  229/   2508A :                     
(2)  230/   2508A :                     ; Header - Set up Voice Location
(2)  231/   2508A :                     ; Common to music and SFX
(2)  232/   2508A :                     smpsHeaderVoice macro loc
(2)  233/   2508A :                     	if songStart<>*
(2)  234/   2508A :                     		fatal "Missing smpsHeaderStartSong"
(2)  235/   2508A :                     	endif
(2)  236/   2508A :                     	if SonicDriverVer<>1
(2)  237/   2508A :                     		dc.w	z80_ptr(loc)
(2)  238/   2508A :                     	else
(2)  239/   2508A :                     		if MOMPASS>1
(2)  240/   2508A :                     			if loc<songStart
(2)  241/   2508A :                     				fatal "Voice banks for Sonic 1 songs must come after the song"
(2)  242/   2508A :                     			endif
(2)  243/   2508A :                     		endif
(2)  244/   2508A :                     		dc.w	loc-songStart
(2)  245/   2508A :                     	endif
(2)  246/   2508A :                     	endm
(2)  247/   2508A :                     
(2)  248/   2508A :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(2)  249/   2508A :                     ; Common to music and SFX
(2)  250/   2508A :                     smpsHeaderVoiceUVB macro
(2)  251/   2508A :                     	if songStart<>*
(2)  252/   2508A :                     		fatal "Missing smpsHeaderStartSong"
(2)  253/   2508A :                     	endif
(2)  254/   2508A :                     	if SonicDriverVer>=5
(2)  255/   2508A :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(2)  256/   2508A :                     	elseif SonicDriverVer>=3
(2)  257/   2508A :                     		dc.w	little_endian(z80_UniVoiceBank)
(2)  258/   2508A :                     	else
(2)  259/   2508A :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(2)  260/   2508A :                     	endif
(2)  261/   2508A :                     	endm
(2)  262/   2508A :                     
(2)  263/   2508A :                     ; Header macros for music (not for SFX)
(2)  264/   2508A :                     ; Header - Set up Channel Usage
(2)  265/   2508A :                     smpsHeaderChan macro fm,psg
(2)  266/   2508A :                     	dc.b	fm,psg
(2)  267/   2508A :                     	endm
(2)  268/   2508A :                     
(2)  269/   2508A :                     ; Header - Set up Tempo
(2)  270/   2508A :                     smpsHeaderTempo macro div,mod
(2)  271/   2508A :                     	dc.b	div
(2)  272/   2508A :                     	convertMainTempoMod mod
(2)  273/   2508A :                     	endm
(2)  274/   2508A :                     
(2)  275/   2508A :                     ; Header - Set up DAC Channel
(2)  276/   2508A :                     smpsHeaderDAC macro loc,pitch,vol
(2)  277/   2508A :                     	CheckedChannelPointer loc
(2)  278/   2508A :                     	if ("pitch"<>"")
(2)  279/   2508A :                     		dc.b	pitch
(2)  280/   2508A :                     		if ("vol"<>"")
(2)  281/   2508A :                     			dc.b	vol
(2)  282/   2508A :                     		else
(2)  283/   2508A :                     			dc.b	$00
(2)  284/   2508A :                     		endif
(2)  285/   2508A :                     	else
(2)  286/   2508A :                     		dc.w	$00
(2)  287/   2508A :                     	endif
(2)  288/   2508A :                     	endm
(2)  289/   2508A :                     
(2)  290/   2508A :                     ; Header - Set up FM Channel
(2)  291/   2508A :                     smpsHeaderFM macro loc,pitch,vol
(2)  292/   2508A :                     	CheckedChannelPointer loc
(2)  293/   2508A :                     	dc.b	pitch,vol
(2)  294/   2508A :                     	endm
(2)  295/   2508A :                     
(2)  296/   2508A :                     ; Header - Set up PSG Channel
(2)  297/   2508A :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(2)  298/   2508A :                     	CheckedChannelPointer loc
(2)  299/   2508A :                     	PSGPitchConvert pitch
(2)  300/   2508A :                     	dc.b	vol,mod,voice
(2)  301/   2508A :                     	endm
(2)  302/   2508A :                     
(2)  303/   2508A :                     ; Header macros for SFX (not for music)
(2)  304/   2508A :                     ; Header - Set up Tempo
(2)  305/   2508A :                     smpsHeaderTempoSFX macro div
(2)  306/   2508A :                     	dc.b	div
(2)  307/   2508A :                     	endm
(2)  308/   2508A :                     
(2)  309/   2508A :                     ; Header - Set up Channel Usage
(2)  310/   2508A :                     smpsHeaderChanSFX macro chan
(2)  311/   2508A :                     	dc.b	chan
(2)  312/   2508A :                     	endm
(2)  313/   2508A :                     
(2)  314/   2508A :                     ; Header - Set up FM Channel
(2)  315/   2508A :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(2)  316/   2508A :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(2)  317/   2508A :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(2)  318/   2508A :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(2)  319/   2508A :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(2)  320/   2508A :                     	endif
(2)  321/   2508A :                     	dc.b	$80,chanid
(2)  322/   2508A :                     	CheckedChannelPointer loc
(2)  323/   2508A :                     	if (chanid&$80)<>0
(2)  324/   2508A :                     		PSGPitchConvert pitch
(2)  325/   2508A :                     	else
(2)  326/   2508A :                     		dc.b	pitch
(2)  327/   2508A :                     	endif
(2)  328/   2508A :                     	dc.b	vol
(2)  329/   2508A :                     	endm
(2)  330/   2508A :                     ; ---------------------------------------------------------------------------
(2)  331/   2508A :                     ; Co-ord Flag Macros and Equates
(2)  332/   2508A :                     ; E0xx - Panning, AMS, FMS
(2)  333/   2508A :                     smpsPan macro direction,amsfms
(2)  334/   2508A :                     panNone set $00
(2)  335/   2508A :                     panRight set $40
(2)  336/   2508A :                     panLeft set $80
(2)  337/   2508A :                     panCentre set $C0
(2)  338/   2508A :                     panCenter set $C0 ; silly Americans :U
(2)  339/   2508A :                     	dc.b $E0,direction+amsfms
(2)  340/   2508A :                     	endm
(2)  341/   2508A :                     
(2)  342/   2508A :                     ; E1xx - Set channel detune to val
(2)  343/   2508A :                     smpsDetune macro val
(2)  344/   2508A :                     	dc.b	$E1,val
(2)  345/   2508A :                     	endm
(2)  346/   2508A :                     
(2)  347/   2508A :                     ; E2xx - Useless
(2)  348/   2508A :                     smpsNop macro val
(2)  349/   2508A :                     	if SonicDriverVer<3
(2)  350/   2508A :                     		dc.b	$E2,val
(2)  351/   2508A :                     	endif
(2)  352/   2508A :                     	endm
(2)  353/   2508A :                     
(2)  354/   2508A :                     ; Return (used after smpsCall)
(2)  355/   2508A :                     smpsReturn macro val
(2)  356/   2508A :                     	if SonicDriverVer>=3
(2)  357/   2508A :                     		dc.b	$F9
(2)  358/   2508A :                     	else
(2)  359/   2508A :                     		dc.b	$E3
(2)  360/   2508A :                     	endif
(2)  361/   2508A :                     	endm
(2)  362/   2508A :                     
(2)  363/   2508A :                     ; Fade in previous song (ie. 1-Up)
(2)  364/   2508A :                     smpsFade macro val
(2)  365/   2508A :                     	if SonicDriverVer>=3
(2)  366/   2508A :                     		dc.b	$E2
(2)  367/   2508A :                     		if ("val"<>"")
(2)  368/   2508A :                     			dc.b	val
(2)  369/   2508A :                     		else
(2)  370/   2508A :                     			dc.b	$FF
(2)  371/   2508A :                     		endif
(2)  372/   2508A :                     		if SourceDriver<3
(2)  373/   2508A :                     			smpsStop
(2)  374/   2508A :                     		endif
(2)  375/   2508A :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(2)  376/   2508A :                     		; This is one of those weird S3+ "fades" that we don't need
(2)  377/   2508A :                     	else
(2)  378/   2508A :                     		dc.b	$E4
(2)  379/   2508A :                     	endif
(2)  380/   2508A :                     	endm
(2)  381/   2508A :                     
(2)  382/   2508A :                     ; E5xx - Set channel tempo divider to xx
(2)  383/   2508A :                     smpsChanTempoDiv macro val
(2)  384/   2508A :                     	if SonicDriverVer>=5
(2)  385/   2508A :                     		; New flag unique to Flamewing's modified S&K driver
(2)  386/   2508A :                     		dc.b	$FF,$08,val
(2)  387/   2508A :                     	elseif SonicDriverVer==3
(2)  388/   2508A :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(2)  389/   2508A :                     	else
(2)  390/   2508A :                     		dc.b	$E5,val
(2)  391/   2508A :                     	endif
(2)  392/   2508A :                     	endm
(2)  393/   2508A :                     
(2)  394/   2508A :                     ; E6xx - Alter Volume by xx
(2)  395/   2508A :                     smpsAlterVol macro val
(2)  396/   2508A :                     	dc.b	$E6,val
(2)  397/   2508A :                     	endm
(2)  398/   2508A :                     
(2)  399/   2508A :                     ; E7 - Prevent attack of next note
(2)  400/   2508A : =$E7                smpsNoAttack	EQU $E7
(2)  401/   2508A :                     
(2)  402/   2508A :                     ; E8xx - Set note fill to xx
(2)  403/   2508A :                     smpsNoteFill macro val
(2)  404/   2508A :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(2)  405/   2508A :                     		; Unique to Flamewing's modified driver
(2)  406/   2508A :                     		dc.b	$FF,$0A,val
(2)  407/   2508A :                     	else
(2)  408/   2508A :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  409/   2508A :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(2)  410/   2508A :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  411/   2508A :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(2)  412/   2508A :                     		endif
(2)  413/   2508A :                     		dc.b	$E8,val
(2)  414/   2508A :                     	endif
(2)  415/   2508A :                     	endm
(2)  416/   2508A :                     
(2)  417/   2508A :                     ; Add xx to channel pitch
(2)  418/   2508A :                     smpsChangeTransposition macro val
(2)  419/   2508A :                     	if SonicDriverVer>=3
(2)  420/   2508A :                     		dc.b	$FB,val
(2)  421/   2508A :                     	else
(2)  422/   2508A :                     		dc.b	$E9,val
(2)  423/   2508A :                     	endif
(2)  424/   2508A :                     	endm
(2)  425/   2508A :                     
(2)  426/   2508A :                     ; Set music tempo modifier to xx
(2)  427/   2508A :                     smpsSetTempoMod macro mod
(2)  428/   2508A :                     	if SonicDriverVer>=3
(2)  429/   2508A :                     		dc.b	$FF,$00
(2)  430/   2508A :                     	else
(2)  431/   2508A :                     		dc.b	$EA
(2)  432/   2508A :                     	endif
(2)  433/   2508A :                     	convertMainTempoMod mod
(2)  434/   2508A :                     	endm
(2)  435/   2508A :                     
(2)  436/   2508A :                     ; Set music tempo divider to xx
(2)  437/   2508A :                     smpsSetTempoDiv macro val
(2)  438/   2508A :                     	if SonicDriverVer>=3
(2)  439/   2508A :                     		dc.b	$FF,$04,val
(2)  440/   2508A :                     	else
(2)  441/   2508A :                     		dc.b	$EB,val
(2)  442/   2508A :                     	endif
(2)  443/   2508A :                     	endm
(2)  444/   2508A :                     
(2)  445/   2508A :                     ; ECxx - Set Volume to xx
(2)  446/   2508A :                     smpsSetVol macro val
(2)  447/   2508A :                     	if SonicDriverVer>=3
(2)  448/   2508A :                     		dc.b	$E4,val
(2)  449/   2508A :                     	else
(2)  450/   2508A :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(2)  451/   2508A :                     	endif
(2)  452/   2508A :                     	endm
(2)  453/   2508A :                     
(2)  454/   2508A :                     ; Works on all drivers
(2)  455/   2508A :                     smpsPSGAlterVol macro vol
(2)  456/   2508A :                     	dc.b	$EC,vol
(2)  457/   2508A :                     	endm
(2)  458/   2508A :                     
(2)  459/   2508A :                     ; Clears pushing sound flag in S1
(2)  460/   2508A :                     smpsClearPush macro
(2)  461/   2508A :                     	if SonicDriverVer==1
(2)  462/   2508A :                     		dc.b	$ED
(2)  463/   2508A :                     	else
(2)  464/   2508A :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(2)  465/   2508A :                     	endif
(2)  466/   2508A :                     	endm
(2)  467/   2508A :                     
(2)  468/   2508A :                     ; Stops special SFX (S1 only) and restarts overridden music track
(2)  469/   2508A :                     smpsStopSpecial macro
(2)  470/   2508A :                     	if SonicDriverVer==1
(2)  471/   2508A :                     		dc.b	$EE
(2)  472/   2508A :                     	else
(2)  473/   2508A :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(2)  474/   2508A :                     		smpsStop
(2)  475/   2508A :                     	endif
(2)  476/   2508A :                     	endm
(2)  477/   2508A :                     
(2)  478/   2508A :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(2)  479/   2508A :                     smpsFMvoice macro voice,songID
(2)  480/   2508A :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(2)  481/   2508A :                     		dc.b	$EF,voice|$80,songID+$81
(2)  482/   2508A :                     	else
(2)  483/   2508A :                     		dc.b	$EF,voice
(2)  484/   2508A :                     	endif
(2)  485/   2508A :                     	endm
(2)  486/   2508A :                     
(2)  487/   2508A :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(2)  488/   2508A :                     smpsModSet macro wait,speed,change,step
(2)  489/   2508A :                     	dc.b	$F0
(2)  490/   2508A :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  491/   2508A :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(2)  492/   2508A :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  493/   2508A :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(2)  494/   2508A :                     	else
(2)  495/   2508A :                     		dc.b	wait,speed,change,step
(2)  496/   2508A :                     	endif
(2)  497/   2508A :                     	;dc.b	speed,change,step
(2)  498/   2508A :                     	endm
(2)  499/   2508A :                     
(2)  500/   2508A :                     ; Turn on Modulation
(2)  501/   2508A :                     smpsModOn macro type
(2)  502/   2508A :                     	if SonicDriverVer>=3
(2)  503/   2508A :                     		if "type"<>""
(2)  504/   2508A :                     			dc.b	$F4,type
(2)  505/   2508A :                     		else
(2)  506/   2508A :                     			dc.b	$F4,$80
(2)  507/   2508A :                     		endif
(2)  508/   2508A :                     	else
(2)  509/   2508A :                     		dc.b	$F1
(2)  510/   2508A :                     	endif
(2)  511/   2508A :                     	endm
(2)  512/   2508A :                     
(2)  513/   2508A :                     ; F2 - End of channel
(2)  514/   2508A :                     smpsStop macro
(2)  515/   2508A :                     	dc.b	$F2
(2)  516/   2508A :                     	endm
(2)  517/   2508A :                     
(2)  518/   2508A :                     ; F3xx - PSG waveform to xx
(2)  519/   2508A :                     smpsPSGform macro form
(2)  520/   2508A :                     	dc.b	$F3,form
(2)  521/   2508A :                     	endm
(2)  522/   2508A :                     
(2)  523/   2508A :                     ; Turn off Modulation
(2)  524/   2508A :                     smpsModOff macro
(2)  525/   2508A :                     	if SonicDriverVer>=3
(2)  526/   2508A :                     		dc.b	$FA
(2)  527/   2508A :                     	else
(2)  528/   2508A :                     		dc.b	$F4
(2)  529/   2508A :                     	endif
(2)  530/   2508A :                     	endm
(2)  531/   2508A :                     
(2)  532/   2508A :                     ; F5xx - PSG voice to xx
(2)  533/   2508A :                     smpsPSGvoice macro voice
(2)  534/   2508A :                     	dc.b	$F5,voice
(2)  535/   2508A :                     	endm
(2)  536/   2508A :                     
(2)  537/   2508A :                     ; F6xxxx - Jump to xxxx
(2)  538/   2508A :                     smpsJump macro loc
(2)  539/   2508A :                     	dc.b	$F6
(2)  540/   2508A :                     	if SonicDriverVer<>1
(2)  541/   2508A :                     		dc.w	z80_ptr(loc)
(2)  542/   2508A :                     	else
(2)  543/   2508A :                     		dc.w	loc-*-1
(2)  544/   2508A :                     	endif
(2)  545/   2508A :                     	endm
(2)  546/   2508A :                     
(2)  547/   2508A :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(2)  548/   2508A :                     smpsLoop macro index,loops,loc
(2)  549/   2508A :                     	dc.b	$F7
(2)  550/   2508A :                     	dc.b	index,loops
(2)  551/   2508A :                     	if SonicDriverVer<>1
(2)  552/   2508A :                     		dc.w	z80_ptr(loc)
(2)  553/   2508A :                     	else
(2)  554/   2508A :                     		dc.w	loc-*-1
(2)  555/   2508A :                     	endif
(2)  556/   2508A :                     	endm
(2)  557/   2508A :                     
(2)  558/   2508A :                     ; F8xxxx - Call pattern at xxxx, saving return point
(2)  559/   2508A :                     smpsCall macro loc
(2)  560/   2508A :                     	dc.b	$F8
(2)  561/   2508A :                     	if SonicDriverVer<>1
(2)  562/   2508A :                     		dc.w	z80_ptr(loc)
(2)  563/   2508A :                     	else
(2)  564/   2508A :                     		dc.w	loc-*-1
(2)  565/   2508A :                     	endif
(2)  566/   2508A :                     	endm
(2)  567/   2508A :                     ; ---------------------------------------------------------------------------
(2)  568/   2508A :                     ; Alter Volume
(2)  569/   2508A :                     smpsFMAlterVol macro val1,val2
(2)  570/   2508A :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(2)  571/   2508A :                     		dc.b	$E5,val1,val2
(2)  572/   2508A :                     	else
(2)  573/   2508A :                     		dc.b	$E6,val1
(2)  574/   2508A :                     	endif
(2)  575/   2508A :                     	endm
(2)  576/   2508A :                     
(2)  577/   2508A :                     ; S3/S&K/S3D-only coordination flags
(2)  579/   2508A :                     ; Silences FM channel then stops as per smpsStop
(2)  580/   2508A :                     smpsStopFM macro
(2)  581/   2508A :                     	dc.b	$E3
(2)  582/   2508A :                     	endm
(2)  583/   2508A :                     
(2)  584/   2508A :                     ; Spindash Rev
(2)  585/   2508A :                     smpsSpindashRev macro
(2)  586/   2508A :                     	dc.b	$E9
(2)  587/   2508A :                     	endm
(2)  588/   2508A :                     
(2)  589/   2508A :                     smpsPlayDACSample macro sample
(2)  590/   2508A :                     	dc.b	$EA,(sample&$7F)
(2)  591/   2508A :                     	endm
(2)  592/   2508A :                     
(2)  593/   2508A :                     smpsConditionalJump macro index,loc
(2)  594/   2508A :                     	dc.b	$EB
(2)  595/   2508A :                     	dc.b	index
(2)  596/   2508A :                     	dc.w	z80_ptr(loc)
(2)  597/   2508A :                     	endm
(2)  598/   2508A :                     
(2)  599/   2508A :                     ; Set note values to xx-$40
(2)  600/   2508A :                     smpsSetNote macro val
(2)  601/   2508A :                     	dc.b	$ED,val
(2)  602/   2508A :                     	endm
(2)  603/   2508A :                     
(2)  604/   2508A :                     smpsFMICommand macro reg,val
(2)  605/   2508A :                     	dc.b	$EE,reg,val
(2)  606/   2508A :                     	endm
(2)  607/   2508A :                     
(2)  608/   2508A :                     ; Set Modulation
(2)  609/   2508A :                     smpsModChange2 macro fmmod,psgmod
(2)  610/   2508A :                     	dc.b	$F1,fmmod,psgmod
(2)  611/   2508A :                     	endm
(2)  612/   2508A :                     
(2)  613/   2508A :                     ; Set Modulation
(2)  614/   2508A :                     smpsModChange macro val
(2)  615/   2508A :                     	dc.b	$F4,val
(2)  616/   2508A :                     	endm
(2)  617/   2508A :                     
(2)  618/   2508A :                     ; FCxxxx - Jump to xxxx
(2)  619/   2508A :                     smpsContinuousLoop macro loc
(2)  620/   2508A :                     	dc.b	$FC
(2)  621/   2508A :                     	dc.w	z80_ptr(loc)
(2)  622/   2508A :                     	endm
(2)  623/   2508A :                     
(2)  624/   2508A :                     smpsAlternateSMPS macro flag
(2)  625/   2508A :                     	dc.b	$FD,flag
(2)  626/   2508A :                     	endm
(2)  627/   2508A :                     
(2)  628/   2508A :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(2)  629/   2508A :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(2)  630/   2508A :                     	endm
(2)  631/   2508A :                     
(2)  632/   2508A :                     smpsPlaySound macro index
(2)  633/   2508A :                     	if SonicDriverVer>=5
(2)  634/   2508A :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(2)  635/   2508A :                     	endif
(2)  636/   2508A :                     	dc.b	$FF,$01,index
(2)  637/   2508A :                     	endm
(2)  638/   2508A :                     
(2)  639/   2508A :                     smpsHaltMusic macro flag
(2)  640/   2508A :                     	dc.b	$FF,$02,flag
(2)  641/   2508A :                     	endm
(2)  642/   2508A :                     
(2)  643/   2508A :                     smpsCopyData macro data,len
(2)  644/   2508A :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(2)  645/   2508A :                     	dc.b	$FF,$03
(2)  646/   2508A :                     	dc.w	little_endian(data)
(2)  647/   2508A :                     	dc.b	len
(2)  648/   2508A :                     	endm
(2)  649/   2508A :                     
(2)  650/   2508A :                     smpsSSGEG macro op1,op2,op3,op4
(2)  651/   2508A :                     	dc.b	$FF,$05,op1,op3,op2,op4
(2)  652/   2508A :                     	endm
(2)  653/   2508A :                     
(2)  654/   2508A :                     smpsFMVolEnv macro tone,mask
(2)  655/   2508A :                     	dc.b	$FF,$06,tone,mask
(2)  656/   2508A :                     	endm
(2)  657/   2508A :                     
(2)  658/   2508A :                     smpsResetSpindashRev macro val
(2)  659/   2508A :                     	dc.b	$FF,$07
(2)  660/   2508A :                     	endm
(2)  661/   2508A :                     
(2)  662/   2508A :                     	; Flags ported from other drivers.
(2)  664/   2508A :                     smpsChanFMCommand macro reg,val
(2)  665/   2508A :                     	dc.b	$FF,$09,reg,val
(2)  666/   2508A :                     	endm
(2)  667/   2508A :                     
(2)  668/   2508A :                     smpsPitchSlide macro enable
(2)  669/   2508A :                     	dc.b	$FF,$0B,enable
(2)  670/   2508A :                     	endm
(2)  671/   2508A :                     
(2)  672/   2508A :                     smpsSetLFO macro enable,amsfms
(2)  673/   2508A :                     	dc.b	$FF,$0C,enable,amsfms
(2)  674/   2508A :                     	endm
(2)  675/   2508A :                     
(2)  676/   2508A :                     smpsPlayMusic macro index
(2)  677/   2508A :                     	dc.b	$FF,$0D,index
(2)  678/   2508A :                     	endm
(2)  680/   2508A :                     
(2)  682/   2508A :                     ; ---------------------------------------------------------------------------
(2)  683/   2508A :                     ; S1/S2 only coordination flag
(2)  684/   2508A :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(2)  685/   2508A :                     smpsMaxRelRate macro
(2)  686/   2508A :                     	if SonicDriverVer>=3
(2)  687/   2508A :                     		; Emulate it in S3/S&K/S3D driver
(2)  688/   2508A :                     		smpsFMICommand $88,$0F
(2)  689/   2508A :                     		smpsFMICommand $8C,$0F
(2)  690/   2508A :                     	else
(2)  691/   2508A :                     		dc.b	$F9
(2)  692/   2508A :                     	endif
(2)  693/   2508A :                     	endm
(2)  694/   2508A :                     ; ---------------------------------------------------------------------------
(2)  695/   2508A :                     ; Backwards compatibility
(2)  696/   2508A :                     smpsAlterNote macro
(2)  697/   2508A :                     	smpsDetune	ALLARGS
(2)  698/   2508A :                     	endm
(2)  699/   2508A :                     
(2)  700/   2508A :                     smpsAlterPitch macro
(2)  701/   2508A :                     	smpsChangeTransposition	ALLARGS
(2)  702/   2508A :                     	endm
(2)  703/   2508A :                     
(2)  704/   2508A :                     smpsFMFlutter macro
(2)  705/   2508A :                     	smpsFMVolEnv	ALLARGS
(2)  706/   2508A :                     	endm
(2)  707/   2508A :                     
(2)  708/   2508A :                     smpsWeirdD1LRR macro
(2)  709/   2508A :                     	smpsMaxRelRate ALLARGS
(2)  710/   2508A :                     	endm
(2)  711/   2508A :                     
(2)  712/   2508A :                     smpsSetvoice macro
(2)  713/   2508A :                     	smpsFMvoice ALLARGS
(2)  714/   2508A :                     	endm
(2)  715/   2508A :                     ; ---------------------------------------------------------------------------
(2)  716/   2508A :                     ; Macros for FM instruments
(2)  717/   2508A :                     ; Voices - Feedback
(2)  718/   2508A :                     smpsVcFeedback macro val
(2)  719/   2508A :                     vcFeedback set val
(2)  720/   2508A :                     	endm
(2)  721/   2508A :                     
(2)  722/   2508A :                     ; Voices - Algorithm
(2)  723/   2508A :                     smpsVcAlgorithm macro val
(2)  724/   2508A :                     vcAlgorithm set val
(2)  725/   2508A :                     	endm
(2)  726/   2508A :                     
(2)  727/   2508A :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(2)  728/   2508A :                     vcUnusedBits set val
(2)  729/   2508A :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(2)  730/   2508A :                     		set vcD1R1Unk,d1r1<<5
(2)  731/   2508A :                     		set vcD1R2Unk,d1r2<<5
(2)  732/   2508A :                     		set vcD1R3Unk,d1r3<<5
(2)  733/   2508A :                     		set vcD1R4Unk,d1r4<<5
(2)  734/   2508A :                     	else
(2)  735/   2508A :                     		set vcD1R1Unk,0
(2)  736/   2508A :                     		set vcD1R2Unk,0
(2)  737/   2508A :                     		set vcD1R3Unk,0
(2)  738/   2508A :                     		set vcD1R4Unk,0
(2)  739/   2508A :                     	endif
(2)  740/   2508A :                     	endm
(2)  741/   2508A :                     
(2)  742/   2508A :                     ; Voices - Detune
(2)  743/   2508A :                     smpsVcDetune macro op1,op2,op3,op4
(2)  744/   2508A :                     	set vcDT1,op1
(2)  745/   2508A :                     	set vcDT2,op2
(2)  746/   2508A :                     	set vcDT3,op3
(2)  747/   2508A :                     	set vcDT4,op4
(2)  748/   2508A :                     	endm
(2)  749/   2508A :                     
(2)  750/   2508A :                     ; Voices - Coarse-Frequency
(2)  751/   2508A :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(2)  752/   2508A :                     	set vcCF1,op1
(2)  753/   2508A :                     	set vcCF2,op2
(2)  754/   2508A :                     	set vcCF3,op3
(2)  755/   2508A :                     	set vcCF4,op4
(2)  756/   2508A :                     	endm
(2)  757/   2508A :                     
(2)  758/   2508A :                     ; Voices - Rate Scale
(2)  759/   2508A :                     smpsVcRateScale macro op1,op2,op3,op4
(2)  760/   2508A :                     	set vcRS1,op1
(2)  761/   2508A :                     	set vcRS2,op2
(2)  762/   2508A :                     	set vcRS3,op3
(2)  763/   2508A :                     	set vcRS4,op4
(2)  764/   2508A :                     	endm
(2)  765/   2508A :                     
(2)  766/   2508A :                     ; Voices - Attack Rate
(2)  767/   2508A :                     smpsVcAttackRate macro op1,op2,op3,op4
(2)  768/   2508A :                     	set vcAR1,op1
(2)  769/   2508A :                     	set vcAR2,op2
(2)  770/   2508A :                     	set vcAR3,op3
(2)  771/   2508A :                     	set vcAR4,op4
(2)  772/   2508A :                     	endm
(2)  773/   2508A :                     
(2)  774/   2508A :                     ; Voices - Amplitude Modulation
(2)  775/   2508A :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(2)  776/   2508A :                     ; were the Amplitude Modulation.
(2)  777/   2508A :                     ; According to several docs, however, it's actually the high bit.
(2)  778/   2508A :                     smpsVcAmpMod macro op1,op2,op3,op4
(2)  779/   2508A :                     	if SourceSMPS2ASM==0
(2)  780/   2508A :                     		set vcAM1,op1<<5
(2)  781/   2508A :                     		set vcAM2,op2<<5
(2)  782/   2508A :                     		set vcAM3,op3<<5
(2)  783/   2508A :                     		set vcAM4,op4<<5
(2)  784/   2508A :                     	else
(2)  785/   2508A :                     		set vcAM1,op1<<7
(2)  786/   2508A :                     		set vcAM2,op2<<7
(2)  787/   2508A :                     		set vcAM3,op3<<7
(2)  788/   2508A :                     		set vcAM4,op4<<7
(2)  789/   2508A :                     	endif
(2)  790/   2508A :                     	endm
(2)  791/   2508A :                     
(2)  792/   2508A :                     ; Voices - First Decay Rate
(2)  793/   2508A :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(2)  794/   2508A :                     	set vcD1R1,op1
(2)  795/   2508A :                     	set vcD1R2,op2
(2)  796/   2508A :                     	set vcD1R3,op3
(2)  797/   2508A :                     	set vcD1R4,op4
(2)  798/   2508A :                     	endm
(2)  799/   2508A :                     
(2)  800/   2508A :                     ; Voices - Second Decay Rate
(2)  801/   2508A :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(2)  802/   2508A :                     	set vcD2R1,op1
(2)  803/   2508A :                     	set vcD2R2,op2
(2)  804/   2508A :                     	set vcD2R3,op3
(2)  805/   2508A :                     	set vcD2R4,op4
(2)  806/   2508A :                     	endm
(2)  807/   2508A :                     
(2)  808/   2508A :                     ; Voices - Decay Level
(2)  809/   2508A :                     smpsVcDecayLevel macro op1,op2,op3,op4
(2)  810/   2508A :                     	set vcDL1,op1
(2)  811/   2508A :                     	set vcDL2,op2
(2)  812/   2508A :                     	set vcDL3,op3
(2)  813/   2508A :                     	set vcDL4,op4
(2)  814/   2508A :                     	endm
(2)  815/   2508A :                     
(2)  816/   2508A :                     ; Voices - Release Rate
(2)  817/   2508A :                     smpsVcReleaseRate macro op1,op2,op3,op4
(2)  818/   2508A :                     	set vcRR1,op1
(2)  819/   2508A :                     	set vcRR2,op2
(2)  820/   2508A :                     	set vcRR3,op3
(2)  821/   2508A :                     	set vcRR4,op4
(2)  822/   2508A :                     	endm
(2)  823/   2508A :                     
(2)  824/   2508A :                     ; Voices - Total Level
(2)  825/   2508A :                     ; The original SMPS2ASM decides TL high bits automatically,
(2)  826/   2508A :                     ; but later versions leave it up to the user.
(2)  827/   2508A :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(2)  828/   2508A :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(2)  829/   2508A :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(2)  830/   2508A :                     ; SMPS Z80 does the opposite.
(2)  831/   2508A :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(2)  832/   2508A :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(2)  833/   2508A :                     ; what we do, so we just print a warning.
(2)  834/   2508A :                     smpsVcTotalLevel macro op1,op2,op3,op4
(2)  835/   2508A :                     	set vcTL1,op1
(2)  836/   2508A :                     	set vcTL2,op2
(2)  837/   2508A :                     	set vcTL3,op3
(2)  838/   2508A :                     	set vcTL4,op4
(2)  839/   2508A :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  840/   2508A :                     ;   0     1     2     3     4     5     6     7
(2)  841/   2508A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  842/   2508A :                     	if SourceSMPS2ASM==0
(2)  843/   2508A :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  844/   2508A :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  845/   2508A :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  846/   2508A :                     		set vcTLMask1,$80
(2)  847/   2508A :                     	else
(2)  848/   2508A :                     		set vcTLMask4,0
(2)  849/   2508A :                     		set vcTLMask3,0
(2)  850/   2508A :                     		set vcTLMask2,0
(2)  851/   2508A :                     		set vcTLMask1,0
(2)  852/   2508A :                     	endif
(2)  853/   2508A :                     
(2)  854/   2508A :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  855/   2508A :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  856/   2508A :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  857/   2508A :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  858/   2508A :                     		set vcTLMask1,$80
(2)  859/   2508A :                     		set vcTL1,vcTL1&$7F
(2)  860/   2508A :                     		set vcTL2,vcTL2&$7F
(2)  861/   2508A :                     		set vcTL3,vcTL3&$7F
(2)  862/   2508A :                     		set vcTL4,vcTL4&$7F
(2)  863/   2508A :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgor
(2)  864/   2508A :                     		if MOMPASS>1
(2)  865/   2508A :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(2)  866/   2508A :                     		endif
(2)  867/   2508A :                     	endif
(2)  868/   2508A :                     
(2)  869/   2508A :                     	if SonicDriverVer==2
(2)  870/   2508A :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(2)  871/   2508A :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(2)  872/   2508A :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  873/   2508A :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(2)  874/   2508A :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(2)  875/   2508A :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(2)  876/   2508A :                     	else
(2)  877/   2508A :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  878/   2508A :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  879/   2508A :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  880/   2508A :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  881/   2508A :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  882/   2508A :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  883/   2508A :                     	endif
(2)  884/   2508A :                     	endm
(2)  885/   2508A :                     
(2)  886/   2508A :                     
(1) 4974/   2508A :                     ; ---------------------------------------------------------------------------
(1) 4975/   2508A :                     
(1) 4976/   2508A :                     ; ===========================================================================
(1) 4977/   2508A :                     ; Sound Bank
(1) 4978/   2508A :                     ; ===========================================================================
(1) 4979/   2508A : (MACRO)             SndBank:			startBank
(1) 4979/   2508A : =$2508A                     set     soundBankDecl,*
(1) 4979/   2508A :  (MACRO-2)                  align   $8000
(1) 4979/   2508A :   (MACRO-3)                 cnop 0,$8000
(1) 4979/   2508A :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4979/   2508A : =$2F76              .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4979/   2508A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2508A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2548A : =$2B76              .diff := .diff - 1024
(1) 4979/   2548A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2548A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2588A : =$2776              .diff := .diff - 1024
(1) 4979/   2588A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2588A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   25C8A : =$2376              .diff := .diff - 1024
(1) 4979/   25C8A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   25C8A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2608A : =$1F76              .diff := .diff - 1024
(1) 4979/   2608A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2608A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2648A : =$1B76              .diff := .diff - 1024
(1) 4979/   2648A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2648A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2688A : =$1776              .diff := .diff - 1024
(1) 4979/   2688A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2688A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   26C8A : =$1376              .diff := .diff - 1024
(1) 4979/   26C8A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   26C8A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2708A : =$F76               .diff := .diff - 1024
(1) 4979/   2708A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2708A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2748A : =$B76               .diff := .diff - 1024
(1) 4979/   2748A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2748A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   2788A : =$776               .diff := .diff - 1024
(1) 4979/   2788A :                                                     ; AS can only generate 1 kb of code on a single line
(1) 4979/   2788A : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   27C8A : =$376               .diff := .diff - 1024
(1) 4979/   27C8A :                     
(1) 4979/   27C8A : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
(1) 4979/   28000 : =$28000             SndBank label *
(1) 4979/   28000 : =$28000                     set     soundBankStart,SndBank
(1) 4979/   28000 : =$2F76                      set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4979/   28000 : =SndBank                    set     soundBankName,"SndBank"
(1) 4980/   28000 :                     
(1) 4981/   28000 :                     ; ===========================================================================
(1) 4982/   28000 :                     ; SFX Pointers
(1) 4983/   28000 :                     ; ===========================================================================
(1) 4984/   28000 :                     SFXPointers:
(1) 4985/   28000 :                     Sound_End_Ptr
(1) 4986/   28000 :                     ; ---------------------------------------------------------------------------
(1) 4987/   28000 :                     
(1) 4988/   28000 : (MACRO)             	finishBank
soundBank SndBank has $8000 bytes free at end, needed $2F76 bytes padding at start.
(1) 4988/   28000 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
(1) 4989/   28000 :                     
(1) 4990/   28000 :                     ; ---------------------------------------------------------------------------
(1) 4991/   28000 :                     ; ===========================================================================
(1) 4992/   28000 :                     ; Music Banks
(1) 4993/   28000 :                     ; ===========================================================================
(1) 4994/   28000 :                     ; Music Bank 1
(1) 4995/   28000 :                     ; ---------------------------------------------------------------------------
(1) 4996/   28000 : (MACRO)             Mus_Bank1_Start:	startBank
(1) 4996/   28000 : =$28000                     set     soundBankDecl,*
(1) 4996/   28000 :  (MACRO-2)                  align   $8000
(1) 4996/   28000 :   (MACRO-3)                 cnop 0,$8000
(1) 4996/   28000 :    (MACRO-4)                        org (*-1+($8000)-((*-1+(-(0)))#($8000)))
(1) 4996/   28000 : =$0                 .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
(1) 4996/   28000 :                                             dc.b [.diff]$FF
(1) 4996/   28000 : =$28000             Mus_Bank1_Start label *
(1) 4996/   28000 : =$28000                     set     soundBankStart,Mus_Bank1_Start
(1) 4996/   28000 : =$0                         set     soundBankPadding,soundBankStart - soundBankDecl
(1) 4996/   28000 : =Mus_Bank1_Start            set     soundBankName,"Mus_Bank1_Start"
(1) 4997/   28000 : (MACRO)             	Music_Master_Table
(1) 4997/   28000 : =$28000             MusicPointers label *
(1) 4997/   28000 :  (MACRO-2)                  declsong MusData_Default
(1) 4997/   28000 : =$28000             MUSDATA_DEFAULT_Ptr        label *
(1) 4997/   28000 : 6D83                        dc.w    k68z80Pointer(MUSDATA_DEFAULT)
(1) 4997/   28002 : =$28002             zMusIDPtr__End label *
(1) 4998/   28002 :                     z80_UniVoiceBank:	include "Sound/Flamedriver/UniBank.asm"
(2)    1/   28002 :                     ; ===========================================================================
(2)    2/   28002 :                     ; FM Universial Voice Bank
(2)    3/   28002 :                     ; ===========================================================================
(2)    4/   28002 :                     
(2)    5/   28002 : =$0                 SourceSMPS2ASM set 0
(2)    6/   28002 : =$3                 SourceDriver set 3
(2)    7/   28002 :                     
(2)    8/   28002 :                     ; Synth Bass 2
(2)    9/   28002 :                     ;	Voice $00
(2)   10/   28002 :                     ;	$3C
(2)   11/   28002 :                     ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $0D, $12, $05
(2)   12/   28002 :                     ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $80, $07, $80
(2)   13/   28002 : (MACRO)             	smpsVcAlgorithm     $04
(2)   13/   28002 : =$4                 vcAlgorithm set $04
(2)   14/   28002 : (MACRO)             	smpsVcFeedback      $07
(2)   14/   28002 : =$7                 vcFeedback set $07
(2)   15/   28002 : (MACRO)             	smpsVcUnusedBits    $00
(2)   15/   28002 : =$0                 vcUnusedBits set $00
(2)   15/   28002 : =$0                                 set vcD1R1Unk,0
(2)   15/   28002 : =$0                                 set vcD1R2Unk,0
(2)   15/   28002 : =$0                                 set vcD1R3Unk,0
(2)   15/   28002 : =$0                                 set vcD1R4Unk,0
(2)   16/   28002 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)   16/   28002 : =$0                         set vcDT1,$00
(2)   16/   28002 : =$0                         set vcDT2,$00
(2)   16/   28002 : =$0                         set vcDT3,$00
(2)   16/   28002 : =$0                         set vcDT4,$00
(2)   17/   28002 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $01
(2)   17/   28002 : =$0                         set vcCF1,$00
(2)   17/   28002 : =$0                         set vcCF2,$00
(2)   17/   28002 : =$0                         set vcCF3,$00
(2)   17/   28002 : =$1                         set vcCF4,$01
(2)   18/   28002 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)   18/   28002 : =$0                         set vcRS1,$00
(2)   18/   28002 : =$0                         set vcRS2,$00
(2)   18/   28002 : =$0                         set vcRS3,$00
(2)   18/   28002 : =$0                         set vcRS4,$00
(2)   19/   28002 : (MACRO)             	smpsVcAttackRate    $1F, $15, $1F, $1F
(2)   19/   28002 : =$1F                        set vcAR1,$1F
(2)   19/   28002 : =$15                        set vcAR2,$15
(2)   19/   28002 : =$1F                        set vcAR3,$1F
(2)   19/   28002 : =$1F                        set vcAR4,$1F
(2)   20/   28002 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)   20/   28002 : =$0                                 set vcAM1,$00<<5
(2)   20/   28002 : =$0                                 set vcAM2,$00<<5
(2)   20/   28002 : =$0                                 set vcAM3,$00<<5
(2)   20/   28002 : =$0                                 set vcAM4,$00<<5
(2)   21/   28002 : (MACRO)             	smpsVcDecayRate1    $05, $12, $0D, $11
(2)   21/   28002 : =$5                         set vcD1R1,$05
(2)   21/   28002 : =$12                        set vcD1R2,$12
(2)   21/   28002 : =$D                         set vcD1R3,$0D
(2)   21/   28002 : =$11                        set vcD1R4,$11
(2)   22/   28002 : (MACRO)             	smpsVcDecayRate2    $02, $09, $04, $07
(2)   22/   28002 : =$2                         set vcD2R1,$02
(2)   22/   28002 : =$9                         set vcD2R2,$09
(2)   22/   28002 : =$4                         set vcD2R3,$04
(2)   22/   28002 : =$7                         set vcD2R4,$07
(2)   23/   28002 : (MACRO)             	smpsVcDecayLevel    $01, $02, $03, $05
(2)   23/   28002 : =$1                         set vcDL1,$01
(2)   23/   28002 : =$2                         set vcDL2,$02
(2)   23/   28002 : =$3                         set vcDL3,$03
(2)   23/   28002 : =$5                         set vcDL4,$05
(2)   24/   28002 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $0A, $05
(2)   24/   28002 : =$A                         set vcRR1,$0A
(2)   24/   28002 : =$5                         set vcRR2,$05
(2)   24/   28002 : =$A                         set vcRR3,$0A
(2)   24/   28002 : =$5                         set vcRR4,$05
(2)   25/   28002 : (MACRO)             	smpsVcTotalLevel    $00, $07, $00, $1A
(2)   25/   28002 : =$0                         set vcTL1,$00
(2)   25/   28002 : =$7                         set vcTL2,$07
(2)   25/   28002 : =$0                         set vcTL3,$00
(2)   25/   28002 : =$1A                        set vcTL4,$1A
(2)   25/   28002 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)   25/   28003 :                     ;   0     1     2     3     4     5     6     7
(2)   25/   28003 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)   25/   28003 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)   25/   28003 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)   25/   28003 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)   25/   28003 : =$80                                set vcTLMask1,$80
(2)   25/   28003 :                     
(2)   25/   28003 :                     
(2)   25/   28003 : 0100 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)   25/   28007 : 1F1F 151F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)   25/   2800B : 110D 1205                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)   25/   2800F : 0704 0902                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)   25/   28013 : 553A 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)   25/   28017 : 1A80 0780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)   26/   2801B :                     
(2)   27/   2801B :                     ; Trumpet 1
(2)   28/   2801B :                     ;	Voice $01
(2)   29/   2801B :                     ;	$3D
(2)   30/   2801B :                     ;	$01, $01, $01, $01, 	$94, $19, $19, $19, 	$0F, $0D, $0D, $0D
(2)   31/   2801B :                     ;	$07, $04, $04, $04, 	$25, $1A, $1A, $1A, 	$15, $80, $80, $80
(2)   32/   2801B : (MACRO)             	smpsVcAlgorithm     $05
(2)   32/   2801B : =$5                 vcAlgorithm set $05
(2)   33/   2801B : (MACRO)             	smpsVcFeedback      $07
(2)   33/   2801B : =$7                 vcFeedback set $07
(2)   34/   2801B : (MACRO)             	smpsVcUnusedBits    $00
(2)   34/   2801B : =$0                 vcUnusedBits set $00
(2)   34/   2801B : =$0                                 set vcD1R1Unk,0
(2)   34/   2801B : =$0                                 set vcD1R2Unk,0
(2)   34/   2801B : =$0                                 set vcD1R3Unk,0
(2)   34/   2801B : =$0                                 set vcD1R4Unk,0
(2)   35/   2801B : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)   35/   2801B : =$0                         set vcDT1,$00
(2)   35/   2801B : =$0                         set vcDT2,$00
(2)   35/   2801B : =$0                         set vcDT3,$00
(2)   35/   2801B : =$0                         set vcDT4,$00
(2)   36/   2801B : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(2)   36/   2801B : =$1                         set vcCF1,$01
(2)   36/   2801B : =$1                         set vcCF2,$01
(2)   36/   2801B : =$1                         set vcCF3,$01
(2)   36/   2801B : =$1                         set vcCF4,$01
(2)   37/   2801B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $02
(2)   37/   2801B : =$0                         set vcRS1,$00
(2)   37/   2801B : =$0                         set vcRS2,$00
(2)   37/   2801B : =$0                         set vcRS3,$00
(2)   37/   2801B : =$2                         set vcRS4,$02
(2)   38/   2801B : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $14
(2)   38/   2801B : =$19                        set vcAR1,$19
(2)   38/   2801B : =$19                        set vcAR2,$19
(2)   38/   2801B : =$19                        set vcAR3,$19
(2)   38/   2801B : =$14                        set vcAR4,$14
(2)   39/   2801B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)   39/   2801B : =$0                                 set vcAM1,$00<<5
(2)   39/   2801B : =$0                                 set vcAM2,$00<<5
(2)   39/   2801B : =$0                                 set vcAM3,$00<<5
(2)   39/   2801B : =$0                                 set vcAM4,$00<<5
(2)   40/   2801B : (MACRO)             	smpsVcDecayRate1    $0D, $0D, $0D, $0F
(2)   40/   2801B : =$D                         set vcD1R1,$0D
(2)   40/   2801B : =$D                         set vcD1R2,$0D
(2)   40/   2801B : =$D                         set vcD1R3,$0D
(2)   40/   2801B : =$F                         set vcD1R4,$0F
(2)   41/   2801B : (MACRO)             	smpsVcDecayRate2    $04, $04, $04, $07
(2)   41/   2801B : =$4                         set vcD2R1,$04
(2)   41/   2801B : =$4                         set vcD2R2,$04
(2)   41/   2801B : =$4                         set vcD2R3,$04
(2)   41/   2801B : =$7                         set vcD2R4,$07
(2)   42/   2801B : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(2)   42/   2801B : =$1                         set vcDL1,$01
(2)   42/   2801B : =$1                         set vcDL2,$01
(2)   42/   2801B : =$1                         set vcDL3,$01
(2)   42/   2801B : =$2                         set vcDL4,$02
(2)   43/   2801B : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $05
(2)   43/   2801B : =$A                         set vcRR1,$0A
(2)   43/   2801B : =$A                         set vcRR2,$0A
(2)   43/   2801B : =$A                         set vcRR3,$0A
(2)   43/   2801B : =$5                         set vcRR4,$05
(2)   44/   2801B : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $15
(2)   44/   2801B : =$0                         set vcTL1,$00
(2)   44/   2801B : =$0                         set vcTL2,$00
(2)   44/   2801B : =$0                         set vcTL3,$00
(2)   44/   2801B : =$15                        set vcTL4,$15
(2)   44/   2801B : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)   44/   2801C :                     ;   0     1     2     3     4     5     6     7
(2)   44/   2801C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)   44/   2801C : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)   44/   2801C : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)   44/   2801C : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)   44/   2801C : =$80                                set vcTLMask1,$80
(2)   44/   2801C :                     
(2)   44/   2801C :                     
(2)   44/   2801C : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)   44/   28020 : 9419 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)   44/   28024 : 0F0D 0D0D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)   44/   28028 : 0704 0404                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)   44/   2802C : 251A 1A1A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)   44/   28030 : 1580 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)   45/   28034 :                     
(2)   46/   28034 :                     ; Slap Bass 2
(2)   47/   28034 :                     ;	Voice $02
(2)   48/   28034 :                     ;	$03
(2)   49/   28034 :                     ;	$00, $D7, $33, $02, 	$5F, $9F, $5F, $1F, 	$13, $0F, $0A, $0A
(2)   50/   28034 :                     ;	$10, $0F, $02, $09, 	$35, $15, $25, $1A, 	$13, $16, $15, $80
(2)   51/   28034 : (MACRO)             	smpsVcAlgorithm     $03
(2)   51/   28034 : =$3                 vcAlgorithm set $03
(2)   52/   28034 : (MACRO)             	smpsVcFeedback      $00
(2)   52/   28034 : =$0                 vcFeedback set $00
(2)   53/   28034 : (MACRO)             	smpsVcUnusedBits    $00
(2)   53/   28034 : =$0                 vcUnusedBits set $00
(2)   53/   28034 : =$0                                 set vcD1R1Unk,0
(2)   53/   28034 : =$0                                 set vcD1R2Unk,0
(2)   53/   28034 : =$0                                 set vcD1R3Unk,0
(2)   53/   28034 : =$0                                 set vcD1R4Unk,0
(2)   54/   28034 : (MACRO)             	smpsVcDetune        $00, $03, $0D, $00
(2)   54/   28034 : =$0                         set vcDT1,$00
(2)   54/   28034 : =$3                         set vcDT2,$03
(2)   54/   28034 : =$D                         set vcDT3,$0D
(2)   54/   28034 : =$0                         set vcDT4,$00
(2)   55/   28034 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $07, $00
(2)   55/   28034 : =$2                         set vcCF1,$02
(2)   55/   28034 : =$3                         set vcCF2,$03
(2)   55/   28034 : =$7                         set vcCF3,$07
(2)   55/   28034 : =$0                         set vcCF4,$00
(2)   56/   28034 : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)   56/   28034 : =$0                         set vcRS1,$00
(2)   56/   28034 : =$1                         set vcRS2,$01
(2)   56/   28034 : =$2                         set vcRS3,$02
(2)   56/   28034 : =$1                         set vcRS4,$01
(2)   57/   28034 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)   57/   28034 : =$1F                        set vcAR1,$1F
(2)   57/   28034 : =$1F                        set vcAR2,$1F
(2)   57/   28034 : =$1F                        set vcAR3,$1F
(2)   57/   28034 : =$1F                        set vcAR4,$1F
(2)   58/   28034 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)   58/   28034 : =$0                                 set vcAM1,$00<<5
(2)   58/   28034 : =$0                                 set vcAM2,$00<<5
(2)   58/   28034 : =$0                                 set vcAM3,$00<<5
(2)   58/   28034 : =$0                                 set vcAM4,$00<<5
(2)   59/   28034 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0F, $13
(2)   59/   28034 : =$A                         set vcD1R1,$0A
(2)   59/   28034 : =$A                         set vcD1R2,$0A
(2)   59/   28034 : =$F                         set vcD1R3,$0F
(2)   59/   28034 : =$13                        set vcD1R4,$13
(2)   60/   28034 : (MACRO)             	smpsVcDecayRate2    $09, $02, $0F, $10
(2)   60/   28034 : =$9                         set vcD2R1,$09
(2)   60/   28034 : =$2                         set vcD2R2,$02
(2)   60/   28034 : =$F                         set vcD2R3,$0F
(2)   60/   28034 : =$10                        set vcD2R4,$10
(2)   61/   28034 : (MACRO)             	smpsVcDecayLevel    $01, $02, $01, $03
(2)   61/   28034 : =$1                         set vcDL1,$01
(2)   61/   28034 : =$2                         set vcDL2,$02
(2)   61/   28034 : =$1                         set vcDL3,$01
(2)   61/   28034 : =$3                         set vcDL4,$03
(2)   62/   28034 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $05, $05
(2)   62/   28034 : =$A                         set vcRR1,$0A
(2)   62/   28034 : =$5                         set vcRR2,$05
(2)   62/   28034 : =$5                         set vcRR3,$05
(2)   62/   28034 : =$5                         set vcRR4,$05
(2)   63/   28034 : (MACRO)             	smpsVcTotalLevel    $00, $15, $16, $13
(2)   63/   28034 : =$0                         set vcTL1,$00
(2)   63/   28034 : =$15                        set vcTL2,$15
(2)   63/   28034 : =$16                        set vcTL3,$16
(2)   63/   28034 : =$13                        set vcTL4,$13
(2)   63/   28034 : 03                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)   63/   28035 :                     ;   0     1     2     3     4     5     6     7
(2)   63/   28035 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)   63/   28035 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)   63/   28035 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)   63/   28035 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)   63/   28035 : =$80                                set vcTLMask1,$80
(2)   63/   28035 :                     
(2)   63/   28035 :                     
(2)   63/   28035 : 00D7 3302                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)   63/   28039 : 5F9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)   63/   2803D : 130F 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)   63/   28041 : 100F 0209                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)   63/   28045 : 3515 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)   63/   28049 : 1316 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)   64/   2804D :                     
(2)   65/   2804D :                     ; Synth Bass 1
(2)   66/   2804D :                     ;	Voice $03
(2)   67/   2804D :                     ;	$34
(2)   68/   2804D :                     ;	$70, $72, $31, $31, 	$1F, $1F, $1F, $1F, 	$10, $06, $06, $06
(2)   69/   2804D :                     ;	$01, $06, $06, $06, 	$35, $1A, $15, $1A, 	$10, $83, $18, $83
(2)   70/   2804D : (MACRO)             	smpsVcAlgorithm     $04
(2)   70/   2804D : =$4                 vcAlgorithm set $04
(2)   71/   2804D : (MACRO)             	smpsVcFeedback      $06
(2)   71/   2804D : =$6                 vcFeedback set $06
(2)   72/   2804D : (MACRO)             	smpsVcUnusedBits    $00
(2)   72/   2804D : =$0                 vcUnusedBits set $00
(2)   72/   2804D : =$0                                 set vcD1R1Unk,0
(2)   72/   2804D : =$0                                 set vcD1R2Unk,0
(2)   72/   2804D : =$0                                 set vcD1R3Unk,0
(2)   72/   2804D : =$0                                 set vcD1R4Unk,0
(2)   73/   2804D : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)   73/   2804D : =$3                         set vcDT1,$03
(2)   73/   2804D : =$3                         set vcDT2,$03
(2)   73/   2804D : =$7                         set vcDT3,$07
(2)   73/   2804D : =$7                         set vcDT4,$07
(2)   74/   2804D : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $00
(2)   74/   2804D : =$1                         set vcCF1,$01
(2)   74/   2804D : =$1                         set vcCF2,$01
(2)   74/   2804D : =$2                         set vcCF3,$02
(2)   74/   2804D : =$0                         set vcCF4,$00
(2)   75/   2804D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)   75/   2804D : =$0                         set vcRS1,$00
(2)   75/   2804D : =$0                         set vcRS2,$00
(2)   75/   2804D : =$0                         set vcRS3,$00
(2)   75/   2804D : =$0                         set vcRS4,$00
(2)   76/   2804D : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)   76/   2804D : =$1F                        set vcAR1,$1F
(2)   76/   2804D : =$1F                        set vcAR2,$1F
(2)   76/   2804D : =$1F                        set vcAR3,$1F
(2)   76/   2804D : =$1F                        set vcAR4,$1F
(2)   77/   2804D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)   77/   2804D : =$0                                 set vcAM1,$00<<5
(2)   77/   2804D : =$0                                 set vcAM2,$00<<5
(2)   77/   2804D : =$0                                 set vcAM3,$00<<5
(2)   77/   2804D : =$0                                 set vcAM4,$00<<5
(2)   78/   2804D : (MACRO)             	smpsVcDecayRate1    $06, $06, $06, $10
(2)   78/   2804D : =$6                         set vcD1R1,$06
(2)   78/   2804D : =$6                         set vcD1R2,$06
(2)   78/   2804D : =$6                         set vcD1R3,$06
(2)   78/   2804D : =$10                        set vcD1R4,$10
(2)   79/   2804D : (MACRO)             	smpsVcDecayRate2    $06, $06, $06, $01
(2)   79/   2804D : =$6                         set vcD2R1,$06
(2)   79/   2804D : =$6                         set vcD2R2,$06
(2)   79/   2804D : =$6                         set vcD2R3,$06
(2)   79/   2804D : =$1                         set vcD2R4,$01
(2)   80/   2804D : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $03
(2)   80/   2804D : =$1                         set vcDL1,$01
(2)   80/   2804D : =$1                         set vcDL2,$01
(2)   80/   2804D : =$1                         set vcDL3,$01
(2)   80/   2804D : =$3                         set vcDL4,$03
(2)   81/   2804D : (MACRO)             	smpsVcReleaseRate   $0A, $05, $0A, $05
(2)   81/   2804D : =$A                         set vcRR1,$0A
(2)   81/   2804D : =$5                         set vcRR2,$05
(2)   81/   2804D : =$A                         set vcRR3,$0A
(2)   81/   2804D : =$5                         set vcRR4,$05
(2)   82/   2804D : (MACRO)             	smpsVcTotalLevel    $03, $18, $03, $10
(2)   82/   2804D : =$3                         set vcTL1,$03
(2)   82/   2804D : =$18                        set vcTL2,$18
(2)   82/   2804D : =$3                         set vcTL3,$03
(2)   82/   2804D : =$10                        set vcTL4,$10
(2)   82/   2804D : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)   82/   2804E :                     ;   0     1     2     3     4     5     6     7
(2)   82/   2804E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)   82/   2804E : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)   82/   2804E : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)   82/   2804E : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)   82/   2804E : =$80                                set vcTLMask1,$80
(2)   82/   2804E :                     
(2)   82/   2804E :                     
(2)   82/   2804E : 7072 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)   82/   28052 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)   82/   28056 : 1006 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)   82/   2805A : 0106 0606                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)   82/   2805E : 351A 151A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)   82/   28062 : 1083 1883                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)   83/   28066 :                     
(2)   84/   28066 :                     ; Bell Synth 1
(2)   85/   28066 :                     ;	Voice $04
(2)   86/   28066 :                     ;	$3E
(2)   87/   28066 :                     ;	$77, $71, $32, $31, 	$1F, $1F, $1F, $1F, 	$0D, $06, $00, $00
(2)   88/   28066 :                     ;	$08, $06, $00, $00, 	$15, $0A, $0A, $0A, 	$1B, $80, $80, $80
(2)   89/   28066 : (MACRO)             	smpsVcAlgorithm     $06
(2)   89/   28066 : =$6                 vcAlgorithm set $06
(2)   90/   28066 : (MACRO)             	smpsVcFeedback      $07
(2)   90/   28066 : =$7                 vcFeedback set $07
(2)   91/   28066 : (MACRO)             	smpsVcUnusedBits    $00
(2)   91/   28066 : =$0                 vcUnusedBits set $00
(2)   91/   28066 : =$0                                 set vcD1R1Unk,0
(2)   91/   28066 : =$0                                 set vcD1R2Unk,0
(2)   91/   28066 : =$0                                 set vcD1R3Unk,0
(2)   91/   28066 : =$0                                 set vcD1R4Unk,0
(2)   92/   28066 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)   92/   28066 : =$3                         set vcDT1,$03
(2)   92/   28066 : =$3                         set vcDT2,$03
(2)   92/   28066 : =$7                         set vcDT3,$07
(2)   92/   28066 : =$7                         set vcDT4,$07
(2)   93/   28066 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $07
(2)   93/   28066 : =$1                         set vcCF1,$01
(2)   93/   28066 : =$2                         set vcCF2,$02
(2)   93/   28066 : =$1                         set vcCF3,$01
(2)   93/   28066 : =$7                         set vcCF4,$07
(2)   94/   28066 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)   94/   28066 : =$0                         set vcRS1,$00
(2)   94/   28066 : =$0                         set vcRS2,$00
(2)   94/   28066 : =$0                         set vcRS3,$00
(2)   94/   28066 : =$0                         set vcRS4,$00
(2)   95/   28066 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)   95/   28066 : =$1F                        set vcAR1,$1F
(2)   95/   28066 : =$1F                        set vcAR2,$1F
(2)   95/   28066 : =$1F                        set vcAR3,$1F
(2)   95/   28066 : =$1F                        set vcAR4,$1F
(2)   96/   28066 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)   96/   28066 : =$0                                 set vcAM1,$00<<5
(2)   96/   28066 : =$0                                 set vcAM2,$00<<5
(2)   96/   28066 : =$0                                 set vcAM3,$00<<5
(2)   96/   28066 : =$0                                 set vcAM4,$00<<5
(2)   97/   28066 : (MACRO)             	smpsVcDecayRate1    $00, $00, $06, $0D
(2)   97/   28066 : =$0                         set vcD1R1,$00
(2)   97/   28066 : =$0                         set vcD1R2,$00
(2)   97/   28066 : =$6                         set vcD1R3,$06
(2)   97/   28066 : =$D                         set vcD1R4,$0D
(2)   98/   28066 : (MACRO)             	smpsVcDecayRate2    $00, $00, $06, $08
(2)   98/   28066 : =$0                         set vcD2R1,$00
(2)   98/   28066 : =$0                         set vcD2R2,$00
(2)   98/   28066 : =$6                         set vcD2R3,$06
(2)   98/   28066 : =$8                         set vcD2R4,$08
(2)   99/   28066 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $01
(2)   99/   28066 : =$0                         set vcDL1,$00
(2)   99/   28066 : =$0                         set vcDL2,$00
(2)   99/   28066 : =$0                         set vcDL3,$00
(2)   99/   28066 : =$1                         set vcDL4,$01
(2)  100/   28066 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $05
(2)  100/   28066 : =$A                         set vcRR1,$0A
(2)  100/   28066 : =$A                         set vcRR2,$0A
(2)  100/   28066 : =$A                         set vcRR3,$0A
(2)  100/   28066 : =$5                         set vcRR4,$05
(2)  101/   28066 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $1B
(2)  101/   28066 : =$0                         set vcTL1,$00
(2)  101/   28066 : =$0                         set vcTL2,$00
(2)  101/   28066 : =$0                         set vcTL3,$00
(2)  101/   28066 : =$1B                        set vcTL4,$1B
(2)  101/   28066 : 3E                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  101/   28067 :                     ;   0     1     2     3     4     5     6     7
(2)  101/   28067 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  101/   28067 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  101/   28067 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  101/   28067 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  101/   28067 : =$80                                set vcTLMask1,$80
(2)  101/   28067 :                     
(2)  101/   28067 :                     
(2)  101/   28067 : 7771 3231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  101/   2806B : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  101/   2806F : 0D06 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  101/   28073 : 0806 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  101/   28077 : 150A 0A0A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  101/   2807B : 1B80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  102/   2807F :                     
(2)  103/   2807F :                     ; Bell Synth 2
(2)  104/   2807F :                     ;	Voice $05
(2)  105/   2807F :                     ;	$34
(2)  106/   2807F :                     ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
(2)  107/   2807F :                     ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $80, $29, $87
(2)  108/   2807F : (MACRO)             	smpsVcAlgorithm     $04
(2)  108/   2807F : =$4                 vcAlgorithm set $04
(2)  109/   2807F : (MACRO)             	smpsVcFeedback      $06
(2)  109/   2807F : =$6                 vcFeedback set $06
(2)  110/   2807F : (MACRO)             	smpsVcUnusedBits    $00
(2)  110/   2807F : =$0                 vcUnusedBits set $00
(2)  110/   2807F : =$0                                 set vcD1R1Unk,0
(2)  110/   2807F : =$0                                 set vcD1R2Unk,0
(2)  110/   2807F : =$0                                 set vcD1R3Unk,0
(2)  110/   2807F : =$0                                 set vcD1R4Unk,0
(2)  111/   2807F : (MACRO)             	smpsVcDetune        $07, $07, $04, $03
(2)  111/   2807F : =$7                         set vcDT1,$07
(2)  111/   2807F : =$7                         set vcDT2,$07
(2)  111/   2807F : =$4                         set vcDT3,$04
(2)  111/   2807F : =$3                         set vcDT4,$03
(2)  112/   2807F : (MACRO)             	smpsVcCoarseFreq    $04, $0E, $01, $03
(2)  112/   2807F : =$4                         set vcCF1,$04
(2)  112/   2807F : =$E                         set vcCF2,$0E
(2)  112/   2807F : =$1                         set vcCF3,$01
(2)  112/   2807F : =$3                         set vcCF4,$03
(2)  113/   2807F : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)  113/   2807F : =$0                         set vcRS1,$00
(2)  113/   2807F : =$1                         set vcRS2,$01
(2)  113/   2807F : =$2                         set vcRS3,$02
(2)  113/   2807F : =$1                         set vcRS4,$01
(2)  114/   2807F : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1B
(2)  114/   2807F : =$1F                        set vcAR1,$1F
(2)  114/   2807F : =$1F                        set vcAR2,$1F
(2)  114/   2807F : =$1F                        set vcAR3,$1F
(2)  114/   2807F : =$1B                        set vcAR4,$1B
(2)  115/   2807F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  115/   2807F : =$0                                 set vcAM1,$00<<5
(2)  115/   2807F : =$0                                 set vcAM2,$00<<5
(2)  115/   2807F : =$0                                 set vcAM3,$00<<5
(2)  115/   2807F : =$0                                 set vcAM4,$00<<5
(2)  116/   2807F : (MACRO)             	smpsVcDecayRate1    $08, $07, $07, $04
(2)  116/   2807F : =$8                         set vcD1R1,$08
(2)  116/   2807F : =$7                         set vcD1R2,$07
(2)  116/   2807F : =$7                         set vcD1R3,$07
(2)  116/   2807F : =$4                         set vcD1R4,$04
(2)  117/   2807F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  117/   2807F : =$0                         set vcD2R1,$00
(2)  117/   2807F : =$0                         set vcD2R2,$00
(2)  117/   2807F : =$0                         set vcD2R3,$00
(2)  117/   2807F : =$0                         set vcD2R4,$00
(2)  118/   2807F : (MACRO)             	smpsVcDecayLevel    $0F, $0E, $0F, $0F
(2)  118/   2807F : =$F                         set vcDL1,$0F
(2)  118/   2807F : =$E                         set vcDL2,$0E
(2)  118/   2807F : =$F                         set vcDL3,$0F
(2)  118/   2807F : =$F                         set vcDL4,$0F
(2)  119/   2807F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  119/   2807F : =$F                         set vcRR1,$0F
(2)  119/   2807F : =$F                         set vcRR2,$0F
(2)  119/   2807F : =$F                         set vcRR3,$0F
(2)  119/   2807F : =$F                         set vcRR4,$0F
(2)  120/   2807F : (MACRO)             	smpsVcTotalLevel    $07, $29, $00, $23
(2)  120/   2807F : =$7                         set vcTL1,$07
(2)  120/   2807F : =$29                        set vcTL2,$29
(2)  120/   2807F : =$0                         set vcTL3,$00
(2)  120/   2807F : =$23                        set vcTL4,$23
(2)  120/   2807F : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  120/   28080 :                     ;   0     1     2     3     4     5     6     7
(2)  120/   28080 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  120/   28080 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  120/   28080 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  120/   28080 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  120/   28080 : =$80                                set vcTLMask1,$80
(2)  120/   28080 :                     
(2)  120/   28080 :                     
(2)  120/   28080 : 3341 7E74                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  120/   28084 : 5B9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  120/   28088 : 0407 0708                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  120/   2808C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  120/   28090 : FFFF EFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  120/   28094 : 2380 2987                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  121/   28098 :                     
(2)  122/   28098 :                     ; Synth Brass 1
(2)  123/   28098 :                     ;	Voice $06
(2)  124/   28098 :                     ;	$3A
(2)  125/   28098 :                     ;	$01, $07, $31, $71, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(2)  126/   28098 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(2)  127/   28098 : (MACRO)             	smpsVcAlgorithm     $02
(2)  127/   28098 : =$2                 vcAlgorithm set $02
(2)  128/   28098 : (MACRO)             	smpsVcFeedback      $07
(2)  128/   28098 : =$7                 vcFeedback set $07
(2)  129/   28098 : (MACRO)             	smpsVcUnusedBits    $00
(2)  129/   28098 : =$0                 vcUnusedBits set $00
(2)  129/   28098 : =$0                                 set vcD1R1Unk,0
(2)  129/   28098 : =$0                                 set vcD1R2Unk,0
(2)  129/   28098 : =$0                                 set vcD1R3Unk,0
(2)  129/   28098 : =$0                                 set vcD1R4Unk,0
(2)  130/   28098 : (MACRO)             	smpsVcDetune        $07, $03, $00, $00
(2)  130/   28098 : =$7                         set vcDT1,$07
(2)  130/   28098 : =$3                         set vcDT2,$03
(2)  130/   28098 : =$0                         set vcDT3,$00
(2)  130/   28098 : =$0                         set vcDT4,$00
(2)  131/   28098 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(2)  131/   28098 : =$1                         set vcCF1,$01
(2)  131/   28098 : =$1                         set vcCF2,$01
(2)  131/   28098 : =$7                         set vcCF3,$07
(2)  131/   28098 : =$1                         set vcCF4,$01
(2)  132/   28098 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(2)  132/   28098 : =$1                         set vcRS1,$01
(2)  132/   28098 : =$2                         set vcRS2,$02
(2)  132/   28098 : =$2                         set vcRS3,$02
(2)  132/   28098 : =$2                         set vcRS4,$02
(2)  133/   28098 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(2)  133/   28098 : =$13                        set vcAR1,$13
(2)  133/   28098 : =$D                         set vcAR2,$0D
(2)  133/   28098 : =$E                         set vcAR3,$0E
(2)  133/   28098 : =$E                         set vcAR4,$0E
(2)  134/   28098 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  134/   28098 : =$0                                 set vcAM1,$00<<5
(2)  134/   28098 : =$0                                 set vcAM2,$00<<5
(2)  134/   28098 : =$0                                 set vcAM3,$00<<5
(2)  134/   28098 : =$0                                 set vcAM4,$00<<5
(2)  135/   28098 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(2)  135/   28098 : =$3                         set vcD1R1,$03
(2)  135/   28098 : =$E                         set vcD1R2,$0E
(2)  135/   28098 : =$E                         set vcD1R3,$0E
(2)  135/   28098 : =$E                         set vcD1R4,$0E
(2)  136/   28098 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(2)  136/   28098 : =$7                         set vcD2R1,$07
(2)  136/   28098 : =$0                         set vcD2R2,$00
(2)  136/   28098 : =$0                         set vcD2R3,$00
(2)  136/   28098 : =$0                         set vcD2R4,$00
(2)  137/   28098 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(2)  137/   28098 : =$0                         set vcDL1,$00
(2)  137/   28098 : =$1                         set vcDL2,$01
(2)  137/   28098 : =$F                         set vcDL3,$0F
(2)  137/   28098 : =$1                         set vcDL4,$01
(2)  138/   28098 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  138/   28098 : =$F                         set vcRR1,$0F
(2)  138/   28098 : =$F                         set vcRR2,$0F
(2)  138/   28098 : =$F                         set vcRR3,$0F
(2)  138/   28098 : =$F                         set vcRR4,$0F
(2)  139/   28098 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $18
(2)  139/   28098 : =$0                         set vcTL1,$00
(2)  139/   28098 : =$27                        set vcTL2,$27
(2)  139/   28098 : =$28                        set vcTL3,$28
(2)  139/   28098 : =$18                        set vcTL4,$18
(2)  139/   28098 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  139/   28099 :                     ;   0     1     2     3     4     5     6     7
(2)  139/   28099 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  139/   28099 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  139/   28099 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  139/   28099 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  139/   28099 : =$80                                set vcTLMask1,$80
(2)  139/   28099 :                     
(2)  139/   28099 :                     
(2)  139/   28099 : 0107 3171                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  139/   2809D : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  139/   280A1 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  139/   280A5 : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  139/   280A9 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  139/   280AD : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  140/   280B1 :                     
(2)  141/   280B1 :                     ; Synth like Bassoon
(2)  142/   280B1 :                     ;	Voice $07
(2)  143/   280B1 :                     ;	$3C
(2)  144/   280B1 :                     ;	$32, $32, $71, $42, 	$1F, $18, $1F, $1E, 	$07, $1F, $07, $1F
(2)  145/   280B1 :                     ;	$00, $00, $00, $00, 	$1F, $0F, $1F, $0F, 	$1E, $80, $0C, $80
(2)  146/   280B1 : (MACRO)             	smpsVcAlgorithm     $04
(2)  146/   280B1 : =$4                 vcAlgorithm set $04
(2)  147/   280B1 : (MACRO)             	smpsVcFeedback      $07
(2)  147/   280B1 : =$7                 vcFeedback set $07
(2)  148/   280B1 : (MACRO)             	smpsVcUnusedBits    $00
(2)  148/   280B1 : =$0                 vcUnusedBits set $00
(2)  148/   280B1 : =$0                                 set vcD1R1Unk,0
(2)  148/   280B1 : =$0                                 set vcD1R2Unk,0
(2)  148/   280B1 : =$0                                 set vcD1R3Unk,0
(2)  148/   280B1 : =$0                                 set vcD1R4Unk,0
(2)  149/   280B1 : (MACRO)             	smpsVcDetune        $04, $07, $03, $03
(2)  149/   280B1 : =$4                         set vcDT1,$04
(2)  149/   280B1 : =$7                         set vcDT2,$07
(2)  149/   280B1 : =$3                         set vcDT3,$03
(2)  149/   280B1 : =$3                         set vcDT4,$03
(2)  150/   280B1 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $02, $02
(2)  150/   280B1 : =$2                         set vcCF1,$02
(2)  150/   280B1 : =$1                         set vcCF2,$01
(2)  150/   280B1 : =$2                         set vcCF3,$02
(2)  150/   280B1 : =$2                         set vcCF4,$02
(2)  151/   280B1 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  151/   280B1 : =$0                         set vcRS1,$00
(2)  151/   280B1 : =$0                         set vcRS2,$00
(2)  151/   280B1 : =$0                         set vcRS3,$00
(2)  151/   280B1 : =$0                         set vcRS4,$00
(2)  152/   280B1 : (MACRO)             	smpsVcAttackRate    $1E, $1F, $18, $1F
(2)  152/   280B1 : =$1E                        set vcAR1,$1E
(2)  152/   280B1 : =$1F                        set vcAR2,$1F
(2)  152/   280B1 : =$18                        set vcAR3,$18
(2)  152/   280B1 : =$1F                        set vcAR4,$1F
(2)  153/   280B1 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  153/   280B1 : =$0                                 set vcAM1,$00<<5
(2)  153/   280B1 : =$0                                 set vcAM2,$00<<5
(2)  153/   280B1 : =$0                                 set vcAM3,$00<<5
(2)  153/   280B1 : =$0                                 set vcAM4,$00<<5
(2)  154/   280B1 : (MACRO)             	smpsVcDecayRate1    $1F, $07, $1F, $07
(2)  154/   280B1 : =$1F                        set vcD1R1,$1F
(2)  154/   280B1 : =$7                         set vcD1R2,$07
(2)  154/   280B1 : =$1F                        set vcD1R3,$1F
(2)  154/   280B1 : =$7                         set vcD1R4,$07
(2)  155/   280B1 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  155/   280B1 : =$0                         set vcD2R1,$00
(2)  155/   280B1 : =$0                         set vcD2R2,$00
(2)  155/   280B1 : =$0                         set vcD2R3,$00
(2)  155/   280B1 : =$0                         set vcD2R4,$00
(2)  156/   280B1 : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(2)  156/   280B1 : =$0                         set vcDL1,$00
(2)  156/   280B1 : =$1                         set vcDL2,$01
(2)  156/   280B1 : =$0                         set vcDL3,$00
(2)  156/   280B1 : =$1                         set vcDL4,$01
(2)  157/   280B1 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  157/   280B1 : =$F                         set vcRR1,$0F
(2)  157/   280B1 : =$F                         set vcRR2,$0F
(2)  157/   280B1 : =$F                         set vcRR3,$0F
(2)  157/   280B1 : =$F                         set vcRR4,$0F
(2)  158/   280B1 : (MACRO)             	smpsVcTotalLevel    $00, $0C, $00, $1E
(2)  158/   280B1 : =$0                         set vcTL1,$00
(2)  158/   280B1 : =$C                         set vcTL2,$0C
(2)  158/   280B1 : =$0                         set vcTL3,$00
(2)  158/   280B1 : =$1E                        set vcTL4,$1E
(2)  158/   280B1 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  158/   280B2 :                     ;   0     1     2     3     4     5     6     7
(2)  158/   280B2 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  158/   280B2 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  158/   280B2 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  158/   280B2 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  158/   280B2 : =$80                                set vcTLMask1,$80
(2)  158/   280B2 :                     
(2)  158/   280B2 :                     
(2)  158/   280B2 : 3232 7142                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  158/   280B6 : 1F18 1F1E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  158/   280BA : 071F 071F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  158/   280BE : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  158/   280C2 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  158/   280C6 : 1E80 0C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  159/   280CA :                     
(2)  160/   280CA :                     ; Bell Horn type thing
(2)  161/   280CA :                     ;	Voice $08
(2)  162/   280CA :                     ;	$3C
(2)  163/   280CA :                     ;	$71, $72, $3F, $34, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(2)  164/   280CA :                     ;	$00, $00, $00, $00, 	$23, $08, $02, $F7, 	$15, $80, $1D, $87
(2)  165/   280CA : (MACRO)             	smpsVcAlgorithm     $04
(2)  165/   280CA : =$4                 vcAlgorithm set $04
(2)  166/   280CA : (MACRO)             	smpsVcFeedback      $07
(2)  166/   280CA : =$7                 vcFeedback set $07
(2)  167/   280CA : (MACRO)             	smpsVcUnusedBits    $00
(2)  167/   280CA : =$0                 vcUnusedBits set $00
(2)  167/   280CA : =$0                                 set vcD1R1Unk,0
(2)  167/   280CA : =$0                                 set vcD1R2Unk,0
(2)  167/   280CA : =$0                                 set vcD1R3Unk,0
(2)  167/   280CA : =$0                                 set vcD1R4Unk,0
(2)  168/   280CA : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  168/   280CA : =$3                         set vcDT1,$03
(2)  168/   280CA : =$3                         set vcDT2,$03
(2)  168/   280CA : =$7                         set vcDT3,$07
(2)  168/   280CA : =$7                         set vcDT4,$07
(2)  169/   280CA : (MACRO)             	smpsVcCoarseFreq    $04, $0F, $02, $01
(2)  169/   280CA : =$4                         set vcCF1,$04
(2)  169/   280CA : =$F                         set vcCF2,$0F
(2)  169/   280CA : =$2                         set vcCF3,$02
(2)  169/   280CA : =$1                         set vcCF4,$01
(2)  170/   280CA : (MACRO)             	smpsVcRateScale     $00, $02, $01, $02
(2)  170/   280CA : =$0                         set vcRS1,$00
(2)  170/   280CA : =$2                         set vcRS2,$02
(2)  170/   280CA : =$1                         set vcRS3,$01
(2)  170/   280CA : =$2                         set vcRS4,$02
(2)  171/   280CA : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $0D
(2)  171/   280CA : =$1F                        set vcAR1,$1F
(2)  171/   280CA : =$1F                        set vcAR2,$1F
(2)  171/   280CA : =$12                        set vcAR3,$12
(2)  171/   280CA : =$D                         set vcAR4,$0D
(2)  172/   280CA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  172/   280CA : =$0                                 set vcAM1,$00<<5
(2)  172/   280CA : =$0                                 set vcAM2,$00<<5
(2)  172/   280CA : =$0                                 set vcAM3,$00<<5
(2)  172/   280CA : =$0                                 set vcAM4,$00<<5
(2)  173/   280CA : (MACRO)             	smpsVcDecayRate1    $0D, $00, $00, $09
(2)  173/   280CA : =$D                         set vcD1R1,$0D
(2)  173/   280CA : =$0                         set vcD1R2,$00
(2)  173/   280CA : =$0                         set vcD1R3,$00
(2)  173/   280CA : =$9                         set vcD1R4,$09
(2)  174/   280CA : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  174/   280CA : =$0                         set vcD2R1,$00
(2)  174/   280CA : =$0                         set vcD2R2,$00
(2)  174/   280CA : =$0                         set vcD2R3,$00
(2)  174/   280CA : =$0                         set vcD2R4,$00
(2)  175/   280CA : (MACRO)             	smpsVcDecayLevel    $0F, $00, $00, $02
(2)  175/   280CA : =$F                         set vcDL1,$0F
(2)  175/   280CA : =$0                         set vcDL2,$00
(2)  175/   280CA : =$0                         set vcDL3,$00
(2)  175/   280CA : =$2                         set vcDL4,$02
(2)  176/   280CA : (MACRO)             	smpsVcReleaseRate   $07, $02, $08, $03
(2)  176/   280CA : =$7                         set vcRR1,$07
(2)  176/   280CA : =$2                         set vcRR2,$02
(2)  176/   280CA : =$8                         set vcRR3,$08
(2)  176/   280CA : =$3                         set vcRR4,$03
(2)  177/   280CA : (MACRO)             	smpsVcTotalLevel    $07, $1D, $00, $15
(2)  177/   280CA : =$7                         set vcTL1,$07
(2)  177/   280CA : =$1D                        set vcTL2,$1D
(2)  177/   280CA : =$0                         set vcTL3,$00
(2)  177/   280CA : =$15                        set vcTL4,$15
(2)  177/   280CA : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  177/   280CB :                     ;   0     1     2     3     4     5     6     7
(2)  177/   280CB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  177/   280CB : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  177/   280CB : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  177/   280CB : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  177/   280CB : =$80                                set vcTLMask1,$80
(2)  177/   280CB :                     
(2)  177/   280CB :                     
(2)  177/   280CB : 7172 3F34                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  177/   280CF : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  177/   280D3 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  177/   280D7 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  177/   280DB : 2308 02F7                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  177/   280DF : 1580 1D87                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  178/   280E3 :                     
(2)  179/   280E3 :                     ; Synth Bass 3
(2)  180/   280E3 :                     ;	Voice $09
(2)  181/   280E3 :                     ;	$3D
(2)  182/   280E3 :                     ;	$01, $01, $00, $00, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
(2)  183/   280E3 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
(2)  184/   280E3 : (MACRO)             	smpsVcAlgorithm     $05
(2)  184/   280E3 : =$5                 vcAlgorithm set $05
(2)  185/   280E3 : (MACRO)             	smpsVcFeedback      $07
(2)  185/   280E3 : =$7                 vcFeedback set $07
(2)  186/   280E3 : (MACRO)             	smpsVcUnusedBits    $00
(2)  186/   280E3 : =$0                 vcUnusedBits set $00
(2)  186/   280E3 : =$0                                 set vcD1R1Unk,0
(2)  186/   280E3 : =$0                                 set vcD1R2Unk,0
(2)  186/   280E3 : =$0                                 set vcD1R3Unk,0
(2)  186/   280E3 : =$0                                 set vcD1R4Unk,0
(2)  187/   280E3 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  187/   280E3 : =$0                         set vcDT1,$00
(2)  187/   280E3 : =$0                         set vcDT2,$00
(2)  187/   280E3 : =$0                         set vcDT3,$00
(2)  187/   280E3 : =$0                         set vcDT4,$00
(2)  188/   280E3 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $01
(2)  188/   280E3 : =$0                         set vcCF1,$00
(2)  188/   280E3 : =$0                         set vcCF2,$00
(2)  188/   280E3 : =$1                         set vcCF3,$01
(2)  188/   280E3 : =$1                         set vcCF4,$01
(2)  189/   280E3 : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(2)  189/   280E3 : =$1                         set vcRS1,$01
(2)  189/   280E3 : =$0                         set vcRS2,$00
(2)  189/   280E3 : =$1                         set vcRS3,$01
(2)  189/   280E3 : =$2                         set vcRS4,$02
(2)  190/   280E3 : (MACRO)             	smpsVcAttackRate    $0C, $14, $12, $0E
(2)  190/   280E3 : =$C                         set vcAR1,$0C
(2)  190/   280E3 : =$14                        set vcAR2,$14
(2)  190/   280E3 : =$12                        set vcAR3,$12
(2)  190/   280E3 : =$E                         set vcAR4,$0E
(2)  191/   280E3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  191/   280E3 : =$0                                 set vcAM1,$00<<5
(2)  191/   280E3 : =$0                                 set vcAM2,$00<<5
(2)  191/   280E3 : =$0                                 set vcAM3,$00<<5
(2)  191/   280E3 : =$0                                 set vcAM4,$00<<5
(2)  192/   280E3 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $08, $08
(2)  192/   280E3 : =$3                         set vcD1R1,$03
(2)  192/   280E3 : =$E                         set vcD1R2,$0E
(2)  192/   280E3 : =$8                         set vcD1R3,$08
(2)  192/   280E3 : =$8                         set vcD1R4,$08
(2)  193/   280E3 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  193/   280E3 : =$0                         set vcD2R1,$00
(2)  193/   280E3 : =$0                         set vcD2R2,$00
(2)  193/   280E3 : =$0                         set vcD2R3,$00
(2)  193/   280E3 : =$0                         set vcD2R4,$00
(2)  194/   280E3 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(2)  194/   280E3 : =$1                         set vcDL1,$01
(2)  194/   280E3 : =$1                         set vcDL2,$01
(2)  194/   280E3 : =$1                         set vcDL3,$01
(2)  194/   280E3 : =$1                         set vcDL4,$01
(2)  195/   280E3 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  195/   280E3 : =$F                         set vcRR1,$0F
(2)  195/   280E3 : =$F                         set vcRR2,$0F
(2)  195/   280E3 : =$F                         set vcRR3,$0F
(2)  195/   280E3 : =$F                         set vcRR4,$0F
(2)  196/   280E3 : (MACRO)             	smpsVcTotalLevel    $1B, $00, $00, $1B
(2)  196/   280E3 : =$1B                        set vcTL1,$1B
(2)  196/   280E3 : =$0                         set vcTL2,$00
(2)  196/   280E3 : =$0                         set vcTL3,$00
(2)  196/   280E3 : =$1B                        set vcTL4,$1B
(2)  196/   280E3 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  196/   280E4 :                     ;   0     1     2     3     4     5     6     7
(2)  196/   280E4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  196/   280E4 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  196/   280E4 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  196/   280E4 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  196/   280E4 : =$80                                set vcTLMask1,$80
(2)  196/   280E4 :                     
(2)  196/   280E4 :                     
(2)  196/   280E4 : 0101 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  196/   280E8 : 8E52 144C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  196/   280EC : 0808 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  196/   280F0 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  196/   280F4 : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  196/   280F8 : 1B80 809B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  197/   280FC :                     
(2)  198/   280FC :                     ; Synth Trumpet
(2)  199/   280FC :                     ;	Voice $0A
(2)  200/   280FC :                     ;	$3A
(2)  201/   280FC :                     ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
(2)  202/   280FC :                     ;	$01, $02, $02, $00, 	$52, $02, $02, $28, 	$18, $22, $18, $80
(2)  203/   280FC : (MACRO)             	smpsVcAlgorithm     $02
(2)  203/   280FC : =$2                 vcAlgorithm set $02
(2)  204/   280FC : (MACRO)             	smpsVcFeedback      $07
(2)  204/   280FC : =$7                 vcFeedback set $07
(2)  205/   280FC : (MACRO)             	smpsVcUnusedBits    $00
(2)  205/   280FC : =$0                 vcUnusedBits set $00
(2)  205/   280FC : =$0                                 set vcD1R1Unk,0
(2)  205/   280FC : =$0                                 set vcD1R2Unk,0
(2)  205/   280FC : =$0                                 set vcD1R3Unk,0
(2)  205/   280FC : =$0                                 set vcD1R4Unk,0
(2)  206/   280FC : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  206/   280FC : =$0                         set vcDT1,$00
(2)  206/   280FC : =$0                         set vcDT2,$00
(2)  206/   280FC : =$0                         set vcDT3,$00
(2)  206/   280FC : =$0                         set vcDT4,$00
(2)  207/   280FC : (MACRO)             	smpsVcCoarseFreq    $02, $01, $01, $01
(2)  207/   280FC : =$2                         set vcCF1,$02
(2)  207/   280FC : =$1                         set vcCF2,$01
(2)  207/   280FC : =$1                         set vcCF3,$01
(2)  207/   280FC : =$1                         set vcCF4,$01
(2)  208/   280FC : (MACRO)             	smpsVcRateScale     $01, $00, $00, $02
(2)  208/   280FC : =$1                         set vcRS1,$01
(2)  208/   280FC : =$0                         set vcRS2,$00
(2)  208/   280FC : =$0                         set vcRS3,$00
(2)  208/   280FC : =$2                         set vcRS4,$02
(2)  209/   280FC : (MACRO)             	smpsVcAttackRate    $12, $07, $07, $0D
(2)  209/   280FC : =$12                        set vcAR1,$12
(2)  209/   280FC : =$7                         set vcAR2,$07
(2)  209/   280FC : =$7                         set vcAR3,$07
(2)  209/   280FC : =$D                         set vcAR4,$0D
(2)  210/   280FC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  210/   280FC : =$0                                 set vcAM1,$00<<5
(2)  210/   280FC : =$0                                 set vcAM2,$00<<5
(2)  210/   280FC : =$0                                 set vcAM3,$00<<5
(2)  210/   280FC : =$0                                 set vcAM4,$00<<5
(2)  211/   280FC : (MACRO)             	smpsVcDecayRate1    $03, $00, $00, $09
(2)  211/   280FC : =$3                         set vcD1R1,$03
(2)  211/   280FC : =$0                         set vcD1R2,$00
(2)  211/   280FC : =$0                         set vcD1R3,$00
(2)  211/   280FC : =$9                         set vcD1R4,$09
(2)  212/   280FC : (MACRO)             	smpsVcDecayRate2    $00, $02, $02, $01
(2)  212/   280FC : =$0                         set vcD2R1,$00
(2)  212/   280FC : =$2                         set vcD2R2,$02
(2)  212/   280FC : =$2                         set vcD2R3,$02
(2)  212/   280FC : =$1                         set vcD2R4,$01
(2)  213/   280FC : (MACRO)             	smpsVcDecayLevel    $02, $00, $00, $05
(2)  213/   280FC : =$2                         set vcDL1,$02
(2)  213/   280FC : =$0                         set vcDL2,$00
(2)  213/   280FC : =$0                         set vcDL3,$00
(2)  213/   280FC : =$5                         set vcDL4,$05
(2)  214/   280FC : (MACRO)             	smpsVcReleaseRate   $08, $02, $02, $02
(2)  214/   280FC : =$8                         set vcRR1,$08
(2)  214/   280FC : =$2                         set vcRR2,$02
(2)  214/   280FC : =$2                         set vcRR3,$02
(2)  214/   280FC : =$2                         set vcRR4,$02
(2)  215/   280FC : (MACRO)             	smpsVcTotalLevel    $00, $18, $22, $18
(2)  215/   280FC : =$0                         set vcTL1,$00
(2)  215/   280FC : =$18                        set vcTL2,$18
(2)  215/   280FC : =$22                        set vcTL3,$22
(2)  215/   280FC : =$18                        set vcTL4,$18
(2)  215/   280FC : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  215/   280FD :                     ;   0     1     2     3     4     5     6     7
(2)  215/   280FD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  215/   280FD : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  215/   280FD : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  215/   280FD : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  215/   280FD : =$80                                set vcTLMask1,$80
(2)  215/   280FD :                     
(2)  215/   280FD :                     
(2)  215/   280FD : 0101 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  215/   28101 : 8D07 0752                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  215/   28105 : 0900 0003                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  215/   28109 : 0102 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  215/   2810D : 5202 0228                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  215/   28111 : 1822 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  216/   28115 :                     
(2)  217/   28115 :                     ; Wood Block
(2)  218/   28115 :                     ;	Voice $0B
(2)  219/   28115 :                     ;	$3C
(2)  220/   28115 :                     ;	$36, $31, $76, $71, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
(2)  221/   28115 :                     ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
(2)  222/   28115 : (MACRO)             	smpsVcAlgorithm     $04
(2)  222/   28115 : =$4                 vcAlgorithm set $04
(2)  223/   28115 : (MACRO)             	smpsVcFeedback      $07
(2)  223/   28115 : =$7                 vcFeedback set $07
(2)  224/   28115 : (MACRO)             	smpsVcUnusedBits    $00
(2)  224/   28115 : =$0                 vcUnusedBits set $00
(2)  224/   28115 : =$0                                 set vcD1R1Unk,0
(2)  224/   28115 : =$0                                 set vcD1R2Unk,0
(2)  224/   28115 : =$0                                 set vcD1R3Unk,0
(2)  224/   28115 : =$0                                 set vcD1R4Unk,0
(2)  225/   28115 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(2)  225/   28115 : =$7                         set vcDT1,$07
(2)  225/   28115 : =$7                         set vcDT2,$07
(2)  225/   28115 : =$3                         set vcDT3,$03
(2)  225/   28115 : =$3                         set vcDT4,$03
(2)  226/   28115 : (MACRO)             	smpsVcCoarseFreq    $01, $06, $01, $06
(2)  226/   28115 : =$1                         set vcCF1,$01
(2)  226/   28115 : =$6                         set vcCF2,$06
(2)  226/   28115 : =$1                         set vcCF3,$01
(2)  226/   28115 : =$6                         set vcCF4,$06
(2)  227/   28115 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  227/   28115 : =$2                         set vcRS1,$02
(2)  227/   28115 : =$2                         set vcRS2,$02
(2)  227/   28115 : =$2                         set vcRS3,$02
(2)  227/   28115 : =$2                         set vcRS4,$02
(2)  228/   28115 : (MACRO)             	smpsVcAttackRate    $1F, $16, $1F, $14
(2)  228/   28115 : =$1F                        set vcAR1,$1F
(2)  228/   28115 : =$16                        set vcAR2,$16
(2)  228/   28115 : =$1F                        set vcAR3,$1F
(2)  228/   28115 : =$14                        set vcAR4,$14
(2)  229/   28115 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  229/   28115 : =$0                                 set vcAM1,$00<<5
(2)  229/   28115 : =$0                                 set vcAM2,$00<<5
(2)  229/   28115 : =$0                                 set vcAM3,$00<<5
(2)  229/   28115 : =$0                                 set vcAM4,$00<<5
(2)  230/   28115 : (MACRO)             	smpsVcDecayRate1    $0F, $14, $00, $12
(2)  230/   28115 : =$F                         set vcD1R1,$0F
(2)  230/   28115 : =$14                        set vcD1R2,$14
(2)  230/   28115 : =$0                         set vcD1R3,$00
(2)  230/   28115 : =$12                        set vcD1R4,$12
(2)  231/   28115 : (MACRO)             	smpsVcDecayRate2    $0D, $04, $0A, $04
(2)  231/   28115 : =$D                         set vcD2R1,$0D
(2)  231/   28115 : =$4                         set vcD2R2,$04
(2)  231/   28115 : =$A                         set vcD2R3,$0A
(2)  231/   28115 : =$4                         set vcD2R4,$04
(2)  232/   28115 : (MACRO)             	smpsVcDecayLevel    $02, $04, $00, $02
(2)  232/   28115 : =$2                         set vcDL1,$02
(2)  232/   28115 : =$4                         set vcDL2,$04
(2)  232/   28115 : =$0                         set vcDL3,$00
(2)  232/   28115 : =$2                         set vcDL4,$02
(2)  233/   28115 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  233/   28115 : =$F                         set vcRR1,$0F
(2)  233/   28115 : =$F                         set vcRR2,$0F
(2)  233/   28115 : =$F                         set vcRR3,$0F
(2)  233/   28115 : =$F                         set vcRR4,$0F
(2)  234/   28115 : (MACRO)             	smpsVcTotalLevel    $00, $1A, $00, $33
(2)  234/   28115 : =$0                         set vcTL1,$00
(2)  234/   28115 : =$1A                        set vcTL2,$1A
(2)  234/   28115 : =$0                         set vcTL3,$00
(2)  234/   28115 : =$33                        set vcTL4,$33
(2)  234/   28115 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  234/   28116 :                     ;   0     1     2     3     4     5     6     7
(2)  234/   28116 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  234/   28116 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  234/   28116 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  234/   28116 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  234/   28116 : =$80                                set vcTLMask1,$80
(2)  234/   28116 :                     
(2)  234/   28116 :                     
(2)  234/   28116 : 3631 7671                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  234/   2811A : 949F 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  234/   2811E : 1200 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  234/   28122 : 040A 040D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  234/   28126 : 2F0F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  234/   2812A : 3380 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  235/   2812E :                     
(2)  236/   2812E :                     ; Tubular Bell
(2)  237/   2812E :                     ;	Voice $0C
(2)  238/   2812E :                     ;	$34
(2)  239/   2812E :                     ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
(2)  240/   2812E :                     ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
(2)  241/   2812E : (MACRO)             	smpsVcAlgorithm     $04
(2)  241/   2812E : =$4                 vcAlgorithm set $04
(2)  242/   2812E : (MACRO)             	smpsVcFeedback      $06
(2)  242/   2812E : =$6                 vcFeedback set $06
(2)  243/   2812E : (MACRO)             	smpsVcUnusedBits    $00
(2)  243/   2812E : =$0                 vcUnusedBits set $00
(2)  243/   2812E : =$0                                 set vcD1R1Unk,0
(2)  243/   2812E : =$0                                 set vcD1R2Unk,0
(2)  243/   2812E : =$0                                 set vcD1R3Unk,0
(2)  243/   2812E : =$0                                 set vcD1R4Unk,0
(2)  244/   2812E : (MACRO)             	smpsVcDetune        $07, $07, $04, $03
(2)  244/   2812E : =$7                         set vcDT1,$07
(2)  244/   2812E : =$7                         set vcDT2,$07
(2)  244/   2812E : =$4                         set vcDT3,$04
(2)  244/   2812E : =$3                         set vcDT4,$03
(2)  245/   2812E : (MACRO)             	smpsVcCoarseFreq    $04, $0E, $01, $03
(2)  245/   2812E : =$4                         set vcCF1,$04
(2)  245/   2812E : =$E                         set vcCF2,$0E
(2)  245/   2812E : =$1                         set vcCF3,$01
(2)  245/   2812E : =$3                         set vcCF4,$03
(2)  246/   2812E : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)  246/   2812E : =$0                         set vcRS1,$00
(2)  246/   2812E : =$1                         set vcRS2,$01
(2)  246/   2812E : =$2                         set vcRS3,$02
(2)  246/   2812E : =$1                         set vcRS4,$01
(2)  247/   2812E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1B
(2)  247/   2812E : =$1F                        set vcAR1,$1F
(2)  247/   2812E : =$1F                        set vcAR2,$1F
(2)  247/   2812E : =$1F                        set vcAR3,$1F
(2)  247/   2812E : =$1B                        set vcAR4,$1B
(2)  248/   2812E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  248/   2812E : =$0                                 set vcAM1,$00<<5
(2)  248/   2812E : =$0                                 set vcAM2,$00<<5
(2)  248/   2812E : =$0                                 set vcAM3,$00<<5
(2)  248/   2812E : =$0                                 set vcAM4,$00<<5
(2)  249/   2812E : (MACRO)             	smpsVcDecayRate1    $08, $07, $07, $04
(2)  249/   2812E : =$8                         set vcD1R1,$08
(2)  249/   2812E : =$7                         set vcD1R2,$07
(2)  249/   2812E : =$7                         set vcD1R3,$07
(2)  249/   2812E : =$4                         set vcD1R4,$04
(2)  250/   2812E : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  250/   2812E : =$0                         set vcD2R1,$00
(2)  250/   2812E : =$0                         set vcD2R2,$00
(2)  250/   2812E : =$0                         set vcD2R3,$00
(2)  250/   2812E : =$0                         set vcD2R4,$00
(2)  251/   2812E : (MACRO)             	smpsVcDecayLevel    $0F, $0E, $0F, $0F
(2)  251/   2812E : =$F                         set vcDL1,$0F
(2)  251/   2812E : =$E                         set vcDL2,$0E
(2)  251/   2812E : =$F                         set vcDL3,$0F
(2)  251/   2812E : =$F                         set vcDL4,$0F
(2)  252/   2812E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  252/   2812E : =$F                         set vcRR1,$0F
(2)  252/   2812E : =$F                         set vcRR2,$0F
(2)  252/   2812E : =$F                         set vcRR3,$0F
(2)  252/   2812E : =$F                         set vcRR4,$0F
(2)  253/   2812E : (MACRO)             	smpsVcTotalLevel    $17, $29, $10, $23
(2)  253/   2812E : =$17                        set vcTL1,$17
(2)  253/   2812E : =$29                        set vcTL2,$29
(2)  253/   2812E : =$10                        set vcTL3,$10
(2)  253/   2812E : =$23                        set vcTL4,$23
(2)  253/   2812E : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  253/   2812F :                     ;   0     1     2     3     4     5     6     7
(2)  253/   2812F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  253/   2812F : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  253/   2812F : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  253/   2812F : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  253/   2812F : =$80                                set vcTLMask1,$80
(2)  253/   2812F :                     
(2)  253/   2812F :                     
(2)  253/   2812F : 3341 7E74                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  253/   28133 : 5B9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  253/   28137 : 0407 0708                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  253/   2813B : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  253/   2813F : FFFF EFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  253/   28143 : 2390 2997                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  254/   28147 :                     
(2)  255/   28147 :                     ; Strike Bass
(2)  256/   28147 :                     ;	Voice $0D
(2)  257/   28147 :                     ;	$38
(2)  258/   28147 :                     ;	$63, $31, $31, $31, 	$10, $13, $1A, $1B, 	$0E, $00, $00, $00
(2)  259/   28147 :                     ;	$00, $00, $00, $00, 	$3F, $0F, $0F, $0F, 	$1A, $19, $1A, $80
(2)  260/   28147 : (MACRO)             	smpsVcAlgorithm     $00
(2)  260/   28147 : =$0                 vcAlgorithm set $00
(2)  261/   28147 : (MACRO)             	smpsVcFeedback      $07
(2)  261/   28147 : =$7                 vcFeedback set $07
(2)  262/   28147 : (MACRO)             	smpsVcUnusedBits    $00
(2)  262/   28147 : =$0                 vcUnusedBits set $00
(2)  262/   28147 : =$0                                 set vcD1R1Unk,0
(2)  262/   28147 : =$0                                 set vcD1R2Unk,0
(2)  262/   28147 : =$0                                 set vcD1R3Unk,0
(2)  262/   28147 : =$0                                 set vcD1R4Unk,0
(2)  263/   28147 : (MACRO)             	smpsVcDetune        $03, $03, $03, $06
(2)  263/   28147 : =$3                         set vcDT1,$03
(2)  263/   28147 : =$3                         set vcDT2,$03
(2)  263/   28147 : =$3                         set vcDT3,$03
(2)  263/   28147 : =$6                         set vcDT4,$06
(2)  264/   28147 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $03
(2)  264/   28147 : =$1                         set vcCF1,$01
(2)  264/   28147 : =$1                         set vcCF2,$01
(2)  264/   28147 : =$1                         set vcCF3,$01
(2)  264/   28147 : =$3                         set vcCF4,$03
(2)  265/   28147 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  265/   28147 : =$0                         set vcRS1,$00
(2)  265/   28147 : =$0                         set vcRS2,$00
(2)  265/   28147 : =$0                         set vcRS3,$00
(2)  265/   28147 : =$0                         set vcRS4,$00
(2)  266/   28147 : (MACRO)             	smpsVcAttackRate    $1B, $1A, $13, $10
(2)  266/   28147 : =$1B                        set vcAR1,$1B
(2)  266/   28147 : =$1A                        set vcAR2,$1A
(2)  266/   28147 : =$13                        set vcAR3,$13
(2)  266/   28147 : =$10                        set vcAR4,$10
(2)  267/   28147 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  267/   28147 : =$0                                 set vcAM1,$00<<5
(2)  267/   28147 : =$0                                 set vcAM2,$00<<5
(2)  267/   28147 : =$0                                 set vcAM3,$00<<5
(2)  267/   28147 : =$0                                 set vcAM4,$00<<5
(2)  268/   28147 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $0E
(2)  268/   28147 : =$0                         set vcD1R1,$00
(2)  268/   28147 : =$0                         set vcD1R2,$00
(2)  268/   28147 : =$0                         set vcD1R3,$00
(2)  268/   28147 : =$E                         set vcD1R4,$0E
(2)  269/   28147 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  269/   28147 : =$0                         set vcD2R1,$00
(2)  269/   28147 : =$0                         set vcD2R2,$00
(2)  269/   28147 : =$0                         set vcD2R3,$00
(2)  269/   28147 : =$0                         set vcD2R4,$00
(2)  270/   28147 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $03
(2)  270/   28147 : =$0                         set vcDL1,$00
(2)  270/   28147 : =$0                         set vcDL2,$00
(2)  270/   28147 : =$0                         set vcDL3,$00
(2)  270/   28147 : =$3                         set vcDL4,$03
(2)  271/   28147 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  271/   28147 : =$F                         set vcRR1,$0F
(2)  271/   28147 : =$F                         set vcRR2,$0F
(2)  271/   28147 : =$F                         set vcRR3,$0F
(2)  271/   28147 : =$F                         set vcRR4,$0F
(2)  272/   28147 : (MACRO)             	smpsVcTotalLevel    $00, $1A, $19, $1A
(2)  272/   28147 : =$0                         set vcTL1,$00
(2)  272/   28147 : =$1A                        set vcTL2,$1A
(2)  272/   28147 : =$19                        set vcTL3,$19
(2)  272/   28147 : =$1A                        set vcTL4,$1A
(2)  272/   28147 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  272/   28148 :                     ;   0     1     2     3     4     5     6     7
(2)  272/   28148 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  272/   28148 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  272/   28148 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  272/   28148 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  272/   28148 : =$80                                set vcTLMask1,$80
(2)  272/   28148 :                     
(2)  272/   28148 :                     
(2)  272/   28148 : 6331 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  272/   2814C : 1013 1A1B                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  272/   28150 : 0E00 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  272/   28154 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  272/   28158 : 3F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  272/   2815C : 1A19 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  273/   28160 :                     
(2)  274/   28160 :                     ; Elec Piano
(2)  275/   28160 :                     ;	Voice $0E
(2)  276/   28160 :                     ;	$3A
(2)  277/   28160 :                     ;	$31, $25, $73, $41, 	$5F, $1F, $1F, $9C, 	$08, $05, $04, $05
(2)  278/   28160 :                     ;	$03, $04, $02, $02, 	$2F, $2F, $1F, $2F, 	$29, $27, $1F, $80
(2)  279/   28160 : (MACRO)             	smpsVcAlgorithm     $02
(2)  279/   28160 : =$2                 vcAlgorithm set $02
(2)  280/   28160 : (MACRO)             	smpsVcFeedback      $07
(2)  280/   28160 : =$7                 vcFeedback set $07
(2)  281/   28160 : (MACRO)             	smpsVcUnusedBits    $00
(2)  281/   28160 : =$0                 vcUnusedBits set $00
(2)  281/   28160 : =$0                                 set vcD1R1Unk,0
(2)  281/   28160 : =$0                                 set vcD1R2Unk,0
(2)  281/   28160 : =$0                                 set vcD1R3Unk,0
(2)  281/   28160 : =$0                                 set vcD1R4Unk,0
(2)  282/   28160 : (MACRO)             	smpsVcDetune        $04, $07, $02, $03
(2)  282/   28160 : =$4                         set vcDT1,$04
(2)  282/   28160 : =$7                         set vcDT2,$07
(2)  282/   28160 : =$2                         set vcDT3,$02
(2)  282/   28160 : =$3                         set vcDT4,$03
(2)  283/   28160 : (MACRO)             	smpsVcCoarseFreq    $01, $03, $05, $01
(2)  283/   28160 : =$1                         set vcCF1,$01
(2)  283/   28160 : =$3                         set vcCF2,$03
(2)  283/   28160 : =$5                         set vcCF3,$05
(2)  283/   28160 : =$1                         set vcCF4,$01
(2)  284/   28160 : (MACRO)             	smpsVcRateScale     $02, $00, $00, $01
(2)  284/   28160 : =$2                         set vcRS1,$02
(2)  284/   28160 : =$0                         set vcRS2,$00
(2)  284/   28160 : =$0                         set vcRS3,$00
(2)  284/   28160 : =$1                         set vcRS4,$01
(2)  285/   28160 : (MACRO)             	smpsVcAttackRate    $1C, $1F, $1F, $1F
(2)  285/   28160 : =$1C                        set vcAR1,$1C
(2)  285/   28160 : =$1F                        set vcAR2,$1F
(2)  285/   28160 : =$1F                        set vcAR3,$1F
(2)  285/   28160 : =$1F                        set vcAR4,$1F
(2)  286/   28160 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  286/   28160 : =$0                                 set vcAM1,$00<<5
(2)  286/   28160 : =$0                                 set vcAM2,$00<<5
(2)  286/   28160 : =$0                                 set vcAM3,$00<<5
(2)  286/   28160 : =$0                                 set vcAM4,$00<<5
(2)  287/   28160 : (MACRO)             	smpsVcDecayRate1    $05, $04, $05, $08
(2)  287/   28160 : =$5                         set vcD1R1,$05
(2)  287/   28160 : =$4                         set vcD1R2,$04
(2)  287/   28160 : =$5                         set vcD1R3,$05
(2)  287/   28160 : =$8                         set vcD1R4,$08
(2)  288/   28160 : (MACRO)             	smpsVcDecayRate2    $02, $02, $04, $03
(2)  288/   28160 : =$2                         set vcD2R1,$02
(2)  288/   28160 : =$2                         set vcD2R2,$02
(2)  288/   28160 : =$4                         set vcD2R3,$04
(2)  288/   28160 : =$3                         set vcD2R4,$03
(2)  289/   28160 : (MACRO)             	smpsVcDecayLevel    $02, $01, $02, $02
(2)  289/   28160 : =$2                         set vcDL1,$02
(2)  289/   28160 : =$1                         set vcDL2,$01
(2)  289/   28160 : =$2                         set vcDL3,$02
(2)  289/   28160 : =$2                         set vcDL4,$02
(2)  290/   28160 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  290/   28160 : =$F                         set vcRR1,$0F
(2)  290/   28160 : =$F                         set vcRR2,$0F
(2)  290/   28160 : =$F                         set vcRR3,$0F
(2)  290/   28160 : =$F                         set vcRR4,$0F
(2)  291/   28160 : (MACRO)             	smpsVcTotalLevel    $00, $1F, $27, $29
(2)  291/   28160 : =$0                         set vcTL1,$00
(2)  291/   28160 : =$1F                        set vcTL2,$1F
(2)  291/   28160 : =$27                        set vcTL3,$27
(2)  291/   28160 : =$29                        set vcTL4,$29
(2)  291/   28160 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  291/   28161 :                     ;   0     1     2     3     4     5     6     7
(2)  291/   28161 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  291/   28161 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  291/   28161 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  291/   28161 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  291/   28161 : =$80                                set vcTLMask1,$80
(2)  291/   28161 :                     
(2)  291/   28161 :                     
(2)  291/   28161 : 3125 7341                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  291/   28165 : 5F1F 1F9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  291/   28169 : 0805 0405                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  291/   2816D : 0304 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  291/   28171 : 2F2F 1F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  291/   28175 : 2927 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  292/   28179 :                     
(2)  293/   28179 :                     ; Bright Piano
(2)  294/   28179 :                     ;	Voice $0F
(2)  295/   28179 :                     ;	$04
(2)  296/   28179 :                     ;	$71, $41, $31, $31, 	$12, $12, $12, $12, 	$00, $00, $00, $00
(2)  297/   28179 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$23, $80, $23, $80
(2)  298/   28179 : (MACRO)             	smpsVcAlgorithm     $04
(2)  298/   28179 : =$4                 vcAlgorithm set $04
(2)  299/   28179 : (MACRO)             	smpsVcFeedback      $00
(2)  299/   28179 : =$0                 vcFeedback set $00
(2)  300/   28179 : (MACRO)             	smpsVcUnusedBits    $00
(2)  300/   28179 : =$0                 vcUnusedBits set $00
(2)  300/   28179 : =$0                                 set vcD1R1Unk,0
(2)  300/   28179 : =$0                                 set vcD1R2Unk,0
(2)  300/   28179 : =$0                                 set vcD1R3Unk,0
(2)  300/   28179 : =$0                                 set vcD1R4Unk,0
(2)  301/   28179 : (MACRO)             	smpsVcDetune        $03, $03, $04, $07
(2)  301/   28179 : =$3                         set vcDT1,$03
(2)  301/   28179 : =$3                         set vcDT2,$03
(2)  301/   28179 : =$4                         set vcDT3,$04
(2)  301/   28179 : =$7                         set vcDT4,$07
(2)  302/   28179 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(2)  302/   28179 : =$1                         set vcCF1,$01
(2)  302/   28179 : =$1                         set vcCF2,$01
(2)  302/   28179 : =$1                         set vcCF3,$01
(2)  302/   28179 : =$1                         set vcCF4,$01
(2)  303/   28179 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  303/   28179 : =$0                         set vcRS1,$00
(2)  303/   28179 : =$0                         set vcRS2,$00
(2)  303/   28179 : =$0                         set vcRS3,$00
(2)  303/   28179 : =$0                         set vcRS4,$00
(2)  304/   28179 : (MACRO)             	smpsVcAttackRate    $12, $12, $12, $12
(2)  304/   28179 : =$12                        set vcAR1,$12
(2)  304/   28179 : =$12                        set vcAR2,$12
(2)  304/   28179 : =$12                        set vcAR3,$12
(2)  304/   28179 : =$12                        set vcAR4,$12
(2)  305/   28179 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  305/   28179 : =$0                                 set vcAM1,$00<<5
(2)  305/   28179 : =$0                                 set vcAM2,$00<<5
(2)  305/   28179 : =$0                                 set vcAM3,$00<<5
(2)  305/   28179 : =$0                                 set vcAM4,$00<<5
(2)  306/   28179 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(2)  306/   28179 : =$0                         set vcD1R1,$00
(2)  306/   28179 : =$0                         set vcD1R2,$00
(2)  306/   28179 : =$0                         set vcD1R3,$00
(2)  306/   28179 : =$0                         set vcD1R4,$00
(2)  307/   28179 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  307/   28179 : =$0                         set vcD2R1,$00
(2)  307/   28179 : =$0                         set vcD2R2,$00
(2)  307/   28179 : =$0                         set vcD2R3,$00
(2)  307/   28179 : =$0                         set vcD2R4,$00
(2)  308/   28179 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(2)  308/   28179 : =$0                         set vcDL1,$00
(2)  308/   28179 : =$0                         set vcDL2,$00
(2)  308/   28179 : =$0                         set vcDL3,$00
(2)  308/   28179 : =$0                         set vcDL4,$00
(2)  309/   28179 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  309/   28179 : =$F                         set vcRR1,$0F
(2)  309/   28179 : =$F                         set vcRR2,$0F
(2)  309/   28179 : =$F                         set vcRR3,$0F
(2)  309/   28179 : =$F                         set vcRR4,$0F
(2)  310/   28179 : (MACRO)             	smpsVcTotalLevel    $00, $23, $00, $23
(2)  310/   28179 : =$0                         set vcTL1,$00
(2)  310/   28179 : =$23                        set vcTL2,$23
(2)  310/   28179 : =$0                         set vcTL3,$00
(2)  310/   28179 : =$23                        set vcTL4,$23
(2)  310/   28179 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  310/   2817A :                     ;   0     1     2     3     4     5     6     7
(2)  310/   2817A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  310/   2817A : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  310/   2817A : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  310/   2817A : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  310/   2817A : =$80                                set vcTLMask1,$80
(2)  310/   2817A :                     
(2)  310/   2817A :                     
(2)  310/   2817A : 7141 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  310/   2817E : 1212 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  310/   28182 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  310/   28186 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  310/   2818A : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  310/   2818E : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  311/   28192 :                     
(2)  312/   28192 :                     ; $Curch Bell
(2)  313/   28192 :                     ;	Voice $10
(2)  314/   28192 :                     ;	$14
(2)  315/   28192 :                     ;	$75, $72, $35, $32, 	$9F, $9F, $9F, $9F, 	$05, $05, $00, $0A
(2)  316/   28192 :                     ;	$05, $05, $07, $05, 	$2F, $FF, $0F, $2F, 	$1E, $80, $14, $80
(2)  317/   28192 : (MACRO)             	smpsVcAlgorithm     $04
(2)  317/   28192 : =$4                 vcAlgorithm set $04
(2)  318/   28192 : (MACRO)             	smpsVcFeedback      $02
(2)  318/   28192 : =$2                 vcFeedback set $02
(2)  319/   28192 : (MACRO)             	smpsVcUnusedBits    $00
(2)  319/   28192 : =$0                 vcUnusedBits set $00
(2)  319/   28192 : =$0                                 set vcD1R1Unk,0
(2)  319/   28192 : =$0                                 set vcD1R2Unk,0
(2)  319/   28192 : =$0                                 set vcD1R3Unk,0
(2)  319/   28192 : =$0                                 set vcD1R4Unk,0
(2)  320/   28192 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  320/   28192 : =$3                         set vcDT1,$03
(2)  320/   28192 : =$3                         set vcDT2,$03
(2)  320/   28192 : =$7                         set vcDT3,$07
(2)  320/   28192 : =$7                         set vcDT4,$07
(2)  321/   28192 : (MACRO)             	smpsVcCoarseFreq    $02, $05, $02, $05
(2)  321/   28192 : =$2                         set vcCF1,$02
(2)  321/   28192 : =$5                         set vcCF2,$05
(2)  321/   28192 : =$2                         set vcCF3,$02
(2)  321/   28192 : =$5                         set vcCF4,$05
(2)  322/   28192 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  322/   28192 : =$2                         set vcRS1,$02
(2)  322/   28192 : =$2                         set vcRS2,$02
(2)  322/   28192 : =$2                         set vcRS3,$02
(2)  322/   28192 : =$2                         set vcRS4,$02
(2)  323/   28192 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  323/   28192 : =$1F                        set vcAR1,$1F
(2)  323/   28192 : =$1F                        set vcAR2,$1F
(2)  323/   28192 : =$1F                        set vcAR3,$1F
(2)  323/   28192 : =$1F                        set vcAR4,$1F
(2)  324/   28192 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  324/   28192 : =$0                                 set vcAM1,$00<<5
(2)  324/   28192 : =$0                                 set vcAM2,$00<<5
(2)  324/   28192 : =$0                                 set vcAM3,$00<<5
(2)  324/   28192 : =$0                                 set vcAM4,$00<<5
(2)  325/   28192 : (MACRO)             	smpsVcDecayRate1    $0A, $00, $05, $05
(2)  325/   28192 : =$A                         set vcD1R1,$0A
(2)  325/   28192 : =$0                         set vcD1R2,$00
(2)  325/   28192 : =$5                         set vcD1R3,$05
(2)  325/   28192 : =$5                         set vcD1R4,$05
(2)  326/   28192 : (MACRO)             	smpsVcDecayRate2    $05, $07, $05, $05
(2)  326/   28192 : =$5                         set vcD2R1,$05
(2)  326/   28192 : =$7                         set vcD2R2,$07
(2)  326/   28192 : =$5                         set vcD2R3,$05
(2)  326/   28192 : =$5                         set vcD2R4,$05
(2)  327/   28192 : (MACRO)             	smpsVcDecayLevel    $02, $00, $0F, $02
(2)  327/   28192 : =$2                         set vcDL1,$02
(2)  327/   28192 : =$0                         set vcDL2,$00
(2)  327/   28192 : =$F                         set vcDL3,$0F
(2)  327/   28192 : =$2                         set vcDL4,$02
(2)  328/   28192 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  328/   28192 : =$F                         set vcRR1,$0F
(2)  328/   28192 : =$F                         set vcRR2,$0F
(2)  328/   28192 : =$F                         set vcRR3,$0F
(2)  328/   28192 : =$F                         set vcRR4,$0F
(2)  329/   28192 : (MACRO)             	smpsVcTotalLevel    $00, $14, $00, $1E
(2)  329/   28192 : =$0                         set vcTL1,$00
(2)  329/   28192 : =$14                        set vcTL2,$14
(2)  329/   28192 : =$0                         set vcTL3,$00
(2)  329/   28192 : =$1E                        set vcTL4,$1E
(2)  329/   28192 : 14                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  329/   28193 :                     ;   0     1     2     3     4     5     6     7
(2)  329/   28193 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  329/   28193 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  329/   28193 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  329/   28193 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  329/   28193 : =$80                                set vcTLMask1,$80
(2)  329/   28193 :                     
(2)  329/   28193 :                     
(2)  329/   28193 : 7572 3532                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  329/   28197 : 9F9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  329/   2819B : 0505 000A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  329/   2819F : 0505 0705                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  329/   281A3 : 2FFF 0F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  329/   281A7 : 1E80 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  330/   281AB :                     
(2)  331/   281AB :                     ; Synth Brass 2
(2)  332/   281AB :                     ;	Voice $11
(2)  333/   281AB :                     ;	$3D
(2)  334/   281AB :                     ;	$01, $00, $01, $02, 	$12, $1F, $1F, $14, 	$07, $02, $02, $0A
(2)  335/   281AB :                     ;	$05, $05, $05, $05, 	$2F, $2F, $2F, $AF, 	$1C, $80, $82, $80
(2)  336/   281AB : (MACRO)             	smpsVcAlgorithm     $05
(2)  336/   281AB : =$5                 vcAlgorithm set $05
(2)  337/   281AB : (MACRO)             	smpsVcFeedback      $07
(2)  337/   281AB : =$7                 vcFeedback set $07
(2)  338/   281AB : (MACRO)             	smpsVcUnusedBits    $00
(2)  338/   281AB : =$0                 vcUnusedBits set $00
(2)  338/   281AB : =$0                                 set vcD1R1Unk,0
(2)  338/   281AB : =$0                                 set vcD1R2Unk,0
(2)  338/   281AB : =$0                                 set vcD1R3Unk,0
(2)  338/   281AB : =$0                                 set vcD1R4Unk,0
(2)  339/   281AB : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  339/   281AB : =$0                         set vcDT1,$00
(2)  339/   281AB : =$0                         set vcDT2,$00
(2)  339/   281AB : =$0                         set vcDT3,$00
(2)  339/   281AB : =$0                         set vcDT4,$00
(2)  340/   281AB : (MACRO)             	smpsVcCoarseFreq    $02, $01, $00, $01
(2)  340/   281AB : =$2                         set vcCF1,$02
(2)  340/   281AB : =$1                         set vcCF2,$01
(2)  340/   281AB : =$0                         set vcCF3,$00
(2)  340/   281AB : =$1                         set vcCF4,$01
(2)  341/   281AB : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  341/   281AB : =$0                         set vcRS1,$00
(2)  341/   281AB : =$0                         set vcRS2,$00
(2)  341/   281AB : =$0                         set vcRS3,$00
(2)  341/   281AB : =$0                         set vcRS4,$00
(2)  342/   281AB : (MACRO)             	smpsVcAttackRate    $14, $1F, $1F, $12
(2)  342/   281AB : =$14                        set vcAR1,$14
(2)  342/   281AB : =$1F                        set vcAR2,$1F
(2)  342/   281AB : =$1F                        set vcAR3,$1F
(2)  342/   281AB : =$12                        set vcAR4,$12
(2)  343/   281AB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  343/   281AB : =$0                                 set vcAM1,$00<<5
(2)  343/   281AB : =$0                                 set vcAM2,$00<<5
(2)  343/   281AB : =$0                                 set vcAM3,$00<<5
(2)  343/   281AB : =$0                                 set vcAM4,$00<<5
(2)  344/   281AB : (MACRO)             	smpsVcDecayRate1    $0A, $02, $02, $07
(2)  344/   281AB : =$A                         set vcD1R1,$0A
(2)  344/   281AB : =$2                         set vcD1R2,$02
(2)  344/   281AB : =$2                         set vcD1R3,$02
(2)  344/   281AB : =$7                         set vcD1R4,$07
(2)  345/   281AB : (MACRO)             	smpsVcDecayRate2    $05, $05, $05, $05
(2)  345/   281AB : =$5                         set vcD2R1,$05
(2)  345/   281AB : =$5                         set vcD2R2,$05
(2)  345/   281AB : =$5                         set vcD2R3,$05
(2)  345/   281AB : =$5                         set vcD2R4,$05
(2)  346/   281AB : (MACRO)             	smpsVcDecayLevel    $0A, $02, $02, $02
(2)  346/   281AB : =$A                         set vcDL1,$0A
(2)  346/   281AB : =$2                         set vcDL2,$02
(2)  346/   281AB : =$2                         set vcDL3,$02
(2)  346/   281AB : =$2                         set vcDL4,$02
(2)  347/   281AB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  347/   281AB : =$F                         set vcRR1,$0F
(2)  347/   281AB : =$F                         set vcRR2,$0F
(2)  347/   281AB : =$F                         set vcRR3,$0F
(2)  347/   281AB : =$F                         set vcRR4,$0F
(2)  348/   281AB : (MACRO)             	smpsVcTotalLevel    $00, $02, $00, $1C
(2)  348/   281AB : =$0                         set vcTL1,$00
(2)  348/   281AB : =$2                         set vcTL2,$02
(2)  348/   281AB : =$0                         set vcTL3,$00
(2)  348/   281AB : =$1C                        set vcTL4,$1C
(2)  348/   281AB : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  348/   281AC :                     ;   0     1     2     3     4     5     6     7
(2)  348/   281AC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  348/   281AC : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  348/   281AC : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  348/   281AC : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  348/   281AC : =$80                                set vcTLMask1,$80
(2)  348/   281AC :                     
(2)  348/   281AC :                     
(2)  348/   281AC : 0100 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  348/   281B0 : 121F 1F14                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  348/   281B4 : 0702 020A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  348/   281B8 : 0505 0505                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  348/   281BC : 2F2F 2FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  348/   281C0 : 1C80 8280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  349/   281C4 :                     
(2)  350/   281C4 :                     ; Bell Piano
(2)  351/   281C4 :                     ;	Voice $12
(2)  352/   281C4 :                     ;	$1C
(2)  353/   281C4 :                     ;	$73, $72, $33, $32, 	$94, $99, $94, $99, 	$08, $0A, $08, $0A
(2)  354/   281C4 :                     ;	$00, $05, $00, $05, 	$3F, $4F, $3F, $4F, 	$1E, $80, $19, $80
(2)  355/   281C4 : (MACRO)             	smpsVcAlgorithm     $04
(2)  355/   281C4 : =$4                 vcAlgorithm set $04
(2)  356/   281C4 : (MACRO)             	smpsVcFeedback      $03
(2)  356/   281C4 : =$3                 vcFeedback set $03
(2)  357/   281C4 : (MACRO)             	smpsVcUnusedBits    $00
(2)  357/   281C4 : =$0                 vcUnusedBits set $00
(2)  357/   281C4 : =$0                                 set vcD1R1Unk,0
(2)  357/   281C4 : =$0                                 set vcD1R2Unk,0
(2)  357/   281C4 : =$0                                 set vcD1R3Unk,0
(2)  357/   281C4 : =$0                                 set vcD1R4Unk,0
(2)  358/   281C4 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  358/   281C4 : =$3                         set vcDT1,$03
(2)  358/   281C4 : =$3                         set vcDT2,$03
(2)  358/   281C4 : =$7                         set vcDT3,$07
(2)  358/   281C4 : =$7                         set vcDT4,$07
(2)  359/   281C4 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $02, $03
(2)  359/   281C4 : =$2                         set vcCF1,$02
(2)  359/   281C4 : =$3                         set vcCF2,$03
(2)  359/   281C4 : =$2                         set vcCF3,$02
(2)  359/   281C4 : =$3                         set vcCF4,$03
(2)  360/   281C4 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  360/   281C4 : =$2                         set vcRS1,$02
(2)  360/   281C4 : =$2                         set vcRS2,$02
(2)  360/   281C4 : =$2                         set vcRS3,$02
(2)  360/   281C4 : =$2                         set vcRS4,$02
(2)  361/   281C4 : (MACRO)             	smpsVcAttackRate    $19, $14, $19, $14
(2)  361/   281C4 : =$19                        set vcAR1,$19
(2)  361/   281C4 : =$14                        set vcAR2,$14
(2)  361/   281C4 : =$19                        set vcAR3,$19
(2)  361/   281C4 : =$14                        set vcAR4,$14
(2)  362/   281C4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  362/   281C4 : =$0                                 set vcAM1,$00<<5
(2)  362/   281C4 : =$0                                 set vcAM2,$00<<5
(2)  362/   281C4 : =$0                                 set vcAM3,$00<<5
(2)  362/   281C4 : =$0                                 set vcAM4,$00<<5
(2)  363/   281C4 : (MACRO)             	smpsVcDecayRate1    $0A, $08, $0A, $08
(2)  363/   281C4 : =$A                         set vcD1R1,$0A
(2)  363/   281C4 : =$8                         set vcD1R2,$08
(2)  363/   281C4 : =$A                         set vcD1R3,$0A
(2)  363/   281C4 : =$8                         set vcD1R4,$08
(2)  364/   281C4 : (MACRO)             	smpsVcDecayRate2    $05, $00, $05, $00
(2)  364/   281C4 : =$5                         set vcD2R1,$05
(2)  364/   281C4 : =$0                         set vcD2R2,$00
(2)  364/   281C4 : =$5                         set vcD2R3,$05
(2)  364/   281C4 : =$0                         set vcD2R4,$00
(2)  365/   281C4 : (MACRO)             	smpsVcDecayLevel    $04, $03, $04, $03
(2)  365/   281C4 : =$4                         set vcDL1,$04
(2)  365/   281C4 : =$3                         set vcDL2,$03
(2)  365/   281C4 : =$4                         set vcDL3,$04
(2)  365/   281C4 : =$3                         set vcDL4,$03
(2)  366/   281C4 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  366/   281C4 : =$F                         set vcRR1,$0F
(2)  366/   281C4 : =$F                         set vcRR2,$0F
(2)  366/   281C4 : =$F                         set vcRR3,$0F
(2)  366/   281C4 : =$F                         set vcRR4,$0F
(2)  367/   281C4 : (MACRO)             	smpsVcTotalLevel    $00, $19, $00, $1E
(2)  367/   281C4 : =$0                         set vcTL1,$00
(2)  367/   281C4 : =$19                        set vcTL2,$19
(2)  367/   281C4 : =$0                         set vcTL3,$00
(2)  367/   281C4 : =$1E                        set vcTL4,$1E
(2)  367/   281C4 : 1C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  367/   281C5 :                     ;   0     1     2     3     4     5     6     7
(2)  367/   281C5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  367/   281C5 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  367/   281C5 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  367/   281C5 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  367/   281C5 : =$80                                set vcTLMask1,$80
(2)  367/   281C5 :                     
(2)  367/   281C5 :                     
(2)  367/   281C5 : 7372 3332                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  367/   281C9 : 9499 9499                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  367/   281CD : 080A 080A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  367/   281D1 : 0005 0005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  367/   281D5 : 3F4F 3F4F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  367/   281D9 : 1E80 1980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  368/   281DD :                     
(2)  369/   281DD :                     ; Wet Wood Bass
(2)  370/   281DD :                     ;	Voice $13
(2)  371/   281DD :                     ;	$31
(2)  372/   281DD :                     ;	$33, $01, $00, $00, 	$9F, $1F, $1F, $1F, 	$0D, $0A, $0A, $0A
(2)  373/   281DD :                     ;	$0A, $07, $07, $07, 	$FF, $AF, $AF, $AF, 	$1E, $1E, $1E, $80
(2)  374/   281DD : (MACRO)             	smpsVcAlgorithm     $01
(2)  374/   281DD : =$1                 vcAlgorithm set $01
(2)  375/   281DD : (MACRO)             	smpsVcFeedback      $06
(2)  375/   281DD : =$6                 vcFeedback set $06
(2)  376/   281DD : (MACRO)             	smpsVcUnusedBits    $00
(2)  376/   281DD : =$0                 vcUnusedBits set $00
(2)  376/   281DD : =$0                                 set vcD1R1Unk,0
(2)  376/   281DD : =$0                                 set vcD1R2Unk,0
(2)  376/   281DD : =$0                                 set vcD1R3Unk,0
(2)  376/   281DD : =$0                                 set vcD1R4Unk,0
(2)  377/   281DD : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(2)  377/   281DD : =$0                         set vcDT1,$00
(2)  377/   281DD : =$0                         set vcDT2,$00
(2)  377/   281DD : =$0                         set vcDT3,$00
(2)  377/   281DD : =$3                         set vcDT4,$03
(2)  378/   281DD : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $03
(2)  378/   281DD : =$0                         set vcCF1,$00
(2)  378/   281DD : =$0                         set vcCF2,$00
(2)  378/   281DD : =$1                         set vcCF3,$01
(2)  378/   281DD : =$3                         set vcCF4,$03
(2)  379/   281DD : (MACRO)             	smpsVcRateScale     $00, $00, $00, $02
(2)  379/   281DD : =$0                         set vcRS1,$00
(2)  379/   281DD : =$0                         set vcRS2,$00
(2)  379/   281DD : =$0                         set vcRS3,$00
(2)  379/   281DD : =$2                         set vcRS4,$02
(2)  380/   281DD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  380/   281DD : =$1F                        set vcAR1,$1F
(2)  380/   281DD : =$1F                        set vcAR2,$1F
(2)  380/   281DD : =$1F                        set vcAR3,$1F
(2)  380/   281DD : =$1F                        set vcAR4,$1F
(2)  381/   281DD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  381/   281DD : =$0                                 set vcAM1,$00<<5
(2)  381/   281DD : =$0                                 set vcAM2,$00<<5
(2)  381/   281DD : =$0                                 set vcAM3,$00<<5
(2)  381/   281DD : =$0                                 set vcAM4,$00<<5
(2)  382/   281DD : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0A, $0D
(2)  382/   281DD : =$A                         set vcD1R1,$0A
(2)  382/   281DD : =$A                         set vcD1R2,$0A
(2)  382/   281DD : =$A                         set vcD1R3,$0A
(2)  382/   281DD : =$D                         set vcD1R4,$0D
(2)  383/   281DD : (MACRO)             	smpsVcDecayRate2    $07, $07, $07, $0A
(2)  383/   281DD : =$7                         set vcD2R1,$07
(2)  383/   281DD : =$7                         set vcD2R2,$07
(2)  383/   281DD : =$7                         set vcD2R3,$07
(2)  383/   281DD : =$A                         set vcD2R4,$0A
(2)  384/   281DD : (MACRO)             	smpsVcDecayLevel    $0A, $0A, $0A, $0F
(2)  384/   281DD : =$A                         set vcDL1,$0A
(2)  384/   281DD : =$A                         set vcDL2,$0A
(2)  384/   281DD : =$A                         set vcDL3,$0A
(2)  384/   281DD : =$F                         set vcDL4,$0F
(2)  385/   281DD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  385/   281DD : =$F                         set vcRR1,$0F
(2)  385/   281DD : =$F                         set vcRR2,$0F
(2)  385/   281DD : =$F                         set vcRR3,$0F
(2)  385/   281DD : =$F                         set vcRR4,$0F
(2)  386/   281DD : (MACRO)             	smpsVcTotalLevel    $00, $1E, $1E, $1E
(2)  386/   281DD : =$0                         set vcTL1,$00
(2)  386/   281DD : =$1E                        set vcTL2,$1E
(2)  386/   281DD : =$1E                        set vcTL3,$1E
(2)  386/   281DD : =$1E                        set vcTL4,$1E
(2)  386/   281DD : 31                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  386/   281DE :                     ;   0     1     2     3     4     5     6     7
(2)  386/   281DE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  386/   281DE : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  386/   281DE : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  386/   281DE : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  386/   281DE : =$80                                set vcTLMask1,$80
(2)  386/   281DE :                     
(2)  386/   281DE :                     
(2)  386/   281DE : 3301 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  386/   281E2 : 9F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  386/   281E6 : 0D0A 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  386/   281EA : 0A07 0707                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  386/   281EE : FFAF AFAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  386/   281F2 : 1E1E 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  387/   281F6 :                     
(2)  388/   281F6 :                     ; Silent Bass
(2)  389/   281F6 :                     ;	Voice $14
(2)  390/   281F6 :                     ;	$3A
(2)  391/   281F6 :                     ;	$70, $76, $30, $71, 	$1F, $95, $1F, $1F, 	$0E, $0F, $05, $0C
(2)  392/   281F6 :                     ;	$07, $06, $06, $07, 	$2F, $4F, $1F, $5F, 	$21, $12, $28, $80
(2)  393/   281F6 : (MACRO)             	smpsVcAlgorithm     $02
(2)  393/   281F6 : =$2                 vcAlgorithm set $02
(2)  394/   281F6 : (MACRO)             	smpsVcFeedback      $07
(2)  394/   281F6 : =$7                 vcFeedback set $07
(2)  395/   281F6 : (MACRO)             	smpsVcUnusedBits    $00
(2)  395/   281F6 : =$0                 vcUnusedBits set $00
(2)  395/   281F6 : =$0                                 set vcD1R1Unk,0
(2)  395/   281F6 : =$0                                 set vcD1R2Unk,0
(2)  395/   281F6 : =$0                                 set vcD1R3Unk,0
(2)  395/   281F6 : =$0                                 set vcD1R4Unk,0
(2)  396/   281F6 : (MACRO)             	smpsVcDetune        $07, $03, $07, $07
(2)  396/   281F6 : =$7                         set vcDT1,$07
(2)  396/   281F6 : =$3                         set vcDT2,$03
(2)  396/   281F6 : =$7                         set vcDT3,$07
(2)  396/   281F6 : =$7                         set vcDT4,$07
(2)  397/   281F6 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $06, $00
(2)  397/   281F6 : =$1                         set vcCF1,$01
(2)  397/   281F6 : =$0                         set vcCF2,$00
(2)  397/   281F6 : =$6                         set vcCF3,$06
(2)  397/   281F6 : =$0                         set vcCF4,$00
(2)  398/   281F6 : (MACRO)             	smpsVcRateScale     $00, $00, $02, $00
(2)  398/   281F6 : =$0                         set vcRS1,$00
(2)  398/   281F6 : =$0                         set vcRS2,$00
(2)  398/   281F6 : =$2                         set vcRS3,$02
(2)  398/   281F6 : =$0                         set vcRS4,$00
(2)  399/   281F6 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $15, $1F
(2)  399/   281F6 : =$1F                        set vcAR1,$1F
(2)  399/   281F6 : =$1F                        set vcAR2,$1F
(2)  399/   281F6 : =$15                        set vcAR3,$15
(2)  399/   281F6 : =$1F                        set vcAR4,$1F
(2)  400/   281F6 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  400/   281F6 : =$0                                 set vcAM1,$00<<5
(2)  400/   281F6 : =$0                                 set vcAM2,$00<<5
(2)  400/   281F6 : =$0                                 set vcAM3,$00<<5
(2)  400/   281F6 : =$0                                 set vcAM4,$00<<5
(2)  401/   281F6 : (MACRO)             	smpsVcDecayRate1    $0C, $05, $0F, $0E
(2)  401/   281F6 : =$C                         set vcD1R1,$0C
(2)  401/   281F6 : =$5                         set vcD1R2,$05
(2)  401/   281F6 : =$F                         set vcD1R3,$0F
(2)  401/   281F6 : =$E                         set vcD1R4,$0E
(2)  402/   281F6 : (MACRO)             	smpsVcDecayRate2    $07, $06, $06, $07
(2)  402/   281F6 : =$7                         set vcD2R1,$07
(2)  402/   281F6 : =$6                         set vcD2R2,$06
(2)  402/   281F6 : =$6                         set vcD2R3,$06
(2)  402/   281F6 : =$7                         set vcD2R4,$07
(2)  403/   281F6 : (MACRO)             	smpsVcDecayLevel    $05, $01, $04, $02
(2)  403/   281F6 : =$5                         set vcDL1,$05
(2)  403/   281F6 : =$1                         set vcDL2,$01
(2)  403/   281F6 : =$4                         set vcDL3,$04
(2)  403/   281F6 : =$2                         set vcDL4,$02
(2)  404/   281F6 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  404/   281F6 : =$F                         set vcRR1,$0F
(2)  404/   281F6 : =$F                         set vcRR2,$0F
(2)  404/   281F6 : =$F                         set vcRR3,$0F
(2)  404/   281F6 : =$F                         set vcRR4,$0F
(2)  405/   281F6 : (MACRO)             	smpsVcTotalLevel    $00, $28, $12, $21
(2)  405/   281F6 : =$0                         set vcTL1,$00
(2)  405/   281F6 : =$28                        set vcTL2,$28
(2)  405/   281F6 : =$12                        set vcTL3,$12
(2)  405/   281F6 : =$21                        set vcTL4,$21
(2)  405/   281F6 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  405/   281F7 :                     ;   0     1     2     3     4     5     6     7
(2)  405/   281F7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  405/   281F7 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  405/   281F7 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  405/   281F7 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  405/   281F7 : =$80                                set vcTLMask1,$80
(2)  405/   281F7 :                     
(2)  405/   281F7 :                     
(2)  405/   281F7 : 7076 3071                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  405/   281FB : 1F95 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  405/   281FF : 0E0F 050C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  405/   28203 : 0706 0607                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  405/   28207 : 2F4F 1F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  405/   2820B : 2112 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  406/   2820F :                     
(2)  407/   2820F :                     ; Picked Bass
(2)  408/   2820F :                     ;	Voice $15
(2)  409/   2820F :                     ;	$28
(2)  410/   2820F :                     ;	$71, $00, $30, $01, 	$1F, $1F, $1D, $1F, 	$13, $13, $06, $05
(2)  411/   2820F :                     ;	$03, $03, $02, $05, 	$4F, $4F, $2F, $3F, 	$0E, $14, $1E, $80
(2)  412/   2820F : (MACRO)             	smpsVcAlgorithm     $00
(2)  412/   2820F : =$0                 vcAlgorithm set $00
(2)  413/   2820F : (MACRO)             	smpsVcFeedback      $05
(2)  413/   2820F : =$5                 vcFeedback set $05
(2)  414/   2820F : (MACRO)             	smpsVcUnusedBits    $00
(2)  414/   2820F : =$0                 vcUnusedBits set $00
(2)  414/   2820F : =$0                                 set vcD1R1Unk,0
(2)  414/   2820F : =$0                                 set vcD1R2Unk,0
(2)  414/   2820F : =$0                                 set vcD1R3Unk,0
(2)  414/   2820F : =$0                                 set vcD1R4Unk,0
(2)  415/   2820F : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(2)  415/   2820F : =$0                         set vcDT1,$00
(2)  415/   2820F : =$3                         set vcDT2,$03
(2)  415/   2820F : =$0                         set vcDT3,$00
(2)  415/   2820F : =$7                         set vcDT4,$07
(2)  416/   2820F : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $01
(2)  416/   2820F : =$1                         set vcCF1,$01
(2)  416/   2820F : =$0                         set vcCF2,$00
(2)  416/   2820F : =$0                         set vcCF3,$00
(2)  416/   2820F : =$1                         set vcCF4,$01
(2)  417/   2820F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  417/   2820F : =$0                         set vcRS1,$00
(2)  417/   2820F : =$0                         set vcRS2,$00
(2)  417/   2820F : =$0                         set vcRS3,$00
(2)  417/   2820F : =$0                         set vcRS4,$00
(2)  418/   2820F : (MACRO)             	smpsVcAttackRate    $1F, $1D, $1F, $1F
(2)  418/   2820F : =$1F                        set vcAR1,$1F
(2)  418/   2820F : =$1D                        set vcAR2,$1D
(2)  418/   2820F : =$1F                        set vcAR3,$1F
(2)  418/   2820F : =$1F                        set vcAR4,$1F
(2)  419/   2820F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  419/   2820F : =$0                                 set vcAM1,$00<<5
(2)  419/   2820F : =$0                                 set vcAM2,$00<<5
(2)  419/   2820F : =$0                                 set vcAM3,$00<<5
(2)  419/   2820F : =$0                                 set vcAM4,$00<<5
(2)  420/   2820F : (MACRO)             	smpsVcDecayRate1    $05, $06, $13, $13
(2)  420/   2820F : =$5                         set vcD1R1,$05
(2)  420/   2820F : =$6                         set vcD1R2,$06
(2)  420/   2820F : =$13                        set vcD1R3,$13
(2)  420/   2820F : =$13                        set vcD1R4,$13
(2)  421/   2820F : (MACRO)             	smpsVcDecayRate2    $05, $02, $03, $03
(2)  421/   2820F : =$5                         set vcD2R1,$05
(2)  421/   2820F : =$2                         set vcD2R2,$02
(2)  421/   2820F : =$3                         set vcD2R3,$03
(2)  421/   2820F : =$3                         set vcD2R4,$03
(2)  422/   2820F : (MACRO)             	smpsVcDecayLevel    $03, $02, $04, $04
(2)  422/   2820F : =$3                         set vcDL1,$03
(2)  422/   2820F : =$2                         set vcDL2,$02
(2)  422/   2820F : =$4                         set vcDL3,$04
(2)  422/   2820F : =$4                         set vcDL4,$04
(2)  423/   2820F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  423/   2820F : =$F                         set vcRR1,$0F
(2)  423/   2820F : =$F                         set vcRR2,$0F
(2)  423/   2820F : =$F                         set vcRR3,$0F
(2)  423/   2820F : =$F                         set vcRR4,$0F
(2)  424/   2820F : (MACRO)             	smpsVcTotalLevel    $00, $1E, $14, $0E
(2)  424/   2820F : =$0                         set vcTL1,$00
(2)  424/   2820F : =$1E                        set vcTL2,$1E
(2)  424/   2820F : =$14                        set vcTL3,$14
(2)  424/   2820F : =$E                         set vcTL4,$0E
(2)  424/   2820F : 28                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  424/   28210 :                     ;   0     1     2     3     4     5     6     7
(2)  424/   28210 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  424/   28210 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  424/   28210 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  424/   28210 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  424/   28210 : =$80                                set vcTLMask1,$80
(2)  424/   28210 :                     
(2)  424/   28210 :                     
(2)  424/   28210 : 7100 3001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  424/   28214 : 1F1F 1D1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  424/   28218 : 1313 0605                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  424/   2821C : 0303 0205                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  424/   28220 : 4F4F 2F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  424/   28224 : 0E14 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  425/   28228 :                     
(2)  426/   28228 :                     ; Xylophone
(2)  427/   28228 :                     ;	Voice $16
(2)  428/   28228 :                     ;	$3E
(2)  429/   28228 :                     ;	$38, $01, $7A, $34, 	$59, $D9, $5F, $9C, 	$0F, $04, $0F, $0A
(2)  430/   28228 :                     ;	$02, $02, $05, $05, 	$AF, $AF, $66, $66, 	$28, $80, $A3, $80
(2)  431/   28228 : (MACRO)             	smpsVcAlgorithm     $06
(2)  431/   28228 : =$6                 vcAlgorithm set $06
(2)  432/   28228 : (MACRO)             	smpsVcFeedback      $07
(2)  432/   28228 : =$7                 vcFeedback set $07
(2)  433/   28228 : (MACRO)             	smpsVcUnusedBits    $00
(2)  433/   28228 : =$0                 vcUnusedBits set $00
(2)  433/   28228 : =$0                                 set vcD1R1Unk,0
(2)  433/   28228 : =$0                                 set vcD1R2Unk,0
(2)  433/   28228 : =$0                                 set vcD1R3Unk,0
(2)  433/   28228 : =$0                                 set vcD1R4Unk,0
(2)  434/   28228 : (MACRO)             	smpsVcDetune        $03, $07, $00, $03
(2)  434/   28228 : =$3                         set vcDT1,$03
(2)  434/   28228 : =$7                         set vcDT2,$07
(2)  434/   28228 : =$0                         set vcDT3,$00
(2)  434/   28228 : =$3                         set vcDT4,$03
(2)  435/   28228 : (MACRO)             	smpsVcCoarseFreq    $04, $0A, $01, $08
(2)  435/   28228 : =$4                         set vcCF1,$04
(2)  435/   28228 : =$A                         set vcCF2,$0A
(2)  435/   28228 : =$1                         set vcCF3,$01
(2)  435/   28228 : =$8                         set vcCF4,$08
(2)  436/   28228 : (MACRO)             	smpsVcRateScale     $02, $01, $03, $01
(2)  436/   28228 : =$2                         set vcRS1,$02
(2)  436/   28228 : =$1                         set vcRS2,$01
(2)  436/   28228 : =$3                         set vcRS3,$03
(2)  436/   28228 : =$1                         set vcRS4,$01
(2)  437/   28228 : (MACRO)             	smpsVcAttackRate    $1C, $1F, $19, $19
(2)  437/   28228 : =$1C                        set vcAR1,$1C
(2)  437/   28228 : =$1F                        set vcAR2,$1F
(2)  437/   28228 : =$19                        set vcAR3,$19
(2)  437/   28228 : =$19                        set vcAR4,$19
(2)  438/   28228 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  438/   28228 : =$0                                 set vcAM1,$00<<5
(2)  438/   28228 : =$0                                 set vcAM2,$00<<5
(2)  438/   28228 : =$0                                 set vcAM3,$00<<5
(2)  438/   28228 : =$0                                 set vcAM4,$00<<5
(2)  439/   28228 : (MACRO)             	smpsVcDecayRate1    $0A, $0F, $04, $0F
(2)  439/   28228 : =$A                         set vcD1R1,$0A
(2)  439/   28228 : =$F                         set vcD1R2,$0F
(2)  439/   28228 : =$4                         set vcD1R3,$04
(2)  439/   28228 : =$F                         set vcD1R4,$0F
(2)  440/   28228 : (MACRO)             	smpsVcDecayRate2    $05, $05, $02, $02
(2)  440/   28228 : =$5                         set vcD2R1,$05
(2)  440/   28228 : =$5                         set vcD2R2,$05
(2)  440/   28228 : =$2                         set vcD2R3,$02
(2)  440/   28228 : =$2                         set vcD2R4,$02
(2)  441/   28228 : (MACRO)             	smpsVcDecayLevel    $06, $06, $0A, $0A
(2)  441/   28228 : =$6                         set vcDL1,$06
(2)  441/   28228 : =$6                         set vcDL2,$06
(2)  441/   28228 : =$A                         set vcDL3,$0A
(2)  441/   28228 : =$A                         set vcDL4,$0A
(2)  442/   28228 : (MACRO)             	smpsVcReleaseRate   $06, $06, $0F, $0F
(2)  442/   28228 : =$6                         set vcRR1,$06
(2)  442/   28228 : =$6                         set vcRR2,$06
(2)  442/   28228 : =$F                         set vcRR3,$0F
(2)  442/   28228 : =$F                         set vcRR4,$0F
(2)  443/   28228 : (MACRO)             	smpsVcTotalLevel    $00, $23, $00, $28
(2)  443/   28228 : =$0                         set vcTL1,$00
(2)  443/   28228 : =$23                        set vcTL2,$23
(2)  443/   28228 : =$0                         set vcTL3,$00
(2)  443/   28228 : =$28                        set vcTL4,$28
(2)  443/   28228 : 3E                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  443/   28229 :                     ;   0     1     2     3     4     5     6     7
(2)  443/   28229 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  443/   28229 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  443/   28229 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  443/   28229 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  443/   28229 : =$80                                set vcTLMask1,$80
(2)  443/   28229 :                     
(2)  443/   28229 :                     
(2)  443/   28229 : 3801 7A34                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  443/   2822D : 59D9 5F9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  443/   28231 : 0F04 0F0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  443/   28235 : 0202 0505                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  443/   28239 : AFAF 6666                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  443/   2823D : 2880 A380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  444/   28241 :                     
(2)  445/   28241 :                     ; Sine Flute
(2)  446/   28241 :                     ;	Voice $17
(2)  447/   28241 :                     ;	$39
(2)  448/   28241 :                     ;	$32, $31, $72, $71, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
(2)  449/   28241 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1B, $32, $28, $80
(2)  450/   28241 : (MACRO)             	smpsVcAlgorithm     $01
(2)  450/   28241 : =$1                 vcAlgorithm set $01
(2)  451/   28241 : (MACRO)             	smpsVcFeedback      $07
(2)  451/   28241 : =$7                 vcFeedback set $07
(2)  452/   28241 : (MACRO)             	smpsVcUnusedBits    $00
(2)  452/   28241 : =$0                 vcUnusedBits set $00
(2)  452/   28241 : =$0                                 set vcD1R1Unk,0
(2)  452/   28241 : =$0                                 set vcD1R2Unk,0
(2)  452/   28241 : =$0                                 set vcD1R3Unk,0
(2)  452/   28241 : =$0                                 set vcD1R4Unk,0
(2)  453/   28241 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(2)  453/   28241 : =$7                         set vcDT1,$07
(2)  453/   28241 : =$7                         set vcDT2,$07
(2)  453/   28241 : =$3                         set vcDT3,$03
(2)  453/   28241 : =$3                         set vcDT4,$03
(2)  454/   28241 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $02
(2)  454/   28241 : =$1                         set vcCF1,$01
(2)  454/   28241 : =$2                         set vcCF2,$02
(2)  454/   28241 : =$1                         set vcCF3,$01
(2)  454/   28241 : =$2                         set vcCF4,$02
(2)  455/   28241 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  455/   28241 : =$0                         set vcRS1,$00
(2)  455/   28241 : =$0                         set vcRS2,$00
(2)  455/   28241 : =$0                         set vcRS3,$00
(2)  455/   28241 : =$0                         set vcRS4,$00
(2)  456/   28241 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  456/   28241 : =$1F                        set vcAR1,$1F
(2)  456/   28241 : =$1F                        set vcAR2,$1F
(2)  456/   28241 : =$1F                        set vcAR3,$1F
(2)  456/   28241 : =$1F                        set vcAR4,$1F
(2)  457/   28241 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  457/   28241 : =$0                                 set vcAM1,$00<<5
(2)  457/   28241 : =$0                                 set vcAM2,$00<<5
(2)  457/   28241 : =$0                                 set vcAM3,$00<<5
(2)  457/   28241 : =$0                                 set vcAM4,$00<<5
(2)  458/   28241 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(2)  458/   28241 : =$0                         set vcD1R1,$00
(2)  458/   28241 : =$0                         set vcD1R2,$00
(2)  458/   28241 : =$0                         set vcD1R3,$00
(2)  458/   28241 : =$0                         set vcD1R4,$00
(2)  459/   28241 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  459/   28241 : =$0                         set vcD2R1,$00
(2)  459/   28241 : =$0                         set vcD2R2,$00
(2)  459/   28241 : =$0                         set vcD2R3,$00
(2)  459/   28241 : =$0                         set vcD2R4,$00
(2)  460/   28241 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(2)  460/   28241 : =$0                         set vcDL1,$00
(2)  460/   28241 : =$0                         set vcDL2,$00
(2)  460/   28241 : =$0                         set vcDL3,$00
(2)  460/   28241 : =$0                         set vcDL4,$00
(2)  461/   28241 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  461/   28241 : =$F                         set vcRR1,$0F
(2)  461/   28241 : =$F                         set vcRR2,$0F
(2)  461/   28241 : =$F                         set vcRR3,$0F
(2)  461/   28241 : =$F                         set vcRR4,$0F
(2)  462/   28241 : (MACRO)             	smpsVcTotalLevel    $00, $28, $32, $1B
(2)  462/   28241 : =$0                         set vcTL1,$00
(2)  462/   28241 : =$28                        set vcTL2,$28
(2)  462/   28241 : =$32                        set vcTL3,$32
(2)  462/   28241 : =$1B                        set vcTL4,$1B
(2)  462/   28241 : 39                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  462/   28242 :                     ;   0     1     2     3     4     5     6     7
(2)  462/   28242 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  462/   28242 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  462/   28242 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  462/   28242 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  462/   28242 : =$80                                set vcTLMask1,$80
(2)  462/   28242 :                     
(2)  462/   28242 :                     
(2)  462/   28242 : 3231 7271                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  462/   28246 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  462/   2824A : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  462/   2824E : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  462/   28252 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  462/   28256 : 1B32 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  463/   2825A :                     
(2)  464/   2825A :                     ; Pipe Organ
(2)  465/   2825A :                     ;	Voice $18
(2)  466/   2825A :                     ;	$07
(2)  467/   2825A :                     ;	$34, $74, $32, $71, 	$1F, $1F, $1F, $1F, 	$0A, $0A, $05, $03
(2)  468/   2825A :                     ;	$00, $00, $00, $00, 	$3F, $3F, $2F, $2F, 	$8A, $8A, $80, $80
(2)  469/   2825A : (MACRO)             	smpsVcAlgorithm     $07
(2)  469/   2825A : =$7                 vcAlgorithm set $07
(2)  470/   2825A : (MACRO)             	smpsVcFeedback      $00
(2)  470/   2825A : =$0                 vcFeedback set $00
(2)  471/   2825A : (MACRO)             	smpsVcUnusedBits    $00
(2)  471/   2825A : =$0                 vcUnusedBits set $00
(2)  471/   2825A : =$0                                 set vcD1R1Unk,0
(2)  471/   2825A : =$0                                 set vcD1R2Unk,0
(2)  471/   2825A : =$0                                 set vcD1R3Unk,0
(2)  471/   2825A : =$0                                 set vcD1R4Unk,0
(2)  472/   2825A : (MACRO)             	smpsVcDetune        $07, $03, $07, $03
(2)  472/   2825A : =$7                         set vcDT1,$07
(2)  472/   2825A : =$3                         set vcDT2,$03
(2)  472/   2825A : =$7                         set vcDT3,$07
(2)  472/   2825A : =$3                         set vcDT4,$03
(2)  473/   2825A : (MACRO)             	smpsVcCoarseFreq    $01, $02, $04, $04
(2)  473/   2825A : =$1                         set vcCF1,$01
(2)  473/   2825A : =$2                         set vcCF2,$02
(2)  473/   2825A : =$4                         set vcCF3,$04
(2)  473/   2825A : =$4                         set vcCF4,$04
(2)  474/   2825A : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  474/   2825A : =$0                         set vcRS1,$00
(2)  474/   2825A : =$0                         set vcRS2,$00
(2)  474/   2825A : =$0                         set vcRS3,$00
(2)  474/   2825A : =$0                         set vcRS4,$00
(2)  475/   2825A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  475/   2825A : =$1F                        set vcAR1,$1F
(2)  475/   2825A : =$1F                        set vcAR2,$1F
(2)  475/   2825A : =$1F                        set vcAR3,$1F
(2)  475/   2825A : =$1F                        set vcAR4,$1F
(2)  476/   2825A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  476/   2825A : =$0                                 set vcAM1,$00<<5
(2)  476/   2825A : =$0                                 set vcAM2,$00<<5
(2)  476/   2825A : =$0                                 set vcAM3,$00<<5
(2)  476/   2825A : =$0                                 set vcAM4,$00<<5
(2)  477/   2825A : (MACRO)             	smpsVcDecayRate1    $03, $05, $0A, $0A
(2)  477/   2825A : =$3                         set vcD1R1,$03
(2)  477/   2825A : =$5                         set vcD1R2,$05
(2)  477/   2825A : =$A                         set vcD1R3,$0A
(2)  477/   2825A : =$A                         set vcD1R4,$0A
(2)  478/   2825A : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  478/   2825A : =$0                         set vcD2R1,$00
(2)  478/   2825A : =$0                         set vcD2R2,$00
(2)  478/   2825A : =$0                         set vcD2R3,$00
(2)  478/   2825A : =$0                         set vcD2R4,$00
(2)  479/   2825A : (MACRO)             	smpsVcDecayLevel    $02, $02, $03, $03
(2)  479/   2825A : =$2                         set vcDL1,$02
(2)  479/   2825A : =$2                         set vcDL2,$02
(2)  479/   2825A : =$3                         set vcDL3,$03
(2)  479/   2825A : =$3                         set vcDL4,$03
(2)  480/   2825A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  480/   2825A : =$F                         set vcRR1,$0F
(2)  480/   2825A : =$F                         set vcRR2,$0F
(2)  480/   2825A : =$F                         set vcRR3,$0F
(2)  480/   2825A : =$F                         set vcRR4,$0F
(2)  481/   2825A : (MACRO)             	smpsVcTotalLevel    $00, $00, $0A, $0A
(2)  481/   2825A : =$0                         set vcTL1,$00
(2)  481/   2825A : =$0                         set vcTL2,$00
(2)  481/   2825A : =$A                         set vcTL3,$0A
(2)  481/   2825A : =$A                         set vcTL4,$0A
(2)  481/   2825A : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  481/   2825B :                     ;   0     1     2     3     4     5     6     7
(2)  481/   2825B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  481/   2825B : =$80                                set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  481/   2825B : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  481/   2825B : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  481/   2825B : =$80                                set vcTLMask1,$80
(2)  481/   2825B :                     
(2)  481/   2825B :                     
(2)  481/   2825B : 3474 3271                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  481/   2825F : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  481/   28263 : 0A0A 0503                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  481/   28267 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  481/   2826B : 3F3F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  481/   2826F : 8A8A 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  482/   28273 :                     
(2)  483/   28273 :                     ; Synth Brass 2
(2)  484/   28273 :                     ;	Voice $19
(2)  485/   28273 :                     ;	$3A
(2)  486/   28273 :                     ;	$31, $37, $31, $31, 	$8D, $8D, $8E, $53, 	$0E, $0E, $0E, $03
(2)  487/   28273 :                     ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$17, $28, $26, $80
(2)  488/   28273 : (MACRO)             	smpsVcAlgorithm     $02
(2)  488/   28273 : =$2                 vcAlgorithm set $02
(2)  489/   28273 : (MACRO)             	smpsVcFeedback      $07
(2)  489/   28273 : =$7                 vcFeedback set $07
(2)  490/   28273 : (MACRO)             	smpsVcUnusedBits    $00
(2)  490/   28273 : =$0                 vcUnusedBits set $00
(2)  490/   28273 : =$0                                 set vcD1R1Unk,0
(2)  490/   28273 : =$0                                 set vcD1R2Unk,0
(2)  490/   28273 : =$0                                 set vcD1R3Unk,0
(2)  490/   28273 : =$0                                 set vcD1R4Unk,0
(2)  491/   28273 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(2)  491/   28273 : =$3                         set vcDT1,$03
(2)  491/   28273 : =$3                         set vcDT2,$03
(2)  491/   28273 : =$3                         set vcDT3,$03
(2)  491/   28273 : =$3                         set vcDT4,$03
(2)  492/   28273 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(2)  492/   28273 : =$1                         set vcCF1,$01
(2)  492/   28273 : =$1                         set vcCF2,$01
(2)  492/   28273 : =$7                         set vcCF3,$07
(2)  492/   28273 : =$1                         set vcCF4,$01
(2)  493/   28273 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(2)  493/   28273 : =$1                         set vcRS1,$01
(2)  493/   28273 : =$2                         set vcRS2,$02
(2)  493/   28273 : =$2                         set vcRS3,$02
(2)  493/   28273 : =$2                         set vcRS4,$02
(2)  494/   28273 : (MACRO)             	smpsVcAttackRate    $13, $0E, $0D, $0D
(2)  494/   28273 : =$13                        set vcAR1,$13
(2)  494/   28273 : =$E                         set vcAR2,$0E
(2)  494/   28273 : =$D                         set vcAR3,$0D
(2)  494/   28273 : =$D                         set vcAR4,$0D
(2)  495/   28273 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  495/   28273 : =$0                                 set vcAM1,$00<<5
(2)  495/   28273 : =$0                                 set vcAM2,$00<<5
(2)  495/   28273 : =$0                                 set vcAM3,$00<<5
(2)  495/   28273 : =$0                                 set vcAM4,$00<<5
(2)  496/   28273 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(2)  496/   28273 : =$3                         set vcD1R1,$03
(2)  496/   28273 : =$E                         set vcD1R2,$0E
(2)  496/   28273 : =$E                         set vcD1R3,$0E
(2)  496/   28273 : =$E                         set vcD1R4,$0E
(2)  497/   28273 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  497/   28273 : =$0                         set vcD2R1,$00
(2)  497/   28273 : =$0                         set vcD2R2,$00
(2)  497/   28273 : =$0                         set vcD2R3,$00
(2)  497/   28273 : =$0                         set vcD2R4,$00
(2)  498/   28273 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(2)  498/   28273 : =$0                         set vcDL1,$00
(2)  498/   28273 : =$1                         set vcDL2,$01
(2)  498/   28273 : =$F                         set vcDL3,$0F
(2)  498/   28273 : =$1                         set vcDL4,$01
(2)  499/   28273 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  499/   28273 : =$F                         set vcRR1,$0F
(2)  499/   28273 : =$F                         set vcRR2,$0F
(2)  499/   28273 : =$F                         set vcRR3,$0F
(2)  499/   28273 : =$F                         set vcRR4,$0F
(2)  500/   28273 : (MACRO)             	smpsVcTotalLevel    $00, $26, $28, $17
(2)  500/   28273 : =$0                         set vcTL1,$00
(2)  500/   28273 : =$26                        set vcTL2,$26
(2)  500/   28273 : =$28                        set vcTL3,$28
(2)  500/   28273 : =$17                        set vcTL4,$17
(2)  500/   28273 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  500/   28274 :                     ;   0     1     2     3     4     5     6     7
(2)  500/   28274 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  500/   28274 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  500/   28274 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  500/   28274 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  500/   28274 : =$80                                set vcTLMask1,$80
(2)  500/   28274 :                     
(2)  500/   28274 :                     
(2)  500/   28274 : 3137 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  500/   28278 : 8D8D 8E53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  500/   2827C : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  500/   28280 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  500/   28284 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  500/   28288 : 1728 2680                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  501/   2828C :                     
(2)  502/   2828C :                     ; Harpischord
(2)  503/   2828C :                     ;	Voice $1A
(2)  504/   2828C :                     ;	$3B
(2)  505/   2828C :                     ;	$3A, $31, $71, $74, 	$DF, $1F, $1F, $DF, 	$00, $0A, $0A, $05
(2)  506/   2828C :                     ;	$00, $05, $05, $03, 	$0F, $5F, $1F, $5F, 	$32, $1E, $0F, $80
(2)  507/   2828C : (MACRO)             	smpsVcAlgorithm     $03
(2)  507/   2828C : =$3                 vcAlgorithm set $03
(2)  508/   2828C : (MACRO)             	smpsVcFeedback      $07
(2)  508/   2828C : =$7                 vcFeedback set $07
(2)  509/   2828C : (MACRO)             	smpsVcUnusedBits    $00
(2)  509/   2828C : =$0                 vcUnusedBits set $00
(2)  509/   2828C : =$0                                 set vcD1R1Unk,0
(2)  509/   2828C : =$0                                 set vcD1R2Unk,0
(2)  509/   2828C : =$0                                 set vcD1R3Unk,0
(2)  509/   2828C : =$0                                 set vcD1R4Unk,0
(2)  510/   2828C : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(2)  510/   2828C : =$7                         set vcDT1,$07
(2)  510/   2828C : =$7                         set vcDT2,$07
(2)  510/   2828C : =$3                         set vcDT3,$03
(2)  510/   2828C : =$3                         set vcDT4,$03
(2)  511/   2828C : (MACRO)             	smpsVcCoarseFreq    $04, $01, $01, $0A
(2)  511/   2828C : =$4                         set vcCF1,$04
(2)  511/   2828C : =$1                         set vcCF2,$01
(2)  511/   2828C : =$1                         set vcCF3,$01
(2)  511/   2828C : =$A                         set vcCF4,$0A
(2)  512/   2828C : (MACRO)             	smpsVcRateScale     $03, $00, $00, $03
(2)  512/   2828C : =$3                         set vcRS1,$03
(2)  512/   2828C : =$0                         set vcRS2,$00
(2)  512/   2828C : =$0                         set vcRS3,$00
(2)  512/   2828C : =$3                         set vcRS4,$03
(2)  513/   2828C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  513/   2828C : =$1F                        set vcAR1,$1F
(2)  513/   2828C : =$1F                        set vcAR2,$1F
(2)  513/   2828C : =$1F                        set vcAR3,$1F
(2)  513/   2828C : =$1F                        set vcAR4,$1F
(2)  514/   2828C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  514/   2828C : =$0                                 set vcAM1,$00<<5
(2)  514/   2828C : =$0                                 set vcAM2,$00<<5
(2)  514/   2828C : =$0                                 set vcAM3,$00<<5
(2)  514/   2828C : =$0                                 set vcAM4,$00<<5
(2)  515/   2828C : (MACRO)             	smpsVcDecayRate1    $05, $0A, $0A, $00
(2)  515/   2828C : =$5                         set vcD1R1,$05
(2)  515/   2828C : =$A                         set vcD1R2,$0A
(2)  515/   2828C : =$A                         set vcD1R3,$0A
(2)  515/   2828C : =$0                         set vcD1R4,$00
(2)  516/   2828C : (MACRO)             	smpsVcDecayRate2    $03, $05, $05, $00
(2)  516/   2828C : =$3                         set vcD2R1,$03
(2)  516/   2828C : =$5                         set vcD2R2,$05
(2)  516/   2828C : =$5                         set vcD2R3,$05
(2)  516/   2828C : =$0                         set vcD2R4,$00
(2)  517/   2828C : (MACRO)             	smpsVcDecayLevel    $05, $01, $05, $00
(2)  517/   2828C : =$5                         set vcDL1,$05
(2)  517/   2828C : =$1                         set vcDL2,$01
(2)  517/   2828C : =$5                         set vcDL3,$05
(2)  517/   2828C : =$0                         set vcDL4,$00
(2)  518/   2828C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  518/   2828C : =$F                         set vcRR1,$0F
(2)  518/   2828C : =$F                         set vcRR2,$0F
(2)  518/   2828C : =$F                         set vcRR3,$0F
(2)  518/   2828C : =$F                         set vcRR4,$0F
(2)  519/   2828C : (MACRO)             	smpsVcTotalLevel    $00, $0F, $1E, $32
(2)  519/   2828C : =$0                         set vcTL1,$00
(2)  519/   2828C : =$F                         set vcTL2,$0F
(2)  519/   2828C : =$1E                        set vcTL3,$1E
(2)  519/   2828C : =$32                        set vcTL4,$32
(2)  519/   2828C : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  519/   2828D :                     ;   0     1     2     3     4     5     6     7
(2)  519/   2828D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  519/   2828D : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  519/   2828D : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  519/   2828D : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  519/   2828D : =$80                                set vcTLMask1,$80
(2)  519/   2828D :                     
(2)  519/   2828D :                     
(2)  519/   2828D : 3A31 7174                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  519/   28291 : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  519/   28295 : 000A 0A05                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  519/   28299 : 0005 0503                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  519/   2829D : 0F5F 1F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  519/   282A1 : 321E 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  520/   282A5 :                     
(2)  521/   282A5 :                     ; Metallic Bass
(2)  522/   282A5 :                     ;	Voice $1B
(2)  523/   282A5 :                     ;	$05
(2)  524/   282A5 :                     ;	$04, $01, $02, $04, 	$8D, $1F, $15, $52, 	$06, $00, $00, $04
(2)  525/   282A5 :                     ;	$02, $08, $00, $00, 	$1F, $0F, $0F, $2F, 	$16, $90, $84, $8C
(2)  526/   282A5 : (MACRO)             	smpsVcAlgorithm     $05
(2)  526/   282A5 : =$5                 vcAlgorithm set $05
(2)  527/   282A5 : (MACRO)             	smpsVcFeedback      $00
(2)  527/   282A5 : =$0                 vcFeedback set $00
(2)  528/   282A5 : (MACRO)             	smpsVcUnusedBits    $00
(2)  528/   282A5 : =$0                 vcUnusedBits set $00
(2)  528/   282A5 : =$0                                 set vcD1R1Unk,0
(2)  528/   282A5 : =$0                                 set vcD1R2Unk,0
(2)  528/   282A5 : =$0                                 set vcD1R3Unk,0
(2)  528/   282A5 : =$0                                 set vcD1R4Unk,0
(2)  529/   282A5 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  529/   282A5 : =$0                         set vcDT1,$00
(2)  529/   282A5 : =$0                         set vcDT2,$00
(2)  529/   282A5 : =$0                         set vcDT3,$00
(2)  529/   282A5 : =$0                         set vcDT4,$00
(2)  530/   282A5 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $01, $04
(2)  530/   282A5 : =$4                         set vcCF1,$04
(2)  530/   282A5 : =$2                         set vcCF2,$02
(2)  530/   282A5 : =$1                         set vcCF3,$01
(2)  530/   282A5 : =$4                         set vcCF4,$04
(2)  531/   282A5 : (MACRO)             	smpsVcRateScale     $01, $00, $00, $02
(2)  531/   282A5 : =$1                         set vcRS1,$01
(2)  531/   282A5 : =$0                         set vcRS2,$00
(2)  531/   282A5 : =$0                         set vcRS3,$00
(2)  531/   282A5 : =$2                         set vcRS4,$02
(2)  532/   282A5 : (MACRO)             	smpsVcAttackRate    $12, $15, $1F, $0D
(2)  532/   282A5 : =$12                        set vcAR1,$12
(2)  532/   282A5 : =$15                        set vcAR2,$15
(2)  532/   282A5 : =$1F                        set vcAR3,$1F
(2)  532/   282A5 : =$D                         set vcAR4,$0D
(2)  533/   282A5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  533/   282A5 : =$0                                 set vcAM1,$00<<5
(2)  533/   282A5 : =$0                                 set vcAM2,$00<<5
(2)  533/   282A5 : =$0                                 set vcAM3,$00<<5
(2)  533/   282A5 : =$0                                 set vcAM4,$00<<5
(2)  534/   282A5 : (MACRO)             	smpsVcDecayRate1    $04, $00, $00, $06
(2)  534/   282A5 : =$4                         set vcD1R1,$04
(2)  534/   282A5 : =$0                         set vcD1R2,$00
(2)  534/   282A5 : =$0                         set vcD1R3,$00
(2)  534/   282A5 : =$6                         set vcD1R4,$06
(2)  535/   282A5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $08, $02
(2)  535/   282A5 : =$0                         set vcD2R1,$00
(2)  535/   282A5 : =$0                         set vcD2R2,$00
(2)  535/   282A5 : =$8                         set vcD2R3,$08
(2)  535/   282A5 : =$2                         set vcD2R4,$02
(2)  536/   282A5 : (MACRO)             	smpsVcDecayLevel    $02, $00, $00, $01
(2)  536/   282A5 : =$2                         set vcDL1,$02
(2)  536/   282A5 : =$0                         set vcDL2,$00
(2)  536/   282A5 : =$0                         set vcDL3,$00
(2)  536/   282A5 : =$1                         set vcDL4,$01
(2)  537/   282A5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  537/   282A5 : =$F                         set vcRR1,$0F
(2)  537/   282A5 : =$F                         set vcRR2,$0F
(2)  537/   282A5 : =$F                         set vcRR3,$0F
(2)  537/   282A5 : =$F                         set vcRR4,$0F
(2)  538/   282A5 : (MACRO)             	smpsVcTotalLevel    $0C, $04, $10, $16
(2)  538/   282A5 : =$C                         set vcTL1,$0C
(2)  538/   282A5 : =$4                         set vcTL2,$04
(2)  538/   282A5 : =$10                        set vcTL3,$10
(2)  538/   282A5 : =$16                        set vcTL4,$16
(2)  538/   282A5 : 05                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  538/   282A6 :                     ;   0     1     2     3     4     5     6     7
(2)  538/   282A6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  538/   282A6 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  538/   282A6 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  538/   282A6 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  538/   282A6 : =$80                                set vcTLMask1,$80
(2)  538/   282A6 :                     
(2)  538/   282A6 :                     
(2)  538/   282A6 : 0401 0204                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  538/   282AA : 8D1F 1552                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  538/   282AE : 0600 0004                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  538/   282B2 : 0208 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  538/   282B6 : 1F0F 0F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  538/   282BA : 1690 848C                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  539/   282BE :                     
(2)  540/   282BE :                     ; Alternate Metallic Bass
(2)  541/   282BE :                     ;	Voice $1C
(2)  542/   282BE :                     ;	$2C
(2)  543/   282BE :                     ;	$71, $74, $32, $32, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
(2)  544/   282BE :                     ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
(2)  545/   282BE : (MACRO)             	smpsVcAlgorithm     $04
(2)  545/   282BE : =$4                 vcAlgorithm set $04
(2)  546/   282BE : (MACRO)             	smpsVcFeedback      $05
(2)  546/   282BE : =$5                 vcFeedback set $05
(2)  547/   282BE : (MACRO)             	smpsVcUnusedBits    $00
(2)  547/   282BE : =$0                 vcUnusedBits set $00
(2)  547/   282BE : =$0                                 set vcD1R1Unk,0
(2)  547/   282BE : =$0                                 set vcD1R2Unk,0
(2)  547/   282BE : =$0                                 set vcD1R3Unk,0
(2)  547/   282BE : =$0                                 set vcD1R4Unk,0
(2)  548/   282BE : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  548/   282BE : =$3                         set vcDT1,$03
(2)  548/   282BE : =$3                         set vcDT2,$03
(2)  548/   282BE : =$7                         set vcDT3,$07
(2)  548/   282BE : =$7                         set vcDT4,$07
(2)  549/   282BE : (MACRO)             	smpsVcCoarseFreq    $02, $02, $04, $01
(2)  549/   282BE : =$2                         set vcCF1,$02
(2)  549/   282BE : =$2                         set vcCF2,$02
(2)  549/   282BE : =$4                         set vcCF3,$04
(2)  549/   282BE : =$1                         set vcCF4,$01
(2)  550/   282BE : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  550/   282BE : =$0                         set vcRS1,$00
(2)  550/   282BE : =$0                         set vcRS2,$00
(2)  550/   282BE : =$0                         set vcRS3,$00
(2)  550/   282BE : =$0                         set vcRS4,$00
(2)  551/   282BE : (MACRO)             	smpsVcAttackRate    $12, $1F, $12, $1F
(2)  551/   282BE : =$12                        set vcAR1,$12
(2)  551/   282BE : =$1F                        set vcAR2,$1F
(2)  551/   282BE : =$12                        set vcAR3,$12
(2)  551/   282BE : =$1F                        set vcAR4,$1F
(2)  552/   282BE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  552/   282BE : =$0                                 set vcAM1,$00<<5
(2)  552/   282BE : =$0                                 set vcAM2,$00<<5
(2)  552/   282BE : =$0                                 set vcAM3,$00<<5
(2)  552/   282BE : =$0                                 set vcAM4,$00<<5
(2)  553/   282BE : (MACRO)             	smpsVcDecayRate1    $0A, $00, $0A, $00
(2)  553/   282BE : =$A                         set vcD1R1,$0A
(2)  553/   282BE : =$0                         set vcD1R2,$00
(2)  553/   282BE : =$A                         set vcD1R3,$0A
(2)  553/   282BE : =$0                         set vcD1R4,$00
(2)  554/   282BE : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  554/   282BE : =$0                         set vcD2R1,$00
(2)  554/   282BE : =$0                         set vcD2R2,$00
(2)  554/   282BE : =$0                         set vcD2R3,$00
(2)  554/   282BE : =$0                         set vcD2R4,$00
(2)  555/   282BE : (MACRO)             	smpsVcDecayLevel    $01, $00, $01, $00
(2)  555/   282BE : =$1                         set vcDL1,$01
(2)  555/   282BE : =$0                         set vcDL2,$00
(2)  555/   282BE : =$1                         set vcDL3,$01
(2)  555/   282BE : =$0                         set vcDL4,$00
(2)  556/   282BE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  556/   282BE : =$F                         set vcRR1,$0F
(2)  556/   282BE : =$F                         set vcRR2,$0F
(2)  556/   282BE : =$F                         set vcRR3,$0F
(2)  556/   282BE : =$F                         set vcRR4,$0F
(2)  557/   282BE : (MACRO)             	smpsVcTotalLevel    $00, $17, $00, $16
(2)  557/   282BE : =$0                         set vcTL1,$00
(2)  557/   282BE : =$17                        set vcTL2,$17
(2)  557/   282BE : =$0                         set vcTL3,$00
(2)  557/   282BE : =$16                        set vcTL4,$16
(2)  557/   282BE : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  557/   282BF :                     ;   0     1     2     3     4     5     6     7
(2)  557/   282BF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  557/   282BF : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  557/   282BF : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  557/   282BF : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  557/   282BF : =$80                                set vcTLMask1,$80
(2)  557/   282BF :                     
(2)  557/   282BF :                     
(2)  557/   282BF : 7174 3232                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  557/   282C3 : 1F12 1F12                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  557/   282C7 : 000A 000A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  557/   282CB : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  557/   282CF : 0F1F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  557/   282D3 : 1680 1780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  558/   282D7 :                     
(2)  559/   282D7 :                     ; Backdropped Metallic Bass
(2)  560/   282D7 :                     ;	Voice $1D
(2)  561/   282D7 :                     ;	$3A
(2)  562/   282D7 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(2)  563/   282D7 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $8F
(2)  564/   282D7 : (MACRO)             	smpsVcAlgorithm     $02
(2)  564/   282D7 : =$2                 vcAlgorithm set $02
(2)  565/   282D7 : (MACRO)             	smpsVcFeedback      $07
(2)  565/   282D7 : =$7                 vcFeedback set $07
(2)  566/   282D7 : (MACRO)             	smpsVcUnusedBits    $00
(2)  566/   282D7 : =$0                 vcUnusedBits set $00
(2)  566/   282D7 : =$0                                 set vcD1R1Unk,0
(2)  566/   282D7 : =$0                                 set vcD1R2Unk,0
(2)  566/   282D7 : =$0                                 set vcD1R3Unk,0
(2)  566/   282D7 : =$0                                 set vcD1R4Unk,0
(2)  567/   282D7 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  567/   282D7 : =$0                         set vcDT1,$00
(2)  567/   282D7 : =$0                         set vcDT2,$00
(2)  567/   282D7 : =$0                         set vcDT3,$00
(2)  567/   282D7 : =$0                         set vcDT4,$00
(2)  568/   282D7 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(2)  568/   282D7 : =$1                         set vcCF1,$01
(2)  568/   282D7 : =$1                         set vcCF2,$01
(2)  568/   282D7 : =$7                         set vcCF3,$07
(2)  568/   282D7 : =$1                         set vcCF4,$01
(2)  569/   282D7 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(2)  569/   282D7 : =$1                         set vcRS1,$01
(2)  569/   282D7 : =$2                         set vcRS2,$02
(2)  569/   282D7 : =$2                         set vcRS3,$02
(2)  569/   282D7 : =$2                         set vcRS4,$02
(2)  570/   282D7 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(2)  570/   282D7 : =$13                        set vcAR1,$13
(2)  570/   282D7 : =$D                         set vcAR2,$0D
(2)  570/   282D7 : =$E                         set vcAR3,$0E
(2)  570/   282D7 : =$E                         set vcAR4,$0E
(2)  571/   282D7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  571/   282D7 : =$0                                 set vcAM1,$00<<5
(2)  571/   282D7 : =$0                                 set vcAM2,$00<<5
(2)  571/   282D7 : =$0                                 set vcAM3,$00<<5
(2)  571/   282D7 : =$0                                 set vcAM4,$00<<5
(2)  572/   282D7 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(2)  572/   282D7 : =$3                         set vcD1R1,$03
(2)  572/   282D7 : =$E                         set vcD1R2,$0E
(2)  572/   282D7 : =$E                         set vcD1R3,$0E
(2)  572/   282D7 : =$E                         set vcD1R4,$0E
(2)  573/   282D7 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(2)  573/   282D7 : =$7                         set vcD2R1,$07
(2)  573/   282D7 : =$0                         set vcD2R2,$00
(2)  573/   282D7 : =$0                         set vcD2R3,$00
(2)  573/   282D7 : =$0                         set vcD2R4,$00
(2)  574/   282D7 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(2)  574/   282D7 : =$0                         set vcDL1,$00
(2)  574/   282D7 : =$1                         set vcDL2,$01
(2)  574/   282D7 : =$F                         set vcDL3,$0F
(2)  574/   282D7 : =$1                         set vcDL4,$01
(2)  575/   282D7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  575/   282D7 : =$F                         set vcRR1,$0F
(2)  575/   282D7 : =$F                         set vcRR2,$0F
(2)  575/   282D7 : =$F                         set vcRR3,$0F
(2)  575/   282D7 : =$F                         set vcRR4,$0F
(2)  576/   282D7 : (MACRO)             	smpsVcTotalLevel    $0F, $27, $28, $18
(2)  576/   282D7 : =$F                         set vcTL1,$0F
(2)  576/   282D7 : =$27                        set vcTL2,$27
(2)  576/   282D7 : =$28                        set vcTL3,$28
(2)  576/   282D7 : =$18                        set vcTL4,$18
(2)  576/   282D7 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  576/   282D8 :                     ;   0     1     2     3     4     5     6     7
(2)  576/   282D8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  576/   282D8 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  576/   282D8 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  576/   282D8 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  576/   282D8 : =$80                                set vcTLMask1,$80
(2)  576/   282D8 :                     
(2)  576/   282D8 :                     
(2)  576/   282D8 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  576/   282DC : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  576/   282E0 : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  576/   282E4 : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  576/   282E8 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  576/   282EC : 1828 278F                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  577/   282F0 :                     
(2)  578/   282F0 :                     ; Sine like Bell
(2)  579/   282F0 :                     ;	Voice $1E
(2)  580/   282F0 :                     ;	$36
(2)  581/   282F0 :                     ;	$7A, $32, $51, $11, 	$1F, $1F, $59, $1C, 	$0A, $0D, $06, $0A
(2)  582/   282F0 :                     ;	$07, $00, $02, $02, 	$AF, $5F, $5F, $5F, 	$1E, $8B, $81, $80
(2)  583/   282F0 : (MACRO)             	smpsVcAlgorithm     $06
(2)  583/   282F0 : =$6                 vcAlgorithm set $06
(2)  584/   282F0 : (MACRO)             	smpsVcFeedback      $06
(2)  584/   282F0 : =$6                 vcFeedback set $06
(2)  585/   282F0 : (MACRO)             	smpsVcUnusedBits    $00
(2)  585/   282F0 : =$0                 vcUnusedBits set $00
(2)  585/   282F0 : =$0                                 set vcD1R1Unk,0
(2)  585/   282F0 : =$0                                 set vcD1R2Unk,0
(2)  585/   282F0 : =$0                                 set vcD1R3Unk,0
(2)  585/   282F0 : =$0                                 set vcD1R4Unk,0
(2)  586/   282F0 : (MACRO)             	smpsVcDetune        $01, $05, $03, $07
(2)  586/   282F0 : =$1                         set vcDT1,$01
(2)  586/   282F0 : =$5                         set vcDT2,$05
(2)  586/   282F0 : =$3                         set vcDT3,$03
(2)  586/   282F0 : =$7                         set vcDT4,$07
(2)  587/   282F0 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $0A
(2)  587/   282F0 : =$1                         set vcCF1,$01
(2)  587/   282F0 : =$1                         set vcCF2,$01
(2)  587/   282F0 : =$2                         set vcCF3,$02
(2)  587/   282F0 : =$A                         set vcCF4,$0A
(2)  588/   282F0 : (MACRO)             	smpsVcRateScale     $00, $01, $00, $00
(2)  588/   282F0 : =$0                         set vcRS1,$00
(2)  588/   282F0 : =$1                         set vcRS2,$01
(2)  588/   282F0 : =$0                         set vcRS3,$00
(2)  588/   282F0 : =$0                         set vcRS4,$00
(2)  589/   282F0 : (MACRO)             	smpsVcAttackRate    $1C, $19, $1F, $1F
(2)  589/   282F0 : =$1C                        set vcAR1,$1C
(2)  589/   282F0 : =$19                        set vcAR2,$19
(2)  589/   282F0 : =$1F                        set vcAR3,$1F
(2)  589/   282F0 : =$1F                        set vcAR4,$1F
(2)  590/   282F0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  590/   282F0 : =$0                                 set vcAM1,$00<<5
(2)  590/   282F0 : =$0                                 set vcAM2,$00<<5
(2)  590/   282F0 : =$0                                 set vcAM3,$00<<5
(2)  590/   282F0 : =$0                                 set vcAM4,$00<<5
(2)  591/   282F0 : (MACRO)             	smpsVcDecayRate1    $0A, $06, $0D, $0A
(2)  591/   282F0 : =$A                         set vcD1R1,$0A
(2)  591/   282F0 : =$6                         set vcD1R2,$06
(2)  591/   282F0 : =$D                         set vcD1R3,$0D
(2)  591/   282F0 : =$A                         set vcD1R4,$0A
(2)  592/   282F0 : (MACRO)             	smpsVcDecayRate2    $02, $02, $00, $07
(2)  592/   282F0 : =$2                         set vcD2R1,$02
(2)  592/   282F0 : =$2                         set vcD2R2,$02
(2)  592/   282F0 : =$0                         set vcD2R3,$00
(2)  592/   282F0 : =$7                         set vcD2R4,$07
(2)  593/   282F0 : (MACRO)             	smpsVcDecayLevel    $05, $05, $05, $0A
(2)  593/   282F0 : =$5                         set vcDL1,$05
(2)  593/   282F0 : =$5                         set vcDL2,$05
(2)  593/   282F0 : =$5                         set vcDL3,$05
(2)  593/   282F0 : =$A                         set vcDL4,$0A
(2)  594/   282F0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  594/   282F0 : =$F                         set vcRR1,$0F
(2)  594/   282F0 : =$F                         set vcRR2,$0F
(2)  594/   282F0 : =$F                         set vcRR3,$0F
(2)  594/   282F0 : =$F                         set vcRR4,$0F
(2)  595/   282F0 : (MACRO)             	smpsVcTotalLevel    $00, $01, $0B, $1E
(2)  595/   282F0 : =$0                         set vcTL1,$00
(2)  595/   282F0 : =$1                         set vcTL2,$01
(2)  595/   282F0 : =$B                         set vcTL3,$0B
(2)  595/   282F0 : =$1E                        set vcTL4,$1E
(2)  595/   282F0 : 36                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  595/   282F1 :                     ;   0     1     2     3     4     5     6     7
(2)  595/   282F1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  595/   282F1 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  595/   282F1 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  595/   282F1 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  595/   282F1 : =$80                                set vcTLMask1,$80
(2)  595/   282F1 :                     
(2)  595/   282F1 :                     
(2)  595/   282F1 : 7A32 5111                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  595/   282F5 : 1F1F 591C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  595/   282F9 : 0A0D 060A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  595/   282FD : 0700 0202                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  595/   28301 : AF5F 5F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  595/   28305 : 1E8B 8180                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  596/   28309 :                     
(2)  597/   28309 :                     ; Synth like Metallic with Small Bell
(2)  598/   28309 :                     ;	Voice $1F
(2)  599/   28309 :                     ;	$3C
(2)  600/   28309 :                     ;	$71, $72, $3F, $34, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(2)  601/   28309 :                     ;	$00, $00, $00, $00, 	$23, $08, $02, $F7, 	$15, $85, $1D, $8A
(2)  602/   28309 : (MACRO)             	smpsVcAlgorithm     $04
(2)  602/   28309 : =$4                 vcAlgorithm set $04
(2)  603/   28309 : (MACRO)             	smpsVcFeedback      $07
(2)  603/   28309 : =$7                 vcFeedback set $07
(2)  604/   28309 : (MACRO)             	smpsVcUnusedBits    $00
(2)  604/   28309 : =$0                 vcUnusedBits set $00
(2)  604/   28309 : =$0                                 set vcD1R1Unk,0
(2)  604/   28309 : =$0                                 set vcD1R2Unk,0
(2)  604/   28309 : =$0                                 set vcD1R3Unk,0
(2)  604/   28309 : =$0                                 set vcD1R4Unk,0
(2)  605/   28309 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  605/   28309 : =$3                         set vcDT1,$03
(2)  605/   28309 : =$3                         set vcDT2,$03
(2)  605/   28309 : =$7                         set vcDT3,$07
(2)  605/   28309 : =$7                         set vcDT4,$07
(2)  606/   28309 : (MACRO)             	smpsVcCoarseFreq    $04, $0F, $02, $01
(2)  606/   28309 : =$4                         set vcCF1,$04
(2)  606/   28309 : =$F                         set vcCF2,$0F
(2)  606/   28309 : =$2                         set vcCF3,$02
(2)  606/   28309 : =$1                         set vcCF4,$01
(2)  607/   28309 : (MACRO)             	smpsVcRateScale     $00, $02, $01, $02
(2)  607/   28309 : =$0                         set vcRS1,$00
(2)  607/   28309 : =$2                         set vcRS2,$02
(2)  607/   28309 : =$1                         set vcRS3,$01
(2)  607/   28309 : =$2                         set vcRS4,$02
(2)  608/   28309 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $0D
(2)  608/   28309 : =$1F                        set vcAR1,$1F
(2)  608/   28309 : =$1F                        set vcAR2,$1F
(2)  608/   28309 : =$12                        set vcAR3,$12
(2)  608/   28309 : =$D                         set vcAR4,$0D
(2)  609/   28309 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  609/   28309 : =$0                                 set vcAM1,$00<<5
(2)  609/   28309 : =$0                                 set vcAM2,$00<<5
(2)  609/   28309 : =$0                                 set vcAM3,$00<<5
(2)  609/   28309 : =$0                                 set vcAM4,$00<<5
(2)  610/   28309 : (MACRO)             	smpsVcDecayRate1    $0D, $00, $00, $09
(2)  610/   28309 : =$D                         set vcD1R1,$0D
(2)  610/   28309 : =$0                         set vcD1R2,$00
(2)  610/   28309 : =$0                         set vcD1R3,$00
(2)  610/   28309 : =$9                         set vcD1R4,$09
(2)  611/   28309 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  611/   28309 : =$0                         set vcD2R1,$00
(2)  611/   28309 : =$0                         set vcD2R2,$00
(2)  611/   28309 : =$0                         set vcD2R3,$00
(2)  611/   28309 : =$0                         set vcD2R4,$00
(2)  612/   28309 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $00, $02
(2)  612/   28309 : =$F                         set vcDL1,$0F
(2)  612/   28309 : =$0                         set vcDL2,$00
(2)  612/   28309 : =$0                         set vcDL3,$00
(2)  612/   28309 : =$2                         set vcDL4,$02
(2)  613/   28309 : (MACRO)             	smpsVcReleaseRate   $07, $02, $08, $03
(2)  613/   28309 : =$7                         set vcRR1,$07
(2)  613/   28309 : =$2                         set vcRR2,$02
(2)  613/   28309 : =$8                         set vcRR3,$08
(2)  613/   28309 : =$3                         set vcRR4,$03
(2)  614/   28309 : (MACRO)             	smpsVcTotalLevel    $0A, $1D, $05, $15
(2)  614/   28309 : =$A                         set vcTL1,$0A
(2)  614/   28309 : =$1D                        set vcTL2,$1D
(2)  614/   28309 : =$5                         set vcTL3,$05
(2)  614/   28309 : =$15                        set vcTL4,$15
(2)  614/   28309 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  614/   2830A :                     ;   0     1     2     3     4     5     6     7
(2)  614/   2830A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  614/   2830A : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  614/   2830A : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  614/   2830A : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  614/   2830A : =$80                                set vcTLMask1,$80
(2)  614/   2830A :                     
(2)  614/   2830A :                     
(2)  614/   2830A : 7172 3F34                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  614/   2830E : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  614/   28312 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  614/   28316 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  614/   2831A : 2308 02F7                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  614/   2831E : 1585 1D8A                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  615/   28322 :                     
(2)  616/   28322 :                     ; Nice Synth like lead
(2)  617/   28322 :                     ;	Voice $20
(2)  618/   28322 :                     ;	$3E
(2)  619/   28322 :                     ;	$77, $71, $32, $31, 	$1F, $1F, $1F, $1F, 	$0D, $06, $00, $00
(2)  620/   28322 :                     ;	$08, $06, $00, $00, 	$15, $0A, $0A, $0A, 	$1B, $8F, $8F, $8F
(2)  621/   28322 : (MACRO)             	smpsVcAlgorithm     $06
(2)  621/   28322 : =$6                 vcAlgorithm set $06
(2)  622/   28322 : (MACRO)             	smpsVcFeedback      $07
(2)  622/   28322 : =$7                 vcFeedback set $07
(2)  623/   28322 : (MACRO)             	smpsVcUnusedBits    $00
(2)  623/   28322 : =$0                 vcUnusedBits set $00
(2)  623/   28322 : =$0                                 set vcD1R1Unk,0
(2)  623/   28322 : =$0                                 set vcD1R2Unk,0
(2)  623/   28322 : =$0                                 set vcD1R3Unk,0
(2)  623/   28322 : =$0                                 set vcD1R4Unk,0
(2)  624/   28322 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  624/   28322 : =$3                         set vcDT1,$03
(2)  624/   28322 : =$3                         set vcDT2,$03
(2)  624/   28322 : =$7                         set vcDT3,$07
(2)  624/   28322 : =$7                         set vcDT4,$07
(2)  625/   28322 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $07
(2)  625/   28322 : =$1                         set vcCF1,$01
(2)  625/   28322 : =$2                         set vcCF2,$02
(2)  625/   28322 : =$1                         set vcCF3,$01
(2)  625/   28322 : =$7                         set vcCF4,$07
(2)  626/   28322 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  626/   28322 : =$0                         set vcRS1,$00
(2)  626/   28322 : =$0                         set vcRS2,$00
(2)  626/   28322 : =$0                         set vcRS3,$00
(2)  626/   28322 : =$0                         set vcRS4,$00
(2)  627/   28322 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  627/   28322 : =$1F                        set vcAR1,$1F
(2)  627/   28322 : =$1F                        set vcAR2,$1F
(2)  627/   28322 : =$1F                        set vcAR3,$1F
(2)  627/   28322 : =$1F                        set vcAR4,$1F
(2)  628/   28322 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  628/   28322 : =$0                                 set vcAM1,$00<<5
(2)  628/   28322 : =$0                                 set vcAM2,$00<<5
(2)  628/   28322 : =$0                                 set vcAM3,$00<<5
(2)  628/   28322 : =$0                                 set vcAM4,$00<<5
(2)  629/   28322 : (MACRO)             	smpsVcDecayRate1    $00, $00, $06, $0D
(2)  629/   28322 : =$0                         set vcD1R1,$00
(2)  629/   28322 : =$0                         set vcD1R2,$00
(2)  629/   28322 : =$6                         set vcD1R3,$06
(2)  629/   28322 : =$D                         set vcD1R4,$0D
(2)  630/   28322 : (MACRO)             	smpsVcDecayRate2    $00, $00, $06, $08
(2)  630/   28322 : =$0                         set vcD2R1,$00
(2)  630/   28322 : =$0                         set vcD2R2,$00
(2)  630/   28322 : =$6                         set vcD2R3,$06
(2)  630/   28322 : =$8                         set vcD2R4,$08
(2)  631/   28322 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $01
(2)  631/   28322 : =$0                         set vcDL1,$00
(2)  631/   28322 : =$0                         set vcDL2,$00
(2)  631/   28322 : =$0                         set vcDL3,$00
(2)  631/   28322 : =$1                         set vcDL4,$01
(2)  632/   28322 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $05
(2)  632/   28322 : =$A                         set vcRR1,$0A
(2)  632/   28322 : =$A                         set vcRR2,$0A
(2)  632/   28322 : =$A                         set vcRR3,$0A
(2)  632/   28322 : =$5                         set vcRR4,$05
(2)  633/   28322 : (MACRO)             	smpsVcTotalLevel    $0F, $0F, $0F, $1B
(2)  633/   28322 : =$F                         set vcTL1,$0F
(2)  633/   28322 : =$F                         set vcTL2,$0F
(2)  633/   28322 : =$F                         set vcTL3,$0F
(2)  633/   28322 : =$1B                        set vcTL4,$1B
(2)  633/   28322 : 3E                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  633/   28323 :                     ;   0     1     2     3     4     5     6     7
(2)  633/   28323 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  633/   28323 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  633/   28323 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  633/   28323 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  633/   28323 : =$80                                set vcTLMask1,$80
(2)  633/   28323 :                     
(2)  633/   28323 :                     
(2)  633/   28323 : 7771 3231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  633/   28327 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  633/   2832B : 0D06 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  633/   2832F : 0806 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  633/   28333 : 150A 0A0A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  633/   28337 : 1B8F 8F8F                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  634/   2833B :                     
(2)  635/   2833B :                     ; Rock Organ
(2)  636/   2833B :                     ;	Voice $21
(2)  637/   2833B :                     ;	$07
(2)  638/   2833B :                     ;	$34, $74, $32, $71, 	$1F, $1F, $1F, $1F, 	$0A, $0A, $05, $03
(2)  639/   2833B :                     ;	$00, $00, $00, $00, 	$3F, $3F, $2F, $2F, 	$8A, $8A, $8A, $8A
(2)  640/   2833B : (MACRO)             	smpsVcAlgorithm     $07
(2)  640/   2833B : =$7                 vcAlgorithm set $07
(2)  641/   2833B : (MACRO)             	smpsVcFeedback      $00
(2)  641/   2833B : =$0                 vcFeedback set $00
(2)  642/   2833B : (MACRO)             	smpsVcUnusedBits    $00
(2)  642/   2833B : =$0                 vcUnusedBits set $00
(2)  642/   2833B : =$0                                 set vcD1R1Unk,0
(2)  642/   2833B : =$0                                 set vcD1R2Unk,0
(2)  642/   2833B : =$0                                 set vcD1R3Unk,0
(2)  642/   2833B : =$0                                 set vcD1R4Unk,0
(2)  643/   2833B : (MACRO)             	smpsVcDetune        $07, $03, $07, $03
(2)  643/   2833B : =$7                         set vcDT1,$07
(2)  643/   2833B : =$3                         set vcDT2,$03
(2)  643/   2833B : =$7                         set vcDT3,$07
(2)  643/   2833B : =$3                         set vcDT4,$03
(2)  644/   2833B : (MACRO)             	smpsVcCoarseFreq    $01, $02, $04, $04
(2)  644/   2833B : =$1                         set vcCF1,$01
(2)  644/   2833B : =$2                         set vcCF2,$02
(2)  644/   2833B : =$4                         set vcCF3,$04
(2)  644/   2833B : =$4                         set vcCF4,$04
(2)  645/   2833B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  645/   2833B : =$0                         set vcRS1,$00
(2)  645/   2833B : =$0                         set vcRS2,$00
(2)  645/   2833B : =$0                         set vcRS3,$00
(2)  645/   2833B : =$0                         set vcRS4,$00
(2)  646/   2833B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  646/   2833B : =$1F                        set vcAR1,$1F
(2)  646/   2833B : =$1F                        set vcAR2,$1F
(2)  646/   2833B : =$1F                        set vcAR3,$1F
(2)  646/   2833B : =$1F                        set vcAR4,$1F
(2)  647/   2833B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  647/   2833B : =$0                                 set vcAM1,$00<<5
(2)  647/   2833B : =$0                                 set vcAM2,$00<<5
(2)  647/   2833B : =$0                                 set vcAM3,$00<<5
(2)  647/   2833B : =$0                                 set vcAM4,$00<<5
(2)  648/   2833B : (MACRO)             	smpsVcDecayRate1    $03, $05, $0A, $0A
(2)  648/   2833B : =$3                         set vcD1R1,$03
(2)  648/   2833B : =$5                         set vcD1R2,$05
(2)  648/   2833B : =$A                         set vcD1R3,$0A
(2)  648/   2833B : =$A                         set vcD1R4,$0A
(2)  649/   2833B : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  649/   2833B : =$0                         set vcD2R1,$00
(2)  649/   2833B : =$0                         set vcD2R2,$00
(2)  649/   2833B : =$0                         set vcD2R3,$00
(2)  649/   2833B : =$0                         set vcD2R4,$00
(2)  650/   2833B : (MACRO)             	smpsVcDecayLevel    $02, $02, $03, $03
(2)  650/   2833B : =$2                         set vcDL1,$02
(2)  650/   2833B : =$2                         set vcDL2,$02
(2)  650/   2833B : =$3                         set vcDL3,$03
(2)  650/   2833B : =$3                         set vcDL4,$03
(2)  651/   2833B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  651/   2833B : =$F                         set vcRR1,$0F
(2)  651/   2833B : =$F                         set vcRR2,$0F
(2)  651/   2833B : =$F                         set vcRR3,$0F
(2)  651/   2833B : =$F                         set vcRR4,$0F
(2)  652/   2833B : (MACRO)             	smpsVcTotalLevel    $0A, $0A, $0A, $0A
(2)  652/   2833B : =$A                         set vcTL1,$0A
(2)  652/   2833B : =$A                         set vcTL2,$0A
(2)  652/   2833B : =$A                         set vcTL3,$0A
(2)  652/   2833B : =$A                         set vcTL4,$0A
(2)  652/   2833B : 07                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  652/   2833C :                     ;   0     1     2     3     4     5     6     7
(2)  652/   2833C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  652/   2833C : =$80                                set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  652/   2833C : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  652/   2833C : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  652/   2833C : =$80                                set vcTLMask1,$80
(2)  652/   2833C :                     
(2)  652/   2833C :                     
(2)  652/   2833C : 3474 3271                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  652/   28340 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  652/   28344 : 0A0A 0503                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  652/   28348 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  652/   2834C : 3F3F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  652/   28350 : 8A8A 8A8A                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  653/   28354 :                     
(2)  654/   28354 :                     ; Strike like Slap Bass
(2)  655/   28354 :                     ;	Voice $22
(2)  656/   28354 :                     ;	$20
(2)  657/   28354 :                     ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
(2)  658/   28354 :                     ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
(2)  659/   28354 : (MACRO)             	smpsVcAlgorithm     $00
(2)  659/   28354 : =$0                 vcAlgorithm set $00
(2)  660/   28354 : (MACRO)             	smpsVcFeedback      $04
(2)  660/   28354 : =$4                 vcFeedback set $04
(2)  661/   28354 : (MACRO)             	smpsVcUnusedBits    $00
(2)  661/   28354 : =$0                 vcUnusedBits set $00
(2)  661/   28354 : =$0                                 set vcD1R1Unk,0
(2)  661/   28354 : =$0                                 set vcD1R2Unk,0
(2)  661/   28354 : =$0                                 set vcD1R3Unk,0
(2)  661/   28354 : =$0                                 set vcD1R4Unk,0
(2)  662/   28354 : (MACRO)             	smpsVcDetune        $03, $03, $03, $03
(2)  662/   28354 : =$3                         set vcDT1,$03
(2)  662/   28354 : =$3                         set vcDT2,$03
(2)  662/   28354 : =$3                         set vcDT3,$03
(2)  662/   28354 : =$3                         set vcDT4,$03
(2)  663/   28354 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $05, $06
(2)  663/   28354 : =$1                         set vcCF1,$01
(2)  663/   28354 : =$0                         set vcCF2,$00
(2)  663/   28354 : =$5                         set vcCF3,$05
(2)  663/   28354 : =$6                         set vcCF4,$06
(2)  664/   28354 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(2)  664/   28354 : =$2                         set vcRS1,$02
(2)  664/   28354 : =$2                         set vcRS2,$02
(2)  664/   28354 : =$3                         set vcRS3,$03
(2)  664/   28354 : =$3                         set vcRS4,$03
(2)  665/   28354 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  665/   28354 : =$1F                        set vcAR1,$1F
(2)  665/   28354 : =$1F                        set vcAR2,$1F
(2)  665/   28354 : =$1F                        set vcAR3,$1F
(2)  665/   28354 : =$1F                        set vcAR4,$1F
(2)  666/   28354 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  666/   28354 : =$0                                 set vcAM1,$00<<5
(2)  666/   28354 : =$0                                 set vcAM2,$00<<5
(2)  666/   28354 : =$0                                 set vcAM3,$00<<5
(2)  666/   28354 : =$0                                 set vcAM4,$00<<5
(2)  667/   28354 : (MACRO)             	smpsVcDecayRate1    $06, $09, $06, $07
(2)  667/   28354 : =$6                         set vcD1R1,$06
(2)  667/   28354 : =$9                         set vcD1R2,$09
(2)  667/   28354 : =$6                         set vcD1R3,$06
(2)  667/   28354 : =$7                         set vcD1R4,$07
(2)  668/   28354 : (MACRO)             	smpsVcDecayRate2    $08, $06, $06, $07
(2)  668/   28354 : =$8                         set vcD2R1,$08
(2)  668/   28354 : =$6                         set vcD2R2,$06
(2)  668/   28354 : =$6                         set vcD2R3,$06
(2)  668/   28354 : =$7                         set vcD2R4,$07
(2)  669/   28354 : (MACRO)             	smpsVcDecayLevel    $0F, $01, $01, $02
(2)  669/   28354 : =$F                         set vcDL1,$0F
(2)  669/   28354 : =$1                         set vcDL2,$01
(2)  669/   28354 : =$1                         set vcDL3,$01
(2)  669/   28354 : =$2                         set vcDL4,$02
(2)  670/   28354 : (MACRO)             	smpsVcReleaseRate   $08, $00, $00, $00
(2)  670/   28354 : =$8                         set vcRR1,$08
(2)  670/   28354 : =$0                         set vcRR2,$00
(2)  670/   28354 : =$0                         set vcRR3,$00
(2)  670/   28354 : =$0                         set vcRR4,$00
(2)  671/   28354 : (MACRO)             	smpsVcTotalLevel    $00, $13, $37, $19
(2)  671/   28354 : =$0                         set vcTL1,$00
(2)  671/   28354 : =$13                        set vcTL2,$13
(2)  671/   28354 : =$37                        set vcTL3,$37
(2)  671/   28354 : =$19                        set vcTL4,$19
(2)  671/   28354 : 20                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  671/   28355 :                     ;   0     1     2     3     4     5     6     7
(2)  671/   28355 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  671/   28355 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  671/   28355 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  671/   28355 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  671/   28355 : =$80                                set vcTLMask1,$80
(2)  671/   28355 :                     
(2)  671/   28355 :                     
(2)  671/   28355 : 3635 3031                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  671/   28359 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  671/   2835D : 0706 0906                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  671/   28361 : 0706 0608                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  671/   28365 : 2010 10F8                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  671/   28369 : 1937 1380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  672/   2836D :                     
(2)  673/   2836D :                     
(1) 4999/   2836D :                     
(1) 5000/   2836D :                     MusData_Default:			include	"Sound/Flamedriver/lean.asm"
(2)    1/   2836D :                     s3p21_Header:
(2)    2/   2836D : (MACRO)             	smpsHeaderStartSong 3
(2)    2/   2836D :                     
(2)    2/   2836D : =$3                 SourceDriver set 3
(2)    2/   2836D :                     
(2)    2/   2836D : =$0                                 set SourceSMPS2ASM,0
(2)    2/   2836D :                     
(2)    2/   2836D : =$2836D             songStart set *
(2)    2/   2836D :                     
(2)    2/   2836D :                     
(2)    3/   2836D : (MACRO)             	smpsHeaderVoice     s3p21_Voices
(2)    3/   2836D : 6091                                dc.w    z80_ptr(S3P21_VOICES)
(2)    4/   2836F : (MACRO)             	smpsHeaderChan      $06, $03
(2)    4/   2836F : 0603                        dc.b    $06,$03
(2)    5/   28371 : (MACRO)             	smpsHeaderTempo     $01, $04
(2)    5/   28371 : 01                          dc.b    $01
(2)    5/   28372 :  (MACRO-2)                  convertMainTempoMod $04
(2)    5/   28372 : 04                                  dc.b    $04
(2)    6/   28373 :                     
(2)    7/   28373 : (MACRO)             	smpsHeaderDAC       Snd_SSZ_DAC
(2)    7/   28373 :  (MACRO-2)                  CheckedChannelPointer SND_SSZ_DAC
(2)    7/   28373 : 9D83                                dc.w    z80_ptr(SND_SSZ_DAC)
(2)    7/   28375 : 0000                                dc.w    $00
(2)    8/   28377 : (MACRO)             	smpsHeaderFM        s3p21_FM1,	$0C, $12
(2)    8/   28377 :  (MACRO-2)                  CheckedChannelPointer S3P21_FM1
(2)    8/   28377 : 0D84                                dc.w    z80_ptr(S3P21_FM1)
(2)    8/   28379 : 0C12                        dc.b    $0C,$12
(2)    9/   2837B : (MACRO)             	smpsHeaderFM        s3p21_FM2,	$18, $17
(2)    9/   2837B :  (MACRO-2)                  CheckedChannelPointer S3P21_FM2
(2)    9/   2837B : 3D85                                dc.w    z80_ptr(S3P21_FM2)
(2)    9/   2837D : 1817                        dc.b    $18,$17
(2)   10/   2837F : (MACRO)             	smpsHeaderFM        s3p21_FM3,	$0C, $12
(2)   10/   2837F :  (MACRO-2)                  CheckedChannelPointer S3P21_FM3
(2)   10/   2837F : FF83                                dc.w    z80_ptr(S3P21_FM3)
(2)   10/   28381 : 0C12                        dc.b    $0C,$12
(2)   11/   28383 : (MACRO)             	smpsHeaderFM        s3p21_FM4,	$00, $14
(2)   11/   28383 :  (MACRO-2)                  CheckedChannelPointer S3P21_FM4
(2)   11/   28383 : AC8F                                dc.w    z80_ptr(S3P21_FM4)
(2)   11/   28385 : 0014                        dc.b    $00,$14
(2)   12/   28387 : (MACRO)             	smpsHeaderFM        s3p21_FM5,	$00, $14
(2)   12/   28387 :  (MACRO-2)                  CheckedChannelPointer S3P21_FM5
(2)   12/   28387 : 3191                                dc.w    z80_ptr(S3P21_FM5)
(2)   12/   28389 : 0014                        dc.b    $00,$14
(2)   13/   2838B : (MACRO)             	smpsHeaderPSG       s3p21_PSG1,	$00, $06, $00, sTone_0C
(2)   13/   2838B :  (MACRO-2)                  CheckedChannelPointer S3P21_PSG1
(2)   13/   2838B : 2789                                dc.w    z80_ptr(S3P21_PSG1)
(2)   13/   2838D :  (MACRO-2)                  PSGPitchConvert $00
(2)   13/   2838D : 00                                  dc.b    $00
(2)   13/   2838E : 0600 0C                     dc.b    $06,$00,STONE_0C
(2)   14/   28391 : (MACRO)             	smpsHeaderPSG       s3p21_PSG2,	$00, $06, $00, sTone_0C
(2)   14/   28391 :  (MACRO-2)                  CheckedChannelPointer S3P21_PSG2
(2)   14/   28391 : 3089                                dc.w    z80_ptr(S3P21_PSG2)
(2)   14/   28393 :  (MACRO-2)                  PSGPitchConvert $00
(2)   14/   28393 : 00                                  dc.b    $00
(2)   14/   28394 : 0600 0C                     dc.b    $06,$00,STONE_0C
(2)   15/   28397 : (MACRO)             	smpsHeaderPSG       s3p21_PSG3,	$00, $02, $00, sTone_0C
(2)   15/   28397 :  (MACRO-2)                  CheckedChannelPointer S3P21_PSG3
(2)   15/   28397 : 4391                                dc.w    z80_ptr(S3P21_PSG3)
(2)   15/   28399 :  (MACRO-2)                  PSGPitchConvert $00
(2)   15/   28399 : 00                                  dc.b    $00
(2)   15/   2839A : 0200 0C                     dc.b    $02,$00,STONE_0C
(2)   16/   2839D :                     
(2)   17/   2839D :                     ; DAC Data
(2)   18/   2839D :                     Snd_SSZ_DAC:
(2)   19/   2839D : (MACRO)             	smpsPan             panCenter, $00
(2)   19/   2839D : =$0                 panNone set $00
(2)   19/   2839D : =$40                panRight set $40
(2)   19/   2839D : =$80                panLeft set $80
(2)   19/   2839D : =$C0                panCentre set $C0
(2)   19/   2839D : =$C0                panCenter set $C0 ; silly Americans :U
(2)   19/   2839D : E0C0                        dc.b $E0,PANCENTER+$00
(2)   20/   2839F : 8060 8080 8017      	dc.b	nRst, $60, nRst, nRst, nRst, $17, nRst, $0C, dSnareS3, nRst, dSnareS3, nRst
                    800C 8180 8180    
(2)   21/   283AB : 8606 86             	dc.b	dKickS3, $06, dKickS3
(2)   22/   283AE :                     
(2)   23/   283AE :                     Snd_SSZ_Loop00:
(2)   24/   283AE : (MACRO)             	smpsPan             panCenter, $00
(2)   24/   283AE : =$0                 panNone set $00
(2)   24/   283AE : =$40                panRight set $40
(2)   24/   283AE : =$80                panLeft set $80
(2)   24/   283AE : =$C0                panCentre set $C0
(2)   24/   283AE : =$C0                panCenter set $C0 ; silly Americans :U
(2)   24/   283AE : E0C0                        dc.b $E0,PANCENTER+$00
(2)   25/   283B0 : 8605 8686 0E80      	dc.b	dKickS3, $05, dKickS3, dKickS3, $0E, nRst, $0C, dMuffledSnare, $05, dMuffledSnare, dMuffledSnare, $0E
                    0C87 0587 870E    
(2)   26/   283BC : 870C 8086 0686      	dc.b	dMuffledSnare, $0C, nRst, dKickS3, $06, dKickS3, dKickS3, $0C, dKickS3, nRst, dMuffledSnare, $05
                    860C 8680 8705    
(2)   27/   283C8 : 8787 0E87 0C80      	dc.b	dMuffledSnare, dMuffledSnare, $0E, dMuffledSnare, $0C, nRst, dKickS3, dKickS3, $0C, dKickS3, nRst, dMuffledSnare
                    8686 0C86 8087    
(2)   28/   283D4 : 0587 870E 870C      	dc.b	$05, dMuffledSnare, dMuffledSnare, $0E, dMuffledSnare, $0C, nRst, dKickS3, $06, dKickS3, dKickS3, $0C
                    8086 0686 860C    
(2)   29/   283E0 : 8680 8705 8787 08   	dc.b	dKickS3, nRst, dMuffledSnare, $05, dMuffledSnare, dMuffledSnare, $08
(2)   30/   283E7 : (MACRO)             	smpsPan             panLeft, $00
(2)   30/   283E7 : =$0                 panNone set $00
(2)   30/   283E7 : =$40                panRight set $40
(2)   30/   283E7 : =$80                panLeft set $80
(2)   30/   283E7 : =$C0                panCentre set $C0
(2)   30/   283E7 : =$C0                panCenter set $C0 ; silly Americans :U
(2)   30/   283E7 : E080                        dc.b $E0,PANLEFT+$00
(2)   31/   283E9 : 9106 9191           	dc.b	dElectricMidTom, $06, dElectricMidTom, dElectricMidTom
(2)   32/   283ED : (MACRO)             	smpsPan             panCenter, $00
(2)   32/   283ED : =$0                 panNone set $00
(2)   32/   283ED : =$40                panRight set $40
(2)   32/   283ED : =$80                panLeft set $80
(2)   32/   283ED : =$C0                panCentre set $C0
(2)   32/   283ED : =$C0                panCenter set $C0 ; silly Americans :U
(2)   32/   283ED : E0C0                        dc.b $E0,PANCENTER+$00
(2)   33/   283EF : 9292                	dc.b	dElectricLowTom, dElectricLowTom
(2)   34/   283F1 : (MACRO)             	smpsPan             panRight, $00
(2)   34/   283F1 : =$0                 panNone set $00
(2)   34/   283F1 : =$40                panRight set $40
(2)   34/   283F1 : =$80                panLeft set $80
(2)   34/   283F1 : =$C0                panCentre set $C0
(2)   34/   283F1 : =$C0                panCenter set $C0 ; silly Americans :U
(2)   34/   283F1 : E040                        dc.b $E0,PANRIGHT+$00
(2)   35/   283F3 : 9380                	dc.b	dElectricFloorTom, nRst
(2)   36/   283F5 : (MACRO)             	smpsLoop            $00, $08, Snd_SSZ_Loop00
(2)   36/   283F5 : F7                          dc.b    $F7
(2)   36/   283F6 : 0008                        dc.b    $00,$08
(2)   36/   283F8 : AE83                                dc.w    z80_ptr(SND_SSZ_LOOP00)
(2)   37/   283FA : 8001                	dc.b	nRst, $01
(2)   38/   283FC : (MACRO)             	smpsJump            Snd_SSZ_DAC
(2)   38/   283FC : F6                          dc.b    $F6
(2)   38/   283FD : 9D83                                dc.w    z80_ptr(SND_SSZ_DAC)
(2)   39/   283FF :                     
(2)   40/   283FF :                     ; FM3 Data
(2)   41/   283FF :                     s3p21_FM3:
(2)   42/   283FF : (MACRO)             	smpsSetvoice        $15
(2)   42/   283FF :  (MACRO-2)                  smpsFMvoice $15
(2)   42/   283FF : EF15                                dc.b    $EF,$15
(2)   43/   28401 : (MACRO)             	smpsDetune          $04
(2)   43/   28401 : E104                        dc.b    $E1,$04
(2)   44/   28403 : (MACRO)             	smpsModSet          $0F, $01, $FD, $07
(2)   44/   28403 : F0                          dc.b    $F0
(2)   44/   28404 : 0F01 FD07                           dc.b    $0F,$01,$FD,$07
(2)   44/   28408 :                             ;dc.b   $01,$FD,$07
(2)   45/   28408 : (MACRO)             	smpsPan             panLeft, $00
(2)   45/   28408 : =$0                 panNone set $00
(2)   45/   28408 : =$40                panRight set $40
(2)   45/   28408 : =$80                panLeft set $80
(2)   45/   28408 : =$C0                panCentre set $C0
(2)   45/   28408 : =$C0                panCenter set $C0 ; silly Americans :U
(2)   45/   28408 : E080                        dc.b $E0,PANLEFT+$00
(2)   46/   2840A : (MACRO)             	smpsJump            s3p21_Jump02
(2)   46/   2840A : F6                          dc.b    $F6
(2)   46/   2840B : 1884                                dc.w    z80_ptr(S3P21_JUMP02)
(2)   47/   2840D :                     
(2)   48/   2840D :                     ; FM1 Data
(2)   49/   2840D :                     s3p21_FM1:
(2)   50/   2840D : (MACRO)             	smpsSetvoice        $15
(2)   50/   2840D :  (MACRO-2)                  smpsFMvoice $15
(2)   50/   2840D : EF15                                dc.b    $EF,$15
(2)   51/   2840F : (MACRO)             	smpsDetune          $FC
(2)   51/   2840F : E1FC                        dc.b    $E1,$FC
(2)   52/   28411 : (MACRO)             	smpsModSet          $0F, $01, $00, $07
(2)   52/   28411 : F0                          dc.b    $F0
(2)   52/   28412 : 0F01 0007                           dc.b    $0F,$01,$00,$07
(2)   52/   28416 :                             ;dc.b   $01,$00,$07
(2)   53/   28416 : (MACRO)             	smpsPan             panCenter, $00
(2)   53/   28416 : =$0                 panNone set $00
(2)   53/   28416 : =$40                panRight set $40
(2)   53/   28416 : =$80                panLeft set $80
(2)   53/   28416 : =$C0                panCentre set $C0
(2)   53/   28416 : =$C0                panCenter set $C0 ; silly Americans :U
(2)   53/   28416 : E0C0                        dc.b $E0,PANCENTER+$00
(2)   54/   28418 :                     
(2)   55/   28418 :                     s3p21_Jump02:
(2)   56/   28418 : 9404 8008 9406      	dc.b	nG1, $04, nRst, $08, nG1, $06, nRst, nG1, $24, nG2, nG1, $1C
                    8094 24A0 941C    
(2)   57/   28424 : 8008 940E 800A      	dc.b	nRst, $08, nG1, $0E, nRst, $0A, nC2, $18, nB1, $0A, nRst, $02
                    9918 980A 8002    
(2)   58/   28430 : 9404 8008 9406      	dc.b	nG1, $04, nRst, $08, nG1, $06, nRst, nG1, $24, nG2, nG1, $1C
                    8094 24A0 941C    
(2)   59/   2843C : 8008 940A 800E      	dc.b	nRst, $08, nG1, $0A, nRst, $0E, nG1, $0A, nRst, $1A, nC2, $06
                    940A 801A 9906    
(2)   60/   28448 : 8099 5280 02A5      	dc.b	nRst, nC2, $52, nRst, $02, nC3, $22, nRst, $02, nC2, $1E, nRst
                    2280 0299 1E80    
(2)   61/   28454 : 0699 1480 0497      	dc.b	$06, nC2, $14, nRst, $04, nBb1, $08, nRst, $04, nBb1, $52, nRst
                    0880 0497 5280    
(2)   62/   28460 : 02A3 2497 A316      	dc.b	$02, nBb2, $24, nBb1, nBb2, $16, nRst, $02, nA1, $06, nRst, nA1
                    8002 9606 8096    
(2)   63/   2846C : 48A0 06A1 0480      	dc.b	$48, nG2, $06, nAb2, $04, nRst, $02, nA2, $22, nRst, $02, nA1
                    02A2 2280 0296    
(2)   64/   28478 : 24A2 1895 0880      	dc.b	$24, nA2, $18, nAb1, $08, nRst, $04, nAb1, $52, nRst, $02, nAb2
                    0495 5280 02A1    
(2)   65/   28484 : 2495 A116 8002      	dc.b	$24, nAb1, nAb2, $16, nRst, $02, nC2, $08, nRst, $04, nC2, $52
                    9908 8004 9952    
(2)   66/   28490 : 8002 A524 99A5      	dc.b	nRst, $02, nC3, $24, nC2, nC3, $18, nBb1, $06, nRst, nBb1, $42
                    1897 0680 9742    
(2)   67/   2849C : 8006 A0A2 A322      	dc.b	nRst, $06, nG2, nA2, nBb2, $22, nRst, $02, nA2, $24, nF2, $16
                    8002 A224 9E16    
(2)   68/   284A8 : 8002 9606 8096      	dc.b	nRst, $02, nA1, $06, nRst, nA1, $48, nG2, $06, nAb2, $04, nRst
                    48A0 06A1 0480    
(2)   69/   284B4 : 02A2 2280 0296      	dc.b	$02, nA2, $22, nRst, $02, nA1, $24, nA2, $18, nAb1, $06, nRst
                    24A2 1895 0680    
(2)   70/   284C0 : 954E 8006 9780      	dc.b	nAb1, $4E, nRst, $06, nBb1, nRst, nBb1, $4E, nRst, $06, nG1, $48
                    974E 8006 9448    
(2)   71/   284CC : A006 80A0 4680      	dc.b	nG2, $06, nRst, nG2, $46, nRst, $02, nG1, $18, nG2, $0C, nAb1
                    0294 18A0 0C95    
(2)   72/   284D8 : 4680 02A1 0880      	dc.b	$46, nRst, $02, nAb2, $08, nRst, $04, nAb2, $46, nRst, $02, nAb1
                    04A1 4680 0295    
(2)   73/   284E4 : 0CA1 950A 8002      	dc.b	$0C, nAb2, nAb1, $0A, nRst, $02, nG1, $68, nRst, $04, nG2, $18
                    9468 8004 A018    
(2)   74/   284F0 : 9424 A018 953C      	dc.b	nG1, $24, nG2, $18, nAb1, $3C, nAb2, $22, nRst, $02, nBb1, $3C
                    A122 8002 973C    
(2)   75/   284FC : A324 995A 8006      	dc.b	nBb2, $24, nC2, $5A, nRst, $06, nC3, $24, nC2, nC3, $18, nBb1
                    A524 99A5 1897    
(2)   76/   28508 : 0680 9742 8006      	dc.b	$06, nRst, nBb1, $42, nRst, $06, nG2, nA2, nBb2, $22, nRst, $02
                    A0A2 A322 8002    
(2)   77/   28514 : A224 9E16 8002      	dc.b	nA2, $24, nF2, $16, nRst, $02, nA1, $06, nRst, nA1, $48, nG2
                    9606 8096 48A0    
(2)   78/   28520 : 06A1 0480 02A2      	dc.b	$06, nAb2, $04, nRst, $02, nA2, $22, nRst, $02, nA1, $24, nA2
                    2280 0296 24A2    
(2)   79/   2852C : 1895 0680 954E      	dc.b	$18, nAb1, $06, nRst, nAb1, $4E, nRst, $06, nBb1, nRst, nBb1, $4E
                    8006 9780 974E    
(2)   80/   28538 : 8006                	dc.b	nRst, $06
(2)   81/   2853A : (MACRO)             	smpsJump            s3p21_Jump02
(2)   81/   2853A : F6                          dc.b    $F6
(2)   81/   2853B : 1884                                dc.w    z80_ptr(S3P21_JUMP02)
(2)   82/   2853D :                     
(2)   83/   2853D :                     ; FM2 Data
(2)   84/   2853D :                     s3p21_FM2:
(2)   85/   2853D : (MACRO)             	smpsFMAlterVol      $08
(2)   85/   2853D : E608                                dc.b    $E6,$08
(2)   86/   2853F : (MACRO)             	smpsSetvoice        $08
(2)   86/   2853F :  (MACRO-2)                  smpsFMvoice $08
(2)   86/   2853F : EF08                                dc.b    $EF,$08
(2)   87/   28541 : (MACRO)             	smpsJump            s3p21_Jump01
(2)   87/   28541 : F6                          dc.b    $F6
(2)   87/   28542 : 3789                                dc.w    z80_ptr(S3P21_JUMP01)
(2)   88/   28544 :                     
(2)   89/   28544 :                     s3p21_Jump04:
(2)   90/   28544 : B806 B604 8002      	dc.b	nG4, $06, nF4, $04, nRst, $02, nB3, $06, nC4, $04, nRst, $02
                    B006 B104 8002    
(2)   91/   28550 : B806 B6B0 0480      	dc.b	nG4, $06, nF4, nB3, $04, nRst, $02, nC4, $06, nG4, nF4, $04
                    02B1 06B8 B604    
(2)   92/   2855C : 8002 B006 B104      	dc.b	nRst, $02, nB3, $06, nC4, $04, nRst, $02, nG4, $06, nF4, nB3
                    8002 B806 B6B0    
(2)   93/   28568 : 0480 02B1 06B8      	dc.b	$04, nRst, $02, nC4, $06, nG4, nF4, $04, nRst, $02, nB3, $06
                    B604 8002 B006    
(2)   94/   28574 : B104 8002 B806      	dc.b	nC4, $04, nRst, $02, nG4, $06, nF4, nB3, $04, nRst, $02, nC4
                    B6B0 0480 02B1    
(2)   95/   28580 : 06B8 B604 8002      	dc.b	$06, nG4, nF4, $04, nRst, $02, nB3, $06, nC4, $04, nRst, $02
                    B006 B104 8002    
(2)   96/   2858C : B806 B6B0 0480      	dc.b	nG4, $06, nF4, nB3, $04, nRst, $02, nC4, $06, nG4, nF4, $04
                    02B1 06B8 B604    
(2)   97/   28598 : 8002 B006 B104      	dc.b	nRst, $02, nB3, $06, nC4, $04, nRst, $02, nG4, $06, nF4, nB3
                    8002 B806 B6B0    
(2)   98/   285A4 : 0480 02B1 06B8      	dc.b	$04, nRst, $02, nC4, $06, nG4, nF4, $04, nRst, $02, nB3, $06
                    B604 8002 B006    
(2)   99/   285B0 : B104 8002 B806      	dc.b	nC4, $04, nRst, $02, nG4, $06, nF4, nB3, $04, nRst, $02, nC4
                    B6B0 0480 02B1    
(2)  100/   285BC : 06B8 B604 8002      	dc.b	$06, nG4, nF4, $04, nRst, $02, nB3, $06, nC4, $04, nRst, $02
                    B006 B104 8002    
(2)  101/   285C8 : B806 B6B0 0280      	dc.b	nG4, $06, nF4, nB3, $02, nRst, $16, nB3, $02, nRst, $22, nC5
                    16B0 0280 22BD    
(2)  102/   285D4 : 06B1 0480 02BD      	dc.b	$06, nC4, $04, nRst, $02, nC5, $06, nC4, nC5, nC4, nC5, nC4
                    06B1 BDB1 BDB1    
(2)  103/   285E0 : C904 8002 B104      	dc.b	nC6, $04, nRst, $02, nC4, $04, nRst, $02, nC6, $04, nRst, $02
                    8002 C904 8002    
(2)  104/   285EC : B106 BD04 8002      	dc.b	nC4, $06, nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4
                    B106 BDB1 BDB1    
(2)  105/   285F8 : BD04 8002 B106      	dc.b	nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04
                    BDB1 BDB1 C904    
(2)  106/   28604 : 8002 B106 C9B1      	dc.b	nRst, $02, nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4
                    BDB1 BDB1 BDB1    
(2)  107/   28610 : 0480 02BD 06B1      	dc.b	$04, nRst, $02, nC5, $06, nC4, nC5, nC4, nC5, nC4, nC6, $04
                    BDB1 BDB1 C904    
(2)  108/   2861C : 8002 B104 8002      	dc.b	nRst, $02, nC4, $04, nRst, $02, nC6, $04, nRst, $02, nC4, $06
                    C904 8002 B106    
(2)  109/   28628 : BD04 8002 B106      	dc.b	nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  110/   28634 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  111/   28640 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, $04, nRst
                    BDB1 BDB1 0480    
(2)  112/   2864C : 02BD 06B1 BDB1      	dc.b	$02, nC5, $06, nC4, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  113/   28658 : B104 8002 C904      	dc.b	nC4, $04, nRst, $02, nC6, $04, nRst, $02, nC4, $06, nC5, $04
                    8002 B106 BD04    
(2)  114/   28664 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC5, $04, nRst, $02
                    BDB1 BD04 8002    
(2)  115/   28670 : B106 BDB1 BDB1      	dc.b	nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02, nC4, $06
                    C904 8002 B106    
(2)  116/   2867C : C9B1 BDB1 BDB1      	dc.b	nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, $04, nRst, $02, nC5
                    BDB1 0480 02BD    
(2)  117/   28688 : 06B1 BDB1 BDB1      	dc.b	$06, nC4, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02, nC4, $04
                    C904 8002 B104    
(2)  118/   28694 : 8002 C904 8002      	dc.b	nRst, $02, nC6, $04, nRst, $02, nC4, $06, nC5, $04, nRst, $02
                    B106 BD04 8002    
(2)  119/   286A0 : B106 BDB1 BDB1      	dc.b	nC4, $06, nC5, nC4, nC5, nC4, nC5, $04, nRst, $02, nC4, $06
                    BD04 8002 B106    
(2)  120/   286AC : BDB1 BDB1 C904      	dc.b	nC5, nC4, nC5, nC4, nC6, $04, nRst, $02, nC4, $06, nC6, nC4
                    8002 B106 C9B1    
(2)  121/   286B8 : BDB1 BDB1 BDB1      	dc.b	nC5, nC4, nC5, nC4, nC5, nC4, $04, nRst, $02, nC5, $06, nC4
                    0480 02BD 06B1    
(2)  122/   286C4 : BDB1 BDB1 C904      	dc.b	nC5, nC4, nC5, nC4, nC6, $04, nRst, $02, nC4, $04, nRst, $02
                    8002 B104 8002    
(2)  123/   286D0 : C904 8002 B106      	dc.b	nC6, $04, nRst, $02, nC4, $06, nC5, $04, nRst, $02, nC4, $06
                    BD04 8002 B106    
(2)  124/   286DC : BDB1 BDB1 BD04      	dc.b	nC5, nC4, nC5, nC4, nC5, $04, nRst, $02, nC4, $06, nC5, nC4
                    8002 B106 BDB1    
(2)  125/   286E8 : BDB1 C904 8002      	dc.b	nC5, nC4, nC6, $04, nRst, $02, nC4, $06, nC6, nC4, nC5, nC4
                    B106 C9B1 BDB1    
(2)  126/   286F4 : BDB1 BDB1 0480      	dc.b	nC5, nC4, nC5, nC4, $04, nRst, $02, nC5, $06, nC4, nC5, nC4
                    02BD 06B1 BDB1    
(2)  127/   28700 : BDB1 C904 8002      	dc.b	nC5, nC4, nC6, $04, nRst, $02, nC4, $04, nRst, $02, nC6, $04
                    B104 8002 C904    
(2)  128/   2870C : 8002 B106 BD04      	dc.b	nRst, $02, nC4, $06, nC5, $04, nRst, $02, nC4, $06, nC5, nC4
                    8002 B106 BDB1    
(2)  129/   28718 : BDB1 BD04 8002      	dc.b	nC5, nC4, nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4
                    B106 BDB1 BDB1    
(2)  130/   28724 : C904 8002 B106      	dc.b	nC6, $04, nRst, $02, nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4
                    C9B1 BDB1 BDB1    
(2)  131/   28730 : BDB1 0480 02BD      	dc.b	nC5, nC4, $04, nRst, $02, nC5, $06, nC4, nC5, nC4, nC5, nC4
                    06B1 BDB1 BDB1    
(2)  132/   2873C : C904 8002 B104      	dc.b	nC6, $04, nRst, $02, nC4, $04, nRst, $02, nC6, $04, nRst, $02
                    8002 C904 8002    
(2)  133/   28748 : B106 BD04 8002      	dc.b	nC4, $06, nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4
                    B106 BDB1 BDB1    
(2)  134/   28754 : BD04 8002 B106      	dc.b	nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04
                    BDB1 BDB1 C904    
(2)  135/   28760 : 8002 B106 C9B1      	dc.b	nRst, $02, nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4
                    BDB1 BDB1 BDB1    
(2)  136/   2876C : 0480 02BD 06B1      	dc.b	$04, nRst, $02, nC5, $06, nC4, nC5, nC4, nC5, nC4, nC6, $04
                    BDB1 BDB1 C904    
(2)  137/   28778 : 8002 B104 8002      	dc.b	nRst, $02, nC4, $04, nRst, $02, nC6, $04, nRst, $02, nC4, $06
                    C904 8002 B106    
(2)  138/   28784 : BD04 8002 B106      	dc.b	nC5, $04, nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  139/   28790 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  140/   2879C : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nG5, nG4, nG5, $04
                    BDB1 C4B8 C404    
(2)  141/   287A8 : 8002 B806 C4B8      	dc.b	nRst, $02, nG4, $06, nG5, nG4, nG5, nG4, nG6, $04, nRst, $02
                    C4B8 D004 8002    
(2)  142/   287B4 : B806 D0B8 C4B8      	dc.b	nG4, $06, nG6, nG4, nG5, nG4, nG5, nG4, nG5, nG4, nG5, $04
                    C4B8 C4B8 C404    
(2)  143/   287C0 : 8002 B806 C4B8      	dc.b	nRst, $02, nG4, $06, nG5, nG4, nG5, nG4, nG6, $04, nRst, $02
                    C4B8 D004 8002    
(2)  144/   287CC : B806 D0B8 C4B8      	dc.b	nG4, $06, nG6, nG4, nG5, nG4, nG5, nG4, nAb5, nAb4, nAb5, $04
                    C4B8 C5B9 C504    
(2)  145/   287D8 : 8002 B906 C5B9      	dc.b	nRst, $02, nAb4, $06, nAb5, nAb4, nAb5, nAb4, nAb6, $04, nRst, $02
                    C5B9 D104 8002    
(2)  146/   287E4 : B906 D1B9 C5B9      	dc.b	nAb4, $06, nAb6, nAb4, nAb5, nAb4, nAb5, nAb4, nAb5, nAb4, nAb5, $04
                    C5B9 C5B9 C504    
(2)  147/   287F0 : 8002 B906 C5B9      	dc.b	nRst, $02, nAb4, $06, nAb5, nAb4, nAb5, nAb4, nAb6, $04, nRst, $02
                    C5B9 D104 8002    
(2)  148/   287FC : B906 D1B9 C5B9      	dc.b	nAb4, $06, nAb6, nAb4, nAb5, nAb4, nAb5, nAb4, nG5, nG4, nG5, $04
                    C5B9 C4B8 C404    
(2)  149/   28808 : 8002 B806 C4B8      	dc.b	nRst, $02, nG4, $06, nG5, nG4, nG5, nG4, nG6, $04, nRst, $02
                    C4B8 D004 8002    
(2)  150/   28814 : B806 D0B8 C4B8      	dc.b	nG4, $06, nG6, nG4, nG5, nG4, nG5, nG4, nG5, nG4, nG5, $04
                    C4B8 C4B8 C404    
(2)  151/   28820 : 8002 B806 C4B8      	dc.b	nRst, $02, nG4, $06, nG5, nG4, nG5, nG4, nG6, $04, nRst, $02
                    C4B8 D004 8002    
(2)  152/   2882C : B806 D0B8 C4B8      	dc.b	nG4, $06, nG6, nG4, nG5, nG4, nG5, nG4, nC5, nC4, nC5, $04
                    C4B8 BDB1 BD04    
(2)  153/   28838 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  154/   28844 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  155/   28850 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  156/   2885C : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  157/   28868 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  158/   28874 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  159/   28880 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  160/   2888C : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  161/   28898 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  162/   288A4 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  163/   288B0 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  164/   288BC : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  165/   288C8 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  166/   288D4 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  167/   288E0 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  168/   288EC : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  169/   288F8 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  170/   28904 : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4, nC5, nC4, nC5, $04
                    BDB1 BDB1 BD04    
(2)  171/   28910 : 8002 B106 BDB1      	dc.b	nRst, $02, nC4, $06, nC5, nC4, nC5, nC4, nC6, $04, nRst, $02
                    BDB1 C904 8002    
(2)  172/   2891C : B106 C9B1 BDB1      	dc.b	nC4, $06, nC6, nC4, nC5, nC4, nC5, nC4
                    BDB1             
(2)  173/   28924 : (MACRO)             	smpsJump            s3p21_Jump04
(2)  173/   28924 : F6                          dc.b    $F6
(2)  173/   28925 : 4485                                dc.w    z80_ptr(S3P21_JUMP04)
(2)  174/   28927 :                     
(2)  175/   28927 :                     ; PSG1 Data
(2)  176/   28927 :                     s3p21_PSG1:
(2)  177/   28927 : (MACRO)             	smpsPSGvoice        sTone_02
(2)  177/   28927 : F502                        dc.b    $F5,STONE_02
(2)  178/   28929 : (MACRO)             	smpsDetune          $00
(2)  178/   28929 : E100                        dc.b    $E1,$00
(2)  179/   2892B : 8001                	dc.b	nRst, $01
(2)  180/   2892D : (MACRO)             	smpsJump            s3p21_Jump04
(2)  180/   2892D : F6                          dc.b    $F6
(2)  180/   2892E : 4485                                dc.w    z80_ptr(S3P21_JUMP04)
(2)  181/   28930 :                     
(2)  182/   28930 :                     ; PSG2 Data
(2)  183/   28930 :                     s3p21_PSG2:
(2)  184/   28930 : (MACRO)             	smpsPSGvoice        sTone_02
(2)  184/   28930 : F502                        dc.b    $F5,STONE_02
(2)  185/   28932 : (MACRO)             	smpsDetune          $FF
(2)  185/   28932 : E1FF                        dc.b    $E1,$FF
(2)  186/   28934 : (MACRO)             	smpsJump            s3p21_Jump04
(2)  186/   28934 : F6                          dc.b    $F6
(2)  186/   28935 : 4485                                dc.w    z80_ptr(S3P21_JUMP04)
(2)  187/   28937 :                     
(2)  188/   28937 :                     s3p21_Jump01:
(2)  189/   28937 : B612 B5B1 0CBD      	dc.b	nF4, $12, nE4, nC4, $0C, nC5, $12, nB4, $10, nRst, $02, nG4
                    12BC 1080 02B8    
(2)  190/   28943 : 0CB6 12B5 B10C      	dc.b	$0C, nF4, $12, nE4, nC4, $0C, nC5, $12, nB4, $10, nRst, $02
                    BD12 BC10 8002    
(2)  191/   2894F : B80C B612 B5B1      	dc.b	nG4, $0C, nF4, $12, nE4, nC4, $0C, nC5, $12, nB4, $10, nRst
                    0CBD 12BC 1080    
(2)  192/   2895B : 02B8 0CB6 12B5      	dc.b	$02, nG4, $0C, nF4, $12, nE4, nC4, $0A, nRst, $0E, nC4, $0A
                    B10A 800E B10A    
(2)  193/   28967 : 801A 9904 8002      	dc.b	nRst, $1A, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  194/   28973 : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  195/   2897F : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  196/   2898B : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  197/   28997 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  198/   289A3 : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  199/   289AF : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  200/   289BB : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  201/   289C7 : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  202/   289D3 : 8002 9980 0499      	dc.b	nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  203/   289DF : 0480 029D 0480      	dc.b	$04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst
                    0299 069E 0480    
(2)  204/   289EB : 0299 069D 0480      	dc.b	$02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst
                    0299 069B 0480    
(2)  205/   289F7 : 0299 069D 9904      	dc.b	$02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  206/   28A03 : 9904 8002 9980      	dc.b	nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst
                    0499 069B 0480    
(2)  207/   28A0F : 0299 0480 029D      	dc.b	$02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2
                    0480 0299 069E    
(2)  208/   28A1B : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2
                    0480 0299 069B    
(2)  209/   28A27 : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  210/   28A33 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2
                    9980 0499 069B    
(2)  211/   28A3F : 0480 0299 0480      	dc.b	$04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2
                    029D 0480 0299    
(2)  212/   28A4B : 069E 0480 0299      	dc.b	$06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2
                    069D 0480 0299    
(2)  213/   28A57 : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02
                    069D 9904 8002    
(2)  214/   28A63 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2
                    8002 9980 0499    
(2)  215/   28A6F : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst
                    0480 029D 0480    
(2)  216/   28A7B : 0299 069E 0480      	dc.b	$02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst
                    0299 069D 0480    
(2)  217/   28A87 : 0299 069B 0480      	dc.b	$02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04
                    0299 069D 9904    
(2)  218/   28A93 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  219/   28A9F : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  220/   28AAB : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  221/   28AB7 : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  222/   28AC3 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  223/   28ACF : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  224/   28ADB : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  225/   28AE7 : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  226/   28AF3 : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  227/   28AFF : 8002 9980 0499      	dc.b	nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  228/   28B0B : 0480 029D 0480      	dc.b	$04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst
                    0299 069E 0480    
(2)  229/   28B17 : 0299 069D 0480      	dc.b	$02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst
                    0299 069B 0480    
(2)  230/   28B23 : 0299 069D 9904      	dc.b	$02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  231/   28B2F : 9904 8002 9980      	dc.b	nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst
                    0499 069B 0480    
(2)  232/   28B3B : 0299 0480 029D      	dc.b	$02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2
                    0480 0299 069E    
(2)  233/   28B47 : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2
                    0480 0299 069B    
(2)  234/   28B53 : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  235/   28B5F : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2
                    9980 0499 069B    
(2)  236/   28B6B : 0480 0299 0480      	dc.b	$04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2
                    029D 0480 0299    
(2)  237/   28B77 : 069E 0480 0299      	dc.b	$06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2
                    069D 0480 0299    
(2)  238/   28B83 : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02
                    069D 9904 8002    
(2)  239/   28B8F : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2
                    8002 9980 0499    
(2)  240/   28B9B : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst
                    0480 029D 0480    
(2)  241/   28BA7 : 0299 069E 0480      	dc.b	$02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst
                    0299 069D 0480    
(2)  242/   28BB3 : 0299 069B 0480      	dc.b	$02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04
                    0299 069D 9904    
(2)  243/   28BBF : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  244/   28BCB : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  245/   28BD7 : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  246/   28BE3 : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  247/   28BEF : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  248/   28BFB : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  249/   28C07 : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  250/   28C13 : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  251/   28C1F : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  252/   28C2B : 8002 9980 0499      	dc.b	nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  253/   28C37 : 0480 029D 0480      	dc.b	$04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst
                    0299 069E 0480    
(2)  254/   28C43 : 0299 069D 0480      	dc.b	$02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst
                    0299 069B 0480    
(2)  255/   28C4F : 0299 069D 9904      	dc.b	$02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  256/   28C5B : 9904 8002 9980      	dc.b	nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst
                    0499 069B 0480    
(2)  257/   28C67 : 0299 0480 029D      	dc.b	$02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2
                    0480 0299 069E    
(2)  258/   28C73 : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2
                    0480 0299 069B    
(2)  259/   28C7F : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  260/   28C8B : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2
                    9980 0499 069B    
(2)  261/   28C97 : 0480 0299 0480      	dc.b	$04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2
                    029D 0480 0299    
(2)  262/   28CA3 : 069E 0480 0299      	dc.b	$06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2
                    069D 0480 0299    
(2)  263/   28CAF : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02
                    069D 9904 8002    
(2)  264/   28CBB : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2
                    8002 9980 0499    
(2)  265/   28CC7 : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst
                    0480 029D 0480    
(2)  266/   28CD3 : 0299 069E 0480      	dc.b	$02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst
                    0299 069D 0480    
(2)  267/   28CDF : 0299 069B 0480      	dc.b	$02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04
                    0299 069D 9904    
(2)  268/   28CEB : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  269/   28CF7 : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  270/   28D03 : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  271/   28D0F : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  272/   28D1B : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  273/   28D27 : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  274/   28D33 : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  275/   28D3F : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  276/   28D4B : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  277/   28D57 : 8002 9980 0499      	dc.b	nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  278/   28D63 : 0480 029D 0480      	dc.b	$04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst
                    0299 069E 0480    
(2)  279/   28D6F : 0299 069D 0480      	dc.b	$02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst
                    0299 069B 0480    
(2)  280/   28D7B : 0299 069D 9904      	dc.b	$02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  281/   28D87 : 9904 8002 9980      	dc.b	nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst
                    0499 069B 0480    
(2)  282/   28D93 : 0299 0480 029D      	dc.b	$02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2
                    0480 0299 069E    
(2)  283/   28D9F : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2
                    0480 0299 069B    
(2)  284/   28DAB : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  285/   28DB7 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2
                    9980 0499 069B    
(2)  286/   28DC3 : 0480 0299 0480      	dc.b	$04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2
                    029D 0480 0299    
(2)  287/   28DCF : 069E 0480 0299      	dc.b	$06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2
                    069D 0480 0299    
(2)  288/   28DDB : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02
                    069D 9904 8002    
(2)  289/   28DE7 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2
                    8002 9980 0499    
(2)  290/   28DF3 : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst
                    0480 029D 0480    
(2)  291/   28DFF : 0299 069E 0480      	dc.b	$02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst
                    0299 069D 0480    
(2)  292/   28E0B : 0299 069B 0480      	dc.b	$02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04
                    0299 069D 9904    
(2)  293/   28E17 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  294/   28E23 : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  295/   28E2F : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  296/   28E3B : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  297/   28E47 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  298/   28E53 : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  299/   28E5F : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  300/   28E6B : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  301/   28E77 : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  302/   28E83 : 8002 9980 0499      	dc.b	nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  303/   28E8F : 0480 029D 0480      	dc.b	$04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst
                    0299 069E 0480    
(2)  304/   28E9B : 0299 069D 0480      	dc.b	$02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst
                    0299 069B 0480    
(2)  305/   28EA7 : 0299 069D 9904      	dc.b	$02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  306/   28EB3 : 9904 8002 9980      	dc.b	nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2, $04, nRst
                    0499 069B 0480    
(2)  307/   28EBF : 0299 0480 029D      	dc.b	$02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2, $06, nF2
                    0480 0299 069E    
(2)  308/   28ECB : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2, $06, nD2
                    0480 0299 069B    
(2)  309/   28ED7 : 0480 0299 069D      	dc.b	$04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02, nC2, $04
                    9904 8002 9904    
(2)  310/   28EE3 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2, $06, nD2
                    9980 0499 069B    
(2)  311/   28EEF : 0480 0299 0480      	dc.b	$04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst, $02, nC2
                    029D 0480 0299    
(2)  312/   28EFB : 069E 0480 0299      	dc.b	$06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst, $02, nC2
                    069D 0480 0299    
(2)  313/   28F07 : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04, nRst, $02
                    069D 9904 8002    
(2)  314/   28F13 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst, $04, nC2
                    8002 9980 0499    
(2)  315/   28F1F : 069B 0480 0299      	dc.b	$06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2, $04, nRst
                    0480 029D 0480    
(2)  316/   28F2B : 0299 069E 0480      	dc.b	$02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2, $04, nRst
                    0299 069D 0480    
(2)  317/   28F37 : 0299 069B 0480      	dc.b	$02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2, nC2, $04
                    0299 069D 9904    
(2)  318/   28F43 : 8002 9904 8002      	dc.b	nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, nRst
                    9904 8002 9980    
(2)  319/   28F4F : 0499 069B 0480      	dc.b	$04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst, $02, nE2
                    0299 0480 029D    
(2)  320/   28F5B : 0480 0299 069E      	dc.b	$04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  321/   28F67 : 0480 0299 069B      	dc.b	$04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2, $06, nE2
                    0480 0299 069D    
(2)  322/   28F73 : 9904 8002 9904      	dc.b	nC2, $04, nRst, $02, nC2, $04, nRst, $02, nC2, $04, nRst, $02
                    8002 9904 8002    
(2)  323/   28F7F : 9980 0499 069B      	dc.b	nC2, nRst, $04, nC2, $06, nD2, $04, nRst, $02, nC2, $04, nRst
                    0480 0299 0480    
(2)  324/   28F8B : 029D 0480 0299      	dc.b	$02, nE2, $04, nRst, $02, nC2, $06, nF2, $04, nRst, $02, nC2
                    069E 0480 0299    
(2)  325/   28F97 : 069D 0480 0299      	dc.b	$06, nE2, $04, nRst, $02, nC2, $06, nD2, $04, nRst, $02, nC2
                    069B 0480 0299    
(2)  326/   28FA3 : 069D 9904 8002      	dc.b	$06, nE2, nC2, $04, nRst, $02
(2)  327/   28FA9 : (MACRO)             	smpsJump            s3p21_Jump01
(2)  327/   28FA9 : F6                          dc.b    $F6
(2)  327/   28FAA : 3789                                dc.w    z80_ptr(S3P21_JUMP01)
(2)  328/   28FAC :                     
(2)  329/   28FAC :                     ; FM4 Data
(2)  330/   28FAC :                     s3p21_FM4:
(2)  331/   28FAC : (MACRO)             	smpsSetvoice        $0A
(2)  331/   28FAC :  (MACRO-2)                  smpsFMvoice $0A
(2)  331/   28FAC : EF0A                                dc.b    $EF,$0A
(2)  332/   28FAE : (MACRO)             	smpsDetune          $04
(2)  332/   28FAE : E104                        dc.b    $E1,$04
(2)  333/   28FB0 : (MACRO)             	smpsModSet          $19, $01, $F9, $06
(2)  333/   28FB0 : F0                          dc.b    $F0
(2)  333/   28FB1 : 1901 F906                           dc.b    $19,$01,$F9,$06
(2)  333/   28FB5 :                             ;dc.b   $01,$F9,$06
(2)  334/   28FB5 : (MACRO)             	smpsPan             panLeft, $00
(2)  334/   28FB5 : =$0                 panNone set $00
(2)  334/   28FB5 : =$40                panRight set $40
(2)  334/   28FB5 : =$80                panLeft set $80
(2)  334/   28FB5 : =$C0                panCentre set $C0
(2)  334/   28FB5 : =$C0                panCenter set $C0 ; silly Americans :U
(2)  334/   28FB5 : E080                        dc.b $E0,PANLEFT+$00
(2)  335/   28FB7 :                     
(2)  336/   28FB7 :                     s3p21_Jump00:
(2)  337/   28FB7 : B112 B0AC 0CB8      	dc.b	nC4, $12, nB3, nG3, $0C, nG4, $12, nF4, nE4, $0C, nC4, $10
                    12B6 B50C B110    
(2)  338/   28FC3 : 8002 B012 AC0C      	dc.b	nRst, $02, nB3, $12, nG3, $0C, nG4, $12, nF4, nE4, $0C, nC4
                    B812 B6B5 0CB1    
(2)  339/   28FCF : 1080 02B0 12AC      	dc.b	$10, nRst, $02, nB3, $12, nG3, $0C, nG4, $12, nF4, nE4, $0C
                    0CB8 12B6 B50C    
(2)  340/   28FDB : B112 B010 8002      	dc.b	nC4, $12, nB3, $10, nRst, $02, nG3, $0E, nRst, $0A, nG3, $0E
                    AC0E 800A AC0E    
(2)  341/   28FE7 : 8016 BD54 B106      	dc.b	nRst, $16, nC5, $54, nC4, $06, nE4, nF4, $22, nRst, $02, nE4
                    B5B6 2280 02B5    
(2)  342/   28FF3 : 18B1 1280 06B1      	dc.b	$18, nC4, $12, nRst, $06, nC4, $08, nRst, $04, nC5, $48, nRst
                    0880 04BD 4880    
(2)  343/   28FFF : 0CB1 06B5 B624      	dc.b	$0C, nC4, $06, nE4, nF4, $24, nE4, $16, nRst, $02, nC4, $1C
                    B516 8002 B11C    
(2)  344/   2900B : 8020 AE0E 8016      	dc.b	nRst, $20, nA3, $0E, nRst, $16, nC4, $0C, nRst, $18, nF3, $0C
                    B10C 8018 AA0C    
(2)  345/   29017 : 8018 AE1C 8008      	dc.b	nRst, $18, nA3, $1C, nRst, $08, nA3, $12, nRst, $2A, nAb3, $0C
                    AE12 802A AD0C    
(2)  346/   29023 : B1AF ADB4 18B1      	dc.b	nC4, nBb3, nAb3, nEb4, $18, nC4, $0C, nD4, nEb4, $16, nRst, $02
                    0CB3 B416 8002    
(2)  347/   2902F : B30C B118 BD50      	dc.b	nD4, $0C, nC4, $18, nC5, $50, nRst, $04, nC4, $06, nE4, nF4
                    8004 B106 B5B6    
(2)  348/   2903B : 2280 02B5 1480      	dc.b	$22, nRst, $02, nE4, $14, nRst, $04, nC4, $14, nRst, $04, nC4
                    04B1 1480 04B1    
(2)  349/   29047 : 8002 B104 8002      	dc.b	nRst, $02, nC4, $04, nRst, $02, nC5, $4E, nRst, $06, nC4, nE4
                    BD4E 8006 B1B5    
(2)  350/   29053 : B624 B516 8002      	dc.b	nF4, $24, nE4, $16, nRst, $02, nC4, $14, nRst, $04, nC4, $0E
                    B114 8004 B10E    
(2)  351/   2905F : 8016 AE0C 8018      	dc.b	nRst, $16, nA3, $0C, nRst, $18, nC4, $08, nRst, $1C, nF3, $08
                    B108 801C AA08    
(2)  352/   2906B : 801C AE20 8004      	dc.b	nRst, $1C, nA3, $20, nRst, $04, nA3, $12, nRst, $2A, nAb3, $0C
                    AE12 802A AD0C    
(2)  353/   29077 : B1AF 0A80 02AD      	dc.b	nC4, nBb3, $0A, nRst, $02, nAb3, $0C, nEb4, $18, nD4, $0C, nC4
                    0CB4 18B3 0CB1    
(2)  354/   29083 : B618 B40A 8002      	dc.b	nF4, $18, nEb4, $0A, nRst, $02, nF4, $12, nRst, $06, nG4, $24
                    B612 8006 B824    
(2)  355/   2908F : C022 8002 BF24      	dc.b	nEb5, $22, nRst, $02, nD5, $24, nG4, $54, nAb4, $24, nEb5, $22
                    B854 B924 C022    
(2)  356/   2909B : 8002 BD24 C2C0      	dc.b	nRst, $02, nC5, $24, nF5, nEb5, $18, nD5, $14, nRst, $04, nAb4
                    18BF 1480 04B9    
(2)  357/   290A7 : 24C0 1C80 08BF      	dc.b	$24, nEb5, $1C, nRst, $08, nD5, $22, nRst, $02, nG4, $54, nAb4
                    2280 02B8 54B9    
(2)  358/   290B3 : 24BD C016 8002      	dc.b	$24, nC5, nEb5, $16, nRst, $02, nG5, $18, nF5, $0C, nEb5, $18
                    C418 C20C C018    
(2)  359/   290BF : C21E 8006 BD4E      	dc.b	nF5, $1E, nRst, $06, nC5, $4E, nRst, $06, nC4, nE4, $04, nRst
                    8006 B1B5 0480    
(2)  360/   290CB : 02B6 24B5 1680      	dc.b	$02, nF4, $24, nE4, $16, nRst, $02, nC4, $12, nRst, $06, nC4
                    02B1 1280 06B1    
(2)  361/   290D7 : 0280 04B1 0280      	dc.b	$02, nRst, $04, nC4, $02, nRst, $04, nC5, $48, nRst, $0C, nC5
                    04BD 4880 0CBD    
(2)  362/   290E3 : 0480 02C1 0480      	dc.b	$04, nRst, $02, nE5, $04, nRst, $02, nF5, $1E, nRst, $06, nE5
                    02C2 1E80 06C1    
(2)  363/   290EF : 1680 02BD 1080      	dc.b	$16, nRst, $02, nC5, $10, nRst, $08, nC5, $0A, nRst, $02, nG5
                    08BD 0A80 02C4    
(2)  364/   290FB : 0CBD 1080 20BD      	dc.b	$0C, nC5, $10, nRst, $20, nC5, $08, nRst, $04, nG5, $0C, nC5
                    0880 04C4 0CBD    
(2)  365/   29107 : 0880 10BD 0C80      	dc.b	$08, nRst, $10, nC5, $0C, nRst, nC5, $08, nRst, $04, nG5, $0C
                    BD08 8004 C40C    
(2)  366/   29113 : BD80 BD06 80C7      	dc.b	nC5, nRst, nC5, $06, nRst, nBb5, $24, nAb5, $22, nRst, $02, nG5
                    24C5 2280 02C4    
(2)  367/   2911F : 2080 04C2 24C0      	dc.b	$20, nRst, $04, nF5, $24, nEb5, $12, nRst, $06, nF5, $08, nRst
                    1280 06C2 0880    
(2)  368/   2912B : 04C4 0C             	dc.b	$04, nG5, $0C
(2)  369/   2912E : (MACRO)             	smpsJump            s3p21_Jump00
(2)  369/   2912E : F6                          dc.b    $F6
(2)  369/   2912F : B78F                                dc.w    z80_ptr(S3P21_JUMP00)
(2)  370/   29131 :                     
(2)  371/   29131 :                     ; FM5 Data
(2)  372/   29131 :                     s3p21_FM5:
(2)  373/   29131 : 8003                	dc.b	nRst, $03
(2)  374/   29133 : (MACRO)             	smpsFMAlterVol      $04
(2)  374/   29133 : E604                                dc.b    $E6,$04
(2)  375/   29135 : (MACRO)             	smpsSetvoice        $0A
(2)  375/   29135 :  (MACRO-2)                  smpsFMvoice $0A
(2)  375/   29135 : EF0A                                dc.b    $EF,$0A
(2)  376/   29137 : (MACRO)             	smpsDetune          $FC
(2)  376/   29137 : E1FC                        dc.b    $E1,$FC
(2)  377/   29139 : (MACRO)             	smpsModSet          $19, $01, $07, $06
(2)  377/   29139 : F0                          dc.b    $F0
(2)  377/   2913A : 1901 0706                           dc.b    $19,$01,$07,$06
(2)  377/   2913E :                             ;dc.b   $01,$07,$06
(2)  378/   2913E : (MACRO)             	smpsPan             panRight, $00
(2)  378/   2913E : =$0                 panNone set $00
(2)  378/   2913E : =$40                panRight set $40
(2)  378/   2913E : =$80                panLeft set $80
(2)  378/   2913E : =$C0                panCentre set $C0
(2)  378/   2913E : =$C0                panCenter set $C0 ; silly Americans :U
(2)  378/   2913E : E040                        dc.b $E0,PANRIGHT+$00
(2)  379/   29140 : (MACRO)             	smpsJump            s3p21_Jump00
(2)  379/   29140 : F6                          dc.b    $F6
(2)  379/   29141 : B78F                                dc.w    z80_ptr(S3P21_JUMP00)
(2)  380/   29143 :                     
(2)  381/   29143 :                     ; PSG3 Data
(2)  382/   29143 :                     s3p21_PSG3:
(2)  383/   29143 : (MACRO)             	smpsPSGform         $E7
(2)  383/   29143 : F3E7                        dc.b    $F3,$E7
(2)  384/   29145 :                     
(2)  385/   29145 :                     s3p21_Jump03:
(2)  386/   29145 : (MACRO)             	smpsPSGvoice        sTone_01
(2)  386/   29145 : F501                        dc.b    $F5,STONE_01
(2)  387/   29147 : D406                	dc.b	nMaxPSG2, $06
(2)  388/   29149 : (MACRO)             	smpsPSGvoice        sTone_01
(2)  388/   29149 : F501                        dc.b    $F5,STONE_01
(2)  389/   2914B : D406                	dc.b	nMaxPSG2, $06
(2)  390/   2914D : (MACRO)             	smpsPSGvoice        sTone_04
(2)  390/   2914D : F504                        dc.b    $F5,STONE_04
(2)  391/   2914F : D40C                	dc.b	nMaxPSG2, $0C
(2)  392/   29151 : (MACRO)             	smpsPSGvoice        sTone_01
(2)  392/   29151 : F501                        dc.b    $F5,STONE_01
(2)  393/   29153 : D406                	dc.b	nMaxPSG2, $06
(2)  394/   29155 : (MACRO)             	smpsPSGvoice        sTone_01
(2)  394/   29155 : F501                        dc.b    $F5,STONE_01
(2)  395/   29157 : D406                	dc.b	nMaxPSG2, $06
(2)  396/   29159 : (MACRO)             	smpsPSGvoice        sTone_04
(2)  396/   29159 : F504                        dc.b    $F5,STONE_04
(2)  397/   2915B : D40C                	dc.b	nMaxPSG2, $0C
(2)  398/   2915D : (MACRO)             	smpsJump            s3p21_Jump03
(2)  398/   2915D : F6                          dc.b    $F6
(2)  398/   2915E : 4591                                dc.w    z80_ptr(S3P21_JUMP03)
(2)  399/   29160 :                     
(2)  400/   29160 :                     s3p21_Voices:
(2)  401/   29160 :                     ;	Voice $00
(2)  402/   29160 :                     ;	$3C
(2)  403/   29160 :                     ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $0D, $12, $05
(2)  404/   29160 :                     ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $80, $07, $80
(2)  405/   29160 : (MACRO)             	smpsVcAlgorithm     $04
(2)  405/   29160 : =$4                 vcAlgorithm set $04
(2)  406/   29160 : (MACRO)             	smpsVcFeedback      $07
(2)  406/   29160 : =$7                 vcFeedback set $07
(2)  407/   29160 : (MACRO)             	smpsVcUnusedBits    $00
(2)  407/   29160 : =$0                 vcUnusedBits set $00
(2)  407/   29160 : =$0                                 set vcD1R1Unk,0
(2)  407/   29160 : =$0                                 set vcD1R2Unk,0
(2)  407/   29160 : =$0                                 set vcD1R3Unk,0
(2)  407/   29160 : =$0                                 set vcD1R4Unk,0
(2)  408/   29160 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  408/   29160 : =$0                         set vcDT1,$00
(2)  408/   29160 : =$0                         set vcDT2,$00
(2)  408/   29160 : =$0                         set vcDT3,$00
(2)  408/   29160 : =$0                         set vcDT4,$00
(2)  409/   29160 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $01
(2)  409/   29160 : =$0                         set vcCF1,$00
(2)  409/   29160 : =$0                         set vcCF2,$00
(2)  409/   29160 : =$0                         set vcCF3,$00
(2)  409/   29160 : =$1                         set vcCF4,$01
(2)  410/   29160 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  410/   29160 : =$0                         set vcRS1,$00
(2)  410/   29160 : =$0                         set vcRS2,$00
(2)  410/   29160 : =$0                         set vcRS3,$00
(2)  410/   29160 : =$0                         set vcRS4,$00
(2)  411/   29160 : (MACRO)             	smpsVcAttackRate    $1F, $15, $1F, $1F
(2)  411/   29160 : =$1F                        set vcAR1,$1F
(2)  411/   29160 : =$15                        set vcAR2,$15
(2)  411/   29160 : =$1F                        set vcAR3,$1F
(2)  411/   29160 : =$1F                        set vcAR4,$1F
(2)  412/   29160 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  412/   29160 : =$0                                 set vcAM1,$00<<5
(2)  412/   29160 : =$0                                 set vcAM2,$00<<5
(2)  412/   29160 : =$0                                 set vcAM3,$00<<5
(2)  412/   29160 : =$0                                 set vcAM4,$00<<5
(2)  413/   29160 : (MACRO)             	smpsVcDecayRate1    $05, $12, $0D, $11
(2)  413/   29160 : =$5                         set vcD1R1,$05
(2)  413/   29160 : =$12                        set vcD1R2,$12
(2)  413/   29160 : =$D                         set vcD1R3,$0D
(2)  413/   29160 : =$11                        set vcD1R4,$11
(2)  414/   29160 : (MACRO)             	smpsVcDecayRate2    $02, $09, $04, $07
(2)  414/   29160 : =$2                         set vcD2R1,$02
(2)  414/   29160 : =$9                         set vcD2R2,$09
(2)  414/   29160 : =$4                         set vcD2R3,$04
(2)  414/   29160 : =$7                         set vcD2R4,$07
(2)  415/   29160 : (MACRO)             	smpsVcDecayLevel    $01, $02, $03, $05
(2)  415/   29160 : =$1                         set vcDL1,$01
(2)  415/   29160 : =$2                         set vcDL2,$02
(2)  415/   29160 : =$3                         set vcDL3,$03
(2)  415/   29160 : =$5                         set vcDL4,$05
(2)  416/   29160 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $0A, $05
(2)  416/   29160 : =$A                         set vcRR1,$0A
(2)  416/   29160 : =$5                         set vcRR2,$05
(2)  416/   29160 : =$A                         set vcRR3,$0A
(2)  416/   29160 : =$5                         set vcRR4,$05
(2)  417/   29160 : (MACRO)             	smpsVcTotalLevel    $80, $07, $80, $1A
(2)  417/   29160 : =$80                        set vcTL1,$80
(2)  417/   29160 : =$7                         set vcTL2,$07
(2)  417/   29160 : =$80                        set vcTL3,$80
(2)  417/   29160 : =$1A                        set vcTL4,$1A
(2)  417/   29160 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  417/   29161 :                     ;   0     1     2     3     4     5     6     7
(2)  417/   29161 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  417/   29161 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  417/   29161 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  417/   29161 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  417/   29161 : =$80                                set vcTLMask1,$80
(2)  417/   29161 :                     
(2)  417/   29161 :                     
(2)  417/   29161 : 0100 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  417/   29165 : 1F1F 151F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  417/   29169 : 110D 1205                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  417/   2916D : 0704 0902                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  417/   29171 : 553A 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  417/   29175 : 1A80 0780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  418/   29179 :                     
(2)  419/   29179 :                     ;	Voice $01
(2)  420/   29179 :                     ;	$3D
(2)  421/   29179 :                     ;	$01, $01, $01, $01, 	$94, $19, $19, $19, 	$0F, $0D, $0D, $0D
(2)  422/   29179 :                     ;	$07, $04, $04, $04, 	$25, $1A, $1A, $1A, 	$15, $80, $80, $80
(2)  423/   29179 : (MACRO)             	smpsVcAlgorithm     $05
(2)  423/   29179 : =$5                 vcAlgorithm set $05
(2)  424/   29179 : (MACRO)             	smpsVcFeedback      $07
(2)  424/   29179 : =$7                 vcFeedback set $07
(2)  425/   29179 : (MACRO)             	smpsVcUnusedBits    $00
(2)  425/   29179 : =$0                 vcUnusedBits set $00
(2)  425/   29179 : =$0                                 set vcD1R1Unk,0
(2)  425/   29179 : =$0                                 set vcD1R2Unk,0
(2)  425/   29179 : =$0                                 set vcD1R3Unk,0
(2)  425/   29179 : =$0                                 set vcD1R4Unk,0
(2)  426/   29179 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  426/   29179 : =$0                         set vcDT1,$00
(2)  426/   29179 : =$0                         set vcDT2,$00
(2)  426/   29179 : =$0                         set vcDT3,$00
(2)  426/   29179 : =$0                         set vcDT4,$00
(2)  427/   29179 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(2)  427/   29179 : =$1                         set vcCF1,$01
(2)  427/   29179 : =$1                         set vcCF2,$01
(2)  427/   29179 : =$1                         set vcCF3,$01
(2)  427/   29179 : =$1                         set vcCF4,$01
(2)  428/   29179 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $02
(2)  428/   29179 : =$0                         set vcRS1,$00
(2)  428/   29179 : =$0                         set vcRS2,$00
(2)  428/   29179 : =$0                         set vcRS3,$00
(2)  428/   29179 : =$2                         set vcRS4,$02
(2)  429/   29179 : (MACRO)             	smpsVcAttackRate    $19, $19, $19, $14
(2)  429/   29179 : =$19                        set vcAR1,$19
(2)  429/   29179 : =$19                        set vcAR2,$19
(2)  429/   29179 : =$19                        set vcAR3,$19
(2)  429/   29179 : =$14                        set vcAR4,$14
(2)  430/   29179 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  430/   29179 : =$0                                 set vcAM1,$00<<5
(2)  430/   29179 : =$0                                 set vcAM2,$00<<5
(2)  430/   29179 : =$0                                 set vcAM3,$00<<5
(2)  430/   29179 : =$0                                 set vcAM4,$00<<5
(2)  431/   29179 : (MACRO)             	smpsVcDecayRate1    $0D, $0D, $0D, $0F
(2)  431/   29179 : =$D                         set vcD1R1,$0D
(2)  431/   29179 : =$D                         set vcD1R2,$0D
(2)  431/   29179 : =$D                         set vcD1R3,$0D
(2)  431/   29179 : =$F                         set vcD1R4,$0F
(2)  432/   29179 : (MACRO)             	smpsVcDecayRate2    $04, $04, $04, $07
(2)  432/   29179 : =$4                         set vcD2R1,$04
(2)  432/   29179 : =$4                         set vcD2R2,$04
(2)  432/   29179 : =$4                         set vcD2R3,$04
(2)  432/   29179 : =$7                         set vcD2R4,$07
(2)  433/   29179 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(2)  433/   29179 : =$1                         set vcDL1,$01
(2)  433/   29179 : =$1                         set vcDL2,$01
(2)  433/   29179 : =$1                         set vcDL3,$01
(2)  433/   29179 : =$2                         set vcDL4,$02
(2)  434/   29179 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $05
(2)  434/   29179 : =$A                         set vcRR1,$0A
(2)  434/   29179 : =$A                         set vcRR2,$0A
(2)  434/   29179 : =$A                         set vcRR3,$0A
(2)  434/   29179 : =$5                         set vcRR4,$05
(2)  435/   29179 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $15
(2)  435/   29179 : =$80                        set vcTL1,$80
(2)  435/   29179 : =$80                        set vcTL2,$80
(2)  435/   29179 : =$80                        set vcTL3,$80
(2)  435/   29179 : =$15                        set vcTL4,$15
(2)  435/   29179 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  435/   2917A :                     ;   0     1     2     3     4     5     6     7
(2)  435/   2917A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  435/   2917A : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  435/   2917A : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  435/   2917A : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  435/   2917A : =$80                                set vcTLMask1,$80
(2)  435/   2917A :                     
(2)  435/   2917A :                     
(2)  435/   2917A : 0101 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  435/   2917E : 9419 1919                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  435/   29182 : 0F0D 0D0D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  435/   29186 : 0704 0404                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  435/   2918A : 251A 1A1A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  435/   2918E : 1580 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  436/   29192 :                     
(2)  437/   29192 :                     ;	Voice $02
(2)  438/   29192 :                     ;	$03
(2)  439/   29192 :                     ;	$00, $D7, $33, $02, 	$5F, $9F, $5F, $1F, 	$13, $0F, $0A, $0A
(2)  440/   29192 :                     ;	$10, $0F, $02, $09, 	$35, $15, $25, $1A, 	$13, $16, $15, $80
(2)  441/   29192 : (MACRO)             	smpsVcAlgorithm     $03
(2)  441/   29192 : =$3                 vcAlgorithm set $03
(2)  442/   29192 : (MACRO)             	smpsVcFeedback      $00
(2)  442/   29192 : =$0                 vcFeedback set $00
(2)  443/   29192 : (MACRO)             	smpsVcUnusedBits    $00
(2)  443/   29192 : =$0                 vcUnusedBits set $00
(2)  443/   29192 : =$0                                 set vcD1R1Unk,0
(2)  443/   29192 : =$0                                 set vcD1R2Unk,0
(2)  443/   29192 : =$0                                 set vcD1R3Unk,0
(2)  443/   29192 : =$0                                 set vcD1R4Unk,0
(2)  444/   29192 : (MACRO)             	smpsVcDetune        $00, $03, $0D, $00
(2)  444/   29192 : =$0                         set vcDT1,$00
(2)  444/   29192 : =$3                         set vcDT2,$03
(2)  444/   29192 : =$D                         set vcDT3,$0D
(2)  444/   29192 : =$0                         set vcDT4,$00
(2)  445/   29192 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $07, $00
(2)  445/   29192 : =$2                         set vcCF1,$02
(2)  445/   29192 : =$3                         set vcCF2,$03
(2)  445/   29192 : =$7                         set vcCF3,$07
(2)  445/   29192 : =$0                         set vcCF4,$00
(2)  446/   29192 : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)  446/   29192 : =$0                         set vcRS1,$00
(2)  446/   29192 : =$1                         set vcRS2,$01
(2)  446/   29192 : =$2                         set vcRS3,$02
(2)  446/   29192 : =$1                         set vcRS4,$01
(2)  447/   29192 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  447/   29192 : =$1F                        set vcAR1,$1F
(2)  447/   29192 : =$1F                        set vcAR2,$1F
(2)  447/   29192 : =$1F                        set vcAR3,$1F
(2)  447/   29192 : =$1F                        set vcAR4,$1F
(2)  448/   29192 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  448/   29192 : =$0                                 set vcAM1,$00<<5
(2)  448/   29192 : =$0                                 set vcAM2,$00<<5
(2)  448/   29192 : =$0                                 set vcAM3,$00<<5
(2)  448/   29192 : =$0                                 set vcAM4,$00<<5
(2)  449/   29192 : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0F, $13
(2)  449/   29192 : =$A                         set vcD1R1,$0A
(2)  449/   29192 : =$A                         set vcD1R2,$0A
(2)  449/   29192 : =$F                         set vcD1R3,$0F
(2)  449/   29192 : =$13                        set vcD1R4,$13
(2)  450/   29192 : (MACRO)             	smpsVcDecayRate2    $09, $02, $0F, $10
(2)  450/   29192 : =$9                         set vcD2R1,$09
(2)  450/   29192 : =$2                         set vcD2R2,$02
(2)  450/   29192 : =$F                         set vcD2R3,$0F
(2)  450/   29192 : =$10                        set vcD2R4,$10
(2)  451/   29192 : (MACRO)             	smpsVcDecayLevel    $01, $02, $01, $03
(2)  451/   29192 : =$1                         set vcDL1,$01
(2)  451/   29192 : =$2                         set vcDL2,$02
(2)  451/   29192 : =$1                         set vcDL3,$01
(2)  451/   29192 : =$3                         set vcDL4,$03
(2)  452/   29192 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $05, $05
(2)  452/   29192 : =$A                         set vcRR1,$0A
(2)  452/   29192 : =$5                         set vcRR2,$05
(2)  452/   29192 : =$5                         set vcRR3,$05
(2)  452/   29192 : =$5                         set vcRR4,$05
(2)  453/   29192 : (MACRO)             	smpsVcTotalLevel    $80, $15, $16, $13
(2)  453/   29192 : =$80                        set vcTL1,$80
(2)  453/   29192 : =$15                        set vcTL2,$15
(2)  453/   29192 : =$16                        set vcTL3,$16
(2)  453/   29192 : =$13                        set vcTL4,$13
(2)  453/   29192 : 03                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  453/   29193 :                     ;   0     1     2     3     4     5     6     7
(2)  453/   29193 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  453/   29193 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  453/   29193 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  453/   29193 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  453/   29193 : =$80                                set vcTLMask1,$80
(2)  453/   29193 :                     
(2)  453/   29193 :                     
(2)  453/   29193 : 00D7 3302                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  453/   29197 : 5F9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  453/   2919B : 130F 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  453/   2919F : 100F 0209                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  453/   291A3 : 3515 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  453/   291A7 : 1316 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  454/   291AB :                     
(2)  455/   291AB :                     ;	Voice $03
(2)  456/   291AB :                     ;	$34
(2)  457/   291AB :                     ;	$70, $72, $31, $31, 	$1F, $1F, $1F, $1F, 	$10, $06, $06, $06
(2)  458/   291AB :                     ;	$01, $06, $06, $06, 	$35, $1A, $15, $1A, 	$10, $80, $18, $80
(2)  459/   291AB : (MACRO)             	smpsVcAlgorithm     $04
(2)  459/   291AB : =$4                 vcAlgorithm set $04
(2)  460/   291AB : (MACRO)             	smpsVcFeedback      $06
(2)  460/   291AB : =$6                 vcFeedback set $06
(2)  461/   291AB : (MACRO)             	smpsVcUnusedBits    $00
(2)  461/   291AB : =$0                 vcUnusedBits set $00
(2)  461/   291AB : =$0                                 set vcD1R1Unk,0
(2)  461/   291AB : =$0                                 set vcD1R2Unk,0
(2)  461/   291AB : =$0                                 set vcD1R3Unk,0
(2)  461/   291AB : =$0                                 set vcD1R4Unk,0
(2)  462/   291AB : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  462/   291AB : =$3                         set vcDT1,$03
(2)  462/   291AB : =$3                         set vcDT2,$03
(2)  462/   291AB : =$7                         set vcDT3,$07
(2)  462/   291AB : =$7                         set vcDT4,$07
(2)  463/   291AB : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $00
(2)  463/   291AB : =$1                         set vcCF1,$01
(2)  463/   291AB : =$1                         set vcCF2,$01
(2)  463/   291AB : =$2                         set vcCF3,$02
(2)  463/   291AB : =$0                         set vcCF4,$00
(2)  464/   291AB : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  464/   291AB : =$0                         set vcRS1,$00
(2)  464/   291AB : =$0                         set vcRS2,$00
(2)  464/   291AB : =$0                         set vcRS3,$00
(2)  464/   291AB : =$0                         set vcRS4,$00
(2)  465/   291AB : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  465/   291AB : =$1F                        set vcAR1,$1F
(2)  465/   291AB : =$1F                        set vcAR2,$1F
(2)  465/   291AB : =$1F                        set vcAR3,$1F
(2)  465/   291AB : =$1F                        set vcAR4,$1F
(2)  466/   291AB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  466/   291AB : =$0                                 set vcAM1,$00<<5
(2)  466/   291AB : =$0                                 set vcAM2,$00<<5
(2)  466/   291AB : =$0                                 set vcAM3,$00<<5
(2)  466/   291AB : =$0                                 set vcAM4,$00<<5
(2)  467/   291AB : (MACRO)             	smpsVcDecayRate1    $06, $06, $06, $10
(2)  467/   291AB : =$6                         set vcD1R1,$06
(2)  467/   291AB : =$6                         set vcD1R2,$06
(2)  467/   291AB : =$6                         set vcD1R3,$06
(2)  467/   291AB : =$10                        set vcD1R4,$10
(2)  468/   291AB : (MACRO)             	smpsVcDecayRate2    $06, $06, $06, $01
(2)  468/   291AB : =$6                         set vcD2R1,$06
(2)  468/   291AB : =$6                         set vcD2R2,$06
(2)  468/   291AB : =$6                         set vcD2R3,$06
(2)  468/   291AB : =$1                         set vcD2R4,$01
(2)  469/   291AB : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $03
(2)  469/   291AB : =$1                         set vcDL1,$01
(2)  469/   291AB : =$1                         set vcDL2,$01
(2)  469/   291AB : =$1                         set vcDL3,$01
(2)  469/   291AB : =$3                         set vcDL4,$03
(2)  470/   291AB : (MACRO)             	smpsVcReleaseRate   $0A, $05, $0A, $05
(2)  470/   291AB : =$A                         set vcRR1,$0A
(2)  470/   291AB : =$5                         set vcRR2,$05
(2)  470/   291AB : =$A                         set vcRR3,$0A
(2)  470/   291AB : =$5                         set vcRR4,$05
(2)  471/   291AB : (MACRO)             	smpsVcTotalLevel    $80, $18, $80, $10
(2)  471/   291AB : =$80                        set vcTL1,$80
(2)  471/   291AB : =$18                        set vcTL2,$18
(2)  471/   291AB : =$80                        set vcTL3,$80
(2)  471/   291AB : =$10                        set vcTL4,$10
(2)  471/   291AB : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  471/   291AC :                     ;   0     1     2     3     4     5     6     7
(2)  471/   291AC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  471/   291AC : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  471/   291AC : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  471/   291AC : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  471/   291AC : =$80                                set vcTLMask1,$80
(2)  471/   291AC :                     
(2)  471/   291AC :                     
(2)  471/   291AC : 7072 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  471/   291B0 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  471/   291B4 : 1006 0606                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  471/   291B8 : 0106 0606                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  471/   291BC : 351A 151A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  471/   291C0 : 1080 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  472/   291C4 :                     
(2)  473/   291C4 :                     ;	Voice $04
(2)  474/   291C4 :                     ;	$3E
(2)  475/   291C4 :                     ;	$77, $71, $32, $31, 	$1F, $1F, $1F, $1F, 	$0D, $06, $00, $00
(2)  476/   291C4 :                     ;	$08, $06, $00, $00, 	$15, $0A, $0A, $0A, 	$1B, $80, $80, $80
(2)  477/   291C4 : (MACRO)             	smpsVcAlgorithm     $06
(2)  477/   291C4 : =$6                 vcAlgorithm set $06
(2)  478/   291C4 : (MACRO)             	smpsVcFeedback      $07
(2)  478/   291C4 : =$7                 vcFeedback set $07
(2)  479/   291C4 : (MACRO)             	smpsVcUnusedBits    $00
(2)  479/   291C4 : =$0                 vcUnusedBits set $00
(2)  479/   291C4 : =$0                                 set vcD1R1Unk,0
(2)  479/   291C4 : =$0                                 set vcD1R2Unk,0
(2)  479/   291C4 : =$0                                 set vcD1R3Unk,0
(2)  479/   291C4 : =$0                                 set vcD1R4Unk,0
(2)  480/   291C4 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  480/   291C4 : =$3                         set vcDT1,$03
(2)  480/   291C4 : =$3                         set vcDT2,$03
(2)  480/   291C4 : =$7                         set vcDT3,$07
(2)  480/   291C4 : =$7                         set vcDT4,$07
(2)  481/   291C4 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $01, $07
(2)  481/   291C4 : =$1                         set vcCF1,$01
(2)  481/   291C4 : =$2                         set vcCF2,$02
(2)  481/   291C4 : =$1                         set vcCF3,$01
(2)  481/   291C4 : =$7                         set vcCF4,$07
(2)  482/   291C4 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  482/   291C4 : =$0                         set vcRS1,$00
(2)  482/   291C4 : =$0                         set vcRS2,$00
(2)  482/   291C4 : =$0                         set vcRS3,$00
(2)  482/   291C4 : =$0                         set vcRS4,$00
(2)  483/   291C4 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  483/   291C4 : =$1F                        set vcAR1,$1F
(2)  483/   291C4 : =$1F                        set vcAR2,$1F
(2)  483/   291C4 : =$1F                        set vcAR3,$1F
(2)  483/   291C4 : =$1F                        set vcAR4,$1F
(2)  484/   291C4 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  484/   291C4 : =$0                                 set vcAM1,$00<<5
(2)  484/   291C4 : =$0                                 set vcAM2,$00<<5
(2)  484/   291C4 : =$0                                 set vcAM3,$00<<5
(2)  484/   291C4 : =$0                                 set vcAM4,$00<<5
(2)  485/   291C4 : (MACRO)             	smpsVcDecayRate1    $00, $00, $06, $0D
(2)  485/   291C4 : =$0                         set vcD1R1,$00
(2)  485/   291C4 : =$0                         set vcD1R2,$00
(2)  485/   291C4 : =$6                         set vcD1R3,$06
(2)  485/   291C4 : =$D                         set vcD1R4,$0D
(2)  486/   291C4 : (MACRO)             	smpsVcDecayRate2    $00, $00, $06, $08
(2)  486/   291C4 : =$0                         set vcD2R1,$00
(2)  486/   291C4 : =$0                         set vcD2R2,$00
(2)  486/   291C4 : =$6                         set vcD2R3,$06
(2)  486/   291C4 : =$8                         set vcD2R4,$08
(2)  487/   291C4 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $01
(2)  487/   291C4 : =$0                         set vcDL1,$00
(2)  487/   291C4 : =$0                         set vcDL2,$00
(2)  487/   291C4 : =$0                         set vcDL3,$00
(2)  487/   291C4 : =$1                         set vcDL4,$01
(2)  488/   291C4 : (MACRO)             	smpsVcReleaseRate   $0A, $0A, $0A, $05
(2)  488/   291C4 : =$A                         set vcRR1,$0A
(2)  488/   291C4 : =$A                         set vcRR2,$0A
(2)  488/   291C4 : =$A                         set vcRR3,$0A
(2)  488/   291C4 : =$5                         set vcRR4,$05
(2)  489/   291C4 : (MACRO)             	smpsVcTotalLevel    $80, $80, $80, $1B
(2)  489/   291C4 : =$80                        set vcTL1,$80
(2)  489/   291C4 : =$80                        set vcTL2,$80
(2)  489/   291C4 : =$80                        set vcTL3,$80
(2)  489/   291C4 : =$1B                        set vcTL4,$1B
(2)  489/   291C4 : 3E                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  489/   291C5 :                     ;   0     1     2     3     4     5     6     7
(2)  489/   291C5 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  489/   291C5 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  489/   291C5 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  489/   291C5 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  489/   291C5 : =$80                                set vcTLMask1,$80
(2)  489/   291C5 :                     
(2)  489/   291C5 :                     
(2)  489/   291C5 : 7771 3231                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  489/   291C9 : 1F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  489/   291CD : 0D06 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  489/   291D1 : 0806 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  489/   291D5 : 150A 0A0A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  489/   291D9 : 1B80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  490/   291DD :                     
(2)  491/   291DD :                     ;	Voice $05
(2)  492/   291DD :                     ;	$34
(2)  493/   291DD :                     ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
(2)  494/   291DD :                     ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $80, $29, $87
(2)  495/   291DD : (MACRO)             	smpsVcAlgorithm     $04
(2)  495/   291DD : =$4                 vcAlgorithm set $04
(2)  496/   291DD : (MACRO)             	smpsVcFeedback      $06
(2)  496/   291DD : =$6                 vcFeedback set $06
(2)  497/   291DD : (MACRO)             	smpsVcUnusedBits    $00
(2)  497/   291DD : =$0                 vcUnusedBits set $00
(2)  497/   291DD : =$0                                 set vcD1R1Unk,0
(2)  497/   291DD : =$0                                 set vcD1R2Unk,0
(2)  497/   291DD : =$0                                 set vcD1R3Unk,0
(2)  497/   291DD : =$0                                 set vcD1R4Unk,0
(2)  498/   291DD : (MACRO)             	smpsVcDetune        $07, $07, $04, $03
(2)  498/   291DD : =$7                         set vcDT1,$07
(2)  498/   291DD : =$7                         set vcDT2,$07
(2)  498/   291DD : =$4                         set vcDT3,$04
(2)  498/   291DD : =$3                         set vcDT4,$03
(2)  499/   291DD : (MACRO)             	smpsVcCoarseFreq    $04, $0E, $01, $03
(2)  499/   291DD : =$4                         set vcCF1,$04
(2)  499/   291DD : =$E                         set vcCF2,$0E
(2)  499/   291DD : =$1                         set vcCF3,$01
(2)  499/   291DD : =$3                         set vcCF4,$03
(2)  500/   291DD : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)  500/   291DD : =$0                         set vcRS1,$00
(2)  500/   291DD : =$1                         set vcRS2,$01
(2)  500/   291DD : =$2                         set vcRS3,$02
(2)  500/   291DD : =$1                         set vcRS4,$01
(2)  501/   291DD : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1B
(2)  501/   291DD : =$1F                        set vcAR1,$1F
(2)  501/   291DD : =$1F                        set vcAR2,$1F
(2)  501/   291DD : =$1F                        set vcAR3,$1F
(2)  501/   291DD : =$1B                        set vcAR4,$1B
(2)  502/   291DD : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  502/   291DD : =$0                                 set vcAM1,$00<<5
(2)  502/   291DD : =$0                                 set vcAM2,$00<<5
(2)  502/   291DD : =$0                                 set vcAM3,$00<<5
(2)  502/   291DD : =$0                                 set vcAM4,$00<<5
(2)  503/   291DD : (MACRO)             	smpsVcDecayRate1    $08, $07, $07, $04
(2)  503/   291DD : =$8                         set vcD1R1,$08
(2)  503/   291DD : =$7                         set vcD1R2,$07
(2)  503/   291DD : =$7                         set vcD1R3,$07
(2)  503/   291DD : =$4                         set vcD1R4,$04
(2)  504/   291DD : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  504/   291DD : =$0                         set vcD2R1,$00
(2)  504/   291DD : =$0                         set vcD2R2,$00
(2)  504/   291DD : =$0                         set vcD2R3,$00
(2)  504/   291DD : =$0                         set vcD2R4,$00
(2)  505/   291DD : (MACRO)             	smpsVcDecayLevel    $0F, $0E, $0F, $0F
(2)  505/   291DD : =$F                         set vcDL1,$0F
(2)  505/   291DD : =$E                         set vcDL2,$0E
(2)  505/   291DD : =$F                         set vcDL3,$0F
(2)  505/   291DD : =$F                         set vcDL4,$0F
(2)  506/   291DD : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  506/   291DD : =$F                         set vcRR1,$0F
(2)  506/   291DD : =$F                         set vcRR2,$0F
(2)  506/   291DD : =$F                         set vcRR3,$0F
(2)  506/   291DD : =$F                         set vcRR4,$0F
(2)  507/   291DD : (MACRO)             	smpsVcTotalLevel    $87, $29, $80, $23
(2)  507/   291DD : =$87                        set vcTL1,$87
(2)  507/   291DD : =$29                        set vcTL2,$29
(2)  507/   291DD : =$80                        set vcTL3,$80
(2)  507/   291DD : =$23                        set vcTL4,$23
(2)  507/   291DD : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  507/   291DE :                     ;   0     1     2     3     4     5     6     7
(2)  507/   291DE :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  507/   291DE : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  507/   291DE : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  507/   291DE : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  507/   291DE : =$80                                set vcTLMask1,$80
(2)  507/   291DE :                     
(2)  507/   291DE :                     
(2)  507/   291DE : 3341 7E74                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  507/   291E2 : 5B9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  507/   291E6 : 0407 0708                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  507/   291EA : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  507/   291EE : FFFF EFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  507/   291F2 : 2380 2987                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  508/   291F6 :                     
(2)  509/   291F6 :                     ;	Voice $06
(2)  510/   291F6 :                     ;	$3A
(2)  511/   291F6 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(2)  512/   291F6 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
(2)  513/   291F6 : (MACRO)             	smpsVcAlgorithm     $02
(2)  513/   291F6 : =$2                 vcAlgorithm set $02
(2)  514/   291F6 : (MACRO)             	smpsVcFeedback      $07
(2)  514/   291F6 : =$7                 vcFeedback set $07
(2)  515/   291F6 : (MACRO)             	smpsVcUnusedBits    $00
(2)  515/   291F6 : =$0                 vcUnusedBits set $00
(2)  515/   291F6 : =$0                                 set vcD1R1Unk,0
(2)  515/   291F6 : =$0                                 set vcD1R2Unk,0
(2)  515/   291F6 : =$0                                 set vcD1R3Unk,0
(2)  515/   291F6 : =$0                                 set vcD1R4Unk,0
(2)  516/   291F6 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  516/   291F6 : =$0                         set vcDT1,$00
(2)  516/   291F6 : =$0                         set vcDT2,$00
(2)  516/   291F6 : =$0                         set vcDT3,$00
(2)  516/   291F6 : =$0                         set vcDT4,$00
(2)  517/   291F6 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(2)  517/   291F6 : =$1                         set vcCF1,$01
(2)  517/   291F6 : =$1                         set vcCF2,$01
(2)  517/   291F6 : =$7                         set vcCF3,$07
(2)  517/   291F6 : =$1                         set vcCF4,$01
(2)  518/   291F6 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(2)  518/   291F6 : =$1                         set vcRS1,$01
(2)  518/   291F6 : =$2                         set vcRS2,$02
(2)  518/   291F6 : =$2                         set vcRS3,$02
(2)  518/   291F6 : =$2                         set vcRS4,$02
(2)  519/   291F6 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(2)  519/   291F6 : =$13                        set vcAR1,$13
(2)  519/   291F6 : =$D                         set vcAR2,$0D
(2)  519/   291F6 : =$E                         set vcAR3,$0E
(2)  519/   291F6 : =$E                         set vcAR4,$0E
(2)  520/   291F6 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  520/   291F6 : =$0                                 set vcAM1,$00<<5
(2)  520/   291F6 : =$0                                 set vcAM2,$00<<5
(2)  520/   291F6 : =$0                                 set vcAM3,$00<<5
(2)  520/   291F6 : =$0                                 set vcAM4,$00<<5
(2)  521/   291F6 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(2)  521/   291F6 : =$3                         set vcD1R1,$03
(2)  521/   291F6 : =$E                         set vcD1R2,$0E
(2)  521/   291F6 : =$E                         set vcD1R3,$0E
(2)  521/   291F6 : =$E                         set vcD1R4,$0E
(2)  522/   291F6 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(2)  522/   291F6 : =$7                         set vcD2R1,$07
(2)  522/   291F6 : =$0                         set vcD2R2,$00
(2)  522/   291F6 : =$0                         set vcD2R3,$00
(2)  522/   291F6 : =$0                         set vcD2R4,$00
(2)  523/   291F6 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(2)  523/   291F6 : =$0                         set vcDL1,$00
(2)  523/   291F6 : =$1                         set vcDL2,$01
(2)  523/   291F6 : =$F                         set vcDL3,$0F
(2)  523/   291F6 : =$1                         set vcDL4,$01
(2)  524/   291F6 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  524/   291F6 : =$F                         set vcRR1,$0F
(2)  524/   291F6 : =$F                         set vcRR2,$0F
(2)  524/   291F6 : =$F                         set vcRR3,$0F
(2)  524/   291F6 : =$F                         set vcRR4,$0F
(2)  525/   291F6 : (MACRO)             	smpsVcTotalLevel    $80, $27, $28, $18
(2)  525/   291F6 : =$80                        set vcTL1,$80
(2)  525/   291F6 : =$27                        set vcTL2,$27
(2)  525/   291F6 : =$28                        set vcTL3,$28
(2)  525/   291F6 : =$18                        set vcTL4,$18
(2)  525/   291F6 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  525/   291F7 :                     ;   0     1     2     3     4     5     6     7
(2)  525/   291F7 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  525/   291F7 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  525/   291F7 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  525/   291F7 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  525/   291F7 : =$80                                set vcTLMask1,$80
(2)  525/   291F7 :                     
(2)  525/   291F7 :                     
(2)  525/   291F7 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  525/   291FB : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  525/   291FF : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  525/   29203 : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  525/   29207 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  525/   2920B : 1828 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  526/   2920F :                     
(2)  527/   2920F :                     ;	Voice $07
(2)  528/   2920F :                     ;	$3C
(2)  529/   2920F :                     ;	$32, $32, $71, $42, 	$1F, $18, $1F, $1E, 	$07, $1F, $07, $1F
(2)  530/   2920F :                     ;	$00, $00, $00, $00, 	$1F, $0F, $1F, $0F, 	$1E, $80, $0C, $80
(2)  531/   2920F : (MACRO)             	smpsVcAlgorithm     $04
(2)  531/   2920F : =$4                 vcAlgorithm set $04
(2)  532/   2920F : (MACRO)             	smpsVcFeedback      $07
(2)  532/   2920F : =$7                 vcFeedback set $07
(2)  533/   2920F : (MACRO)             	smpsVcUnusedBits    $00
(2)  533/   2920F : =$0                 vcUnusedBits set $00
(2)  533/   2920F : =$0                                 set vcD1R1Unk,0
(2)  533/   2920F : =$0                                 set vcD1R2Unk,0
(2)  533/   2920F : =$0                                 set vcD1R3Unk,0
(2)  533/   2920F : =$0                                 set vcD1R4Unk,0
(2)  534/   2920F : (MACRO)             	smpsVcDetune        $04, $07, $03, $03
(2)  534/   2920F : =$4                         set vcDT1,$04
(2)  534/   2920F : =$7                         set vcDT2,$07
(2)  534/   2920F : =$3                         set vcDT3,$03
(2)  534/   2920F : =$3                         set vcDT4,$03
(2)  535/   2920F : (MACRO)             	smpsVcCoarseFreq    $02, $01, $02, $02
(2)  535/   2920F : =$2                         set vcCF1,$02
(2)  535/   2920F : =$1                         set vcCF2,$01
(2)  535/   2920F : =$2                         set vcCF3,$02
(2)  535/   2920F : =$2                         set vcCF4,$02
(2)  536/   2920F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  536/   2920F : =$0                         set vcRS1,$00
(2)  536/   2920F : =$0                         set vcRS2,$00
(2)  536/   2920F : =$0                         set vcRS3,$00
(2)  536/   2920F : =$0                         set vcRS4,$00
(2)  537/   2920F : (MACRO)             	smpsVcAttackRate    $1E, $1F, $18, $1F
(2)  537/   2920F : =$1E                        set vcAR1,$1E
(2)  537/   2920F : =$1F                        set vcAR2,$1F
(2)  537/   2920F : =$18                        set vcAR3,$18
(2)  537/   2920F : =$1F                        set vcAR4,$1F
(2)  538/   2920F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  538/   2920F : =$0                                 set vcAM1,$00<<5
(2)  538/   2920F : =$0                                 set vcAM2,$00<<5
(2)  538/   2920F : =$0                                 set vcAM3,$00<<5
(2)  538/   2920F : =$0                                 set vcAM4,$00<<5
(2)  539/   2920F : (MACRO)             	smpsVcDecayRate1    $1F, $07, $1F, $07
(2)  539/   2920F : =$1F                        set vcD1R1,$1F
(2)  539/   2920F : =$7                         set vcD1R2,$07
(2)  539/   2920F : =$1F                        set vcD1R3,$1F
(2)  539/   2920F : =$7                         set vcD1R4,$07
(2)  540/   2920F : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  540/   2920F : =$0                         set vcD2R1,$00
(2)  540/   2920F : =$0                         set vcD2R2,$00
(2)  540/   2920F : =$0                         set vcD2R3,$00
(2)  540/   2920F : =$0                         set vcD2R4,$00
(2)  541/   2920F : (MACRO)             	smpsVcDecayLevel    $00, $01, $00, $01
(2)  541/   2920F : =$0                         set vcDL1,$00
(2)  541/   2920F : =$1                         set vcDL2,$01
(2)  541/   2920F : =$0                         set vcDL3,$00
(2)  541/   2920F : =$1                         set vcDL4,$01
(2)  542/   2920F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  542/   2920F : =$F                         set vcRR1,$0F
(2)  542/   2920F : =$F                         set vcRR2,$0F
(2)  542/   2920F : =$F                         set vcRR3,$0F
(2)  542/   2920F : =$F                         set vcRR4,$0F
(2)  543/   2920F : (MACRO)             	smpsVcTotalLevel    $80, $0C, $80, $1E
(2)  543/   2920F : =$80                        set vcTL1,$80
(2)  543/   2920F : =$C                         set vcTL2,$0C
(2)  543/   2920F : =$80                        set vcTL3,$80
(2)  543/   2920F : =$1E                        set vcTL4,$1E
(2)  543/   2920F : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  543/   29210 :                     ;   0     1     2     3     4     5     6     7
(2)  543/   29210 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  543/   29210 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  543/   29210 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  543/   29210 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  543/   29210 : =$80                                set vcTLMask1,$80
(2)  543/   29210 :                     
(2)  543/   29210 :                     
(2)  543/   29210 : 3232 7142                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  543/   29214 : 1F18 1F1E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  543/   29218 : 071F 071F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  543/   2921C : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  543/   29220 : 1F0F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  543/   29224 : 1E80 0C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  544/   29228 :                     
(2)  545/   29228 :                     ;	Voice $08
(2)  546/   29228 :                     ;	$3C
(2)  547/   29228 :                     ;	$71, $72, $3F, $34, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(2)  548/   29228 :                     ;	$00, $00, $00, $00, 	$23, $08, $02, $F7, 	$15, $80, $1D, $87
(2)  549/   29228 : (MACRO)             	smpsVcAlgorithm     $04
(2)  549/   29228 : =$4                 vcAlgorithm set $04
(2)  550/   29228 : (MACRO)             	smpsVcFeedback      $07
(2)  550/   29228 : =$7                 vcFeedback set $07
(2)  551/   29228 : (MACRO)             	smpsVcUnusedBits    $00
(2)  551/   29228 : =$0                 vcUnusedBits set $00
(2)  551/   29228 : =$0                                 set vcD1R1Unk,0
(2)  551/   29228 : =$0                                 set vcD1R2Unk,0
(2)  551/   29228 : =$0                                 set vcD1R3Unk,0
(2)  551/   29228 : =$0                                 set vcD1R4Unk,0
(2)  552/   29228 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  552/   29228 : =$3                         set vcDT1,$03
(2)  552/   29228 : =$3                         set vcDT2,$03
(2)  552/   29228 : =$7                         set vcDT3,$07
(2)  552/   29228 : =$7                         set vcDT4,$07
(2)  553/   29228 : (MACRO)             	smpsVcCoarseFreq    $04, $0F, $02, $01
(2)  553/   29228 : =$4                         set vcCF1,$04
(2)  553/   29228 : =$F                         set vcCF2,$0F
(2)  553/   29228 : =$2                         set vcCF3,$02
(2)  553/   29228 : =$1                         set vcCF4,$01
(2)  554/   29228 : (MACRO)             	smpsVcRateScale     $00, $02, $01, $02
(2)  554/   29228 : =$0                         set vcRS1,$00
(2)  554/   29228 : =$2                         set vcRS2,$02
(2)  554/   29228 : =$1                         set vcRS3,$01
(2)  554/   29228 : =$2                         set vcRS4,$02
(2)  555/   29228 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $0D
(2)  555/   29228 : =$1F                        set vcAR1,$1F
(2)  555/   29228 : =$1F                        set vcAR2,$1F
(2)  555/   29228 : =$12                        set vcAR3,$12
(2)  555/   29228 : =$D                         set vcAR4,$0D
(2)  556/   29228 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  556/   29228 : =$0                                 set vcAM1,$00<<5
(2)  556/   29228 : =$0                                 set vcAM2,$00<<5
(2)  556/   29228 : =$0                                 set vcAM3,$00<<5
(2)  556/   29228 : =$0                                 set vcAM4,$00<<5
(2)  557/   29228 : (MACRO)             	smpsVcDecayRate1    $0D, $00, $00, $09
(2)  557/   29228 : =$D                         set vcD1R1,$0D
(2)  557/   29228 : =$0                         set vcD1R2,$00
(2)  557/   29228 : =$0                         set vcD1R3,$00
(2)  557/   29228 : =$9                         set vcD1R4,$09
(2)  558/   29228 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  558/   29228 : =$0                         set vcD2R1,$00
(2)  558/   29228 : =$0                         set vcD2R2,$00
(2)  558/   29228 : =$0                         set vcD2R3,$00
(2)  558/   29228 : =$0                         set vcD2R4,$00
(2)  559/   29228 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $00, $02
(2)  559/   29228 : =$F                         set vcDL1,$0F
(2)  559/   29228 : =$0                         set vcDL2,$00
(2)  559/   29228 : =$0                         set vcDL3,$00
(2)  559/   29228 : =$2                         set vcDL4,$02
(2)  560/   29228 : (MACRO)             	smpsVcReleaseRate   $07, $02, $08, $03
(2)  560/   29228 : =$7                         set vcRR1,$07
(2)  560/   29228 : =$2                         set vcRR2,$02
(2)  560/   29228 : =$8                         set vcRR3,$08
(2)  560/   29228 : =$3                         set vcRR4,$03
(2)  561/   29228 : (MACRO)             	smpsVcTotalLevel    $87, $1D, $80, $15
(2)  561/   29228 : =$87                        set vcTL1,$87
(2)  561/   29228 : =$1D                        set vcTL2,$1D
(2)  561/   29228 : =$80                        set vcTL3,$80
(2)  561/   29228 : =$15                        set vcTL4,$15
(2)  561/   29228 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  561/   29229 :                     ;   0     1     2     3     4     5     6     7
(2)  561/   29229 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  561/   29229 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  561/   29229 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  561/   29229 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  561/   29229 : =$80                                set vcTLMask1,$80
(2)  561/   29229 :                     
(2)  561/   29229 :                     
(2)  561/   29229 : 7172 3F34                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  561/   2922D : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  561/   29231 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  561/   29235 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  561/   29239 : 2308 02F7                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  561/   2923D : 1580 1D87                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  562/   29241 :                     
(2)  563/   29241 :                     ;	Voice $09
(2)  564/   29241 :                     ;	$3D
(2)  565/   29241 :                     ;	$01, $01, $00, $00, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
(2)  566/   29241 :                     ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
(2)  567/   29241 : (MACRO)             	smpsVcAlgorithm     $05
(2)  567/   29241 : =$5                 vcAlgorithm set $05
(2)  568/   29241 : (MACRO)             	smpsVcFeedback      $07
(2)  568/   29241 : =$7                 vcFeedback set $07
(2)  569/   29241 : (MACRO)             	smpsVcUnusedBits    $00
(2)  569/   29241 : =$0                 vcUnusedBits set $00
(2)  569/   29241 : =$0                                 set vcD1R1Unk,0
(2)  569/   29241 : =$0                                 set vcD1R2Unk,0
(2)  569/   29241 : =$0                                 set vcD1R3Unk,0
(2)  569/   29241 : =$0                                 set vcD1R4Unk,0
(2)  570/   29241 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  570/   29241 : =$0                         set vcDT1,$00
(2)  570/   29241 : =$0                         set vcDT2,$00
(2)  570/   29241 : =$0                         set vcDT3,$00
(2)  570/   29241 : =$0                         set vcDT4,$00
(2)  571/   29241 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $01
(2)  571/   29241 : =$0                         set vcCF1,$00
(2)  571/   29241 : =$0                         set vcCF2,$00
(2)  571/   29241 : =$1                         set vcCF3,$01
(2)  571/   29241 : =$1                         set vcCF4,$01
(2)  572/   29241 : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(2)  572/   29241 : =$1                         set vcRS1,$01
(2)  572/   29241 : =$0                         set vcRS2,$00
(2)  572/   29241 : =$1                         set vcRS3,$01
(2)  572/   29241 : =$2                         set vcRS4,$02
(2)  573/   29241 : (MACRO)             	smpsVcAttackRate    $0C, $14, $12, $0E
(2)  573/   29241 : =$C                         set vcAR1,$0C
(2)  573/   29241 : =$14                        set vcAR2,$14
(2)  573/   29241 : =$12                        set vcAR3,$12
(2)  573/   29241 : =$E                         set vcAR4,$0E
(2)  574/   29241 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  574/   29241 : =$0                                 set vcAM1,$00<<5
(2)  574/   29241 : =$0                                 set vcAM2,$00<<5
(2)  574/   29241 : =$0                                 set vcAM3,$00<<5
(2)  574/   29241 : =$0                                 set vcAM4,$00<<5
(2)  575/   29241 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $08, $08
(2)  575/   29241 : =$3                         set vcD1R1,$03
(2)  575/   29241 : =$E                         set vcD1R2,$0E
(2)  575/   29241 : =$8                         set vcD1R3,$08
(2)  575/   29241 : =$8                         set vcD1R4,$08
(2)  576/   29241 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  576/   29241 : =$0                         set vcD2R1,$00
(2)  576/   29241 : =$0                         set vcD2R2,$00
(2)  576/   29241 : =$0                         set vcD2R3,$00
(2)  576/   29241 : =$0                         set vcD2R4,$00
(2)  577/   29241 : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $01
(2)  577/   29241 : =$1                         set vcDL1,$01
(2)  577/   29241 : =$1                         set vcDL2,$01
(2)  577/   29241 : =$1                         set vcDL3,$01
(2)  577/   29241 : =$1                         set vcDL4,$01
(2)  578/   29241 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  578/   29241 : =$F                         set vcRR1,$0F
(2)  578/   29241 : =$F                         set vcRR2,$0F
(2)  578/   29241 : =$F                         set vcRR3,$0F
(2)  578/   29241 : =$F                         set vcRR4,$0F
(2)  579/   29241 : (MACRO)             	smpsVcTotalLevel    $9B, $80, $80, $1B
(2)  579/   29241 : =$9B                        set vcTL1,$9B
(2)  579/   29241 : =$80                        set vcTL2,$80
(2)  579/   29241 : =$80                        set vcTL3,$80
(2)  579/   29241 : =$1B                        set vcTL4,$1B
(2)  579/   29241 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  579/   29242 :                     ;   0     1     2     3     4     5     6     7
(2)  579/   29242 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  579/   29242 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  579/   29242 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  579/   29242 : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  579/   29242 : =$80                                set vcTLMask1,$80
(2)  579/   29242 :                     
(2)  579/   29242 :                     
(2)  579/   29242 : 0101 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  579/   29246 : 8E52 144C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  579/   2924A : 0808 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  579/   2924E : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  579/   29252 : 1F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  579/   29256 : 1B80 809B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  580/   2925A :                     
(2)  581/   2925A :                     ;	Voice $0A
(2)  582/   2925A :                     ;	$3A
(2)  583/   2925A :                     ;	$31, $53, $31, $41, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
(2)  584/   2925A :                     ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
(2)  585/   2925A : (MACRO)             	smpsVcAlgorithm     $02
(2)  585/   2925A : =$2                 vcAlgorithm set $02
(2)  586/   2925A : (MACRO)             	smpsVcFeedback      $07
(2)  586/   2925A : =$7                 vcFeedback set $07
(2)  587/   2925A : (MACRO)             	smpsVcUnusedBits    $00
(2)  587/   2925A : =$0                 vcUnusedBits set $00
(2)  587/   2925A : =$0                                 set vcD1R1Unk,0
(2)  587/   2925A : =$0                                 set vcD1R2Unk,0
(2)  587/   2925A : =$0                                 set vcD1R3Unk,0
(2)  587/   2925A : =$0                                 set vcD1R4Unk,0
(2)  588/   2925A : (MACRO)             	smpsVcDetune        $04, $03, $05, $03
(2)  588/   2925A : =$4                         set vcDT1,$04
(2)  588/   2925A : =$3                         set vcDT2,$03
(2)  588/   2925A : =$5                         set vcDT3,$05
(2)  588/   2925A : =$3                         set vcDT4,$03
(2)  589/   2925A : (MACRO)             	smpsVcCoarseFreq    $01, $01, $03, $01
(2)  589/   2925A : =$1                         set vcCF1,$01
(2)  589/   2925A : =$1                         set vcCF2,$01
(2)  589/   2925A : =$3                         set vcCF3,$03
(2)  589/   2925A : =$1                         set vcCF4,$01
(2)  590/   2925A : (MACRO)             	smpsVcRateScale     $01, $00, $01, $02
(2)  590/   2925A : =$1                         set vcRS1,$01
(2)  590/   2925A : =$0                         set vcRS2,$00
(2)  590/   2925A : =$1                         set vcRS3,$01
(2)  590/   2925A : =$2                         set vcRS4,$02
(2)  591/   2925A : (MACRO)             	smpsVcAttackRate    $12, $15, $0F, $0D
(2)  591/   2925A : =$12                        set vcAR1,$12
(2)  591/   2925A : =$15                        set vcAR2,$15
(2)  591/   2925A : =$F                         set vcAR3,$0F
(2)  591/   2925A : =$D                         set vcAR4,$0D
(2)  592/   2925A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  592/   2925A : =$0                                 set vcAM1,$00<<5
(2)  592/   2925A : =$0                                 set vcAM2,$00<<5
(2)  592/   2925A : =$0                                 set vcAM3,$00<<5
(2)  592/   2925A : =$0                                 set vcAM4,$00<<5
(2)  593/   2925A : (MACRO)             	smpsVcDecayRate1    $04, $07, $08, $06
(2)  593/   2925A : =$4                         set vcD1R1,$04
(2)  593/   2925A : =$7                         set vcD1R2,$07
(2)  593/   2925A : =$8                         set vcD1R3,$08
(2)  593/   2925A : =$6                         set vcD1R4,$06
(2)  594/   2925A : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $02
(2)  594/   2925A : =$0                         set vcD2R1,$00
(2)  594/   2925A : =$0                         set vcD2R2,$00
(2)  594/   2925A : =$0                         set vcD2R3,$00
(2)  594/   2925A : =$2                         set vcD2R4,$02
(2)  595/   2925A : (MACRO)             	smpsVcDecayLevel    $02, $02, $01, $01
(2)  595/   2925A : =$2                         set vcDL1,$02
(2)  595/   2925A : =$2                         set vcDL2,$02
(2)  595/   2925A : =$1                         set vcDL3,$01
(2)  595/   2925A : =$1                         set vcDL4,$01
(2)  596/   2925A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  596/   2925A : =$F                         set vcRR1,$0F
(2)  596/   2925A : =$F                         set vcRR2,$0F
(2)  596/   2925A : =$F                         set vcRR3,$0F
(2)  596/   2925A : =$F                         set vcRR4,$0F
(2)  597/   2925A : (MACRO)             	smpsVcTotalLevel    $80, $2A, $20, $19
(2)  597/   2925A : =$80                        set vcTL1,$80
(2)  597/   2925A : =$2A                        set vcTL2,$2A
(2)  597/   2925A : =$20                        set vcTL3,$20
(2)  597/   2925A : =$19                        set vcTL4,$19
(2)  597/   2925A : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  597/   2925B :                     ;   0     1     2     3     4     5     6     7
(2)  597/   2925B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  597/   2925B : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  597/   2925B : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  597/   2925B : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  597/   2925B : =$80                                set vcTLMask1,$80
(2)  597/   2925B :                     
(2)  597/   2925B :                     
(2)  597/   2925B : 3153 3141                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  597/   2925F : 8D4F 1552                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  597/   29263 : 0608 0704                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  597/   29267 : 0200 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  597/   2926B : 1F1F 2F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  597/   2926F : 1920 2A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  598/   29273 :                     
(2)  599/   29273 :                     ;	Voice $0B
(2)  600/   29273 :                     ;	$3C
(2)  601/   29273 :                     ;	$36, $31, $76, $71, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
(2)  602/   29273 :                     ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
(2)  603/   29273 : (MACRO)             	smpsVcAlgorithm     $04
(2)  603/   29273 : =$4                 vcAlgorithm set $04
(2)  604/   29273 : (MACRO)             	smpsVcFeedback      $07
(2)  604/   29273 : =$7                 vcFeedback set $07
(2)  605/   29273 : (MACRO)             	smpsVcUnusedBits    $00
(2)  605/   29273 : =$0                 vcUnusedBits set $00
(2)  605/   29273 : =$0                                 set vcD1R1Unk,0
(2)  605/   29273 : =$0                                 set vcD1R2Unk,0
(2)  605/   29273 : =$0                                 set vcD1R3Unk,0
(2)  605/   29273 : =$0                                 set vcD1R4Unk,0
(2)  606/   29273 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(2)  606/   29273 : =$7                         set vcDT1,$07
(2)  606/   29273 : =$7                         set vcDT2,$07
(2)  606/   29273 : =$3                         set vcDT3,$03
(2)  606/   29273 : =$3                         set vcDT4,$03
(2)  607/   29273 : (MACRO)             	smpsVcCoarseFreq    $01, $06, $01, $06
(2)  607/   29273 : =$1                         set vcCF1,$01
(2)  607/   29273 : =$6                         set vcCF2,$06
(2)  607/   29273 : =$1                         set vcCF3,$01
(2)  607/   29273 : =$6                         set vcCF4,$06
(2)  608/   29273 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  608/   29273 : =$2                         set vcRS1,$02
(2)  608/   29273 : =$2                         set vcRS2,$02
(2)  608/   29273 : =$2                         set vcRS3,$02
(2)  608/   29273 : =$2                         set vcRS4,$02
(2)  609/   29273 : (MACRO)             	smpsVcAttackRate    $1F, $16, $1F, $14
(2)  609/   29273 : =$1F                        set vcAR1,$1F
(2)  609/   29273 : =$16                        set vcAR2,$16
(2)  609/   29273 : =$1F                        set vcAR3,$1F
(2)  609/   29273 : =$14                        set vcAR4,$14
(2)  610/   29273 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  610/   29273 : =$0                                 set vcAM1,$00<<5
(2)  610/   29273 : =$0                                 set vcAM2,$00<<5
(2)  610/   29273 : =$0                                 set vcAM3,$00<<5
(2)  610/   29273 : =$0                                 set vcAM4,$00<<5
(2)  611/   29273 : (MACRO)             	smpsVcDecayRate1    $0F, $14, $00, $12
(2)  611/   29273 : =$F                         set vcD1R1,$0F
(2)  611/   29273 : =$14                        set vcD1R2,$14
(2)  611/   29273 : =$0                         set vcD1R3,$00
(2)  611/   29273 : =$12                        set vcD1R4,$12
(2)  612/   29273 : (MACRO)             	smpsVcDecayRate2    $0D, $04, $0A, $04
(2)  612/   29273 : =$D                         set vcD2R1,$0D
(2)  612/   29273 : =$4                         set vcD2R2,$04
(2)  612/   29273 : =$A                         set vcD2R3,$0A
(2)  612/   29273 : =$4                         set vcD2R4,$04
(2)  613/   29273 : (MACRO)             	smpsVcDecayLevel    $02, $04, $00, $02
(2)  613/   29273 : =$2                         set vcDL1,$02
(2)  613/   29273 : =$4                         set vcDL2,$04
(2)  613/   29273 : =$0                         set vcDL3,$00
(2)  613/   29273 : =$2                         set vcDL4,$02
(2)  614/   29273 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  614/   29273 : =$F                         set vcRR1,$0F
(2)  614/   29273 : =$F                         set vcRR2,$0F
(2)  614/   29273 : =$F                         set vcRR3,$0F
(2)  614/   29273 : =$F                         set vcRR4,$0F
(2)  615/   29273 : (MACRO)             	smpsVcTotalLevel    $80, $1A, $80, $33
(2)  615/   29273 : =$80                        set vcTL1,$80
(2)  615/   29273 : =$1A                        set vcTL2,$1A
(2)  615/   29273 : =$80                        set vcTL3,$80
(2)  615/   29273 : =$33                        set vcTL4,$33
(2)  615/   29273 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  615/   29274 :                     ;   0     1     2     3     4     5     6     7
(2)  615/   29274 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  615/   29274 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  615/   29274 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  615/   29274 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  615/   29274 : =$80                                set vcTLMask1,$80
(2)  615/   29274 :                     
(2)  615/   29274 :                     
(2)  615/   29274 : 3631 7671                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  615/   29278 : 949F 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  615/   2927C : 1200 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  615/   29280 : 040A 040D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  615/   29284 : 2F0F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  615/   29288 : 3380 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  616/   2928C :                     
(2)  617/   2928C :                     ;	Voice $0C
(2)  618/   2928C :                     ;	$34
(2)  619/   2928C :                     ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
(2)  620/   2928C :                     ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
(2)  621/   2928C : (MACRO)             	smpsVcAlgorithm     $04
(2)  621/   2928C : =$4                 vcAlgorithm set $04
(2)  622/   2928C : (MACRO)             	smpsVcFeedback      $06
(2)  622/   2928C : =$6                 vcFeedback set $06
(2)  623/   2928C : (MACRO)             	smpsVcUnusedBits    $00
(2)  623/   2928C : =$0                 vcUnusedBits set $00
(2)  623/   2928C : =$0                                 set vcD1R1Unk,0
(2)  623/   2928C : =$0                                 set vcD1R2Unk,0
(2)  623/   2928C : =$0                                 set vcD1R3Unk,0
(2)  623/   2928C : =$0                                 set vcD1R4Unk,0
(2)  624/   2928C : (MACRO)             	smpsVcDetune        $07, $07, $04, $03
(2)  624/   2928C : =$7                         set vcDT1,$07
(2)  624/   2928C : =$7                         set vcDT2,$07
(2)  624/   2928C : =$4                         set vcDT3,$04
(2)  624/   2928C : =$3                         set vcDT4,$03
(2)  625/   2928C : (MACRO)             	smpsVcCoarseFreq    $04, $0E, $01, $03
(2)  625/   2928C : =$4                         set vcCF1,$04
(2)  625/   2928C : =$E                         set vcCF2,$0E
(2)  625/   2928C : =$1                         set vcCF3,$01
(2)  625/   2928C : =$3                         set vcCF4,$03
(2)  626/   2928C : (MACRO)             	smpsVcRateScale     $00, $01, $02, $01
(2)  626/   2928C : =$0                         set vcRS1,$00
(2)  626/   2928C : =$1                         set vcRS2,$01
(2)  626/   2928C : =$2                         set vcRS3,$02
(2)  626/   2928C : =$1                         set vcRS4,$01
(2)  627/   2928C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1B
(2)  627/   2928C : =$1F                        set vcAR1,$1F
(2)  627/   2928C : =$1F                        set vcAR2,$1F
(2)  627/   2928C : =$1F                        set vcAR3,$1F
(2)  627/   2928C : =$1B                        set vcAR4,$1B
(2)  628/   2928C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  628/   2928C : =$0                                 set vcAM1,$00<<5
(2)  628/   2928C : =$0                                 set vcAM2,$00<<5
(2)  628/   2928C : =$0                                 set vcAM3,$00<<5
(2)  628/   2928C : =$0                                 set vcAM4,$00<<5
(2)  629/   2928C : (MACRO)             	smpsVcDecayRate1    $08, $07, $07, $04
(2)  629/   2928C : =$8                         set vcD1R1,$08
(2)  629/   2928C : =$7                         set vcD1R2,$07
(2)  629/   2928C : =$7                         set vcD1R3,$07
(2)  629/   2928C : =$4                         set vcD1R4,$04
(2)  630/   2928C : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  630/   2928C : =$0                         set vcD2R1,$00
(2)  630/   2928C : =$0                         set vcD2R2,$00
(2)  630/   2928C : =$0                         set vcD2R3,$00
(2)  630/   2928C : =$0                         set vcD2R4,$00
(2)  631/   2928C : (MACRO)             	smpsVcDecayLevel    $0F, $0E, $0F, $0F
(2)  631/   2928C : =$F                         set vcDL1,$0F
(2)  631/   2928C : =$E                         set vcDL2,$0E
(2)  631/   2928C : =$F                         set vcDL3,$0F
(2)  631/   2928C : =$F                         set vcDL4,$0F
(2)  632/   2928C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  632/   2928C : =$F                         set vcRR1,$0F
(2)  632/   2928C : =$F                         set vcRR2,$0F
(2)  632/   2928C : =$F                         set vcRR3,$0F
(2)  632/   2928C : =$F                         set vcRR4,$0F
(2)  633/   2928C : (MACRO)             	smpsVcTotalLevel    $97, $29, $90, $23
(2)  633/   2928C : =$97                        set vcTL1,$97
(2)  633/   2928C : =$29                        set vcTL2,$29
(2)  633/   2928C : =$90                        set vcTL3,$90
(2)  633/   2928C : =$23                        set vcTL4,$23
(2)  633/   2928C : 34                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  633/   2928D :                     ;   0     1     2     3     4     5     6     7
(2)  633/   2928D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  633/   2928D : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  633/   2928D : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  633/   2928D : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  633/   2928D : =$80                                set vcTLMask1,$80
(2)  633/   2928D :                     
(2)  633/   2928D :                     
(2)  633/   2928D : 3341 7E74                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  633/   29291 : 5B9F 5F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  633/   29295 : 0407 0708                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  633/   29299 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  633/   2929D : FFFF EFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  633/   292A1 : 2390 2997                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  634/   292A5 :                     
(2)  635/   292A5 :                     ;	Voice $0D
(2)  636/   292A5 :                     ;	$38
(2)  637/   292A5 :                     ;	$63, $31, $31, $31, 	$10, $13, $1A, $1B, 	$0E, $00, $00, $00
(2)  638/   292A5 :                     ;	$00, $00, $00, $00, 	$3F, $0F, $0F, $0F, 	$1A, $19, $1A, $80
(2)  639/   292A5 : (MACRO)             	smpsVcAlgorithm     $00
(2)  639/   292A5 : =$0                 vcAlgorithm set $00
(2)  640/   292A5 : (MACRO)             	smpsVcFeedback      $07
(2)  640/   292A5 : =$7                 vcFeedback set $07
(2)  641/   292A5 : (MACRO)             	smpsVcUnusedBits    $00
(2)  641/   292A5 : =$0                 vcUnusedBits set $00
(2)  641/   292A5 : =$0                                 set vcD1R1Unk,0
(2)  641/   292A5 : =$0                                 set vcD1R2Unk,0
(2)  641/   292A5 : =$0                                 set vcD1R3Unk,0
(2)  641/   292A5 : =$0                                 set vcD1R4Unk,0
(2)  642/   292A5 : (MACRO)             	smpsVcDetune        $03, $03, $03, $06
(2)  642/   292A5 : =$3                         set vcDT1,$03
(2)  642/   292A5 : =$3                         set vcDT2,$03
(2)  642/   292A5 : =$3                         set vcDT3,$03
(2)  642/   292A5 : =$6                         set vcDT4,$06
(2)  643/   292A5 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $03
(2)  643/   292A5 : =$1                         set vcCF1,$01
(2)  643/   292A5 : =$1                         set vcCF2,$01
(2)  643/   292A5 : =$1                         set vcCF3,$01
(2)  643/   292A5 : =$3                         set vcCF4,$03
(2)  644/   292A5 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  644/   292A5 : =$0                         set vcRS1,$00
(2)  644/   292A5 : =$0                         set vcRS2,$00
(2)  644/   292A5 : =$0                         set vcRS3,$00
(2)  644/   292A5 : =$0                         set vcRS4,$00
(2)  645/   292A5 : (MACRO)             	smpsVcAttackRate    $1B, $1A, $13, $10
(2)  645/   292A5 : =$1B                        set vcAR1,$1B
(2)  645/   292A5 : =$1A                        set vcAR2,$1A
(2)  645/   292A5 : =$13                        set vcAR3,$13
(2)  645/   292A5 : =$10                        set vcAR4,$10
(2)  646/   292A5 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  646/   292A5 : =$0                                 set vcAM1,$00<<5
(2)  646/   292A5 : =$0                                 set vcAM2,$00<<5
(2)  646/   292A5 : =$0                                 set vcAM3,$00<<5
(2)  646/   292A5 : =$0                                 set vcAM4,$00<<5
(2)  647/   292A5 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $0E
(2)  647/   292A5 : =$0                         set vcD1R1,$00
(2)  647/   292A5 : =$0                         set vcD1R2,$00
(2)  647/   292A5 : =$0                         set vcD1R3,$00
(2)  647/   292A5 : =$E                         set vcD1R4,$0E
(2)  648/   292A5 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  648/   292A5 : =$0                         set vcD2R1,$00
(2)  648/   292A5 : =$0                         set vcD2R2,$00
(2)  648/   292A5 : =$0                         set vcD2R3,$00
(2)  648/   292A5 : =$0                         set vcD2R4,$00
(2)  649/   292A5 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $03
(2)  649/   292A5 : =$0                         set vcDL1,$00
(2)  649/   292A5 : =$0                         set vcDL2,$00
(2)  649/   292A5 : =$0                         set vcDL3,$00
(2)  649/   292A5 : =$3                         set vcDL4,$03
(2)  650/   292A5 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  650/   292A5 : =$F                         set vcRR1,$0F
(2)  650/   292A5 : =$F                         set vcRR2,$0F
(2)  650/   292A5 : =$F                         set vcRR3,$0F
(2)  650/   292A5 : =$F                         set vcRR4,$0F
(2)  651/   292A5 : (MACRO)             	smpsVcTotalLevel    $80, $1A, $19, $1A
(2)  651/   292A5 : =$80                        set vcTL1,$80
(2)  651/   292A5 : =$1A                        set vcTL2,$1A
(2)  651/   292A5 : =$19                        set vcTL3,$19
(2)  651/   292A5 : =$1A                        set vcTL4,$1A
(2)  651/   292A5 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  651/   292A6 :                     ;   0     1     2     3     4     5     6     7
(2)  651/   292A6 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  651/   292A6 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  651/   292A6 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  651/   292A6 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  651/   292A6 : =$80                                set vcTLMask1,$80
(2)  651/   292A6 :                     
(2)  651/   292A6 :                     
(2)  651/   292A6 : 6331 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  651/   292AA : 1013 1A1B                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  651/   292AE : 0E00 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  651/   292B2 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  651/   292B6 : 3F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  651/   292BA : 1A19 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  652/   292BE :                     
(2)  653/   292BE :                     ;	Voice $0E
(2)  654/   292BE :                     ;	$3A
(2)  655/   292BE :                     ;	$31, $25, $73, $41, 	$5F, $1F, $1F, $9C, 	$08, $05, $04, $1E
(2)  656/   292BE :                     ;	$03, $04, $02, $06, 	$2F, $2F, $1F, $0F, 	$29, $27, $1F, $80
(2)  657/   292BE : (MACRO)             	smpsVcAlgorithm     $02
(2)  657/   292BE : =$2                 vcAlgorithm set $02
(2)  658/   292BE : (MACRO)             	smpsVcFeedback      $07
(2)  658/   292BE : =$7                 vcFeedback set $07
(2)  659/   292BE : (MACRO)             	smpsVcUnusedBits    $00
(2)  659/   292BE : =$0                 vcUnusedBits set $00
(2)  659/   292BE : =$0                                 set vcD1R1Unk,0
(2)  659/   292BE : =$0                                 set vcD1R2Unk,0
(2)  659/   292BE : =$0                                 set vcD1R3Unk,0
(2)  659/   292BE : =$0                                 set vcD1R4Unk,0
(2)  660/   292BE : (MACRO)             	smpsVcDetune        $04, $07, $02, $03
(2)  660/   292BE : =$4                         set vcDT1,$04
(2)  660/   292BE : =$7                         set vcDT2,$07
(2)  660/   292BE : =$2                         set vcDT3,$02
(2)  660/   292BE : =$3                         set vcDT4,$03
(2)  661/   292BE : (MACRO)             	smpsVcCoarseFreq    $01, $03, $05, $01
(2)  661/   292BE : =$1                         set vcCF1,$01
(2)  661/   292BE : =$3                         set vcCF2,$03
(2)  661/   292BE : =$5                         set vcCF3,$05
(2)  661/   292BE : =$1                         set vcCF4,$01
(2)  662/   292BE : (MACRO)             	smpsVcRateScale     $02, $00, $00, $01
(2)  662/   292BE : =$2                         set vcRS1,$02
(2)  662/   292BE : =$0                         set vcRS2,$00
(2)  662/   292BE : =$0                         set vcRS3,$00
(2)  662/   292BE : =$1                         set vcRS4,$01
(2)  663/   292BE : (MACRO)             	smpsVcAttackRate    $1C, $1F, $1F, $1F
(2)  663/   292BE : =$1C                        set vcAR1,$1C
(2)  663/   292BE : =$1F                        set vcAR2,$1F
(2)  663/   292BE : =$1F                        set vcAR3,$1F
(2)  663/   292BE : =$1F                        set vcAR4,$1F
(2)  664/   292BE : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  664/   292BE : =$0                                 set vcAM1,$00<<5
(2)  664/   292BE : =$0                                 set vcAM2,$00<<5
(2)  664/   292BE : =$0                                 set vcAM3,$00<<5
(2)  664/   292BE : =$0                                 set vcAM4,$00<<5
(2)  665/   292BE : (MACRO)             	smpsVcDecayRate1    $1E, $04, $05, $08
(2)  665/   292BE : =$1E                        set vcD1R1,$1E
(2)  665/   292BE : =$4                         set vcD1R2,$04
(2)  665/   292BE : =$5                         set vcD1R3,$05
(2)  665/   292BE : =$8                         set vcD1R4,$08
(2)  666/   292BE : (MACRO)             	smpsVcDecayRate2    $06, $02, $04, $03
(2)  666/   292BE : =$6                         set vcD2R1,$06
(2)  666/   292BE : =$2                         set vcD2R2,$02
(2)  666/   292BE : =$4                         set vcD2R3,$04
(2)  666/   292BE : =$3                         set vcD2R4,$03
(2)  667/   292BE : (MACRO)             	smpsVcDecayLevel    $00, $01, $02, $02
(2)  667/   292BE : =$0                         set vcDL1,$00
(2)  667/   292BE : =$1                         set vcDL2,$01
(2)  667/   292BE : =$2                         set vcDL3,$02
(2)  667/   292BE : =$2                         set vcDL4,$02
(2)  668/   292BE : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  668/   292BE : =$F                         set vcRR1,$0F
(2)  668/   292BE : =$F                         set vcRR2,$0F
(2)  668/   292BE : =$F                         set vcRR3,$0F
(2)  668/   292BE : =$F                         set vcRR4,$0F
(2)  669/   292BE : (MACRO)             	smpsVcTotalLevel    $80, $1F, $27, $29
(2)  669/   292BE : =$80                        set vcTL1,$80
(2)  669/   292BE : =$1F                        set vcTL2,$1F
(2)  669/   292BE : =$27                        set vcTL3,$27
(2)  669/   292BE : =$29                        set vcTL4,$29
(2)  669/   292BE : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  669/   292BF :                     ;   0     1     2     3     4     5     6     7
(2)  669/   292BF :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  669/   292BF : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  669/   292BF : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  669/   292BF : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  669/   292BF : =$80                                set vcTLMask1,$80
(2)  669/   292BF :                     
(2)  669/   292BF :                     
(2)  669/   292BF : 3125 7341                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  669/   292C3 : 5F1F 1F9C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  669/   292C7 : 0805 041E                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  669/   292CB : 0304 0206                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  669/   292CF : 2F2F 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  669/   292D3 : 2927 1F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  670/   292D7 :                     
(2)  671/   292D7 :                     ;	Voice $0F
(2)  672/   292D7 :                     ;	$04
(2)  673/   292D7 :                     ;	$71, $41, $31, $31, 	$12, $12, $12, $12, 	$00, $00, $00, $00
(2)  674/   292D7 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$23, $80, $23, $80
(2)  675/   292D7 : (MACRO)             	smpsVcAlgorithm     $04
(2)  675/   292D7 : =$4                 vcAlgorithm set $04
(2)  676/   292D7 : (MACRO)             	smpsVcFeedback      $00
(2)  676/   292D7 : =$0                 vcFeedback set $00
(2)  677/   292D7 : (MACRO)             	smpsVcUnusedBits    $00
(2)  677/   292D7 : =$0                 vcUnusedBits set $00
(2)  677/   292D7 : =$0                                 set vcD1R1Unk,0
(2)  677/   292D7 : =$0                                 set vcD1R2Unk,0
(2)  677/   292D7 : =$0                                 set vcD1R3Unk,0
(2)  677/   292D7 : =$0                                 set vcD1R4Unk,0
(2)  678/   292D7 : (MACRO)             	smpsVcDetune        $03, $03, $04, $07
(2)  678/   292D7 : =$3                         set vcDT1,$03
(2)  678/   292D7 : =$3                         set vcDT2,$03
(2)  678/   292D7 : =$4                         set vcDT3,$04
(2)  678/   292D7 : =$7                         set vcDT4,$07
(2)  679/   292D7 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $01
(2)  679/   292D7 : =$1                         set vcCF1,$01
(2)  679/   292D7 : =$1                         set vcCF2,$01
(2)  679/   292D7 : =$1                         set vcCF3,$01
(2)  679/   292D7 : =$1                         set vcCF4,$01
(2)  680/   292D7 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  680/   292D7 : =$0                         set vcRS1,$00
(2)  680/   292D7 : =$0                         set vcRS2,$00
(2)  680/   292D7 : =$0                         set vcRS3,$00
(2)  680/   292D7 : =$0                         set vcRS4,$00
(2)  681/   292D7 : (MACRO)             	smpsVcAttackRate    $12, $12, $12, $12
(2)  681/   292D7 : =$12                        set vcAR1,$12
(2)  681/   292D7 : =$12                        set vcAR2,$12
(2)  681/   292D7 : =$12                        set vcAR3,$12
(2)  681/   292D7 : =$12                        set vcAR4,$12
(2)  682/   292D7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  682/   292D7 : =$0                                 set vcAM1,$00<<5
(2)  682/   292D7 : =$0                                 set vcAM2,$00<<5
(2)  682/   292D7 : =$0                                 set vcAM3,$00<<5
(2)  682/   292D7 : =$0                                 set vcAM4,$00<<5
(2)  683/   292D7 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(2)  683/   292D7 : =$0                         set vcD1R1,$00
(2)  683/   292D7 : =$0                         set vcD1R2,$00
(2)  683/   292D7 : =$0                         set vcD1R3,$00
(2)  683/   292D7 : =$0                         set vcD1R4,$00
(2)  684/   292D7 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(2)  684/   292D7 : =$0                         set vcD2R1,$00
(2)  684/   292D7 : =$0                         set vcD2R2,$00
(2)  684/   292D7 : =$0                         set vcD2R3,$00
(2)  684/   292D7 : =$0                         set vcD2R4,$00
(2)  685/   292D7 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(2)  685/   292D7 : =$0                         set vcDL1,$00
(2)  685/   292D7 : =$0                         set vcDL2,$00
(2)  685/   292D7 : =$0                         set vcDL3,$00
(2)  685/   292D7 : =$0                         set vcDL4,$00
(2)  686/   292D7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  686/   292D7 : =$F                         set vcRR1,$0F
(2)  686/   292D7 : =$F                         set vcRR2,$0F
(2)  686/   292D7 : =$F                         set vcRR3,$0F
(2)  686/   292D7 : =$F                         set vcRR4,$0F
(2)  687/   292D7 : (MACRO)             	smpsVcTotalLevel    $80, $23, $80, $23
(2)  687/   292D7 : =$80                        set vcTL1,$80
(2)  687/   292D7 : =$23                        set vcTL2,$23
(2)  687/   292D7 : =$80                        set vcTL3,$80
(2)  687/   292D7 : =$23                        set vcTL4,$23
(2)  687/   292D7 : 04                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  687/   292D8 :                     ;   0     1     2     3     4     5     6     7
(2)  687/   292D8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  687/   292D8 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  687/   292D8 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  687/   292D8 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  687/   292D8 : =$80                                set vcTLMask1,$80
(2)  687/   292D8 :                     
(2)  687/   292D8 :                     
(2)  687/   292D8 : 7141 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  687/   292DC : 1212 1212                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  687/   292E0 : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  687/   292E4 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  687/   292E8 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  687/   292EC : 2380 2380                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  688/   292F0 :                     
(2)  689/   292F0 :                     ;	Voice $10
(2)  690/   292F0 :                     ;	$14
(2)  691/   292F0 :                     ;	$75, $72, $35, $32, 	$9F, $9F, $9F, $9F, 	$05, $05, $00, $0A
(2)  692/   292F0 :                     ;	$05, $05, $07, $05, 	$2F, $FF, $0F, $2F, 	$1E, $80, $14, $80
(2)  693/   292F0 : (MACRO)             	smpsVcAlgorithm     $04
(2)  693/   292F0 : =$4                 vcAlgorithm set $04
(2)  694/   292F0 : (MACRO)             	smpsVcFeedback      $02
(2)  694/   292F0 : =$2                 vcFeedback set $02
(2)  695/   292F0 : (MACRO)             	smpsVcUnusedBits    $00
(2)  695/   292F0 : =$0                 vcUnusedBits set $00
(2)  695/   292F0 : =$0                                 set vcD1R1Unk,0
(2)  695/   292F0 : =$0                                 set vcD1R2Unk,0
(2)  695/   292F0 : =$0                                 set vcD1R3Unk,0
(2)  695/   292F0 : =$0                                 set vcD1R4Unk,0
(2)  696/   292F0 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  696/   292F0 : =$3                         set vcDT1,$03
(2)  696/   292F0 : =$3                         set vcDT2,$03
(2)  696/   292F0 : =$7                         set vcDT3,$07
(2)  696/   292F0 : =$7                         set vcDT4,$07
(2)  697/   292F0 : (MACRO)             	smpsVcCoarseFreq    $02, $05, $02, $05
(2)  697/   292F0 : =$2                         set vcCF1,$02
(2)  697/   292F0 : =$5                         set vcCF2,$05
(2)  697/   292F0 : =$2                         set vcCF3,$02
(2)  697/   292F0 : =$5                         set vcCF4,$05
(2)  698/   292F0 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  698/   292F0 : =$2                         set vcRS1,$02
(2)  698/   292F0 : =$2                         set vcRS2,$02
(2)  698/   292F0 : =$2                         set vcRS3,$02
(2)  698/   292F0 : =$2                         set vcRS4,$02
(2)  699/   292F0 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  699/   292F0 : =$1F                        set vcAR1,$1F
(2)  699/   292F0 : =$1F                        set vcAR2,$1F
(2)  699/   292F0 : =$1F                        set vcAR3,$1F
(2)  699/   292F0 : =$1F                        set vcAR4,$1F
(2)  700/   292F0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  700/   292F0 : =$0                                 set vcAM1,$00<<5
(2)  700/   292F0 : =$0                                 set vcAM2,$00<<5
(2)  700/   292F0 : =$0                                 set vcAM3,$00<<5
(2)  700/   292F0 : =$0                                 set vcAM4,$00<<5
(2)  701/   292F0 : (MACRO)             	smpsVcDecayRate1    $0A, $00, $05, $05
(2)  701/   292F0 : =$A                         set vcD1R1,$0A
(2)  701/   292F0 : =$0                         set vcD1R2,$00
(2)  701/   292F0 : =$5                         set vcD1R3,$05
(2)  701/   292F0 : =$5                         set vcD1R4,$05
(2)  702/   292F0 : (MACRO)             	smpsVcDecayRate2    $05, $07, $05, $05
(2)  702/   292F0 : =$5                         set vcD2R1,$05
(2)  702/   292F0 : =$7                         set vcD2R2,$07
(2)  702/   292F0 : =$5                         set vcD2R3,$05
(2)  702/   292F0 : =$5                         set vcD2R4,$05
(2)  703/   292F0 : (MACRO)             	smpsVcDecayLevel    $02, $00, $0F, $02
(2)  703/   292F0 : =$2                         set vcDL1,$02
(2)  703/   292F0 : =$0                         set vcDL2,$00
(2)  703/   292F0 : =$F                         set vcDL3,$0F
(2)  703/   292F0 : =$2                         set vcDL4,$02
(2)  704/   292F0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  704/   292F0 : =$F                         set vcRR1,$0F
(2)  704/   292F0 : =$F                         set vcRR2,$0F
(2)  704/   292F0 : =$F                         set vcRR3,$0F
(2)  704/   292F0 : =$F                         set vcRR4,$0F
(2)  705/   292F0 : (MACRO)             	smpsVcTotalLevel    $80, $14, $80, $1E
(2)  705/   292F0 : =$80                        set vcTL1,$80
(2)  705/   292F0 : =$14                        set vcTL2,$14
(2)  705/   292F0 : =$80                        set vcTL3,$80
(2)  705/   292F0 : =$1E                        set vcTL4,$1E
(2)  705/   292F0 : 14                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  705/   292F1 :                     ;   0     1     2     3     4     5     6     7
(2)  705/   292F1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  705/   292F1 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  705/   292F1 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  705/   292F1 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  705/   292F1 : =$80                                set vcTLMask1,$80
(2)  705/   292F1 :                     
(2)  705/   292F1 :                     
(2)  705/   292F1 : 7572 3532                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  705/   292F5 : 9F9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  705/   292F9 : 0505 000A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  705/   292FD : 0505 0705                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  705/   29301 : 2FFF 0F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  705/   29305 : 1E80 1480                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  706/   29309 :                     
(2)  707/   29309 :                     ;	Voice $11
(2)  708/   29309 :                     ;	$3D
(2)  709/   29309 :                     ;	$01, $00, $01, $02, 	$12, $1F, $1F, $14, 	$07, $02, $02, $0A
(2)  710/   29309 :                     ;	$05, $05, $05, $05, 	$2F, $2F, $2F, $AF, 	$1C, $80, $82, $80
(2)  711/   29309 : (MACRO)             	smpsVcAlgorithm     $05
(2)  711/   29309 : =$5                 vcAlgorithm set $05
(2)  712/   29309 : (MACRO)             	smpsVcFeedback      $07
(2)  712/   29309 : =$7                 vcFeedback set $07
(2)  713/   29309 : (MACRO)             	smpsVcUnusedBits    $00
(2)  713/   29309 : =$0                 vcUnusedBits set $00
(2)  713/   29309 : =$0                                 set vcD1R1Unk,0
(2)  713/   29309 : =$0                                 set vcD1R2Unk,0
(2)  713/   29309 : =$0                                 set vcD1R3Unk,0
(2)  713/   29309 : =$0                                 set vcD1R4Unk,0
(2)  714/   29309 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(2)  714/   29309 : =$0                         set vcDT1,$00
(2)  714/   29309 : =$0                         set vcDT2,$00
(2)  714/   29309 : =$0                         set vcDT3,$00
(2)  714/   29309 : =$0                         set vcDT4,$00
(2)  715/   29309 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $00, $01
(2)  715/   29309 : =$2                         set vcCF1,$02
(2)  715/   29309 : =$1                         set vcCF2,$01
(2)  715/   29309 : =$0                         set vcCF3,$00
(2)  715/   29309 : =$1                         set vcCF4,$01
(2)  716/   29309 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  716/   29309 : =$0                         set vcRS1,$00
(2)  716/   29309 : =$0                         set vcRS2,$00
(2)  716/   29309 : =$0                         set vcRS3,$00
(2)  716/   29309 : =$0                         set vcRS4,$00
(2)  717/   29309 : (MACRO)             	smpsVcAttackRate    $14, $1F, $1F, $12
(2)  717/   29309 : =$14                        set vcAR1,$14
(2)  717/   29309 : =$1F                        set vcAR2,$1F
(2)  717/   29309 : =$1F                        set vcAR3,$1F
(2)  717/   29309 : =$12                        set vcAR4,$12
(2)  718/   29309 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  718/   29309 : =$0                                 set vcAM1,$00<<5
(2)  718/   29309 : =$0                                 set vcAM2,$00<<5
(2)  718/   29309 : =$0                                 set vcAM3,$00<<5
(2)  718/   29309 : =$0                                 set vcAM4,$00<<5
(2)  719/   29309 : (MACRO)             	smpsVcDecayRate1    $0A, $02, $02, $07
(2)  719/   29309 : =$A                         set vcD1R1,$0A
(2)  719/   29309 : =$2                         set vcD1R2,$02
(2)  719/   29309 : =$2                         set vcD1R3,$02
(2)  719/   29309 : =$7                         set vcD1R4,$07
(2)  720/   29309 : (MACRO)             	smpsVcDecayRate2    $05, $05, $05, $05
(2)  720/   29309 : =$5                         set vcD2R1,$05
(2)  720/   29309 : =$5                         set vcD2R2,$05
(2)  720/   29309 : =$5                         set vcD2R3,$05
(2)  720/   29309 : =$5                         set vcD2R4,$05
(2)  721/   29309 : (MACRO)             	smpsVcDecayLevel    $0A, $02, $02, $02
(2)  721/   29309 : =$A                         set vcDL1,$0A
(2)  721/   29309 : =$2                         set vcDL2,$02
(2)  721/   29309 : =$2                         set vcDL3,$02
(2)  721/   29309 : =$2                         set vcDL4,$02
(2)  722/   29309 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  722/   29309 : =$F                         set vcRR1,$0F
(2)  722/   29309 : =$F                         set vcRR2,$0F
(2)  722/   29309 : =$F                         set vcRR3,$0F
(2)  722/   29309 : =$F                         set vcRR4,$0F
(2)  723/   29309 : (MACRO)             	smpsVcTotalLevel    $80, $82, $80, $1C
(2)  723/   29309 : =$80                        set vcTL1,$80
(2)  723/   29309 : =$82                        set vcTL2,$82
(2)  723/   29309 : =$80                        set vcTL3,$80
(2)  723/   29309 : =$1C                        set vcTL4,$1C
(2)  723/   29309 : 3D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  723/   2930A :                     ;   0     1     2     3     4     5     6     7
(2)  723/   2930A :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  723/   2930A : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  723/   2930A : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  723/   2930A : =$80                                set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  723/   2930A : =$80                                set vcTLMask1,$80
(2)  723/   2930A :                     
(2)  723/   2930A :                     
(2)  723/   2930A : 0100 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  723/   2930E : 121F 1F14                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  723/   29312 : 0702 020A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  723/   29316 : 0505 0505                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  723/   2931A : 2F2F 2FAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  723/   2931E : 1C80 8280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  724/   29322 :                     
(2)  725/   29322 :                     ;	Voice $12
(2)  726/   29322 :                     ;	$1C
(2)  727/   29322 :                     ;	$73, $72, $33, $32, 	$94, $99, $94, $99, 	$08, $0A, $08, $0A
(2)  728/   29322 :                     ;	$00, $05, $00, $05, 	$3F, $4F, $3F, $4F, 	$1E, $80, $19, $80
(2)  729/   29322 : (MACRO)             	smpsVcAlgorithm     $04
(2)  729/   29322 : =$4                 vcAlgorithm set $04
(2)  730/   29322 : (MACRO)             	smpsVcFeedback      $03
(2)  730/   29322 : =$3                 vcFeedback set $03
(2)  731/   29322 : (MACRO)             	smpsVcUnusedBits    $00
(2)  731/   29322 : =$0                 vcUnusedBits set $00
(2)  731/   29322 : =$0                                 set vcD1R1Unk,0
(2)  731/   29322 : =$0                                 set vcD1R2Unk,0
(2)  731/   29322 : =$0                                 set vcD1R3Unk,0
(2)  731/   29322 : =$0                                 set vcD1R4Unk,0
(2)  732/   29322 : (MACRO)             	smpsVcDetune        $03, $03, $07, $07
(2)  732/   29322 : =$3                         set vcDT1,$03
(2)  732/   29322 : =$3                         set vcDT2,$03
(2)  732/   29322 : =$7                         set vcDT3,$07
(2)  732/   29322 : =$7                         set vcDT4,$07
(2)  733/   29322 : (MACRO)             	smpsVcCoarseFreq    $02, $03, $02, $03
(2)  733/   29322 : =$2                         set vcCF1,$02
(2)  733/   29322 : =$3                         set vcCF2,$03
(2)  733/   29322 : =$2                         set vcCF3,$02
(2)  733/   29322 : =$3                         set vcCF4,$03
(2)  734/   29322 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(2)  734/   29322 : =$2                         set vcRS1,$02
(2)  734/   29322 : =$2                         set vcRS2,$02
(2)  734/   29322 : =$2                         set vcRS3,$02
(2)  734/   29322 : =$2                         set vcRS4,$02
(2)  735/   29322 : (MACRO)             	smpsVcAttackRate    $19, $14, $19, $14
(2)  735/   29322 : =$19                        set vcAR1,$19
(2)  735/   29322 : =$14                        set vcAR2,$14
(2)  735/   29322 : =$19                        set vcAR3,$19
(2)  735/   29322 : =$14                        set vcAR4,$14
(2)  736/   29322 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  736/   29322 : =$0                                 set vcAM1,$00<<5
(2)  736/   29322 : =$0                                 set vcAM2,$00<<5
(2)  736/   29322 : =$0                                 set vcAM3,$00<<5
(2)  736/   29322 : =$0                                 set vcAM4,$00<<5
(2)  737/   29322 : (MACRO)             	smpsVcDecayRate1    $0A, $08, $0A, $08
(2)  737/   29322 : =$A                         set vcD1R1,$0A
(2)  737/   29322 : =$8                         set vcD1R2,$08
(2)  737/   29322 : =$A                         set vcD1R3,$0A
(2)  737/   29322 : =$8                         set vcD1R4,$08
(2)  738/   29322 : (MACRO)             	smpsVcDecayRate2    $05, $00, $05, $00
(2)  738/   29322 : =$5                         set vcD2R1,$05
(2)  738/   29322 : =$0                         set vcD2R2,$00
(2)  738/   29322 : =$5                         set vcD2R3,$05
(2)  738/   29322 : =$0                         set vcD2R4,$00
(2)  739/   29322 : (MACRO)             	smpsVcDecayLevel    $04, $03, $04, $03
(2)  739/   29322 : =$4                         set vcDL1,$04
(2)  739/   29322 : =$3                         set vcDL2,$03
(2)  739/   29322 : =$4                         set vcDL3,$04
(2)  739/   29322 : =$3                         set vcDL4,$03
(2)  740/   29322 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  740/   29322 : =$F                         set vcRR1,$0F
(2)  740/   29322 : =$F                         set vcRR2,$0F
(2)  740/   29322 : =$F                         set vcRR3,$0F
(2)  740/   29322 : =$F                         set vcRR4,$0F
(2)  741/   29322 : (MACRO)             	smpsVcTotalLevel    $80, $19, $80, $1E
(2)  741/   29322 : =$80                        set vcTL1,$80
(2)  741/   29322 : =$19                        set vcTL2,$19
(2)  741/   29322 : =$80                        set vcTL3,$80
(2)  741/   29322 : =$1E                        set vcTL4,$1E
(2)  741/   29322 : 1C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  741/   29323 :                     ;   0     1     2     3     4     5     6     7
(2)  741/   29323 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  741/   29323 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  741/   29323 : =$80                                set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  741/   29323 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  741/   29323 : =$80                                set vcTLMask1,$80
(2)  741/   29323 :                     
(2)  741/   29323 :                     
(2)  741/   29323 : 7372 3332                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  741/   29327 : 9499 9499                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  741/   2932B : 080A 080A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  741/   2932F : 0005 0005                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  741/   29333 : 3F4F 3F4F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  741/   29337 : 1E80 1980                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  742/   2933B :                     
(2)  743/   2933B :                     ;	Voice $13
(2)  744/   2933B :                     ;	$31
(2)  745/   2933B :                     ;	$33, $01, $00, $00, 	$9F, $1F, $1F, $1F, 	$0D, $0A, $0A, $0A
(2)  746/   2933B :                     ;	$0A, $07, $07, $07, 	$FF, $AF, $AF, $AF, 	$1E, $1E, $1E, $80
(2)  747/   2933B : (MACRO)             	smpsVcAlgorithm     $01
(2)  747/   2933B : =$1                 vcAlgorithm set $01
(2)  748/   2933B : (MACRO)             	smpsVcFeedback      $06
(2)  748/   2933B : =$6                 vcFeedback set $06
(2)  749/   2933B : (MACRO)             	smpsVcUnusedBits    $00
(2)  749/   2933B : =$0                 vcUnusedBits set $00
(2)  749/   2933B : =$0                                 set vcD1R1Unk,0
(2)  749/   2933B : =$0                                 set vcD1R2Unk,0
(2)  749/   2933B : =$0                                 set vcD1R3Unk,0
(2)  749/   2933B : =$0                                 set vcD1R4Unk,0
(2)  750/   2933B : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(2)  750/   2933B : =$0                         set vcDT1,$00
(2)  750/   2933B : =$0                         set vcDT2,$00
(2)  750/   2933B : =$0                         set vcDT3,$00
(2)  750/   2933B : =$3                         set vcDT4,$03
(2)  751/   2933B : (MACRO)             	smpsVcCoarseFreq    $00, $00, $01, $03
(2)  751/   2933B : =$0                         set vcCF1,$00
(2)  751/   2933B : =$0                         set vcCF2,$00
(2)  751/   2933B : =$1                         set vcCF3,$01
(2)  751/   2933B : =$3                         set vcCF4,$03
(2)  752/   2933B : (MACRO)             	smpsVcRateScale     $00, $00, $00, $02
(2)  752/   2933B : =$0                         set vcRS1,$00
(2)  752/   2933B : =$0                         set vcRS2,$00
(2)  752/   2933B : =$0                         set vcRS3,$00
(2)  752/   2933B : =$2                         set vcRS4,$02
(2)  753/   2933B : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(2)  753/   2933B : =$1F                        set vcAR1,$1F
(2)  753/   2933B : =$1F                        set vcAR2,$1F
(2)  753/   2933B : =$1F                        set vcAR3,$1F
(2)  753/   2933B : =$1F                        set vcAR4,$1F
(2)  754/   2933B : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  754/   2933B : =$0                                 set vcAM1,$00<<5
(2)  754/   2933B : =$0                                 set vcAM2,$00<<5
(2)  754/   2933B : =$0                                 set vcAM3,$00<<5
(2)  754/   2933B : =$0                                 set vcAM4,$00<<5
(2)  755/   2933B : (MACRO)             	smpsVcDecayRate1    $0A, $0A, $0A, $0D
(2)  755/   2933B : =$A                         set vcD1R1,$0A
(2)  755/   2933B : =$A                         set vcD1R2,$0A
(2)  755/   2933B : =$A                         set vcD1R3,$0A
(2)  755/   2933B : =$D                         set vcD1R4,$0D
(2)  756/   2933B : (MACRO)             	smpsVcDecayRate2    $07, $07, $07, $0A
(2)  756/   2933B : =$7                         set vcD2R1,$07
(2)  756/   2933B : =$7                         set vcD2R2,$07
(2)  756/   2933B : =$7                         set vcD2R3,$07
(2)  756/   2933B : =$A                         set vcD2R4,$0A
(2)  757/   2933B : (MACRO)             	smpsVcDecayLevel    $0A, $0A, $0A, $0F
(2)  757/   2933B : =$A                         set vcDL1,$0A
(2)  757/   2933B : =$A                         set vcDL2,$0A
(2)  757/   2933B : =$A                         set vcDL3,$0A
(2)  757/   2933B : =$F                         set vcDL4,$0F
(2)  758/   2933B : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  758/   2933B : =$F                         set vcRR1,$0F
(2)  758/   2933B : =$F                         set vcRR2,$0F
(2)  758/   2933B : =$F                         set vcRR3,$0F
(2)  758/   2933B : =$F                         set vcRR4,$0F
(2)  759/   2933B : (MACRO)             	smpsVcTotalLevel    $80, $1E, $1E, $1E
(2)  759/   2933B : =$80                        set vcTL1,$80
(2)  759/   2933B : =$1E                        set vcTL2,$1E
(2)  759/   2933B : =$1E                        set vcTL3,$1E
(2)  759/   2933B : =$1E                        set vcTL4,$1E
(2)  759/   2933B : 31                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  759/   2933C :                     ;   0     1     2     3     4     5     6     7
(2)  759/   2933C :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  759/   2933C : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  759/   2933C : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  759/   2933C : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  759/   2933C : =$80                                set vcTLMask1,$80
(2)  759/   2933C :                     
(2)  759/   2933C :                     
(2)  759/   2933C : 3301 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  759/   29340 : 9F1F 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  759/   29344 : 0D0A 0A0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  759/   29348 : 0A07 0707                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  759/   2934C : FFAF AFAF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  759/   29350 : 1E1E 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  760/   29354 :                     
(2)  761/   29354 :                     ;	Voice $14
(2)  762/   29354 :                     ;	$3A
(2)  763/   29354 :                     ;	$70, $76, $30, $71, 	$1F, $95, $1F, $1F, 	$0E, $0F, $05, $0C
(2)  764/   29354 :                     ;	$07, $06, $06, $07, 	$2F, $4F, $1F, $5F, 	$21, $12, $28, $80
(2)  765/   29354 : (MACRO)             	smpsVcAlgorithm     $02
(2)  765/   29354 : =$2                 vcAlgorithm set $02
(2)  766/   29354 : (MACRO)             	smpsVcFeedback      $07
(2)  766/   29354 : =$7                 vcFeedback set $07
(2)  767/   29354 : (MACRO)             	smpsVcUnusedBits    $00
(2)  767/   29354 : =$0                 vcUnusedBits set $00
(2)  767/   29354 : =$0                                 set vcD1R1Unk,0
(2)  767/   29354 : =$0                                 set vcD1R2Unk,0
(2)  767/   29354 : =$0                                 set vcD1R3Unk,0
(2)  767/   29354 : =$0                                 set vcD1R4Unk,0
(2)  768/   29354 : (MACRO)             	smpsVcDetune        $07, $03, $07, $07
(2)  768/   29354 : =$7                         set vcDT1,$07
(2)  768/   29354 : =$3                         set vcDT2,$03
(2)  768/   29354 : =$7                         set vcDT3,$07
(2)  768/   29354 : =$7                         set vcDT4,$07
(2)  769/   29354 : (MACRO)             	smpsVcCoarseFreq    $01, $00, $06, $00
(2)  769/   29354 : =$1                         set vcCF1,$01
(2)  769/   29354 : =$0                         set vcCF2,$00
(2)  769/   29354 : =$6                         set vcCF3,$06
(2)  769/   29354 : =$0                         set vcCF4,$00
(2)  770/   29354 : (MACRO)             	smpsVcRateScale     $00, $00, $02, $00
(2)  770/   29354 : =$0                         set vcRS1,$00
(2)  770/   29354 : =$0                         set vcRS2,$00
(2)  770/   29354 : =$2                         set vcRS3,$02
(2)  770/   29354 : =$0                         set vcRS4,$00
(2)  771/   29354 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $15, $1F
(2)  771/   29354 : =$1F                        set vcAR1,$1F
(2)  771/   29354 : =$1F                        set vcAR2,$1F
(2)  771/   29354 : =$15                        set vcAR3,$15
(2)  771/   29354 : =$1F                        set vcAR4,$1F
(2)  772/   29354 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  772/   29354 : =$0                                 set vcAM1,$00<<5
(2)  772/   29354 : =$0                                 set vcAM2,$00<<5
(2)  772/   29354 : =$0                                 set vcAM3,$00<<5
(2)  772/   29354 : =$0                                 set vcAM4,$00<<5
(2)  773/   29354 : (MACRO)             	smpsVcDecayRate1    $0C, $05, $0F, $0E
(2)  773/   29354 : =$C                         set vcD1R1,$0C
(2)  773/   29354 : =$5                         set vcD1R2,$05
(2)  773/   29354 : =$F                         set vcD1R3,$0F
(2)  773/   29354 : =$E                         set vcD1R4,$0E
(2)  774/   29354 : (MACRO)             	smpsVcDecayRate2    $07, $06, $06, $07
(2)  774/   29354 : =$7                         set vcD2R1,$07
(2)  774/   29354 : =$6                         set vcD2R2,$06
(2)  774/   29354 : =$6                         set vcD2R3,$06
(2)  774/   29354 : =$7                         set vcD2R4,$07
(2)  775/   29354 : (MACRO)             	smpsVcDecayLevel    $05, $01, $04, $02
(2)  775/   29354 : =$5                         set vcDL1,$05
(2)  775/   29354 : =$1                         set vcDL2,$01
(2)  775/   29354 : =$4                         set vcDL3,$04
(2)  775/   29354 : =$2                         set vcDL4,$02
(2)  776/   29354 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  776/   29354 : =$F                         set vcRR1,$0F
(2)  776/   29354 : =$F                         set vcRR2,$0F
(2)  776/   29354 : =$F                         set vcRR3,$0F
(2)  776/   29354 : =$F                         set vcRR4,$0F
(2)  777/   29354 : (MACRO)             	smpsVcTotalLevel    $80, $28, $12, $21
(2)  777/   29354 : =$80                        set vcTL1,$80
(2)  777/   29354 : =$28                        set vcTL2,$28
(2)  777/   29354 : =$12                        set vcTL3,$12
(2)  777/   29354 : =$21                        set vcTL4,$21
(2)  777/   29354 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  777/   29355 :                     ;   0     1     2     3     4     5     6     7
(2)  777/   29355 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  777/   29355 : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  777/   29355 : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  777/   29355 : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  777/   29355 : =$80                                set vcTLMask1,$80
(2)  777/   29355 :                     
(2)  777/   29355 :                     
(2)  777/   29355 : 7076 3071                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  777/   29359 : 1F95 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  777/   2935D : 0E0F 050C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  777/   29361 : 0706 0607                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  777/   29365 : 2F4F 1F5F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  777/   29369 : 2112 2880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  778/   2936D :                     
(2)  779/   2936D :                     ;	Voice $15
(2)  780/   2936D :                     ;	$28
(2)  781/   2936D :                     ;	$71, $00, $30, $01, 	$1F, $1F, $1D, $1F, 	$13, $13, $06, $05
(2)  782/   2936D :                     ;	$03, $03, $02, $05, 	$4F, $4F, $2F, $3F, 	$0E, $14, $1E, $80
(2)  783/   2936D : (MACRO)             	smpsVcAlgorithm     $00
(2)  783/   2936D : =$0                 vcAlgorithm set $00
(2)  784/   2936D : (MACRO)             	smpsVcFeedback      $05
(2)  784/   2936D : =$5                 vcFeedback set $05
(2)  785/   2936D : (MACRO)             	smpsVcUnusedBits    $00
(2)  785/   2936D : =$0                 vcUnusedBits set $00
(2)  785/   2936D : =$0                                 set vcD1R1Unk,0
(2)  785/   2936D : =$0                                 set vcD1R2Unk,0
(2)  785/   2936D : =$0                                 set vcD1R3Unk,0
(2)  785/   2936D : =$0                                 set vcD1R4Unk,0
(2)  786/   2936D : (MACRO)             	smpsVcDetune        $00, $03, $00, $07
(2)  786/   2936D : =$0                         set vcDT1,$00
(2)  786/   2936D : =$3                         set vcDT2,$03
(2)  786/   2936D : =$0                         set vcDT3,$00
(2)  786/   2936D : =$7                         set vcDT4,$07
(2)  787/   2936D : (MACRO)             	smpsVcCoarseFreq    $01, $00, $00, $01
(2)  787/   2936D : =$1                         set vcCF1,$01
(2)  787/   2936D : =$0                         set vcCF2,$00
(2)  787/   2936D : =$0                         set vcCF3,$00
(2)  787/   2936D : =$1                         set vcCF4,$01
(2)  788/   2936D : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(2)  788/   2936D : =$0                         set vcRS1,$00
(2)  788/   2936D : =$0                         set vcRS2,$00
(2)  788/   2936D : =$0                         set vcRS3,$00
(2)  788/   2936D : =$0                         set vcRS4,$00
(2)  789/   2936D : (MACRO)             	smpsVcAttackRate    $1F, $1D, $1F, $1F
(2)  789/   2936D : =$1F                        set vcAR1,$1F
(2)  789/   2936D : =$1D                        set vcAR2,$1D
(2)  789/   2936D : =$1F                        set vcAR3,$1F
(2)  789/   2936D : =$1F                        set vcAR4,$1F
(2)  790/   2936D : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(2)  790/   2936D : =$0                                 set vcAM1,$00<<5
(2)  790/   2936D : =$0                                 set vcAM2,$00<<5
(2)  790/   2936D : =$0                                 set vcAM3,$00<<5
(2)  790/   2936D : =$0                                 set vcAM4,$00<<5
(2)  791/   2936D : (MACRO)             	smpsVcDecayRate1    $05, $06, $13, $13
(2)  791/   2936D : =$5                         set vcD1R1,$05
(2)  791/   2936D : =$6                         set vcD1R2,$06
(2)  791/   2936D : =$13                        set vcD1R3,$13
(2)  791/   2936D : =$13                        set vcD1R4,$13
(2)  792/   2936D : (MACRO)             	smpsVcDecayRate2    $05, $02, $03, $03
(2)  792/   2936D : =$5                         set vcD2R1,$05
(2)  792/   2936D : =$2                         set vcD2R2,$02
(2)  792/   2936D : =$3                         set vcD2R3,$03
(2)  792/   2936D : =$3                         set vcD2R4,$03
(2)  793/   2936D : (MACRO)             	smpsVcDecayLevel    $03, $02, $04, $04
(2)  793/   2936D : =$3                         set vcDL1,$03
(2)  793/   2936D : =$2                         set vcDL2,$02
(2)  793/   2936D : =$4                         set vcDL3,$04
(2)  793/   2936D : =$4                         set vcDL4,$04
(2)  794/   2936D : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(2)  794/   2936D : =$F                         set vcRR1,$0F
(2)  794/   2936D : =$F                         set vcRR2,$0F
(2)  794/   2936D : =$F                         set vcRR3,$0F
(2)  794/   2936D : =$F                         set vcRR4,$0F
(2)  795/   2936D : (MACRO)             	smpsVcTotalLevel    $80, $1E, $14, $0E
(2)  795/   2936D : =$80                        set vcTL1,$80
(2)  795/   2936D : =$1E                        set vcTL2,$1E
(2)  795/   2936D : =$14                        set vcTL3,$14
(2)  795/   2936D : =$E                         set vcTL4,$0E
(2)  795/   2936D : 28                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  795/   2936E :                     ;   0     1     2     3     4     5     6     7
(2)  795/   2936E :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  795/   2936E : =$0                                 set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  795/   2936E : =$0                                 set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  795/   2936E : =$0                                 set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  795/   2936E : =$80                                set vcTLMask1,$80
(2)  795/   2936E :                     
(2)  795/   2936E :                     
(2)  795/   2936E : 7100 3001                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  795/   29372 : 1F1F 1D1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  795/   29376 : 1313 0605                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  795/   2937A : 0303 0205                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  795/   2937E : 4F4F 2F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  795/   29382 : 0E14 1E80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  796/   29386 :                     
(2)  797/   29386 :                     
(1) 5001/   29386 :                     
(1) 5002/   29386 : (MACRO)             	finishBank
soundBank Mus_Bank1_Start has $6C7A bytes free at end, needed $0 bytes padding at start.
(1) 5002/   29386 :                                     message "soundBank \{soundBankName} has $\{$8000+soundBankStart-*} bytes free at end, needed $\{soundBankPadding} bytes padding at start."
     706/   29386 : (MACRO)             	align $8000
     706/   29386 :  (MACRO-2)                  cnop 0,$8000
     706/   29386 :   (MACRO-3)                         org (*-1+($8000)-((*-1+(-(0)))#($8000)))
     706/   29386 : =$6C7A              .diff := (*-1+($8000)-((*-1+(-(0)))#($8000))) - *
     706/   29386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   29386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   29786 : =$687A              .diff := .diff - 1024
     706/   29786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   29786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   29B86 : =$647A              .diff := .diff - 1024
     706/   29B86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   29B86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   29F86 : =$607A              .diff := .diff - 1024
     706/   29F86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   29F86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2A386 : =$5C7A              .diff := .diff - 1024
     706/   2A386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2A386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2A786 : =$587A              .diff := .diff - 1024
     706/   2A786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2A786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2AB86 : =$547A              .diff := .diff - 1024
     706/   2AB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2AB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2AF86 : =$507A              .diff := .diff - 1024
     706/   2AF86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2AF86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2B386 : =$4C7A              .diff := .diff - 1024
     706/   2B386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2B386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2B786 : =$487A              .diff := .diff - 1024
     706/   2B786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2B786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2BB86 : =$447A              .diff := .diff - 1024
     706/   2BB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2BB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2BF86 : =$407A              .diff := .diff - 1024
     706/   2BF86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2BF86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2C386 : =$3C7A              .diff := .diff - 1024
     706/   2C386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2C386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2C786 : =$387A              .diff := .diff - 1024
     706/   2C786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2C786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2CB86 : =$347A              .diff := .diff - 1024
     706/   2CB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2CB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2CF86 : =$307A              .diff := .diff - 1024
     706/   2CF86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2CF86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2D386 : =$2C7A              .diff := .diff - 1024
     706/   2D386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2D386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2D786 : =$287A              .diff := .diff - 1024
     706/   2D786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2D786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2DB86 : =$247A              .diff := .diff - 1024
     706/   2DB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2DB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2DF86 : =$207A              .diff := .diff - 1024
     706/   2DF86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2DF86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2E386 : =$1C7A              .diff := .diff - 1024
     706/   2E386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2E386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2E786 : =$187A              .diff := .diff - 1024
     706/   2E786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2E786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2EB86 : =$147A              .diff := .diff - 1024
     706/   2EB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2EB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2EF86 : =$107A              .diff := .diff - 1024
     706/   2EF86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2EF86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2F386 : =$C7A               .diff := .diff - 1024
     706/   2F386 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2F386 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2F786 : =$87A               .diff := .diff - 1024
     706/   2F786 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2F786 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2FB86 : =$47A               .diff := .diff - 1024
     706/   2FB86 :                                                     ; AS can only generate 1 kb of code on a single line
     706/   2FB86 : FFFF FFFF FFFF                                      dc.b [1024]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF          
     706/   2FF86 : =$7A                .diff := .diff - 1024
     706/   2FF86 :                     
     706/   2FF86 : FFFF FFFF FFFF                              dc.b [.diff]$FF
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF FFFF FFFF 
                    FFFF             
     707/   30000 :                     
     708/   30000 :                     ; ---------------------------------------------------------------------------
     709/   30000 :                     
     710/   30000 :                     	; End-of-ROM padding stuff
     719/   30000 : (MACRO)             		even
     719/   30000 :  (MACRO-2)                  align0 2
     719/   30000 :   (MACRO-3)                 cnop0 0,2
     719/   30000 :    (MACRO-4)                org0 (*-1+(2)-((*-1+(-(0)))#(2)))
     719/   30000 : =$0                 .diff := (*-1+(2)-((*-1+(-(0)))#(2))) - *
     719/   30000 :                                     dc.b [.diff]0
     721/   30000 :                     
     722/   30000 :                     EndOfROM:
     723/   30000 :                     		END
 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 2 - 6/11/2022 10:54:12


  Symbol Table (* = unused):
  --------------------------

*ACCELERATION :    FFFFFFFFFFFFF762 C | *ACCELERATION_P2 : FFFFFFFFFFFFFEC2 C |
*ACT3_FLAG :       FFFFFFFFFFFFEE5E C | *ACT3_RING_COUNT : FFFFFFFFFFFFEF5E C |
*ACT3_TIMER :      FFFFFFFFFFFFEF60 C | *AIR_LEFT :                      2C - |
*AIZ1_PALETTE_CYCLE_FLAG :                                 FFFFFFFFFFFFF72E C |
*AIZ_VINE_ANGLE :  FFFFFFFFFFFFFEBA C | *ANGLE :                         26 - |
*ANIM :                          20 - | *ANIM_COUNTERS :   FFFFFFFFFFFFF7F0 C |
*ANIM_FRAME :                    23 - | *ANIM_FRAME_TIMER :              24 - |
*APPARENT_ACT :    FFFFFFFFFFFFEE4F C | *APPARENT_ZONE :   FFFFFFFFFFFFEE4E C |
*APPARENT_ZONE_AND_ACT :                                   FFFFFFFFFFFFEE4E - |
*ARCHITECTURE :  i386-unknown-win32 - |
*ARTTILE_ARTKOS_COMPETITION_CHARSEL :                                   5C9 - |
*ARTTILE_ARTKOS_COMPETITION_LEVSEL :                                    29F - |
*ARTTILE_ARTKOS_COMPETITION_MODESEL :                                   34A - |
*ARTTILE_ARTKOS_COMPETITION_RESULTS :                                   34A - |
*ARTTILE_ARTKOS_S3MENUBG :        1 - | *ARTTILE_ARTKOS_SAVE_EXTRA :    454 - |
*ARTTILE_ARTKOS_SAVE_MISC :     29F - | *ARTTILE_CUTSCENEKNUX :         4DA - |
*ARTTILE_DASHDUST :             7E0 - | *ARTTILE_DASHDUST_P2 :          7F0 - |
*ARTTILE_EXPLOSION :            5A0 - | *ARTTILE_MONITORS :             4C4 - |
*ARTTILE_PLAYER_1 :             680 - | *ARTTILE_PLAYER_2 :             6A0 - |
*ARTTILE_PLAYER_2_TAIL :        6B0 - | *ARTTILE_RING :                 6BC - |
*ARTTILE_SHIELD :               79C - | *ARTTILE_SHIELD_SPARKS :        7BB - |
*ARTTILE_STARPOST :             5E4 - | *ART_TILE :                       A - |
*BACKGROUND_COLLISION_FLAG :                               FFFFFFFFFFFFF664 C |
*BIGENDIAN :                      0 - |  BITALTFREQMODE :                 3 - |
 BITFM3SPECIAL :                  0 - |  BITISPSG :                       7 - |
*BITLFOENABLE :                   3 - |  BITNOATTACK :                    1 - |
 BITOPERATOR1 :                   4 - |  BITOPERATOR2 :                   5 - |
 BITOPERATOR3 :                   6 - |  BITOPERATOR4 :                   7 - |
*BITOUTPUTLEFT :                  7 - | *BITOUTPUTRIGHT :                 6 - |
 BITPITCHSLIDE :                  5 - |  BITPSGNOISE :                    0 - |
 BITSFXOVERRIDE :                 2 - |  BITSSGEGENABLE :                 3 - |
 BITSUSTAINFREQ :                 6 - |  BITTIMERAENABLE :                2 - |
 BITTIMERALOAD :                  0 - | *BITTIMERARESET :                 4 - |
 BITTIMERBENABLE :                3 - |  BITTIMERBLOAD :                  1 - |
*BITTIMERBRESET :                 5 - |  BITTRACKATREST :                 4 - |
 BITTRACKPLAYING :                7 - |  BLOCK_TABLE :     FFFFFFFFFFFF9000 C |
*BLUE_SPHERES_CURRENT_LEVEL :                              FFFFFFFFFFFFFFA6 C |
*BLUE_SPHERES_CURRENT_STAGE :                              FFFFFFFFFFFFFFA2 C |
*BLUE_SPHERES_DIFFICULTY :                                 FFFFFFFFFFFFFFAC C |
*BLUE_SPHERES_HEADER_FLAG :                                FFFFFFFFFFFFFF9F C |
*BLUE_SPHERES_MENU_FLAG :                                  FFFFFFFFFFFFFFA1 C |
*BLUE_SPHERES_MODE :                                       FFFFFFFFFFFFFFA0 C |
*BLUE_SPHERES_OPTION :                                     FFFFFFFFFFFFFFAA C |
*BLUE_SPHERES_PROGRESS_FLAG :                              FFFFFFFFFFFFFFAB C |
*BLUE_SPHERES_STAGE_FLAG :                                 FFFFFFFFFFFFFFD4 - |
*BLUE_SPHERES_TARGET_DIFFICULTY :                          FFFFFFFFFFFFFFAD C |
*BOSS_FLAG :       FFFFFFFFFFFFF7AA C | *BOSS_HITCOUNT2 :                29 - |
*BRANCHEXT :                      0 - |
*BREATHING_BUBBLES :                                       FFFFFFFFFFFFCB2C C |
*BREATHING_BUBBLES_P2 :                                    FFFFFFFFFFFFCB76 C |
 BUTTON_A :                       6 - | *BUTTON_A_MASK :                 40 - |
 BUTTON_B :                       4 - | *BUTTON_B_MASK :                 10 - |
 BUTTON_C :                       5 - | *BUTTON_C_MASK :                 20 - |
 BUTTON_DOWN :                    1 - | *BUTTON_DOWN_MASK :               2 - |
 BUTTON_LEFT :                    2 - | *BUTTON_LEFT_MASK :               4 - |
 BUTTON_RIGHT :                   3 - | *BUTTON_RIGHT_MASK :              8 - |
 BUTTON_START :                   7 - | *BUTTON_START_MASK :             80 - |
 BUTTON_UP :                      0 - | *BUTTON_UP_MASK :                 1 - |
*CAMERA_MAX_X_POS :                                        FFFFFFFFFFFFEE16 C |
*CAMERA_MAX_X_POS_P2 :                                     FFFFFFFFFFFFEE1E C |
*CAMERA_MAX_Y_POS :                                        FFFFFFFFFFFFEE1A C |
*CAMERA_MAX_Y_POS_CHANGING :                               FFFFFFFFFFFFEE32 C |
*CAMERA_MAX_Y_POS_P2 :                                     FFFFFFFFFFFFEE22 C |
*CAMERA_MIN_X_POS :                                        FFFFFFFFFFFFEE14 C |
*CAMERA_MIN_X_POS_P2 :                                     FFFFFFFFFFFFEE1C C |
*CAMERA_MIN_Y_POS :                                        FFFFFFFFFFFFEE18 C |
*CAMERA_MIN_Y_POS_P2 :                                     FFFFFFFFFFFFEE20 C |
*CAMERA_RAM :      FFFFFFFFFFFFEE00 - |
*CAMERA_STORED_MAX_X_POS :                                 FFFFFFFFFFFFFA92 C |
*CAMERA_STORED_MAX_Y_POS :                                 FFFFFFFFFFFFFA98 C |
*CAMERA_STORED_MIN_X_POS :                                 FFFFFFFFFFFFFA94 C |
*CAMERA_STORED_MIN_Y_POS :                                 FFFFFFFFFFFFFA96 C |
*CAMERA_TARGET_MAX_X_POS :                                 FFFFFFFFFFFFEE0E C |
*CAMERA_TARGET_MAX_Y_POS :                                 FFFFFFFFFFFFEE12 C |
*CAMERA_TARGET_MIN_X_POS :                                 FFFFFFFFFFFFEE0C C |
*CAMERA_TARGET_MIN_Y_POS :                                 FFFFFFFFFFFFEE10 C |
*CAMERA_X_DIFF :   FFFFFFFFFFFFEE3E C | *CAMERA_X_POS :    FFFFFFFFFFFFEE78 C |
*CAMERA_X_POS_BG_COPY :                                    FFFFFFFFFFFFEE8C C |
*CAMERA_X_POS_BG_ROUNDED :                                 FFFFFFFFFFFFEE94 C |
*CAMERA_X_POS_COARSE :                                     FFFFFFFFFFFFF76E C |
*CAMERA_X_POS_COARSE_BACK :                                FFFFFFFFFFFFF7DA C |
*CAMERA_X_POS_COPY :                                       FFFFFFFFFFFFEE80 C |
*CAMERA_X_POS_P2 : FFFFFFFFFFFFEE60 C |
*CAMERA_X_POS_P2_COPY :                                    FFFFFFFFFFFFEE68 C |
*CAMERA_X_POS_ROUNDED :                                    FFFFFFFFFFFFEE88 C |
*CAMERA_Y_DIFF :   FFFFFFFFFFFFEE40 C | *CAMERA_Y_POS :    FFFFFFFFFFFFEE7C C |
*CAMERA_Y_POS_BG_COPY :                                    FFFFFFFFFFFFEE90 C |
*CAMERA_Y_POS_BG_ROUNDED :                                 FFFFFFFFFFFFEE96 C |
*CAMERA_Y_POS_COARSE :                                     FFFFFFFFFFFFF770 C |
*CAMERA_Y_POS_COARSE_BACK :                                FFFFFFFFFFFFEF64 C |
*CAMERA_Y_POS_COPY :                                       FFFFFFFFFFFFEE84 C |
*CAMERA_Y_POS_MASK :                                       FFFFFFFFFFFFEEAC C |
*CAMERA_Y_POS_P2 : FFFFFFFFFFFFEE64 C |
*CAMERA_Y_POS_P2_COPY :                                    FFFFFFFFFFFFEE6C C |
*CAMERA_Y_POS_ROUNDED :                                    FFFFFFFFFFFFEE8A C |
*CARTRAMENDLOC :                1B8 C | *CARTRAMSTARTLOC :              1B4 C |
*CARTRAM_INFO :                 1B0 C | *CARTRAM_TYPE :                 1B2 C |
*CASESENSITIVE :                  0 - |  CFALTERMODULATION :            E6A C |
 CFCHANFMCOMMAND :             10DC C |  CFCHANGEPSGVOLUME :            DE9 C |
 CFCHANGETRANSPOSITION :        FB1 C |  CFCHANGEVOLUME :               D76 C |
 CFCHANGEVOLUME2 :              D74 C |  CFCHANSETTEMPODIVIDER :       10D8 C |
 CFCONDITIONALJUMP :            DD3 C |  CFCONDITIONALJUMP.DO_JUMP :    DE4 C |
 CFCOPYDATA :                  1078 C |  CFDETUNE :                     D40 C |
 CFDISABLEMODULATION :          FAB C |  CFFADEINTOPREVIOUS :           D44 C |
 CFFM3SPECIALMODE :             FDF C |  CFFM3SPECIALMODE.LOOP :        FF0 C |
 CFFMVOLENV :                  10C9 C |  CFHALTSOUND :                 103D C |
 CFHALTSOUND.LOOP1 :           104F C |  CFHALTSOUND.LOOP2 :           106C C |
 CFHALTSOUND.RESUME :          1060 C |  CFJUMPRETURN :                 F98 C |
 CFJUMPTO :                     F4D C |  CFJUMPTOGOSUB :                F7E C |
 CFLOOPCONTINUOUSSFX :          FB8 C |
 CFLOOPCONTINUOUSSFX.RUN_COUNTER :                                      FC4 C |
*CFM3 :                           2 - | *CFM4 :                           4 - |
*CFM5 :                           5 - | *CFM6 :                           6 - |
 CFMETACF :                    1022 C |  CFMODULATION :                 E5C C |
 CFNOTEFILL :                   DC9 C |  CFNOTEFILLSET :                DCC C |
 CFPANNINGAMSFMS :              D0F C |  CFPITCHSLIDE :                 F53 C |
 CFPITCHSLIDE.DISABLE_SLIDE :   F5B C |  CFPLAYDACSAMPLE :              D01 C |
 CFPLAYMUSICBYINDEX :          1035 C |  CFPLAYSFXBYINDEX :            102D C |
 CFPREVENTATTACK :              DC3 C |  CFREPEATATPOS :                F67 C |
 CFREPEATATPOS.RUN_COUNTER :    F77 C |  CFRESETSPINDASHREV :          10D2 C |
 CFSENDFMI :                    E13 C |  CFSETKEY :                     E0D C |
 CFSETLFO :                     D23 C |  CFSETMODULATION :              E72 C |
 CFSETPSGNOISE :                F20 C |
 CFSETPSGNOISE.SKIP_NOISE_SILENCE :                                     F37 C |
 CFSETPSGVOLENV :               F44 C |  CFSETSSGEG :                  1095 C |
 CFSETTEMPO :                  1029 C |  CFSETTEMPODIVIDER :           1086 C |
 CFSETTEMPODIVIDER.LOOP :      108B C |  CFSETVOICE :                   E1F C |
 CFSETVOLUME :                  D52 C |  CFSETVOLUME.NOT_PSG :          D64 C |
 CFSILENCESTOPTRACK :           D48 C |  CFSPINDASHREV :                D2E C |
 CFSPINDASHREV.SKIP_REV :       D3E C |  CFSTOPTRACK :                  E76 C |
 CFSTOPTRACK.DO_FM3_SETTINGS :  EB6 C |  CFSTOPTRACK.NOT_FM3 :          EB9 C |
 CFSTOPTRACK.SEND_SSG_EG :      F06 C |  CFSTOPTRACK.SWITCH_TO_MUSIC :  EC5 C |
 CFSTORENEWVOICE :              F49 C |  CFTOGGLEALTFREQMODE :          FD2 C |
 CFTOGGLEALTFREQMODE.STOP_ALTFREQ_MODE :                                FDA C |
*CHAIN_BONUS_COUNTER :                                     FFFFFFFFFFFFF7D0 C |
*CHANGE_MUSIC_TEMPO :           568 C |
*CHAOS_EMERALD_COUNT :                                     FFFFFFFFFFFFFFB0 C |
*CHARACTER_ID :                  38 - | *CHECKSUM :                     18E C |
*CHECKSUM_STRING : FFFFFFFFFFFFFFFC - | *CHILD_DX :                      42 - |
*CHILD_DY :                      43 - | *CHUNK_TABLE :     FFFFFFFFFFFF0000 C |
 CLEARCRAM1167 :                3B2 C | *CNOISE :                        E0 - |
*COLLECTED_EMERALDS_ARRAY :                                FFFFFFFFFFFFFFB2 C |
*COLLECTED_SPECIAL_RING_ARRAY :                            FFFFFFFFFFFFFF92 C |
*COLLISION_ADDR :  FFFFFFFFFFFFF796 C | *COLLISION_FLAGS :               28 - |
*COLLISION_PROPERTY :            29 - |
*COLLISION_RESPONSE_LIST :                                 FFFFFFFFFFFFE380 C |
*COMPETITION_CURRENT_LAP :                                 FFFFFFFFFFFFFEDC C |
*COMPETITION_CURRENT_LAP_2P :                              FFFFFFFFFFFFFEDD C |
*COMPETITION_ITEMS :                                       FFFFFFFFFFFFFF8A C |
*COMPETITION_LAP_COUNT :                                   FFFFFFFFFFFFEE5C C |
*COMPETITION_LAP_COUNT_2P :                                FFFFFFFFFFFFEE5D C |
*COMPETITION_MENU_ITEMS :                                  FFFFFFFFFFFFEF4E C |
*COMPETITION_MENU_SELECTION :                              FFFFFFFFFFFFEF48 C |
*COMPETITION_MENU_ZONE :                                   FFFFFFFFFFFFEF4A C |
*COMPETITION_MODE :                                        FFFFFFFFFFFFFFE8 - |
*COMPETITION_SAVED_DATA :                                  FFFFFFFFFFFFE600 C |
*COMPETITION_SETTINGS :                                    FFFFFFFFFFFFFF8A - |
*COMPETITION_TIME_ATTACK_NEW_TOP_RECORD :                  FFFFFFFFFFFFEE5A C |
 COMPETITION_TIME_RECORD :                                 FFFFFFFFFFFFEE52 C |
*COMPETITION_TIME_RECORD_FRAME :                           FFFFFFFFFFFFEE55 - |
*COMPETITION_TIME_RECORD_FRAME_P2 :                        FFFFFFFFFFFFEE59 - |
*COMPETITION_TIME_RECORD_MINUTE :                          FFFFFFFFFFFFEE53 - |
*COMPETITION_TIME_RECORD_MINUTE_P2 :                       FFFFFFFFFFFFEE57 - |
 COMPETITION_TIME_RECORD_P2 :                              FFFFFFFFFFFFEE56 C |
*COMPETITION_TIME_RECORD_SECOND :                          FFFFFFFFFFFFEE54 - |
*COMPETITION_TIME_RECORD_SECOND_P2 :                       FFFFFFFFFFFFEE58 - |
*COMPETITION_TOTAL_LAPS :                                  FFFFFFFFFFFFFEDA C |
*COMPETITION_TYPE :                                        FFFFFFFFFFFFFF8B C |
*CONSTPI :        3.141592653589793 - | *CONTINUE_COUNT :  FFFFFFFFFFFFFE18 C |
*CONVEYOR_BELT_LOAD_ARRAY :                                FFFFFFFFFFFFCFE0 C |
*COPYRIGHT :                    110 C | *COUNTRY_CODE :                 1F0 C |
*CPSG1 :                         80 - | *CPSG2 :                         A0 - |
*CPSG3 :                         C0 - |  CRAM :                          2B - |
*CTRL_1 :          FFFFFFFFFFFFF604 - | *CTRL_1_HELD :     FFFFFFFFFFFFF604 C |
*CTRL_1_HELD_LOGICAL :                                     FFFFFFFFFFFFF602 C |
*CTRL_1_HELD_TITLE :                                       FFFFFFFFFFFFF748 C |
*CTRL_1_LOCKED :   FFFFFFFFFFFFF7CA C | *CTRL_1_LOGICAL :  FFFFFFFFFFFFF602 - |
*CTRL_1_PRESSED :  FFFFFFFFFFFFF605 C |
*CTRL_1_PRESSED_LOGICAL :                                  FFFFFFFFFFFFF603 C |
*CTRL_1_PRESSED_TITLE :                                    FFFFFFFFFFFFF749 C |
*CTRL_1_TITLE :    FFFFFFFFFFFFF748 - | *CTRL_2 :          FFFFFFFFFFFFF606 - |
*CTRL_2_HELD :     FFFFFFFFFFFFF606 C |
*CTRL_2_HELD_LOGICAL :                                     FFFFFFFFFFFFF66A C |
*CTRL_2_LOCKED :   FFFFFFFFFFFFF7CB C | *CTRL_2_LOGICAL :  FFFFFFFFFFFFF66A - |
*CTRL_2_PRESSED :  FFFFFFFFFFFFF607 C |
*CTRL_2_PRESSED_LOGICAL :                                  FFFFFFFFFFFFF66B C |
*CURRENT_ACT :     FFFFFFFFFFFFFE11 C | *CURRENT_MUSIC :   FFFFFFFFFFFFFF90 C |
*CURRENT_SPECIAL_STAGE :                                   FFFFFFFFFFFFFE16 C |
*CURRENT_SPECIAL_STAGE_2 :                                 FFFFFFFFFFFFEF6E C |
*CURRENT_ZONE :    FFFFFFFFFFFFFE10 C |
*CURRENT_ZONE_AND_ACT :                                    FFFFFFFFFFFFFE10 - |
 DACBANK1 :                    8000 C |  DACBANK2 :                   10000 C |
 DACBANK3 :                   18000 C |  DACBANK4 :                   20000 C |
 DACID__END :                    DF - |  DACID__FIRST :                  DF - |
 DACPOINTERS :                 8000 C |  DAC_81_DATA :                 848C C |
*DAC_81_DATA_BANK :            8000 - |  DAC_81_DATA_LEN :             7E07 - |
 DAC_81_DATA_PTR :             8C84 - |  DAC_82_83_84_85_DATA :        8C0A C |
*DAC_82_83_84_85_DATA_BANK :   8000 - |  DAC_82_83_84_85_DATA_LEN :    6D04 - |
 DAC_82_83_84_85_DATA_PTR :     A8C - |  DAC_86_DATA :                 81BD C |
*DAC_86_DATA_BANK :            8000 - |  DAC_86_DATA_LEN :             CF02 - |
 DAC_86_DATA_PTR :             BD81 - |  DAC_87_DATA :                 B862 C |
*DAC_87_DATA_BANK :            8000 - |  DAC_87_DATA_LEN :             1C07 - |
 DAC_87_DATA_PTR :             62B8 - |  DAC_88_DATA :                 9FF4 C |
*DAC_88_DATA_BANK :            8000 - |  DAC_88_DATA_LEN :             2712 - |
 DAC_88_DATA_PTR :             F49F - |  DAC_89_DATA :                 C46D C |
*DAC_89_DATA_BANK :            8000 - |  DAC_89_DATA_LEN :             FD09 - |
 DAC_89_DATA_PTR :             6DC4 - |  DAC_8A_8B_DATA :              B21B C |
*DAC_8A_8B_DATA_BANK :         8000 - |  DAC_8A_8B_DATA_LEN :          6001 - |
 DAC_8A_8B_DATA_PTR :          1BB2 - |  DAC_8C_DATA :                 B37B C |
*DAC_8C_DATA_BANK :            8000 - |  DAC_8C_DATA_LEN :             6000 - |
 DAC_8C_DATA_PTR :             7BB3 - |  DAC_8D_8E_DATA :              B3DB C |
*DAC_8D_8E_DATA_BANK :         8000 - |  DAC_8D_8E_DATA_LEN :          8704 - |
 DAC_8D_8E_DATA_PTR :          DBB3 - |  DAC_8F_DATA :                 BF7E C |
*DAC_8F_DATA_BANK :            8000 - |  DAC_8F_DATA_LEN :             EF04 - |
 DAC_8F_DATA_PTR :             7EBF - |  DAC_90_91_92_93_DATA :        99D2 C |
*DAC_90_91_92_93_DATA_BANK :   8000 - |  DAC_90_91_92_93_DATA_LEN :    2206 - |
 DAC_90_91_92_93_DATA_PTR :    D299 - |  DAC_94_95_96_97_DATA :        9077 C |
*DAC_94_95_96_97_DATA_BANK :   8000 - |  DAC_94_95_96_97_DATA_LEN :    5B09 - |
 DAC_94_95_96_97_DATA_PTR :    7790 - |  DAC_98_99_9A_DATA :           CE6A C |
*DAC_98_99_9A_DATA_BANK :      8000 - |  DAC_98_99_9A_DATA_LEN :       680C - |
 DAC_98_99_9A_DATA_PTR :       6ACE - |  DAC_9B_DATA :                 DAD2 C |
*DAC_9B_DATA_BANK :            8000 - |  DAC_9B_DATA_LEN :             2006 - |
 DAC_9B_DATA_PTR :             D2DA - |  DAC_9C_DATA :                101BD C |
*DAC_9C_DATA_BANK :           10000 - |  DAC_9C_DATA_LEN :             3203 - |
 DAC_9C_DATA_PTR :             BD81 - |  DAC_9D_DATA :                104EF C |
*DAC_9D_DATA_BANK :           10000 - |  DAC_9D_DATA_LEN :             4902 - |
 DAC_9D_DATA_PTR :             EF84 - |  DAC_9E_DATA :                10738 C |
*DAC_9E_DATA_BANK :           10000 - |  DAC_9E_DATA_LEN :             8002 - |
 DAC_9E_DATA_PTR :             3887 - |  DAC_9F_DATA :                109B8 C |
*DAC_9F_DATA_BANK :           10000 - |  DAC_9F_DATA_LEN :             A512 - |
 DAC_9F_DATA_PTR :             B889 - |  DAC_A0_DATA :                11C5D C |
*DAC_A0_DATA_BANK :           10000 - |  DAC_A0_DATA_LEN :             BA0D - |
 DAC_A0_DATA_PTR :             5D9C - |  DAC_A1_DATA :                12A17 C |
*DAC_A1_DATA_BANK :           10000 - |  DAC_A1_DATA_LEN :             A80B - |
 DAC_A1_DATA_PTR :             17AA - |  DAC_A2_DATA :                135BF C |
*DAC_A2_DATA_BANK :           10000 - |  DAC_A2_DATA_LEN :             580D - |
 DAC_A2_DATA_PTR :             BFB5 - |  DAC_A3_DATA :                14317 C |
*DAC_A3_DATA_BANK :           10000 - |  DAC_A3_DATA_LEN :             9E02 - |
 DAC_A3_DATA_PTR :             17C3 - |  DAC_A4_DATA :                145B5 C |
*DAC_A4_DATA_BANK :           10000 - |  DAC_A4_DATA_LEN :             8A02 - |
 DAC_A4_DATA_PTR :             B5C5 - |  DAC_A5_DATA :                1483F C |
*DAC_A5_DATA_BANK :           10000 - |  DAC_A5_DATA_LEN :             600C - |
 DAC_A5_DATA_PTR :             3FC8 - |  DAC_A6_DATA :                1549F C |
*DAC_A6_DATA_BANK :           10000 - |  DAC_A6_DATA_LEN :             D606 - |
 DAC_A6_DATA_PTR :             9FD4 - |  DAC_A7_DATA :                15B75 C |
*DAC_A7_DATA_BANK :           10000 - |  DAC_A7_DATA_LEN :             F206 - |
 DAC_A7_DATA_PTR :             75DB - |  DAC_A8_DATA :                16267 C |
*DAC_A8_DATA_BANK :           10000 - |  DAC_A8_DATA_LEN :             7A03 - |
 DAC_A8_DATA_PTR :             67E2 - |  DAC_A9_DATA :                165E1 C |
*DAC_A9_DATA_BANK :           10000 - |  DAC_A9_DATA_LEN :             4F0A - |
 DAC_A9_DATA_PTR :             E1E5 - |  DAC_AA_DATA :                17030 C |
*DAC_AA_DATA_BANK :           10000 - |  DAC_AA_DATA_LEN :             8E06 - |
 DAC_AA_DATA_PTR :             30F0 - |  DAC_AB_DATA :                181BD C |
*DAC_AB_DATA_BANK :           18000 - |  DAC_AB_DATA_LEN :              409 - |
 DAC_AB_DATA_PTR :             BD81 - |  DAC_AC_DATA :                18AC1 C |
*DAC_AC_DATA_BANK :           18000 - |  DAC_AC_DATA_LEN :             8105 - |
 DAC_AC_DATA_PTR :             C18A - |  DAC_AD_AE_DATA :             19042 C |
*DAC_AD_AE_DATA_BANK :        18000 - |  DAC_AD_AE_DATA_LEN :          BC01 - |
 DAC_AD_AE_DATA_PTR :          4290 - |  DAC_AF_B0_DATA :             191FE C |
*DAC_AF_B0_DATA_BANK :        18000 - |  DAC_AF_B0_DATA_LEN :          6C03 - |
 DAC_AF_B0_DATA_PTR :          FE91 - |  DAC_B1_DATA :                1956A C |
*DAC_B1_DATA_BANK :           18000 - |  DAC_B1_DATA_LEN :             850B - |
 DAC_B1_DATA_PTR :             6A95 - |  DAC_B2_B3_DATA :              E0F2 C |
*DAC_B2_B3_DATA_BANK :         8000 - |  DAC_B2_B3_DATA_LEN :          4808 - |
 DAC_B2_B3_DATA_PTR :          F2E0 - |  DAC_B4_C1_C2_C3_C4_DATA :    1A0EF C |
*DAC_B4_C1_C2_C3_C4_DATA_BANK :                                       18000 - |
 DAC_B4_C1_C2_C3_C4_DATA_LEN : FD05 - |  DAC_B4_C1_C2_C3_C4_DATA_PTR : EFA0 - |
 DAC_B5_DATA :                1A6EC C | *DAC_B5_DATA_BANK :           18000 - |
 DAC_B5_DATA_LEN :             4006 - |  DAC_B5_DATA_PTR :             ECA6 - |
 DAC_B6_DATA :                1AD2C C | *DAC_B6_DATA_BANK :           18000 - |
 DAC_B6_DATA_LEN :             5505 - |  DAC_B6_DATA_PTR :             2CAD - |
 DAC_B7_DATA :                1B281 C | *DAC_B7_DATA_BANK :           18000 - |
 DAC_B7_DATA_LEN :             B104 - |  DAC_B7_DATA_PTR :             81B2 - |
 DAC_B8_B9_DATA :             1B732 C | *DAC_B8_B9_DATA_BANK :        18000 - |
 DAC_B8_B9_DATA_LEN :          3A06 - |  DAC_B8_B9_DATA_PTR :          32B7 - |
 DAC_BANKS :                   124E C |  DAC_BA_DATA :                1BD6C C |
*DAC_BA_DATA_BANK :           18000 - |  DAC_BA_DATA_LEN :             B304 - |
 DAC_BA_DATA_PTR :             6CBD - |  DAC_BB_DATA :                1C21F C |
*DAC_BB_DATA_BANK :           18000 - |  DAC_BB_DATA_LEN :             B601 - |
 DAC_BB_DATA_PTR :             1FC2 - |  DAC_BC_DATA :                1C3D5 C |
*DAC_BC_DATA_BANK :           18000 - |  DAC_BC_DATA_LEN :             B708 - |
 DAC_BC_DATA_PTR :             D5C3 - |  DAC_BD_DATA :                1CC8C C |
*DAC_BD_DATA_BANK :           18000 - |  DAC_BD_DATA_LEN :             BE05 - |
 DAC_BD_DATA_PTR :             8CCC - |  DAC_BE_DATA :                1D24A C |
*DAC_BE_DATA_BANK :           18000 - |  DAC_BE_DATA_LEN :             1007 - |
 DAC_BE_DATA_PTR :             4AD2 - |  DAC_BF_DATA :                1D95A C |
*DAC_BF_DATA_BANK :           18000 - |  DAC_BF_DATA_LEN :             DC01 - |
 DAC_BF_DATA_PTR :             5AD9 - |  DAC_C0_DATA :                1DB36 C |
*DAC_C0_DATA_BANK :           18000 - |  DAC_C0_DATA_LEN :             3608 - |
 DAC_C0_DATA_PTR :             36DB - |  DAC_C5_DATA :                201BD C |
*DAC_C5_DATA_BANK :           20000 - |  DAC_C5_DATA_LEN :             9402 - |
 DAC_C5_DATA_PTR :             BD81 - |  DAC_C6_DATA :                20451 C |
*DAC_C6_DATA_BANK :           20000 - |  DAC_C6_DATA_LEN :             2307 - |
 DAC_C6_DATA_PTR :             5184 - |  DAC_C7_DATA :                20B74 C |
*DAC_C7_DATA_BANK :           20000 - |  DAC_C7_DATA_LEN :             7605 - |
 DAC_C7_DATA_PTR :             748B - |  DAC_C8_DATA :                210EA C |
*DAC_C8_DATA_BANK :           20000 - |  DAC_C8_DATA_LEN :             4C07 - |
 DAC_C8_DATA_PTR :             EA90 - |  DAC_C9_CC_CD_CE_CF_DATA :    21836 C |
*DAC_C9_CC_CD_CE_CF_DATA_BANK :                                       20000 - |
 DAC_C9_CC_CD_CE_CF_DATA_LEN : B50B - |  DAC_C9_CC_CD_CE_CF_DATA_PTR : 3698 - |
 DAC_CA_D0_D1_D2_DATA :       223EB C | *DAC_CA_D0_D1_D2_DATA_BANK :  20000 - |
 DAC_CA_D0_D1_D2_DATA_LEN :     E07 - |  DAC_CA_D0_D1_D2_DATA_PTR :    EBA3 - |
 DAC_CB_D3_D4_D5_DATA :       22AF9 C | *DAC_CB_D3_D4_D5_DATA_BANK :  20000 - |
 DAC_CB_D3_D4_D5_DATA_LEN :    C405 - |  DAC_CB_D3_D4_D5_DATA_PTR :    F9AA - |
 DAC_D6_DATA :                230BD C | *DAC_D6_DATA_BANK :           20000 - |
 DAC_D6_DATA_LEN :             7E15 - |  DAC_D6_DATA_PTR :             BDB0 - |
 DAC_D7_DATA :                2463B C | *DAC_D7_DATA_BANK :           20000 - |
 DAC_D7_DATA_LEN :             4F0A - |  DAC_D7_DATA_PTR :             3BC6 - |
 DAC_D8_D9_DATA :              E93A C | *DAC_D8_D9_DATA_BANK :         8000 - |
 DAC_D8_D9_DATA_LEN :          4808 - |  DAC_D8_D9_DATA_PTR :          3AE9 - |
*DATASELECT_ENTRY :                                        FFFFFFFFFFFFEF4B C |
*DATASELECT_NOSAVE_PLAYER :                                FFFFFFFFFFFFEF4C C |
*DATE :                   6/11/2022 - | *DBASSHEY :                      B6 - |
*DCLAP :                         C7 - | *DCLAPS3 :                       8F - |
*DCLICK :                        9C - | *DCOMEON :                       A5 - |
*DCRASHCYMBAL :                  88 - | *DCRASHINGNOISEWOO :             BE - |
*DDANCESNARE :                   A6 - | *DDANCESTYLEKICK :               B7 - |
 DEBUGSOUNDBANKS :                1 - |
*DEBUG_CAMERA_DELAY :                                      FFFFFFFFFFFFFE0A C |
*DEBUG_CAMERA_SPEED :                                      FFFFFFFFFFFFFE0B C |
*DEBUG_CHEAT_FLAG :                                        FFFFFFFFFFFFFFE2 - |
*DEBUG_MODE_CHEAT_COUNTER :                                FFFFFFFFFFFFFFE6 - |
*DEBUG_MODE_FLAG : FFFFFFFFFFFFFFDA - | *DEBUG_OBJECT :    FFFFFFFFFFFFFE06 C |
*DEBUG_PLACEMENT_MODE :                                    FFFFFFFFFFFFFE08 - |
*DEBUG_PLACEMENT_ROUTINE :                                 FFFFFFFFFFFFFE08 C |
*DEBUG_PLACEMENT_TYPE :                                    FFFFFFFFFFFFFE09 C |
*DEBUG_SAVED_ART_TILE :                                    FFFFFFFFFFFFFFCE C |
*DEBUG_SAVED_MAPPINGS :                                    FFFFFFFFFFFFFFCA C |
*DECELERATION :    FFFFFFFFFFFFF764 C | *DECELERATION_P2 : FFFFFFFFFFFFFEC4 C |
*DECHOEDCLAPHIT :                B2 - | *DECHOEDCLAPHIT_S3 :             D8 - |
 DECTABLE :                    123E C | *DEFAULT_X_RADIUS :              45 - |
*DEFAULT_Y_RADIUS :              44 - | *DEFORM_LOCK :     FFFFFFFFFFFFEE30 C |
 DELECTRICFLOORTOM :             93 - | *DELECTRICHIGHTOM :              90 - |
 DELECTRICLOWTOM :               92 - |  DELECTRICMIDTOM :               91 - |
*DEMO_DATA_ADDR :  FFFFFFFFFFFFEF52 C |
*DEMO_HOLD_BUTTONS :                                       FFFFFFFFFFFFEF79 C |
*DEMO_HOLD_COUNTER :                                       FFFFFFFFFFFFEF78 C |
*DEMO_MODE_FLAG :  FFFFFFFFFFFFFFD0 - | *DEMO_NUMBER :     FFFFFFFFFFFFEF7A C |
*DEMO_START_BUTTON :                                       FFFFFFFFFFFFEF50 C |
*DEMO_TIMER :      FFFFFFFFFFFFF614 C | *DETECTPAL :                    340 C |
 DETECTPAL.WAITFORNEXTVBLANK :  35C C |  DETECTPAL.WAITFORVBLANKEND :   354 C |
 DETECTPAL.WAITFORVBLANKSTART : 34C C | *DFINALFIGHTMETALCRASH :         D6 - |
*DFLOORTOM :                     D2 - | *DFLOORTOMS3 :                   85 - |
*DGLASSCRASH :                   A0 - | *DGLASSCRASHKICK :               A1 - |
*DGLASSCRASHSNARE :              9F - | *DGO :                           AA - |
*DHICLAP :                       D3 - | *DHIGHERMETALHIT :               8D - |
*DHIGHMETALHIT :                 8C - | *DHIGHTOM :                      82 - |
*DHIHITDRUM :                    AF - | *DHIPHOPHITKICK :                B4 - |
*DHIPHOPHITKICK2 :               B8 - | *DHIPHOPHITKICK3 :               B9 - |
*DHIPHOPHITPOWERKICK :           B5 - | *DHITIMPANI :                    CC - |
*DHITIMPANIS3 :                  98 - | *DHITOM :                        CA - |
*DHIWOODBLOCK :                  AD - | *DINTROKICK :                    D7 - |
*DISABLE_DEATH_PLANE :                                     FFFFFFFFFFFFF665 C |
*DISABLE_WALL_GRAB :                                       FFFFFFFFFFFFF74F C |
*DISTANCE_FROM_TOP :                                       FFFFFFFFFFFFEE2C C |
*DISTANCE_FROM_TOP_P2 :                                    FFFFFFFFFFFFEE2E C |
*DKICK :                         C5 - | *DKICKEXTRABASS :                A4 - |
*DKICKHEY :                      C0 - |  DKICKS3 :                       86 - |
*DLOOSEKICK :                    A7 - | *DLOOSERSNARE :                  97 - |
*DLOOSESNARE :                   96 - | *DLOOSESNARENOISE :              BC - |
*DLOWCLAP :                      D5 - | *DLOWERECHOEDCLAPHIT :           B3 - |
*DLOWERECHOEDCLAPHIT_S3 :        D9 - | *DLOWERPOWERKICKHIT :            C3 - |
*DLOWESTPOWERKICKHIT :           C4 - | *DLOWHITDRUM :                   B0 - |
*DLOWMETALHIT :                  8A - | *DLOWPOWERKICKHIT :              C2 - |
*DLOWTIMPANI :                   CE - | *DLOWTIMPANIS3 :                 99 - |
*DLOWTOM :                       D1 - | *DLOWTOMS3 :                     84 - |
*DLOWWOODBLOCK :                 AE - |  DMA :                           27 - |
*DMA_QUEUE :       FFFFFFFFFFFFFB00 C | *DMA_QUEUE_SLOT :  FFFFFFFFFFFFFBFC C |
*DMA_TRIGGER_WORD :                                        FFFFFFFFFFFFF640 C |
*DMETALCRASHHIT :                B1 - | *DMETALHIT :                     8B - |
*DMIDCLAP :                      D4 - | *DMIDMETALHIT :                  8E - |
*DMIDPITCHSNARE :                95 - | *DMIDTIMPANI :                   CD - |
*DMIDTIMPANIS3 :                 9A - | *DMIDTOM :                       D0 - |
*DMIDTOMS3 :                     83 - | *DMODLOOSEKICK :                 A8 - |
 DMUFFLEDSNARE :                 87 - | *DODDSNAREKICK :                 A3 - |
*DOMESTIC_NAME :                120 C | *DOUBLE_JUMP_FLAG :              2F - |
*DOUBLE_JUMP_PROPERTY :          25 - |
*DO_UPDATES_IN_H_INT :                                     FFFFFFFFFFFFF64F C |
*DPOWERKICK :                    9D - | *DPOWERKICK2 :                   BD - |
*DPOWERKICKHIT :                 C1 - | *DPOWERTOM :                     AC - |
*DQUICKGLASSCRASH :              9E - | *DQUICKHIT :                     BF - |
*DQUICKLOOSESNARE :              9B - | *DQUIETGLASSCRASH :              A2 - |
*DRAWING_MASK :                7FFF - |
*DRAW_DELAYED_POSITION :                                   FFFFFFFFFFFFEEC8 C |
*DRAW_DELAYED_ROWCOUNT :                                   FFFFFFFFFFFFEECA C |
*DREVERSEFADINGWIND :            BA - | *DRIDECYMBAL :                   89 - |
*DSCRATCH :                      C8 - | *DSCRATCHS3 :                    BB - |
*DSNARE :                        C6 - | *DSNAREGO :                      AB - |
 DSNARES3 :                      81 - | *DTIGHTSNARE :                   94 - |
*DTIMPANI :                      C9 - | *DUST :            FFFFFFFFFFFFCC54 C |
*DUST_P2 :         FFFFFFFFFFFFCC9E C | *DVLOWCLAP :                     CB - |
*DVLOWTIMPANI :                  CF - | *DWOO :                          A9 - |
*DYNAMIC_OBJECT_RAM :                                      FFFFFFFFFFFFB0DE C |
 DYNAMIC_OBJECT_RAM_END :                                  FFFFFFFFFFFFCAE2 - |
*DYNAMIC_RESIZE_ROUTINE :                                  FFFFFFFFFFFFEE33 C |
*EMERALDS_CONVERTED_FLAG :                                 FFFFFFFFFFFFFFBA C |
*EMERALD_COUNTS :  FFFFFFFFFFFFFFB0 - |
*EMERALD_FLICKER_FLAG :                                    FFFFFFFFFFFFE666 C |
*ENDING_RUNNING_FLAG :                                     FFFFFFFFFFFFEF72 C |
 ENDOFROM :                   30000 C |
*END_OF_LEVEL_FLAG :                                       FFFFFFFFFFFFFAAA C |
 ENTRYPOINT :                   26E C |  ERRORTRAP :                    26C C |
 EVENTS_BG :       FFFFFFFFFFFFEED2 C | *EVENTS_FG_0 :     FFFFFFFFFFFFEEB4 C |
*EVENTS_FG_1 :     FFFFFFFFFFFFEEB6 C | *EVENTS_FG_2 :     FFFFFFFFFFFFEEB8 C |
*EVENTS_FG_3 :     FFFFFFFFFFFFEEBE C | *EVENTS_FG_4 :     FFFFFFFFFFFFEEC4 C |
*EVENTS_FG_5 :     FFFFFFFFFFFFEEC6 C |
*EVENTS_ROUTINE_BG :                                       FFFFFFFFFFFFEEC2 C |
*EVENTS_ROUTINE_FG :                                       FFFFFFFFFFFFEEC0 C |
*EVENT_LBZ2_DEATHEGG :                                     FFFFFFFFFFFFEF40 - |
*EXTRA_LIFE_FLAGS :                                        FFFFFFFFFFFFFE1B C |
*EXTRA_LIFE_FLAGS_P2 :                                     FFFFFFFFFFFFFEBF C |
 FADEID__END :                   E6 - |  FADEID__FIRST :                 E1 - |
*FALSE :                          0 - |
*FAST_V_SCROLL_FLAG :                                      FFFFFFFFFFFFEE39 C |
*FBZ_CLOUD_ADDR :  FFFFFFFFFFFFEEEA - |  FIRSTCOORDFLAG :                E0 - |
*FLIPS_REMAINING :               30 - | *FLIP_ANGLE :                    27 - |
*FLIP_SPEED :                    31 - | *FLIP_TYPE :                     2D - |
*FLYING_CARRYING_SONIC_FLAG :                              FFFFFFFFFFFFF73E C |
*FLYING_PICKING_SONIC_TIMER :                              FFFFFFFFFFFFF73F C |
*FTONE_01 :                      28 - | *FTONE_02 :                      29 - |
*FTONE_03 :                      2A - | *FTONE_04 :                      2B - |
*FTONE_05 :                      2C - | *FTONE_06 :                      2D - |
*FTONE_07 :                      2E - | *FTONE_08 :                      2F - |
*FTONE_09 :                      30 - | *FTONE_0A :                      31 - |
*FTONE_0B :                      32 - | *FTONE_0C :                      33 - |
*FTONE_0D :                      34 - | *FULLPMMU :                       1 - |
 GAMELOOP :                     47E C | *GAMESTARTUP :                  340 C |
*GAME_MODE :       FFFFFFFFFFFFF600 C | *GAME_PAUSED :     FFFFFFFFFFFFF63A C |
 GETPOINTERTABLE :                8 C |
*GLIDE_SCREEN_SHAKE :                                      FFFFFFFFFFFFEF66 C |
*GLIDING_COLLISION_FLAGS :                                 FFFFFFFFFFFFF74E C |
 GRAPHICS_FLAGS :  FFFFFFFFFFFFFFD8 - | *GROUND_VEL :                    1C - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HEADER :                       100 C | *HEIGHT_PIXELS :                  6 - |
*HIGH_PRIORITY :               8000 - |  HINT :                         4DC C |
*HPZ_CURRENT_SPECIAL_STAGE :                               FFFFFFFFFFFFEF70 C |
*HPZ_SPECIAL_STAGE_COMPLETED :                             FFFFFFFFFFFFEF6C C |
 HSCROLL_TABLE :   FFFFFFFFFFFFA800 C |  HW_EXPANSION_CONTROL :      A1000D - |
*HW_EXPANSION_DATA :         A10007 - | *HW_EXPANSION_RXDATA :       A1001D - |
*HW_EXPANSION_SCTRL :        A1001F - | *HW_EXPANSION_TXDATA :       A1001B - |
 HW_PORT_1_CONTROL :         A10009 - | *HW_PORT_1_DATA :            A10003 - |
*HW_PORT_1_RXDATA :          A10011 - | *HW_PORT_1_SCTRL :           A10013 - |
*HW_PORT_1_TXDATA :          A1000F - | *HW_PORT_2_CONTROL :         A1000B - |
*HW_PORT_2_DATA :            A10005 - | *HW_PORT_2_RXDATA :          A10017 - |
*HW_PORT_2_SCTRL :           A10019 - | *HW_PORT_2_TXDATA :          A10015 - |
 HW_VERSION :                A10001 - |
*HYPER_SONIC_FLASH_TIMER :                                 FFFFFFFFFFFFF666 C |
 H_INT_ADDR :      FFFFFFFFFFFFFFF8 - | *H_INT_COUNTER :   FFFFFFFFFFFFF625 - |
 H_INT_COUNTER_COMMAND :                                   FFFFFFFFFFFFF624 C |
*H_INT_FLAG :      FFFFFFFFFFFFF644 C |  H_INT_JUMP :      FFFFFFFFFFFFFFF6 - |
*H_SCROLL_AMOUNT : FFFFFFFFFFFFEE00 C |
*H_SCROLL_AMOUNT_P2 :                                      FFFFFFFFFFFFEE04 C |
*H_SCROLL_BUFFER : FFFFFFFFFFFFE000 C |
*H_SCROLL_FRAME_OFFSET :                                   FFFFFFFFFFFFEE24 C |
*H_SCROLL_FRAME_OFFSET_P2 :                                FFFFFFFFFFFFEE28 C |
*INEXTMODE :                      0 - | *INIT_VDP :                     36A C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INPUT :                        190 C | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTERACT :                      42 - |
*INVINCIBILITY_STARS :                                     FFFFFFFFFFFFCD7C C |
*INVINCIBILITY_STARS_P2 :                                  FFFFFFFFFFFFCEA4 C |
*INVINCIBILITY_TIMER :           35 - | *INVULNERABILITY_TIMER :         34 - |
*JUMPING :                       40 - | *KIS2ROMENDLOC :                1E7 C |
*KIS2ROMENDLOC2 :               1ED C | *KIS2ROMSTARTLOC :              1E4 C |
*KIS2ROMSTARTLOC2 :             1EA C | *KIS2ROM_INFO :                 1E0 C |
*KIS2ROM_TYPE :                 1E2 C | *KOSDEC :                       58A C |
 KOSDEC.CODE_01 :               6D4 C |  KOSDEC.COPY3 :                 640 C |
 KOSDEC.COPY45 :                666 C |  KOSDEC.COPY5 :                 6AA C |
 KOSDEC.FETCHCODELOOP :         5A6 C |  KOSDEC.FETCHNEWCODE :          5C0 C |
 KOSDEC.LARGECOPY :             718 C |  KOSDEC.MEDIUMCOPY :            73C C |
 KOSDEC.QUIT :                  750 C |  KOSDEC.STREAMCOPY :            730 C |
 KOSDEC_BYTEMAP :               752 C |  KOS_DECOMP :                   58A C |
*KOS_DECOMP_BOOKMARK :                                     FFFFFFFFFFFFFF3A C |
*KOS_DECOMP_BUFFER :                                       FFFFFFFFFFFFD000 C |
*KOS_DECOMP_DESTINATION :                                  FFFFFFFFFFFFFF44 - |
 KOS_DECOMP_QUEUE :                                        FFFFFFFFFFFFFF40 C |
*KOS_DECOMP_QUEUE_COUNT :                                  FFFFFFFFFFFFFF0E C |
*KOS_DECOMP_SOURCE :                                       FFFFFFFFFFFFFF40 - |
*KOS_DECOMP_STORED_REGISTERS :                             FFFFFFFFFFFFFF10 C |
*KOS_DECOMP_STORED_SR :                                    FFFFFFFFFFFFFF38 C |
*KOS_DESCRIPTION_FIELD :                                   FFFFFFFFFFFFFF3E C |
*KOS_LAST_MODULE_SIZE :                                    FFFFFFFFFFFFFF62 C |
*KOS_MODULES_LEFT :                                        FFFFFFFFFFFFFF60 C |
*KOS_MODULE_DESTINATION :                                  FFFFFFFFFFFFFF68 - |
 KOS_MODULE_QUEUE :                                        FFFFFFFFFFFFFF64 C |
*KOS_MODULE_SOURCE :                                       FFFFFFFFFFFFFF64 - |
*LAG_FRAME_COUNT : FFFFFFFFFFFFF628 C |
*LAST_STAR_POST_HIT :                                      FFFFFFFFFFFFFE2A C |
*LAYOUT_ROW_INDEX_MASK :                                   FFFFFFFFFFFFEEAE C |
*LEVEL_FRAME_COUNTER :                                     FFFFFFFFFFFFFE04 C |
 LEVEL_LAYOUT_HEADER :                                     FFFFFFFFFFFF8000 C |
*LEVEL_LAYOUT_MAIN :                                       FFFFFFFFFFFF8008 C |
*LEVEL_OBJECT_RAM :                                        FFFFFFFFFFFFCAE2 - |
*LEVEL_REPEAT_OFFSET :                                     FFFFFFFFFFFFEEBC C |
*LEVEL_SELECT_CHEAT_COUNTER :                              FFFFFFFFFFFFFFE4 - |
*LEVEL_SELECT_FLAG :                                       FFFFFFFFFFFFFFE0 - |
*LEVEL_SELECT_OPTION :                                     FFFFFFFFFFFFFF82 C |
*LEVEL_SELECT_REPEAT :                                     FFFFFFFFFFFFFF80 C |
*LEVEL_STARTED_FLAG :                                      FFFFFFFFFFFFF711 C |
*LEVEL_TRIGGER_ARRAY :                                     FFFFFFFFFFFFF7E0 C |
*LIFE_COUNT :      FFFFFFFFFFFFFE12 C | *LIFE_COUNT_P2 :   FFFFFFFFFFFFFEC6 C |
*LISTON :                         3 - |  LOC_BE9 :                      C91 C |
 LOC_BF9 :                      CA1 C | *LOSER_TIME_LEFT : FFFFFFFFFFFFFEDE C |
*LRB_SOLID_BIT :                 47 - |
*LRZ_ROCKS_ADDR_BACK :                                     FFFFFFFFFFFFFE6A C |
*LRZ_ROCKS_ADDR_FRONT :                                    FFFFFFFFFFFFFE66 C |
*LRZ_ROCKS_ROUTINE :                                       FFFFFFFFFFFFFE65 C |
*MACEXP :                         7 - | *MAINSPR_CHILDSPRITES :          16 - |
*MAPPINGS :                       C - | *MAPPING_FRAME :                 22 - |
*MASKALGORITHM :                  7 - |  MASKALLOPERATORS :              F0 - |
*MASKAMSENSITIVITY :             30 - |  MASKATTACKRATE :                1F - |
 MASKDACDISABLE :                 0 - |  MASKDACENABLE :                 80 - |
 MASKENABLELOADTIMERS :           F - | *MASKFEEDBACK :                  38 - |
 MASKFM3NORMAL :                  0 - |  MASKFM3SPECIAL :                40 - |
 MASKFM6UNUSED :                 14 - | *MASKFMSENSITIVITY :              7 - |
*MASKLFOFREQUENCY :               7 - |  MASKPANNING :                   C0 - |
 MASKPLAYREST :                  90 - | *MASKRATESCALE :                 C0 - |
 MASKRELEASERATE :                F - |  MASKSKIPFMNOTEOFF :              6 - |
 MASKSKIPFMNOTEON :               6 - | *MASKSSGEGENABLE :                8 - |
*MASKSSGEGENVELOPESHAPE :         7 - |  MASKSUSTAINLEVEL :              F0 - |
 MAXATTACKRATE :                 1F - |  MAXRELEASERATE :                 F - |
 MAXSUSTAINLEVEL :               F0 - | *MAX_SPEED :       FFFFFFFFFFFFF760 C |
*MAX_SPEED_P2 :    FFFFFFFFFFFFFEC0 C |
*MEAN_WATER_LEVEL :                                        FFFFFFFFFFFFF648 C |
*MHZ_POLLEN_COUNTER :                                      FFFFFFFFFFFFF7C0 C |
*MODEM_INFO :                   1BC C |  MODENVALTERSENS :               84 - |
 MODENVJUMPTO :                  82 - |  MODENVRESET :                   80 - |
 MODENVSUSTAIN :                 83 - | *MODENVSUSTAIN1 :                81 - |
 MODENV_00 :                   12C1 C |  MODENV_01 :                   12C0 C |
 MODENV_02 :                   12CD C |  MODENV_03 :                   12DA C |
 MODENV_04 :                   12E8 C |  MODENV_05 :                   12F4 C |
 MODENV_06 :                   1306 C |  MODENV_07 :                   1317 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
*MONITORS_BROKEN : FFFFFFFFFFFFFECC C |
*MONITORS_BROKEN_P2 :                                      FFFFFFFFFFFFFECE C |
*MOVE_LOCK :                     32 - |  MUSDATA_DEFAULT :            2836D C |
*MUSDATA_DEFAULT_PTR :        28000 C |  MUSICPOINTERS :              28000 C |
 MUSID_EXTRALIFE :               2A - | *MUSID_SEGASOUND :               FF - |
*MUSID_STOPSEGA :                FE - |  MUSID__END :                    34 - |
 MUSID__FIRST :                   1 - | *MUS_AIZ1 :                       1 C |
*MUS_AIZ2 :                       2 C | *MUS_ALZ :                       20 C |
 MUS_BANK1_START :            28000 C | *MUS_BPZ :                       21 C |
*MUS_CGZ :                       23 C | *MUS_CNZ1 :                       7 C |
*MUS_CNZ2 :                       8 C | *MUS_COMPETITIONMENU :           2D C |
*MUS_CONTINUE :                  28 C | *MUS_CREDITS3 :                  26 C |
 MUS_CREDITSK :                  33 C | *MUS_DATASELECT :                2F C |
*MUS_DDZ :                       1A C |  MUS_DEFAULT :                    1 - |
*MUS_DEZ1 :                      16 C | *MUS_DEZ2 :                      17 C |
*MUS_DPZ :                       22 C | *MUS_DROWNING :                  31 C |
*MUS_EMERALD :                   2B C | *MUS_EMZ :                       24 C |
*MUS_ENDBOSS :                   19 C | *MUS_ENDING :                    32 C |
 MUS_EXTRALIFE :                 2A C | *MUS_FADEOUT :                   E1 C |
*MUS_FADEOUT2 :                  E5 C | *MUS_FBZ1 :                       9 C |
*MUS_FBZ2 :                       A C | *MUS_FINALBOSS :                 30 C |
*MUS_GAMEOVER :                  27 C | *MUS_GOTTHROUGHACT :             29 C |
*MUS_GUMBALL :                   1E C | *MUS_HCZ1 :                       3 C |
*MUS_HCZ2 :                       4 C | *MUS_ICZ1 :                       B C |
*MUS_ICZ2 :                       C C | *MUS_INVINCIBILITY :             2C C |
*MUS_KNUCKLES :                  1F C | *MUS_LBZ1 :                       D C |
*MUS_LBZ2 :                       E C | *MUS_LRZ1 :                      13 C |
*MUS_LRZ2 :                      14 C | *MUS_MGZ1 :                       5 C |
*MUS_MGZ2 :                       6 C | *MUS_MHZ1 :                       F C |
*MUS_MHZ2 :                      10 C | *MUS_MINIBOSS :                  2E C |
*MUS_MINIBOSSK :                 18 C | *MUS_MUTEPSG :                   E3 C |
*MUS_PACHINKO :                  1B C | *MUS_S2SEGA :                    FA - |
 MUS_SEGA :                      FF - | *MUS_SLOTS :                     1D C |
*MUS_SOZ1 :                      11 C | *MUS_SOZ2 :                      12 C |
*MUS_SPECIALSTAGE :              1C C | *MUS_SSZ :                       15 C |
*MUS_STOP :                      E2 C |  MUS_STOPSEGA :                  FE - |
*MUS_STOPSFX :                   E4 C | *MUS_TITLESCREEN :               25 C |
 MUS__END :                      34 - |  MUS__ENDCMD :                   E6 - |
 MUS__FIRST :                     1 - |  MUS__FIRSTCMD :                 E1 - |
*NA0 :                           8A - |  NA1 :                           96 - |
 NA2 :                           A2 - |  NA3 :                           AE - |
*NA4 :                           BA - | *NA5 :                           C6 - |
*NA6 :                           D2 - | *NA7 :                           DE - |
*NAB0 :                          89 - |  NAB1 :                          95 - |
 NAB2 :                          A1 - |  NAB3 :                          AD - |
 NAB4 :                          B9 - |  NAB5 :                          C5 - |
 NAB6 :                          D1 - | *NAB7 :                          DD - |
*NB0 :                           8C - |  NB1 :                           98 - |
*NB2 :                           A4 - |  NB3 :                           B0 - |
 NB4 :                           BC - | *NB5 :                           C8 - |
 NB6 :                           D4 - | *NBB0 :                          8B - |
 NBB1 :                          97 - |  NBB2 :                          A3 - |
 NBB3 :                          AF - | *NBB4 :                          BB - |
 NBB5 :                          C7 - |  NBB6 :                          D3 - |
*NBB7 :                          DF - | *NC0 :                           81 - |
*NC1 :                           8D - |  NC2 :                           99 - |
 NC3 :                           A5 - |  NC4 :                           B1 - |
 NC5 :                           BD - |  NC6 :                           C9 - |
*NC7 :                           D5 - | *NCS0 :                          82 - |
*NCS1 :                          8E - | *NCS2 :                          9A - |
*NCS3 :                          A6 - | *NCS4 :                          B2 - |
*NCS5 :                          BE - | *NCS6 :                          CA - |
*NCS7 :                          D6 - | *ND0 :                           83 - |
*ND1 :                           8F - |  ND2 :                           9B - |
*ND3 :                           A7 - |  ND4 :                           B3 - |
 ND5 :                           BF - | *ND6 :                           CB - |
*ND7 :                           D7 - | *NE0 :                           85 - |
*NE1 :                           91 - |  NE2 :                           9D - |
*NE3 :                           A9 - |  NE4 :                           B5 - |
 NE5 :                           C1 - | *NE6 :                           CD - |
*NE7 :                           D9 - | *NEB0 :                          84 - |
*NEB1 :                          90 - | *NEB2 :                          9C - |
*NEB3 :                          A8 - |  NEB4 :                          B4 - |
 NEB5 :                          C0 - | *NEB6 :                          CC - |
*NEB7 :                          D8 - | *NEM_CODE_TABLE :  FFFFFFFFFFFFAA00 C |
*NEM_DATA_WORD :   FFFFFFFFFFFFF6F0 C |
*NEM_DECOMP_DESTINATION :                                  FFFFFFFFFFFFF684 - |
 NEM_DECOMP_QUEUE :                                        FFFFFFFFFFFFF680 C |
*NEM_DECOMP_SOURCE :                                       FFFFFFFFFFFFF680 - |
*NEM_DECOMP_VARS : FFFFFFFFFFFFF6E0 - |
*NEM_FRAME_PATTERNS_LEFT :                                 FFFFFFFFFFFFF6FA C |
*NEM_PALETTE_INDEX :                                       FFFFFFFFFFFFF6E8 C |
*NEM_PATTERNS_LEFT :                                       FFFFFFFFFFFFF6F8 C |
*NEM_PREVIOUS_ROW :                                        FFFFFFFFFFFFF6EC C |
*NEM_REPEAT_COUNT :                                        FFFFFFFFFFFFF6E4 C |
*NEM_SHIFT_VALUE : FFFFFFFFFFFFF6F4 C |
*NEM_WRITE_ROUTINE :                                       FFFFFFFFFFFFF6E0 C |
*NESTMAX :                      100 - |
*NEXT_DEMO_NUMBER :                                        FFFFFFFFFFFFFFD2 - |
*NEXT_EXTRA_LIFE_SCORE :                                   FFFFFFFFFFFFFFC0 C |
*NEXT_EXTRA_LIFE_SCORE_P2 :                                FFFFFFFFFFFFFFC4 C |
*NEXT_OBJECT :                   4A - | *NEXT_SUBSPR :                    6 - |
*NEXT_TILT :                     3A - | *NF0 :                           86 - |
*NF1 :                           92 - |  NF2 :                           9E - |
 NF3 :                           AA - |  NF4 :                           B6 - |
 NF5 :                           C2 - | *NF6 :                           CE - |
*NF7 :                           DA - | *NFS0 :                          87 - |
*NFS1 :                          93 - | *NFS2 :                          9F - |
*NFS3 :                          AB - | *NFS4 :                          B7 - |
*NFS5 :                          C3 - | *NFS6 :                          CF - |
*NFS7 :                          DB - | *NG0 :                           88 - |
 NG1 :                           94 - |  NG2 :                           A0 - |
 NG3 :                           AC - |  NG4 :                           B8 - |
 NG5 :                           C4 - |  NG6 :                           D0 - |
*NG7 :                           DC - | *NMAXPSG :                       C7 - |
*NMAXPSG1 :                      D3 - |  NMAXPSG2 :                      D4 - |
 NORMAL_PALETTE :  FFFFFFFFFFFFFC00 C |
*NORMAL_PALETTE_LINE_2 :                                   FFFFFFFFFFFFFC20 - |
*NORMAL_PALETTE_LINE_3 :                                   FFFFFFFFFFFFFC40 - |
*NORMAL_PALETTE_LINE_4 :                                   FFFFFFFFFFFFFC60 - |
 NOTEREST :                      80 - | *NOT_GHOST_FLAG :  FFFFFFFFFFFFEF49 C |
 NRST :                          80 - | *OBJECT_CONTROL :                2E - |
*OBJECT_INDEX_ADDR :                                       FFFFFFFFFFFFEF5A C |
*OBJECT_LOAD_ADDR_BACK :                                   FFFFFFFFFFFFF776 C |
*OBJECT_LOAD_ADDR_FRONT :                                  FFFFFFFFFFFFF772 C |
*OBJECT_LOAD_ROUTINE :                                     FFFFFFFFFFFFF76C C |
*OBJECT_RAM :      FFFFFFFFFFFFB000 - | *OBJECT_RAM_END :  FFFFFFFFFFFFCFCC - |
*OBJECT_RESPAWN_INDEX_BACK :                               FFFFFFFFFFFFF77C C |
*OBJECT_RESPAWN_INDEX_FRONT :                              FFFFFFFFFFFFF77A C |
*OBJECT_RESPAWN_TABLE :                                    FFFFFFFFFFFFEB00 C |
*OBJECT_RESPAWN_TABLE_2 :                                  FFFFFFFFFFFF8400 - |
 OBJECT_SIZE :                   4A - | *OBJOFF_12 :                     12 - |
*OBJOFF_16 :                     16 - | *OBJOFF_1C :                     1C - |
*OBJOFF_1D :                     1D - | *OBJOFF_27 :                     27 - |
*OBJOFF_2E :                     2E - | *OBJOFF_2F :                     2F - |
*OBJOFF_30 :                     30 - | *OBJOFF_31 :                     31 - |
*OBJOFF_32 :                     32 - | *OBJOFF_33 :                     33 - |
*OBJOFF_34 :                     34 - | *OBJOFF_35 :                     35 - |
*OBJOFF_36 :                     36 - | *OBJOFF_37 :                     37 - |
*OBJOFF_38 :                     38 - | *OBJOFF_39 :                     39 - |
*OBJOFF_3A :                     3A - | *OBJOFF_3B :                     3B - |
*OBJOFF_3C :                     3C - | *OBJOFF_3D :                     3D - |
*OBJOFF_3E :                     3E - | *OBJOFF_3F :                     3F - |
*OBJOFF_40 :                     40 - | *OBJOFF_41 :                     41 - |
*OBJOFF_42 :                     42 - | *OBJOFF_43 :                     43 - |
*OBJOFF_44 :                     44 - | *OBJOFF_45 :                     45 - |
*OBJOFF_46 :                     46 - | *OBJOFF_47 :                     47 - |
*OBJOFF_48 :                     48 - | *OBJOFF_49 :                     49 - |
*OSCILLATING_TABLE :                                       FFFFFFFFFFFFFE6E C |
*OSCILLATING_TABLE_END :                                   FFFFFFFFFFFFFEB0 - |
*OVERSEAS_NAME :                150 C | *P1_CHARACTER :    FFFFFFFFFFFFFFEA - |
 P1_PUSHING :                    20 - |  P1_PUSHING_BIT :                 5 - |
 P1_STANDING :                    8 - |  P1_STANDING_BIT :                3 - |
*P2_CHARACTER :    FFFFFFFFFFFFFFEB - |  P2_PUSHING :                    40 - |
 P2_PUSHING_BIT :                 6 - |  P2_STANDING :                   10 - |
 P2_STANDING_BIT :                4 - | *PACKING :                        0 - |
*PADDING :                        0 - |
*PALETTE_CYCLE_COUNTER0 :                                  FFFFFFFFFFFFF632 C |
*PALETTE_CYCLE_COUNTER1 :                                  FFFFFFFFFFFFF634 C |
*PALETTE_CYCLE_COUNTERS :                                  FFFFFFFFFFFFF650 C |
*PALETTE_FADE_COUNT :                                      FFFFFFFFFFFFF627 C |
*PALETTE_FADE_INDEX :                                      FFFFFFFFFFFFF626 C |
*PALETTE_FADE_INFO :                                       FFFFFFFFFFFFF626 - |
*PALETTE_FADE_TIMER :                                      FFFFFFFFFFFFEE50 C |
*PALETTE_FRAME :   FFFFFFFFFFFFF65C C |
*PALETTE_FRAME_TAILS :                                     FFFFFFFFFFFFF668 C |
*PALETTE_LINE_0 :                 0 - | *PALETTE_LINE_1 :              2000 - |
*PALETTE_LINE_2 :              4000 - | *PALETTE_LINE_3 :              6000 - |
*PALETTE_ROTATION_CUSTOM :                                 FFFFFFFFFFFFFADA C |
*PALETTE_ROTATION_DATA :                                   FFFFFFFFFFFFFADE C |
*PALETTE_ROTATION_DISABLE :                                FFFFFFFFFFFFFABF C |
*PALETTE_TIMER :   FFFFFFFFFFFFF65E C |
*PALETTE_TIMER_TAILS :                                     FFFFFFFFFFFFF669 C |
*PAL_FADE_DELAY :  FFFFFFFFFFFFF794 C | *PAL_FADE_DELAY2 : FFFFFFFFFFFFFACE C |
 PANCENTER :                     C0 - | *PANCENTRE :                     C0 - |
 PANLEFT :                       80 - | *PANNONE :                        0 - |
 PANRIGHT :                      40 - | *PARENT :                        42 - |
*PARENT2 :                       48 - | *PARENT3 :                       46 - |
*PERFECT_RINGS_LEFT :                                      FFFFFFFFFFFFFF04 C |
*PLANE_BUFFER :    FFFFFFFFFFFFF100 C |
*PLANE_BUFFER_2_ADDR :                                     FFFFFFFFFFFFEF74 C |
*PLANE_DOUBLE_UPDATE_FLAG :                                FFFFFFFFFFFFEEA4 C |
*PLAYER_1 :        FFFFFFFFFFFFB000 C | *PLAYER_2 :        FFFFFFFFFFFFB04A C |
*PLAYER_MODE :     FFFFFFFFFFFFFF08 C | *PLAYER_OPTION :   FFFFFFFFFFFFFF0A C |
*PLAYER_PREV_FRAME :                                       FFFFFFFFFFFFF766 C |
*PLAYER_PREV_FRAME_P2 :                                    FFFFFFFFFFFFF7DE C |
*PLAYER_PREV_FRAME_P2_TAIL :                               FFFFFFFFFFFFF7DF C |
 PLAYSEGAPCMFLAG :             1CB4 C |  PLAY_MUSIC :                   504 C |
*PLAY_SFX :                     526 C | *PLAY_SFX_DONE :                566 C |
 POINTERTABLEOFFSET :            18 C | *POS_TABLE :       FFFFFFFFFFFFE500 C |
*POS_TABLE_INDEX : FFFFFFFFFFFFEE26 C |
*POS_TABLE_INDEX_P2 :                                      FFFFFFFFFFFFEE2A C |
 POS_TABLE_P2 :    FFFFFFFFFFFFE400 C | *PREV_ANIM :                     21 - |
*PRIMARY_ANGLE :   FFFFFFFFFFFFF768 C |
*PRIMARY_ANGLE_SAVE :                                      FFFFFFFFFFFFF769 C |
*PRIMARY_COLLISION_ADDR :                                  FFFFFFFFFFFFF7B4 C |
*PRIORITY :                       8 - |  PSGDELTA :                       C - |
 PSGINITVALUES :                268 C |  PSGINITVALUES_END :            26C C |
 PSG_INPUT :                 C00011 - |  PUSHING_BIT_DELTA :              2 - |
*PUSHING_MASK :                  60 - | *RAMENDLOC :                    1AC C |
*RAMSTARTLOC :                  1A8 C |  RAM_START :       FFFFFFFFFFFF0000 - |
*READ :                           C - |  READPOINTER :                   20 C |
*REF_CHECKSUM_STRING :     534D264B - |  REF_CHECKSUM_STRING.CHECK :      0 - |
*RELAXED :                        0 - | *RENDER_FLAGS :                   4 - |
*RESERVED_OBJECT_3 :                                       FFFFFFFFFFFFB094 C |
*RESPAWN_ADDR :                  48 - |
*RESPAWN_TABLE_KEEP :                                      FFFFFFFFFFFFFF97 C |
*RESTART_LEVEL_FLAG :                                      FFFFFFFFFFFFFE02 C |
*RESULTS_SCREEN_2P :                                       FFFFFFFFFFFFFF02 C |
*REVERSE_GRAVITY_FLAG :                                    FFFFFFFFFFFFF7C6 C |
 RINGSOUNDSADJACENT :             1 - | *RINGS_FRAME :     FFFFFFFFFFFFFEB3 C |
*RINGS_FRAME_TIMER :                                       FFFFFFFFFFFFFEB2 C |
*RINGS_MANAGER_ROUTINE :                                   FFFFFFFFFFFFF710 C |
*RING_BONUS_COUNTDOWN :                                    FFFFFFFFFFFFF7D4 C |
*RING_CONSUMPTION_COUNT :                                  FFFFFFFFFFFFEF80 C |
*RING_CONSUMPTION_LIST :                                   FFFFFFFFFFFFEF82 C |
*RING_CONSUMPTION_TABLE :                                  FFFFFFFFFFFFEF80 - |
*RING_COUNT :      FFFFFFFFFFFFFE20 C | *RING_COUNT_P2 :   FFFFFFFFFFFFFED0 C |
*RING_END_ADDR_ROM :                                       FFFFFFFFFFFFEE46 C |
*RING_SPILL_ANIM_ACCUM :                                   FFFFFFFFFFFFFEB8 C |
*RING_SPILL_ANIM_COUNTER :                                 FFFFFFFFFFFFFEB6 C |
*RING_SPILL_ANIM_FRAME :                                   FFFFFFFFFFFFFEB7 C |
*RING_START_ADDR_RAM :                                     FFFFFFFFFFFFEE4A C |
*RING_START_ADDR_ROM :                                     FFFFFFFFFFFFEE42 C |
*RING_STATUS_TABLE :                                       FFFFFFFFFFFFE700 C |
*RING_STATUS_TABLE_2 :                                     FFFFFFFFFFFF8600 - |
*RNG_SEED :        FFFFFFFFFFFFF636 C | *ROMENDLOC :                    1A4 C |
*ROMSTARTLOC :                  1A0 C | *ROS_ADDR :                      3C - |
*ROS_BIT :                       3B - | *ROUTINE :                        5 - |
*ROUTINE_SECONDARY :             3C - |  S3P21_FM1 :                  2840D C |
 S3P21_FM2 :                  2853D C |  S3P21_FM3 :                  283FF C |
 S3P21_FM4 :                  28FAC C |  S3P21_FM5 :                  29131 C |
*S3P21_HEADER :               2836D C |  S3P21_JUMP00 :               28FB7 C |
 S3P21_JUMP01 :               28937 C |  S3P21_JUMP02 :               28418 C |
 S3P21_JUMP03 :               29145 C |  S3P21_JUMP04 :               28544 C |
 S3P21_PSG1 :                 28927 C |  S3P21_PSG2 :                 28930 C |
 S3P21_PSG3 :                 29143 C |  S3P21_VOICES :               29160 C |
*SAVED2_APPARENT_ZONE_AND_ACT :                            FFFFFFFFFFFFFF9C C |
*SAVED2_ART_TILE : FFFFFFFFFFFFFE56 C |
*SAVED2_CAMERA_MAX_Y_POS :                                 FFFFFFFFFFFFFE62 C |
*SAVED2_CAMERA_X_POS :                                     FFFFFFFFFFFFFE5A C |
*SAVED2_CAMERA_Y_POS :                                     FFFFFFFFFFFFFE5C C |
*SAVED2_DYNAMIC_RESIZE_ROUTINE :                           FFFFFFFFFFFFFE64 C |
*SAVED2_EXTRA_LIFE_FLAGS :                                 FFFFFFFFFFFFFE61 C |
*SAVED2_LAST_STAR_POST_HIT :                               FFFFFFFFFFFFFE49 C |
*SAVED2_MEAN_WATER_LEVEL :                                 FFFFFFFFFFFFFE5E C |
*SAVED2_RING_COUNT :                                       FFFFFFFFFFFFFE50 C |
*SAVED2_SOLID_BITS :                                       FFFFFFFFFFFFFE58 C |
*SAVED2_STATUS_SECONDARY :                                 FFFFFFFFFFFFFF96 C |
*SAVED2_TIMER :    FFFFFFFFFFFFFE52 C |
*SAVED2_WATER_FULL_SCREEN_FLAG :                           FFFFFFFFFFFFFE60 C |
*SAVED2_X_POS :    FFFFFFFFFFFFFE4C C | *SAVED2_Y_POS :    FFFFFFFFFFFFFE4E C |
*SAVED2_ZONE_AND_ACT :                                     FFFFFFFFFFFFFE4A C |
*SAVED_APPARENT_ZONE_AND_ACT :                             FFFFFFFFFFFFFF9A C |
*SAVED_ART_TILE :  FFFFFFFFFFFFFE38 C |
*SAVED_CAMERA_MAX_Y_POS :                                  FFFFFFFFFFFFFE44 C |
*SAVED_CAMERA_X_POS :                                      FFFFFFFFFFFFFE3C C |
*SAVED_CAMERA_Y_POS :                                      FFFFFFFFFFFFFE3E C |
*SAVED_DATA :      FFFFFFFFFFFFE6AC - |
*SAVED_DYNAMIC_RESIZE_ROUTINE :                            FFFFFFFFFFFFFE46 C |
*SAVED_EXTRA_LIFE_FLAGS :                                  FFFFFFFFFFFFFE43 C |
*SAVED_LAST_STAR_POST_HIT :                                FFFFFFFFFFFFFE2B C |
*SAVED_MEAN_WATER_LEVEL :                                  FFFFFFFFFFFFFE40 C |
*SAVED_RING_COUNT :                                        FFFFFFFFFFFFFE32 C |
*SAVED_SOLID_BITS :                                        FFFFFFFFFFFFFE3A C |
*SAVED_STATUS_SECONDARY :                                  FFFFFFFFFFFFFE47 C |
*SAVED_TIMER :     FFFFFFFFFFFFFE34 C |
*SAVED_WATER_FULL_SCREEN_FLAG :                            FFFFFFFFFFFFFE42 C |
*SAVED_X_POS :     FFFFFFFFFFFFFE2E C | *SAVED_Y_POS :     FFFFFFFFFFFFFE30 C |
*SAVED_ZONE_AND_ACT :                                      FFFFFFFFFFFFFE2C C |
*SAVE_POINTER :    FFFFFFFFFFFFE660 - | *SCORE :           FFFFFFFFFFFFFE26 C |
*SCORE_P2 :        FFFFFFFFFFFFFED6 C |
*SCREEN_SHAKE_FLAG :                                       FFFFFFFFFFFFEECC C |
*SCREEN_SHAKE_LAST_OFFSET :                                FFFFFFFFFFFFEED0 C |
*SCREEN_SHAKE_OFFSET :                                     FFFFFFFFFFFFEECE C |
*SCREEN_X_WRAP_VALUE :                                     FFFFFFFFFFFFEEA8 C |
*SCREEN_Y_WRAP_VALUE :                                     FFFFFFFFFFFFEEAA C |
*SCROLL_DELAY_COUNTER :          39 - |
*SCROLL_FORCED_X_POS :                                     FFFFFFFFFFFFF678 C |
*SCROLL_FORCED_Y_POS :                                     FFFFFFFFFFFFF67C C |
*SCROLL_FORCE_POSITIONS :                                  FFFFFFFFFFFFF676 C |
*SCROLL_LOCK :     FFFFFFFFFFFFEE0A C | *SCROLL_LOCK_P2 :  FFFFFFFFFFFFEE0B C |
*SECONDARY_ANGLE : FFFFFFFFFFFFF76A C |
*SECONDARY_ANGLE_SAVE :                                    FFFFFFFFFFFFF76B C |
*SECONDARY_COLLISION_ADDR :                                FFFFFFFFFFFFF7B8 C |
 SECURITY_ADDR :             A14000 - | *SERIAL_NUMBER :                180 C |
 SETREGISTERS1167 :             37E C |  SETUPVALUES :                  200 C |
 SFXPOINTERS :                28000 C | *SFX_ACTIONBLOCK :               6B C |
*SFX_AIRDING :                   A9 C | *SFX_ALARM :                     86 C |
*SFX_ALLSPHERES :                66 C | *SFX_BALLOON :                   77 C |
*SFX_BALLOONPLATFORM :           75 C | *SFX_BIGRING :                   B3 C |
*SFX_BIGRUMBLE :                 CC C | *SFX_BLAST :                     48 C |
*SFX_BLOCKCONVEYOR :             55 C | *SFX_BLUESPHERE :                65 C |
*SFX_BOSSACTIVATE :              50 C | *SFX_BOSSHAND :                  95 C |
*SFX_BOSSHIT :                   6E C | *SFX_BOSSHITFLOOR :              61 C |
*SFX_BOSSLASER :                 54 C | *SFX_BOSSMAGMA :                 7A C |
*SFX_BOSSPANIC :                 C4 C | *SFX_BOSSPROJECTILE :            98 C |
*SFX_BOSSRECOVERY :              93 C | *SFX_BOSSROTATE :                BF C |
*SFX_BOSSZOOM :                  60 C | *SFX_BOUNCY :                    8A C |
*SFX_BREAK :                     3D C | *SFX_BRIDGECOLLAPSE :            83 C |
*SFX_BUBBLE :                    38 C | *SFX_BUBBLEATTACK :              44 C |
*SFX_BUBBLESHIELD :              3F C | *SFX_BUMPER :                    AA C |
*SFX_CANNONTURN :                C7 C | *SFX_CHAINTENSION :              7C C |
*SFX_CHAINTICK :                 94 C | *SFX_CHARGING :                  53 C |
*SFX_CHOPSTUCK :                 8C C | *SFX_CHOPTREE :                  8B C |
*SFX_CLANK :                     9E C | *SFX_COLLAPSE :                  59 C |
*SFX_CONTINUE :                  AC C | *SFX_CONVEYORPLATFORM :          D7 C |
*SFX_CRASH :                     5F C | *SFX_DASH :                      B6 C |
*SFX_DEATH :                     35 C | *SFX_DEATHEGGRISELOUD :          CD C |
*SFX_DEATHEGGRISEQUIET :         D3 C | *SFX_DIAMONDS :                  B5 C |
*SFX_DOORCLOSE :                 91 C | *SFX_DOORMOVE :                  90 C |
*SFX_DOOROPEN :                  8F C | *SFX_DROWN :                     3B C |
*SFX_ELECTRICATTACK :            45 C | *SFX_ENEMYBREATH :               97 C |
*SFX_ENERGYZAP :                 A8 C | *SFX_ENTERSS :                   AF C |
*SFX_ERROR :                     B2 C | *SFX_EXPLODE :                   B4 C |
*SFX_FANBIG :                    C0 C | *SFX_FANLATCH :                  58 C |
*SFX_FANSMALL :                  C1 C | *SFX_FIREATTACK :                43 C |
*SFX_FIRESHIELD :                3E C | *SFX_FLAMETHROWERLOUD :          C2 C |
*SFX_FLAMETHROWERQUIET :         4F C | *SFX_FLIPBRIDGE :                56 C |
*SFX_FLIPPER :                   AE C | *SFX_FLOORLAUNCHER :             A2 C |
*SFX_FLOORTHUMP :                5D C | *SFX_FLYING :                    BA C |
*SFX_FLYTIRED :                  BB C | *SFX_FROSTPUFF :                 7F C |
*SFX_GEYSER :                    57 C | *SFX_GHOSTAPPEAR :               92 C |
*SFX_GLIDELAND :                 4C C | *SFX_GOAL :                      6A C |
*SFX_GRAB :                      4A C | *SFX_GRAVITYLIFT :               A3 C |
*SFX_GRAVITYMACHINE :            78 C | *SFX_GRAVITYTUNNEL :             C3 C |
*SFX_GROUNDSLIDE :               7E C | *SFX_GUMBALLTAB :                D2 C |
*SFX_HOVERPAD :                  72 C | *SFX_ICESPIKES :                 80 C |
*SFX_INSTAATTACK :               42 C | *SFX_JUMP :                      62 C |
*SFX_LARGESHIP :                 BD C | *SFX_LASER :                     5E C |
*SFX_LAUNCHGO :                  AD C | *SFX_LAUNCHGRAB :                A6 C |
*SFX_LAUNCHREADY :               A7 C | *SFX_LAVABALL :                  70 C |
*SFX_LAVAFALL :                  D5 C | *SFX_LEAFBLOWER :                DA C |
*SFX_LEVELPROJECTILE :           67 C | *SFX_LIGHTNING :                 79 C |
*SFX_LIGHTNINGSHIELD :           41 C | *SFX_LIGHTTUNNEL :               CA C |
*SFX_MAGNETICSPIKE :             D9 C | *SFX_MECHALAND :                 96 C |
*SFX_MECHASPARK :                5C C | *SFX_MECHATRANSFORM :            A4 C |
*SFX_MISSILEEXPLODE :            4E C | *SFX_MISSILESHOOT :              A0 C |
*SFX_MISSILETHROW :              51 C | *SFX_MUSHROOMBOUNCE :            87 C |
*SFX_PERFECT :                   68 C | *SFX_PROJECTILE :                4D C |
*SFX_PULLEYGRAB :                64 C | *SFX_PULLEYMOVE :                88 C |
*SFX_PUSHBLOCK :                 69 C | *SFX_REGISTER :                  B0 C |
 SFX_RINGLEFT :                  34 C | *SFX_RINGLOSS :                  B9 C |
 SFX_RINGRIGHT :                 33 C | *SFX_RISING :                    D0 C |
*SFX_ROBOTNIKSIREN :             BE C | *SFX_ROLL :                      3C C |
*SFX_RUMBLE :                    CB C | *SFX_RUMBLE2 :                   6F C |
*SFX_SANDSPLASH :                82 C | *SFX_SANDWALLRISE :              47 C |
*SFX_SHIELD :                    3A C | *SFX_SHIELD2 :                   71 C |
*SFX_SIGNPOST :                  B8 C | *SFX_SKID :                      36 C |
*SFX_SLIDESKIDLOUD :             BC C | *SFX_SLIDESKIDQUIET :            C8 C |
*SFX_SLOTMACHINE :               B7 C | *SFX_SMALLBUMPERS :              7B C |
*SFX_SPIKEBALLS :                C9 C | *SFX_SPIKEHIT :                  37 C |
*SFX_SPIKEMOVE :                 52 C |  SFX_SPINDASH :                  AB C |
*SFX_SPLASH :                    39 C | *SFX_SPLASH2 :                   6C C |
*SFX_SPRING :                    B1 C | *SFX_SPRINGLATCH :               9A C |
*SFX_STARPOST :                  63 C | *SFX_SUPEREMERALD :              9C C |
*SFX_SUPERTRANSFORM :            9F C | *SFX_SWITCH :                    5B C |
*SFX_TARGETING :                 9D C | *SFX_THUMP :                     49 C |
*SFX_THUMPBOSS :                 9B C | *SFX_TRANSPORTER :               73 C |
*SFX_TRAPDOOR :                  76 C | *SFX_TUBELAUNCHER :              81 C |
*SFX_TUNNELBOOSTER :             74 C | *SFX_TURBINEHUM :                D4 C |
*SFX_UNKNOWNCHARGE :             5A C | *SFX_UNKNOWNFLUTTER :            8D C |
*SFX_UNKNOWNFLUTTER2 :           D1 C | *SFX_UNKNOWNOMINOUS :            A1 C |
*SFX_UNKNOWNPLINK :              99 C | *SFX_UNKNOWNPOWERDOWN :          85 C |
*SFX_UNKNOWNPOWERUP :            84 C | *SFX_UNKNOWNPUMP :               7D C |
*SFX_UNKNOWNREVVING :            8E C | *SFX_UNKNOWNRISE :               A5 C |
*SFX_UNKNOWNSAW :                D8 C | *SFX_UNKNOWNSHIELD :             40 C |
*SFX_UNKNOWNSHIFT :              6D C | *SFX_UNKNOWNSPIN :               C5 C |
*SFX_UNKNOWNZAP :                D6 C | *SFX_WATERFALLSPLASH :           4B C |
*SFX_WATERSKID :                 DB C | *SFX_WAVEHOVER :                 C6 C |
*SFX_WEATHERMACHINE :            89 C | *SFX_WHISTLE :                   46 C |
*SFX_WINDLOUD :                  CF C | *SFX_WINDQUIET :                 CE C |
 SFX__END :                      DF - |  SFX__END.DIFF :                  0 - |
 SFX__FIRST :                    33 - |  SFX__FIRSTCONTINUOUS :          BC - |
*SHIELD :          FFFFFFFFFFFFCCE8 C | *SHIELD_ART :                    38 - |
*SHIELD_P2 :       FFFFFFFFFFFFCD32 C | *SHIELD_PLC :                    3C - |
*SHIELD_PREV_FRAME :             34 - | *SHIELD_REACTION :               2B - |
*SIGNPOST_ADDR :   FFFFFFFFFFFFFAA6 C |  SIZE_OF_SND_DRIVER_GUESS :    1200 - |
*SK_ALONE_FLAG :   FFFFFFFFFFFFFFAE C |
*SK_SPECIAL_STAGE_FLAG :                                   FFFFFFFFFFFFFFBB C |
*SLOTTED_OBJECT_BITS :                                     FFFFFFFFFFFFFA9A C |
*SLOT_MACHINE_GOAL_FRAME :                                 FFFFFFFFFFFFFEB1 C |
*SLOT_MACHINE_GOAL_FRAME_TIMER :                           FFFFFFFFFFFFFEB0 C |
*SLOT_MACHINE_PEPPERMINT_FRAME :                           FFFFFFFFFFFFFEB5 C |
*SLOT_MACHINE_PEPPERMINT_FRAME_TIMER :                     FFFFFFFFFFFFFEB4 C |
*SLOW_MOTION_FLAG :                                        FFFFFFFFFFFFFFE1 - |
 SMPS2ASMVER :                    1 - | *SMPSNOATTACK :                  E7 - |
*SMPSPITCH00 :                    0 - | *SMPSPITCH01HI :                  C - |
*SMPSPITCH01LO :                 F4 - | *SMPSPITCH02HI :                 18 - |
*SMPSPITCH02LO :                 E8 - | *SMPSPITCH03HI :                 24 - |
*SMPSPITCH03LO :                 DC - | *SMPSPITCH04HI :                 30 - |
*SMPSPITCH04LO :                 D0 - | *SMPSPITCH05HI :                 3C - |
*SMPSPITCH05LO :                 C4 - | *SMPSPITCH06HI :                 48 - |
*SMPSPITCH06LO :                 B8 - | *SMPSPITCH07HI :                 54 - |
*SMPSPITCH07LO :                 AC - | *SMPSPITCH08HI :                 60 - |
*SMPSPITCH08LO :                 A0 - | *SMPSPITCH09HI :                 6C - |
*SMPSPITCH09LO :                 94 - | *SMPSPITCH10HI :                 78 - |
*SMPSPITCH10LO :                 88 - |  SNDBANK :                    28000 C |
*SNDDRVINIT :                   3F2 C |  SNDID_RING :                    33 - |
 SNDID_RINGLEFT :                34 - |  SNDID_SPINDASHREV :             AB - |
 SNDID__END :                    DF - |  SNDID__FIRST :                  33 - |
 SNDID__FIRSTCONTINUOUS :        BC - |  SND_SSZ_DAC :                2839D C |
 SND_SSZ_LOOP00 :             283AE C |  SNNOISE :                       E0 - |
 SNPSG1 :                        80 - |  SNPSG2 :                        A0 - |
 SNPSG3 :                        C0 - | *SNPSGTONE :                      0 - |
 SNPSGVOL :                      10 - |  SONGSTART :                  2836D - |
*SONIC3_COMPLETE :                1 - |  SONICDRIVERVER :                 5 - |
 SOUNDBANKDECL :              28000 - |  SOUNDBANKDECL.DIFF :             0 - |
 SOUNDBANKNAME :    Mus_Bank1_Start - |  SOUNDBANKPADDING :               0 - |
 SOUNDBANKSTART :             28000 - | *SOUND_END_PTR :              28000 C |
*SOUND_TEST_SOUND :                                        FFFFFFFFFFFFFF84 C |
 SOURCEDRIVER :                   3 - |  SOURCESMPS2ASM :                 0 - |
*SPECIAL_BONUS_ENTRY_FLAG :                                FFFFFFFFFFFFFE48 C |
*SPECIAL_EVENTS_ROUTINE :                                  FFFFFFFFFFFFEEB2 C |
*SPECIAL_STAGE_ADVANCING :                                 FFFFFFFFFFFFE431 C |
*SPECIAL_STAGE_ANGLE :                                     FFFFFFFFFFFFE426 C |
*SPECIAL_STAGE_ANIM_FRAME :                                FFFFFFFFFFFFE420 C |
*SPECIAL_STAGE_BUMPER_LOCK :                               FFFFFFFFFFFFE42B C |
*SPECIAL_STAGE_CLEAR_ROUTINE :                             FFFFFFFFFFFFE44C C |
*SPECIAL_STAGE_CLEAR_TIMER :                               FFFFFFFFFFFFE44A C |
*SPECIAL_STAGE_EMERALD_TIMER :                             FFFFFFFFFFFFE44D C |
*SPECIAL_STAGE_EXTRA_LIFE_FLAGS :                          FFFFFFFFFFFFE43D C |
*SPECIAL_STAGE_FADE_TIMER :                                FFFFFFFFFFFFE433 C |
*SPECIAL_STAGE_INTERACT :                                  FFFFFFFFFFFFE44E C |
*SPECIAL_STAGE_JUMPING :                                   FFFFFFFFFFFFE432 C |
*SPECIAL_STAGE_JUMPING_P2 :                                FFFFFFFFFFFFE440 C |
*SPECIAL_STAGE_PALETTE_ADDR :                              FFFFFFFFFFFFE446 C |
*SPECIAL_STAGE_PALETTE_FRAME :                             FFFFFFFFFFFFE42F C |
*SPECIAL_STAGE_PREV_ANIM_FRAME :                           FFFFFFFFFFFFE42C C |
*SPECIAL_STAGE_PREV_X_POS :                                FFFFFFFFFFFFE434 C |
*SPECIAL_STAGE_PREV_Y_POS :                                FFFFFFFFFFFFE436 C |
*SPECIAL_STAGE_RATE :                                      FFFFFFFFFFFFE444 C |
*SPECIAL_STAGE_RATE_TIMER :                                FFFFFFFFFFFFE43E C |
*SPECIAL_STAGE_RINGS_LEFT :                                FFFFFFFFFFFFE442 C |
*SPECIAL_STAGE_RING_COUNT :                                FFFFFFFFFFFFE43A C |
*SPECIAL_STAGE_SPHERES_LEFT :                              FFFFFFFFFFFFE438 C |
*SPECIAL_STAGE_SPHERE_HUD_FLAG :                           FFFFFFFFFFFFE43C C |
*SPECIAL_STAGE_STARTED :                                   FFFFFFFFFFFFE450 C |
*SPECIAL_STAGE_TURNING :                                   FFFFFFFFFFFFE42A C |
*SPECIAL_STAGE_TURN_LOCK :                                 FFFFFFFFFFFFE430 C |
*SPECIAL_STAGE_VELOCITY :                                  FFFFFFFFFFFFE428 C |
*SPECIAL_STAGE_X_POS :                                     FFFFFFFFFFFFE422 C |
*SPECIAL_STAGE_Y_POS :                                     FFFFFFFFFFFFE424 C |
*SPECIAL_STAGE_ZONE_AND_ACT :                              FFFFFFFFFFFFEF6A C |
*SPECIAL_V_INT_ROUTINE :                                   FFFFFFFFFFFFEEA6 C |
*SPEED_SHOES_TIMER :             36 - | *SPIN_DASH_COUNTER :             3E - |
*SPIN_DASH_FLAG :                3D - | *SPRITEMASK_FLAG : FFFFFFFFFFFFEF3A C |
*SPRITES_DRAWN :   FFFFFFFFFFFFF62C C |
*SPRITE_TABLE_BUFFER :                                     FFFFFFFFFFFFF800 C |
*SPRITE_TABLE_BUFFER_2 :     FF7880 - | *SPRITE_TABLE_BUFFER_P2 :    FF7B00 - |
*SPRITE_TABLE_BUFFER_P2_2 :  FF7D80 - |
*SPRITE_TABLE_INPUT :                                      FFFFFFFFFFFFAC00 C |
*SRAM_ACCESS_FLAG :          A130F1 - |
*SRAM_MASK_INTERRUPTS_FLAG :                               FFFFFFFFFFFFEF56 C |
*SSTAGE_COLLISION_RESPONSE_LIST :                          FFFFFFFFFFFFA400 - |
*SSTAGE_EXTRA_SPRITES :                                    FFFFFFFFFFFFE480 - |
*SSTAGE_LAYOUT_BUFFER :                                    FFFFFFFFFFFFF000 - |
*SSTAGE_RESULTS_OBJECT_ADDR :                              FFFFFFFFFFFFEEE0 - |
*SSTAGE_SCALAR_INDEX_0 :                                   FFFFFFFFFFFFE400 C |
*SSTAGE_SCALAR_INDEX_1 :                                   FFFFFFFFFFFFE402 C |
*SSTAGE_SCALAR_INDEX_2 :                                   FFFFFFFFFFFFE404 C |
*SSTAGE_SCALAR_RESULT_0 :                                  FFFFFFFFFFFFE406 C |
*SSTAGE_SCALAR_RESULT_1 :                                  FFFFFFFFFFFFE40A C |
*SSTAGE_SCALAR_RESULT_2 :                                  FFFFFFFFFFFFE40E C |
*SSTAGE_SCALAR_RESULT_3 :                                  FFFFFFFFFFFFE41C C |
*SSTAGE_UNKA500 :  FFFFFFFFFFFFA500 - | *SSTAGE_UNKA600 :  FFFFFFFFFFFFA600 - |
*SSZ_MTZ_BOSS_LASER_TIMER :                                FFFFFFFFFFFFFAFC C |
*SSZ_MTZ_BOSS_X_POS :                                      FFFFFFFFFFFFFAF0 C |
*SSZ_MTZ_BOSS_X_VEL :                                      FFFFFFFFFFFFFAF8 C |
*SSZ_MTZ_BOSS_Y_POS :                                      FFFFFFFFFFFFFAF4 C |
*SSZ_MTZ_BOSS_Y_VEL :                                      FFFFFFFFFFFFFAFA C |
*STACK_CONTENTS :  FFFFFFFFFFFFFD00 C | *STANDING_MASK :                 18 - |
 STARTOFROM :                     0 C | *STATUS :                        2A - |
*STATUS_BUBLSHIELD :              6 - | *STATUS_FACING :                  0 - |
*STATUS_FIRESHIELD :              4 - | *STATUS_INAIR :                   1 - |
*STATUS_INVINCIBLE :              1 - | *STATUS_LTNGSHIELD :              5 - |
*STATUS_ONOBJ :                   3 - | *STATUS_PUSH :                    5 - |
*STATUS_ROLL :                    2 - | *STATUS_ROLLJUMP :                4 - |
*STATUS_SECONDARY :              2B - | *STATUS_SHIELD :                  0 - |
*STATUS_SPEEDSHOES :              2 - | *STATUS_TERTIARY :               37 - |
*STATUS_UNDERWATER :              6 - | *STAT_TABLE :      FFFFFFFFFFFFE400 - |
*STICK_TO_CONVEX :               3C - |  STONE_01 :                       1 - |
 STONE_02 :                       2 - | *STONE_03 :                       3 - |
 STONE_04 :                       4 - | *STONE_05 :                       5 - |
*STONE_06 :                       6 - | *STONE_07 :                       7 - |
*STONE_08 :                       8 - | *STONE_09 :                       9 - |
*STONE_0A :                       A - | *STONE_0B :                       B - |
 STONE_0C :                       C - | *STONE_0D :                       D - |
*STONE_0E :                       E - | *STONE_0F :                       F - |
*STONE_10 :                      10 - | *STONE_11 :                      11 - |
*STONE_12 :                      12 - | *STONE_13 :                      13 - |
*STONE_14 :                      14 - | *STONE_15 :                      15 - |
*STONE_16 :                      16 - | *STONE_17 :                      17 - |
*STONE_18 :                      18 - | *STONE_19 :                      19 - |
*STONE_1A :                      1A - | *STONE_1B :                      1B - |
*STONE_1C :                      1C - | *STONE_1D :                      1D - |
*STONE_1E :                      1E - | *STONE_1F :                      1F - |
*STONE_20 :                      20 - | *STONE_21 :                      21 - |
*STONE_22 :                      22 - | *STONE_23 :                      23 - |
*STONE_24 :                      24 - | *STONE_25 :                      25 - |
*STONE_26 :                      26 - | *STONE_27 :                      27 - |
 STRIP_PADDING :                  1 - | *SUB2_MAPFRAME :                 1D - |
*SUB2_X_POS :                    18 - | *SUB2_Y_POS :                    1A - |
*SUB3_MAPFRAME :                 23 - | *SUB3_X_POS :                    1E - |
*SUB3_Y_POS :                    20 - | *SUB4_MAPFRAME :                 29 - |
*SUB4_X_POS :                    24 - | *SUB4_Y_POS :                    26 - |
*SUB5_MAPFRAME :                 2F - | *SUB5_X_POS :                    2A - |
*SUB5_Y_POS :                    2C - | *SUB6_MAPFRAME :                 35 - |
*SUB6_X_POS :                    30 - | *SUB6_Y_POS :                    32 - |
*SUB7_MAPFRAME :                 3B - | *SUB7_X_POS :                    36 - |
*SUB7_Y_POS :                    38 - | *SUB8_MAPFRAME :                 41 - |
*SUB8_X_POS :                    3C - | *SUB8_Y_POS :                    3E - |
*SUB9_MAPFRAME :                 47 - | *SUB9_X_POS :                    42 - |
*SUB9_Y_POS :                    44 - | *SUBTYPE :                       2C - |
*SUPER_EMERALD_COUNT :                                     FFFFFFFFFFFFFFB1 C |
*SUPER_FRAME_COUNT :                                       FFFFFFFFFFFFF670 C |
*SUPER_PALETTE_STATUS :                                    FFFFFFFFFFFFF65F C |
*SUPER_SONIC_KNUX_FLAG :                                   FFFFFFFFFFFFFE19 C |
*SUPER_STARS :     FFFFFFFFFFFFCBC0 - |
*SUPER_TAILS_FLAG :                                        FFFFFFFFFFFFF667 C |
*SWITCH_SPRITE_TABLE :                                     FFFFFFFFFFFFEF3E C |
 SYSTEM_STACK :    FFFFFFFFFFFFFE00 - |
*TAILS_CPU_AUTO_FLY_TIMER :                                FFFFFFFFFFFFF70E C |
*TAILS_CPU_AUTO_JUMP_FLAG :                                FFFFFFFFFFFFF70F C |
*TAILS_CPU_FLIGHT_TIMER :                                  FFFFFFFFFFFFF704 C |
*TAILS_CPU_IDLE_TIMER :                                    FFFFFFFFFFFFF702 C |
*TAILS_CPU_INTERACT :                                      FFFFFFFFFFFFF700 C |
*TAILS_CPU_ROUTINE :                                       FFFFFFFFFFFFF708 C |
*TAILS_CPU_STAR_POST_FLAG :                                FFFFFFFFFFFFF746 C |
*TAILS_CPU_TARGET_X :                                      FFFFFFFFFFFFF70A C |
*TAILS_CPU_TARGET_Y :                                      FFFFFFFFFFFFF70C C |
*TAILS_TAILS :     FFFFFFFFFFFFCC0A C | *TAILS_TAILS_2P :  FFFFFFFFFFFFCBC0 C |
 TARGET_PALETTE :  FFFFFFFFFFFFFC80 C |
*TARGET_PALETTE_LINE_2 :                                   FFFFFFFFFFFFFCA0 - |
*TARGET_PALETTE_LINE_3 :                                   FFFFFFFFFFFFFCC0 - |
*TARGET_PALETTE_LINE_4 :                                   FFFFFFFFFFFFFCE0 - |
*TARGET_WATER_LEVEL :                                      FFFFFFFFFFFFF64A C |
*TARGET_WATER_PALETTE :                                    FFFFFFFFFFFFF000 C |
*TELEPORT_ACTIVE_FLAG :                                    FFFFFFFFFFFFF623 C |
*TELEPORT_ACTIVE_TIMER :                                   FFFFFFFFFFFFF622 C |
 TEMPOWAIT :                    A78 C |  TEMPOWAIT.LOOP :               A89 C |
*TILE_MASK :                    7FF - | *TILT :                          3B - |
*TIME :                    10:54:12 - |  TIMER :           FFFFFFFFFFFFFE22 C |
*TIMER_FRAME :     FFFFFFFFFFFFFE25 - | *TIMER_FRAME_P2 :  FFFFFFFFFFFFFED5 - |
*TIMER_MINUTE :    FFFFFFFFFFFFFE23 - | *TIMER_MINUTE_P2 : FFFFFFFFFFFFFED3 - |
 TIMER_P2 :        FFFFFFFFFFFFFED2 C | *TIMER_SECOND :    FFFFFFFFFFFFFE24 - |
*TIMER_SECOND_P2 : FFFFFFFFFFFFFED4 - |
*TIME_BONUS_COUNTDOWN :                                    FFFFFFFFFFFFF7D2 C |
*TIME_OVER_FLAG :  FFFFFFFFFFFFFE1A C |
*TITLE_ANIM_BUFFER :                                       FFFFFFFFFFFFFFBC C |
*TITLE_ANIM_DELAY :                                        FFFFFFFFFFFFFFBD C |
*TITLE_ANIM_FRAME :                                        FFFFFFFFFFFFFFBE C |
*TITLE_SCREEN_OPTION :                                     FFFFFFFFFFFFFF86 C |
*TOP_SOLID_BIT :                 46 - |
*TOTAL_BONUS_COUNTUP :                                     FFFFFFFFFFFFFF8E C |
*TOTAL_RING_COUNT :                                        FFFFFFFFFFFFFEC8 C |
*TOTAL_RING_COUNT_P2 :                                     FFFFFFFFFFFFFECA C |
*TRACENUM :                       0 - | *TRUE :                           1 - |
*UNKNOWN_HEADER :               1C8 C |
*UPDATE_HUD_LIFE_COUNT :                                   FFFFFFFFFFFFFE1C C |
*UPDATE_HUD_RING_COUNT :                                   FFFFFFFFFFFFFE1D C |
*UPDATE_HUD_SCORE :                                        FFFFFFFFFFFFFE1F C |
*UPDATE_HUD_TIMER :                                        FFFFFFFFFFFFFE1E C |
*UPDATE_HUD_TIMER_P2 :                                     FFFFFFFFFFFFFEC7 C |
*USE_NORMAL_SPRITE_TABLE :                                 FFFFFFFFFFFFEF3C C |
 USE_S2_SAMPLES :                 1 - |  USE_S3D_SAMPLES :                1 - |
 USE_S3_SAMPLES :                 1 - |  USE_SK_SAMPLES :                 1 - |
 VCALGORITHM :                    0 - |  VCAM1 :                          0 - |
 VCAM2 :                          0 - |  VCAM3 :                          0 - |
 VCAM4 :                          0 - |  VCAR1 :                         1F - |
 VCAR2 :                         1D - |  VCAR3 :                         1F - |
 VCAR4 :                         1F - |  VCCF1 :                          1 - |
 VCCF2 :                          0 - |  VCCF3 :                          0 - |
 VCCF4 :                          1 - |  VCD1R1 :                         5 - |
 VCD1R1UNK :                      0 - |  VCD1R2 :                         6 - |
 VCD1R2UNK :                      0 - |  VCD1R3 :                        13 - |
 VCD1R3UNK :                      0 - |  VCD1R4 :                        13 - |
 VCD1R4UNK :                      0 - |  VCD2R1 :                         5 - |
 VCD2R2 :                         2 - |  VCD2R3 :                         3 - |
 VCD2R4 :                         3 - |  VCDL1 :                          3 - |
 VCDL2 :                          2 - |  VCDL3 :                          4 - |
 VCDL4 :                          4 - |  VCDT1 :                          0 - |
 VCDT2 :                          3 - |  VCDT3 :                          0 - |
 VCDT4 :                          7 - |  VCFEEDBACK :                     5 - |
 VCRR1 :                          F - |  VCRR2 :                          F - |
 VCRR3 :                          F - |  VCRR4 :                          F - |
 VCRS1 :                          0 - |  VCRS2 :                          0 - |
 VCRS3 :                          0 - |  VCRS4 :                          0 - |
 VCTL1 :                         80 - |  VCTL2 :                         1E - |
 VCTL3 :                         14 - |  VCTL4 :                          E - |
 VCTLMASK1 :                     80 - |  VCTLMASK1.DIFF :                 0 - |
 VCTLMASK2 :                      0 - |  VCTLMASK3 :                      0 - |
 VCTLMASK4 :                      0 - |  VCUNUSEDBITS :                   0 - |
 VDPINITVALUES :                21A C |  VDPINITVALUES_END :            232 C |
 VDP_CONTROL_PORT :          C00004 - |  VDP_DATA_PORT :             C00000 - |
 VDP_REGISTER_VALUES :          4DE C |
 VDP_REG_1_COMMAND :                                       FFFFFFFFFFFFF60E C |
*VECTORS :                        0 C | *VERSION :                     142F - |
 VINT :                         496 C | *VOLENVJUMPTO :                  82 - |
 VOLENVRESET :                   80 - |  VOLENVRESTTRACK :               81 - |
 VOLENVSTOPTRACK :               83 - |  VOLENV_00 :                   1391 C |
 VOLENV_01 :                   1393 C |  VOLENV_02 :                   139A C |
 VOLENV_03 :                   13B3 C |  VOLENV_04 :                   13BF C |
 VOLENV_05 :                   13CA C |  VOLENV_06 :                   13D9 C |
 VOLENV_07 :                   13E2 C |  VOLENV_08 :                   13F3 C |
 VOLENV_09 :                   13FE C |  VOLENV_0A :                   1413 C |
 VOLENV_0B :                   141D C |  VOLENV_0C :                   1426 C |
 VOLENV_0D :                   1428 C |  VOLENV_0E :                   1393 C |
 VOLENV_0F :                   142A C |  VOLENV_10 :                   1449 C |
 VOLENV_11 :                   1450 C |  VOLENV_12 :                   145B C |
 VOLENV_13 :                   146A C |  VOLENV_14 :                   1470 C |
 VOLENV_15 :                   1481 C |  VOLENV_16 :                   148C C |
 VOLENV_17 :                   14A1 C |  VOLENV_18 :                   14AA C |
 VOLENV_19 :                   14B3 C |  VOLENV_1A :                   14BA C |
 VOLENV_1B :                   14C3 C |  VOLENV_1C :                   14D4 C |
 VOLENV_1D :                   1501 C |  VOLENV_1E :                   1504 C |
 VOLENV_1F :                   1508 C |  VOLENV_20 :                   1515 C |
 VOLENV_21 :                   1527 C |  VOLENV_22 :                   152E C |
 VOLENV_23 :                   1537 C |  VOLENV_24 :                   153B C |
 VOLENV_25 :                   154D C |  VOLENV_26 :                   15B0 C |
 VOLENV_27 :                   15BD C |  VOLENV_28 :                   15D4 C |
 VOLENV_29 :                   15DB C |  VOLENV_2A :                   15EC C |
 VOLENV_2B :                   1606 C |  VOLENV_2C :                   15F7 C |
 VOLENV_2D :                   1630 C |  VOLENV_2E :                   164C C |
 VOLENV_2F :                   1674 C |  VOLENV_30 :                   1685 C |
 VOLENV_31 :                   16C3 C |  VOLENV_32 :                   16DF C |
 VOLENV_33 :                   175F C |  VRAM :                          21 - |
*VRAM_ART :                      40 - | *VRAM_BUFFER :     FFFFFFFFFFFFF580 C |
*VRAM_PLANE_A_NAME_TABLE :     C000 - | *VRAM_PLANE_B_NAME_TABLE :     E000 - |
*VSCROLL_BUFFER :  FFFFFFFFFFFFEEEA - |  VSRAM :                         25 - |
 V_BLANK_CYCLES :  FFFFFFFFFFFFFFD6 - |  V_INT_ADDR :      FFFFFFFFFFFFFFF2 - |
 V_INT_EXECUTING : FFFFFFFFFFFFF62A - |  V_INT_JUMP :      FFFFFFFFFFFFFFF0 - |
 V_INT_ROUTINE :   FFFFFFFFFFFFF62A C | *V_INT_RUN_COUNT : FFFFFFFFFFFFFE0C C |
*V_SCROLL_AMOUNT : FFFFFFFFFFFFEE02 C |
*V_SCROLL_AMOUNT_P2 :                                      FFFFFFFFFFFFEE06 C |
 V_SCROLL_VALUE :  FFFFFFFFFFFFF616 - |
*V_SCROLL_VALUE_BG :                                       FFFFFFFFFFFFF618 C |
*V_SCROLL_VALUE_BG_P2 :                                    FFFFFFFFFFFFF620 C |
*V_SCROLL_VALUE_FG :                                       FFFFFFFFFFFFF616 C |
*V_SCROLL_VALUE_FG_P2 :                                    FFFFFFFFFFFFF61E C |
*V_SCROLL_VALUE_P2 :                                       FFFFFFFFFFFFF61E - |
*V_SCROLL_VALUE_P2_COPY :                                  FFFFFFFFFFFFEE3A C |
 WAIT_VSYNC :                   48A C |
*WATER_ENTERED_COUNTER :                                   FFFFFFFFFFFFF64D C |
*WATER_FLAG :      FFFFFFFFFFFFF730 C |
*WATER_FULL_SCREEN_FLAG :                                  FFFFFFFFFFFFF64E C |
*WATER_LEVEL :     FFFFFFFFFFFFF646 C |  WATER_PALETTE :   FFFFFFFFFFFFF080 C |
*WATER_PALETTE_DATA_ADDR :                                 FFFFFFFFFFFFF62E C |
*WATER_PALETTE_LINE_2 :                                    FFFFFFFFFFFFF0A0 - |
*WATER_PALETTE_LINE_3 :                                    FFFFFFFFFFFFF0C0 - |
*WATER_PALETTE_LINE_4 :                                    FFFFFFFFFFFFF0E0 - |
*WATER_SPEED :     FFFFFFFFFFFFF64C C | *WAVE_SPLASH :     FFFFFFFFFFFFCF82 C |
*WIDTH_PIXELS :                   7 - | *WINDTUNNEL_FLAG : FFFFFFFFFFFFF7C8 C |
*WINDTUNNEL_FLAG_P2 :                                      FFFFFFFFFFFFF7C9 C |
 WRITE :                          7 - | *X_PIXEL :                       10 - |
 X_POS :                         10 - | *X_RADIUS :                      1F - |
*X_VEL :                         18 - |  YMALGORITHMFEEDBACK :           B0 - |
 YMAMDECAYRATE1 :                60 - |  YMAMDECAYRATE2 :                64 - |
 YMAMDECAYRATE3 :                68 - |  YMAMDECAYRATE4 :                6C - |
 YMCH3FREQUENCYHIGH1 :           AD - |  YMCH3FREQUENCYHIGH2 :           AE - |
 YMCH3FREQUENCYHIGH3 :           AC - |  YMCH3FREQUENCYHIGH4 :           A6 - |
 YMCH3FREQUENCYLOW1 :            A9 - | *YMCH3FREQUENCYLOW2 :            AA - |
*YMCH3FREQUENCYLOW3 :            A8 - | *YMCH3FREQUENCYLOW4 :            A2 - |
 YMDAC :                          6 - |  YMDACENABLE :                   2B - |
 YMDACPCM :                      2A - |  YMDETUNEMULTIPLY1 :             30 - |
 YMDETUNEMULTIPLY2 :             34 - |  YMDETUNEMULTIPLY3 :             38 - |
 YMDETUNEMULTIPLY4 :             3C - |  YMFM1 :                          0 - |
 YMFM2 :                          1 - |  YMFM3 :                          2 - |
 YMFM4 :                          4 - |  YMFM5 :                          5 - |
 YMFM6 :                          6 - |  YMFREQUENCYHIGH :               A4 - |
 YMFREQUENCYLOW :                A0 - |  YMKEYONOFF :                    28 - |
 YMLFO :                         22 - |  YMPANNINGAMSENSFMSENS :         B4 - |
 YMPARTII :                       2 - |  YMRATESCALEATTACKRATE1 :        50 - |
 YMRATESCALEATTACKRATE2 :        54 - |  YMRATESCALEATTACKRATE3 :        58 - |
 YMRATESCALEATTACKRATE4 :        5C - |  YMSSGEG1 :                      90 - |
 YMSSGEG2 :                      94 - |  YMSSGEG3 :                      98 - |
 YMSSGEG4 :                      9C - |  YMSUSTAINLEVELRELEASERATE1 :    80 - |
 YMSUSTAINLEVELRELEASERATE2 :    84 - |  YMSUSTAINLEVELRELEASERATE3 :    88 - |
 YMSUSTAINLEVELRELEASERATE4 :    8C - |  YMSUSTAINRATE1 :                70 - |
 YMSUSTAINRATE2 :                74 - |  YMSUSTAINRATE3 :                78 - |
 YMSUSTAINRATE4 :                7C - | *YMTIMERAFREQUENCYHIGH :         24 - |
*YMTIMERAFREQUENCYLOW :          25 - | *YMTIMERBFREQUENCY :             26 - |
 YMTIMERCONTROLFM3MODE :         27 - |  YMTOTALLEVEL1 :                 40 - |
 YMTOTALLEVEL2 :                 44 - |  YMTOTALLEVEL3 :                 48 - |
 YMTOTALLEVEL4 :                 4C - | *Y_PIXEL :                       14 - |
 Y_POS :                         14 - | *Y_RADIUS :                      1E - |
*Y_VEL :                         1A - |  Z80STARTUPCODEBEGIN :          236 C |
 Z80STARTUPCODEEND :            25C C |  Z80_BUS_REQUEST :           A11100 - |
 Z80_MODENVPOINTERS :          12B0 C |  Z80_MUSICBANKS :              176F C |
 Z80_RAM :                   A00000 - |  Z80_RAM_END :               A02000 - |
 Z80_RESET :                 A11200 - | *Z80_SND_DRIVER_END :          1A52 C |
 Z80_SOUNDDRIVER :              852 C |  Z80_SOUNDDRIVERPOINTERS :     12A8 C |
*Z80_SOUNDDRIVERPOINTERSEND :  1770 C |  Z80_SOUNDDRIVERSTART :         852 C |
 Z80_STACK :                   1C7A C |  Z80_STACK_TOP :               1C1A C |
*Z80_UNIVOICEBANK :           28002 C |  Z80_VOLENVPOINTERS :          1329 C |
 ZALTFREQMODE :                 2AD C |  ZALTFREQMODE.GOT_ZERO :        2BC C |
 ZAPPLYFREQ :                   479 C |  ZAPPLYPITCHSLIDE :             2A6 C |
 ZBANKREGISTER :               6000 - |  ZBGMLOAD :                     640 C |
*ZBGMLOAD.CONTINUE_FM_INIT :    6B0 C | *ZBGMLOAD.CONTINUE_PSG_INIT :   717 C |
 ZBGMLOAD.FM_DAC_LOOP :         698 C | *ZBGMLOAD.GOT_DAC :             6D1 C |
 ZBGMLOAD.LOOP :                6DC C |  ZBGMLOAD.NOT_OVERRIDING_FM :   6AE C |
 ZBGMLOAD.NOT_OVERRIDING_PSG :  715 C |  ZBGMLOAD.PSG_LOOP :            6FF C |
 ZBGMLOAD.SET_DAC :             6E2 C |  ZCLEARNEXTSOUND :              72E C |
 ZCOMPUTENOTEDURATION :         2F7 C |  ZCOMPUTENOTEDURATION.LOOP :    2FD C |
 ZCONTINUOUSSFX :              1C97 C |  ZCONTINUOUSSFXFLAG :          1C98 C |
 ZCONTSFXLOOPCNT :             1C99 C |  ZCOORDFLAGSWITCHTABLE :        CA5 C |
 ZCURRENTTEMPO :               1CA2 C |  ZCURRENTTEMPOSAVE :           1CA8 C |
 ZCYCLEMUSICQUEUE :             558 C |  ZCYCLESOUNDQUEUE :             52A C |
 ZDACENABLE :                  1C7A C |  ZDACENABLESAVE :              1C7B C |
 ZDACINDEX :                   1CAC C |  ZDATASTART :                  1C1A - |
 ZDOCHANGEPAN :                 D11 C |  ZDOFMVOLENV :                  32E C |
 ZDOFMVOLENV.DO_CLAMP :         361 C |  ZDOFMVOLENV.LOOP :             34A C |
 ZDOFMVOLENV.SKIP_REG :         36A C |  ZDOFMVOLENV.SKIP_TRACK_VOL :   35B C |
 ZDOFMVOLENV.UPDATE_VOLUME :    362 C |  ZDOFMVOLUMECLAMP :             D6B C |
 ZDOFMVOLUMECLAMP.OVERFLOWED :  D71 C |  ZDOMODENVELOPE :               3E8 C |
 ZDOMODENVELOPE_CONT :          3F2 C |  ZDOMODULATION :                39A C |
 ZDOMODULATION.MOD_SUSTAIN :    3D3 C |  ZDOMUSICFADEIN :               959 C |
 ZDOMUSICFADEIN.FM_LOOP :       988 C |  ZDOMUSICFADEIN.PSG_LOOP :      9A6 C |
 ZDOMUSICFADEOUT :              8F9 C |
 ZDOMUSICFADEOUT.CHK_CHANGE_VOLUME :                                    942 C |
 ZDOMUSICFADEOUT.LOOP :         937 C |  ZDOMUSICFADEOUT.NEXT_TRACK :   951 C |
 ZDOMUSICFADEOUT.TIMER_EXPIRED :                                        90E C |
 ZDOPITCHSLIDE :                43E C |  ZDOPITCHSLIDE.NO_OVERFLOW :    478 C |
 ZDOPITCHSLIDE.NO_UNDERFLOW :   46B C |  ZDOPSGVOLUMECLAMP :            DFC C |
 ZDOPSGVOLUMECLAMP.CHECK_CLAMP :                                        E07 C |
 ZDOPSGVOLUMECLAMP.DO_CLAMP :   E0A C |  ZDOVOLENV :                   114D C |
 ZDOVOLENVADVANCE :            117B C |  ZDOVOLENVFULLREST :           116E C |
 ZDOVOLENVRESET :              1172 C |  ZDOVOLENVREST :               1175 C |
 ZDOVOLENVSETVALUE :           114A C |  ZEXTRACOORDFLAGSWITCHTABLE :   CE5 C |
 ZFADEDELAY :                  1C9B C |  ZFADEDELAYTIMEOUT :           1C9C C |
 ZFADEEFFECTS :                 57B C |  ZFADEINTIMEOUT :              1CA5 C |
 ZFADEINTOPREVIOUS :            AC2 C |  ZFADEINTOPREVIOUS.LOOP :       B2F C |
 ZFADEINTOPREVIOUS.NOT_FM6 :    B3C C |  ZFADEINTOPREVIOUS.NO_DAC :     B29 C |
 ZFADEINTOPREVIOUS.SKIP_TRACK : B63 C |  ZFADEOUTMUSIC :                8DC C |
 ZFADEOUTTIMEOUT :             1C9A C |  ZFADETOPREVFLAG :             1CA0 C |
 ZFILLSOUNDQUEUE :              A8E C |  ZFINISHTRACKUPDATE :           2D5 C |
 ZFM3FREQSHIFTTABLE :          1012 C |  ZFM3NORMALMODE :               A2B C |
 ZFMCLEARSSGEGOPS :             A35 C |  ZFMDACINITBYTES :              733 C |
*ZFMDACINITBYTESFM3 :           739 C |  ZFMFREQUENCIES :               C20 C |
 ZFMINSTRUMENTAMD1RTABLE :      4A2 C | *ZFMINSTRUMENTD1LRRTABLE :      4AA C |
*ZFMINSTRUMENTD2RTABLE :        4A6 C | *ZFMINSTRUMENTOPERATORTABLE :   49A C |
 ZFMINSTRUMENTOPERATORTABLE_END :                                       4AE C |
 ZFMINSTRUMENTREGTABLE :        499 C |  ZFMINSTRUMENTRSARTABLE :       49E C |
 ZFMINSTRUMENTSSGEGTABLE :      4B2 C |  ZFMINSTRUMENTSSGEGTABLE_END :  4B6 C |
 ZFMINSTRUMENTTLTABLE :         4AE C |  ZFMINSTRUMENTTLTABLE_END :     4B2 C |
 ZFMNOTEON :                    301 C |  ZFMOPERATORWRITELOOP :         AB6 C |
 ZFMOPERATORWRITELOOP.LOOP :    AB8 C |  ZFMSENDFREQ :                  1DE C |
 ZFMSENDFREQ.LOOP :             205 C |  ZFMSENDFREQ.NOT_FM3 :          1EA C |
 ZFMSENDFREQ.SPECIAL_MODE :     1F6 C |  ZFMSILENCECHANNEL :            AA2 C |
 ZGETFMINSTRUMENTOFFSET :       48F C |  ZGETFMINSTRUMENTOFFSET.LOOP :  495 C |
 ZGETFMINSTRUMENTPOINTER :      480 C |  ZGETFMPARAMS :                 E19 C |
 ZGETNEXTNOTE :                 237 C |  ZGETNEXTNOTE_CONT :            245 C |
 ZGETNEXTNOTE_CONT.GOT_DISPLACEMENT :                                   284 C |
 ZGETNEXTNOTE_CONT.GOT_NOTE :   266 C |  ZGETNEXTNOTE_CONT.LOOP :       27C C |
 ZGETNOTEDURATION :             293 C |  ZGETRAWDURATION :              2CD C |
 ZGETSFXCHANNELINDEX :          806 C |  ZGETSFXCHANNELINDEX.IS_PSG :   80F C |
 ZGETSFXCHANNELPOINTERS :       815 C |  ZGETSPECIALFM3DATAPOINTER :    22B C |
 ZGOTNOTEDURATION :             2CE C |  ZGOTNOTEFREQ :                 28D C |
 ZHALTDACPSG :                  8E9 C |  ZHALTFLAG :                   1C9E C |
 ZHANDLECOORDFLAG :             C98 C |  ZHANDLEDACCOORDFLAG :          C8B C |
 ZHANDLEFMORPSGCOORDFLAG :      C95 C |  ZID_MODENVPOINTERS :             4 - |
 ZID_MUSICPOINTERS :              0 - |  ZID_SFXPOINTERS :                2 - |
 ZID_VOLENVPOINTERS :             6 - |  ZINITAUDIODRIVER :              7F C |
 ZINITAUDIODRIVER.LOOP :         84 C |  ZINITFMDACTRACK :              83B C |
 ZISSFXTRACKOVERRIDING :        829 C |  ZISSFXTRACKOVERRIDING_PART2 :  82C C |
 ZISSFXTRACKOVERRIDING_PART2.IS_FM1FM2 :                                839 C |
 ZKEYOFF :                      31F C |  ZKEYOFFIFACTIVE :              319 C |
 ZKEYONOFF :                    325 C |  ZLOCAPPLYMODENVMOD :           431 C |
 ZLOCAPPLYMODENVMOD.LOOP :      437 C |  ZLOCCHANGEMODENVINDEX :        418 C |
 ZLOCMODENVINCMULTIPLIER :      41F C |  ZLOCPOSITIVEMODENVMOD :        42F C |
 ZLOCRESETMODENVMOD :           41C C |  ZMODENVSETINDEX :              3EF C |
 ZMUSICFADE :                   9C8 C |  ZMUSICFADE.COMMON :            9D1 C |
 ZMUSICFADE.KEEP_TEMPO :        9DE C |  ZMUSICFADEKEEPSFX :            9BC C |
 ZMUSICFADESIMPLE :             9E2 C |  ZMUSICFADESIMPLE.LOOP :        9E8 C |
 ZMUSICFADESIMPLE.LOOPPSG :     A10 C |
 ZMUSICFADESIMPLE.SKIP_FMCHANNEL :                                      A03 C |
 ZMUSICNUMBER :                1C94 C | *ZMUSIDPTR__END :             28002 C |
 ZNEXTSOUND :                  1C93 C |  ZNUMMUSICFM1TRACKS :             3 - |
 ZNUMMUSICFM2TRACKS :             3 - |  ZNUMMUSICFMORDACTRACKS :         7 - |
 ZNUMMUSICFMORPSGTRACKS :         9 - |  ZNUMMUSICFMTRACKS :              6 - |
 ZNUMMUSICPSGTRACKS :             3 - |  ZNUMMUSICTRACKS :                A - |
 ZNUMSAVETRACKS :                 A - |  ZNUMSFXTRACKS :                  7 - |
*ZONEANIMDECLANONID :             0 - |  ZPALDBLUPDCOUNTER :           1C8D C |
 ZPALFLAG :                    1C8C C |  ZPAUSEAUDIO :                  A3C C |
 ZPAUSEAUDIO.LOOP1 :            A44 C |  ZPAUSEAUDIO.LOOP2 :            A50 C |
 ZPAUSEAUDIO.LOOP3 :            A5E C |  ZPAUSEFLAG :                  1C9D C |
 ZPAUSEUNPAUSE :                875 C |  ZPAUSEUNPAUSE.FM_LOOP :        89F C |
 ZPAUSEUNPAUSE.PSG_LOOP :       8C0 C |  ZPAUSEUNPAUSE.SET_PAN :        8AB C |
 ZPAUSEUNPAUSE.SKIP_FM_TRACK :  8B3 C |  ZPAUSEUNPAUSE.SKIP_PSG_TRACK : 8D4 C |
 ZPAUSEUNPAUSE.UNPAUSE :        886 C |  ZPLAYDIGITALAUDIO :           119B C |
 ZPLAYDIGITALAUDIO.DAC_IDLE_LOOP :                                     11B7 C |
 ZPLAYDIGITALAUDIO.DAC_PLAYBACK_LOOP :                                 11EF C |
 ZPLAYDIGITALAUDIO.ENABLETRACK :                                       11B5 C |
 ZPLAYDIGITALAUDIO.SAMPLE1_INDEX :                                     1205 C |
 ZPLAYDIGITALAUDIO.SAMPLE1_RATE :                                      11EF C |
 ZPLAYDIGITALAUDIO.SAMPLE2_INDEX :                                     121E C |
 ZPLAYDIGITALAUDIO.SAMPLE2_RATE :                                      120C C |
 ZPLAYMUSIC :                   5A8 C |  ZPLAYMUSIC.LOOP :              623 C |
 ZPLAYMUSIC.NO_FADE :           5D0 C |  ZPLAYMUSIC_DOFADE :            63D C |
 ZPLAYSFXBYINDEX :              53D C |  ZPLAYSOUND :                   7A6 C |
 ZPLAYSOUNDBYINDEX :            565 C |  ZPLAYSOUND_BANKSWITCH :        755 C |
 ZPLAYSOUND_CHECKRING :         747 C |  ZPLAYSOUND_NORMAL :            7A0 C |
 ZPLAYSOUND_NOTCONT :           795 C |  ZPREPAREMODULATION :           36F C |
 ZPSG :                        7F11 - |  ZPSGFREQUENCIES :              B78 C |
 ZPSGINITBYTES :                741 C |  ZPSGSILENCEALL :               A68 C |
 ZPSGSILENCEALL.LOOP :          A6D C |  ZQUEUEVARIABLES :             1C8C C |
 ZRESTTRACK :                  117F C |  ZRINGSPEAKER :                1CA4 C |
 ZROMWINDOW :                  8000 - | *ZSAVESONGDAC :                1E52 C |
*ZSAVESONGDAC.AMSFMSPAN :      1E5C C | *ZSAVESONGDAC.DACSFXPLAYING :  1E62 C |
*ZSAVESONGDAC.DATAPOINTERHIGH :                                        1E56 C |
*ZSAVESONGDAC.DATAPOINTERLOW : 1E55 C | *ZSAVESONGDAC.DETUNE :         1E62 C |
*ZSAVESONGDAC.DURATIONTIMEOUT :                                        1E5D C |
*ZSAVESONGDAC.FMVOLENV :       1E64 C | *ZSAVESONGDAC.FMVOLENVMASK :   1E65 C |
*ZSAVESONGDAC.FREQHIGH :       1E60 C | *ZSAVESONGDAC.FREQLOW :        1E5F C |
*ZSAVESONGDAC.HAVESSGEGFLAG :  1E64 C | *ZSAVESONGDAC.LOOPCOUNTERS :   1E73 C |
*ZSAVESONGDAC.MODENVINDEX :    1E70 C | *ZSAVESONGDAC.MODENVSENS :     1E6D C |
*ZSAVESONGDAC.MODULATIONCTRL : 1E59 C |
*ZSAVESONGDAC.MODULATIONDELTA :                                        1E71 C |
*ZSAVESONGDAC.MODULATIONPTRHIGH :                                      1E6C C |
*ZSAVESONGDAC.MODULATIONPTRLOW :                                       1E6B C |
*ZSAVESONGDAC.MODULATIONSPEED :                                        1E70 C |
*ZSAVESONGDAC.MODULATIONSTEPS :                                        1E72 C |
*ZSAVESONGDAC.MODULATIONVALHIGH :                                      1E6E C |
*ZSAVESONGDAC.MODULATIONVALLOW :                                       1E6D C |
*ZSAVESONGDAC.MODULATIONWAIT : 1E6F C | *ZSAVESONGDAC.NOTEFILLMASTER : 1E6A C |
*ZSAVESONGDAC.NOTEFILLTIMEOUT :                                        1E69 C |
*ZSAVESONGDAC.PLAYBACKCONTROL :                                        1E52 C |
*ZSAVESONGDAC.PSGNOISE :       1E66 C | *ZSAVESONGDAC.SAVEDDAC :       1E5F C |
*ZSAVESONGDAC.SAVEDDURATION :  1E5E C |
*ZSAVESONGDAC.SSGEGPOINTERHIGH :                                       1E66 C |
*ZSAVESONGDAC.SSGEGPOINTERLOW :                                        1E65 C |
*ZSAVESONGDAC.STACKPOINTER :   1E5B C | *ZSAVESONGDAC.STACK_TOP :      1E77 C |
*ZSAVESONGDAC.TEMPODIVIDER :   1E54 C | *ZSAVESONGDAC.TLPTRHIGH :      1E68 C |
*ZSAVESONGDAC.TLPTRLOW :       1E67 C | *ZSAVESONGDAC.TRANSPOSE :      1E57 C |
*ZSAVESONGDAC.VOICECONTROL :   1E53 C | *ZSAVESONGDAC.VOICEINDEX :     1E5A C |
*ZSAVESONGDAC.VOICESHIGH :     1E76 C | *ZSAVESONGDAC.VOICESLOW :      1E75 C |
*ZSAVESONGDAC.VOICESONGID :    1E61 C | *ZSAVESONGDAC.VOLENV :         1E63 C |
*ZSAVESONGDAC.VOLUME :         1E58 C | *ZSAVESONGFM1 :                1E7B C |
*ZSAVESONGFM1.AMSFMSPAN :      1E85 C | *ZSAVESONGFM1.DACSFXPLAYING :  1E8B C |
*ZSAVESONGFM1.DATAPOINTERHIGH :                                        1E7F C |
*ZSAVESONGFM1.DATAPOINTERLOW : 1E7E C | *ZSAVESONGFM1.DETUNE :         1E8B C |
*ZSAVESONGFM1.DURATIONTIMEOUT :                                        1E86 C |
*ZSAVESONGFM1.FMVOLENV :       1E8D C | *ZSAVESONGFM1.FMVOLENVMASK :   1E8E C |
*ZSAVESONGFM1.FREQHIGH :       1E89 C | *ZSAVESONGFM1.FREQLOW :        1E88 C |
*ZSAVESONGFM1.HAVESSGEGFLAG :  1E8D C | *ZSAVESONGFM1.LOOPCOUNTERS :   1E9C C |
*ZSAVESONGFM1.MODENVINDEX :    1E99 C | *ZSAVESONGFM1.MODENVSENS :     1E96 C |
*ZSAVESONGFM1.MODULATIONCTRL : 1E82 C |
*ZSAVESONGFM1.MODULATIONDELTA :                                        1E9A C |
*ZSAVESONGFM1.MODULATIONPTRHIGH :                                      1E95 C |
*ZSAVESONGFM1.MODULATIONPTRLOW :                                       1E94 C |
*ZSAVESONGFM1.MODULATIONSPEED :                                        1E99 C |
*ZSAVESONGFM1.MODULATIONSTEPS :                                        1E9B C |
*ZSAVESONGFM1.MODULATIONVALHIGH :                                      1E97 C |
*ZSAVESONGFM1.MODULATIONVALLOW :                                       1E96 C |
*ZSAVESONGFM1.MODULATIONWAIT : 1E98 C | *ZSAVESONGFM1.NOTEFILLMASTER : 1E93 C |
*ZSAVESONGFM1.NOTEFILLTIMEOUT :                                        1E92 C |
*ZSAVESONGFM1.PLAYBACKCONTROL :                                        1E7B C |
*ZSAVESONGFM1.PSGNOISE :       1E8F C | *ZSAVESONGFM1.SAVEDDAC :       1E88 C |
*ZSAVESONGFM1.SAVEDDURATION :  1E87 C |
*ZSAVESONGFM1.SSGEGPOINTERHIGH :                                       1E8F C |
*ZSAVESONGFM1.SSGEGPOINTERLOW :                                        1E8E C |
*ZSAVESONGFM1.STACKPOINTER :   1E84 C | *ZSAVESONGFM1.STACK_TOP :      1EA0 C |
*ZSAVESONGFM1.TEMPODIVIDER :   1E7D C | *ZSAVESONGFM1.TLPTRHIGH :      1E91 C |
*ZSAVESONGFM1.TLPTRLOW :       1E90 C | *ZSAVESONGFM1.TRANSPOSE :      1E80 C |
*ZSAVESONGFM1.VOICECONTROL :   1E7C C | *ZSAVESONGFM1.VOICEINDEX :     1E83 C |
*ZSAVESONGFM1.VOICESHIGH :     1E9F C | *ZSAVESONGFM1.VOICESLOW :      1E9E C |
*ZSAVESONGFM1.VOICESONGID :    1E8A C | *ZSAVESONGFM1.VOLENV :         1E8C C |
*ZSAVESONGFM1.VOLUME :         1E81 C | *ZSAVESONGFM2 :                1EA4 C |
*ZSAVESONGFM2.AMSFMSPAN :      1EAE C | *ZSAVESONGFM2.DACSFXPLAYING :  1EB4 C |
*ZSAVESONGFM2.DATAPOINTERHIGH :                                        1EA8 C |
*ZSAVESONGFM2.DATAPOINTERLOW : 1EA7 C | *ZSAVESONGFM2.DETUNE :         1EB4 C |
*ZSAVESONGFM2.DURATIONTIMEOUT :                                        1EAF C |
*ZSAVESONGFM2.FMVOLENV :       1EB6 C | *ZSAVESONGFM2.FMVOLENVMASK :   1EB7 C |
*ZSAVESONGFM2.FREQHIGH :       1EB2 C | *ZSAVESONGFM2.FREQLOW :        1EB1 C |
*ZSAVESONGFM2.HAVESSGEGFLAG :  1EB6 C | *ZSAVESONGFM2.LOOPCOUNTERS :   1EC5 C |
*ZSAVESONGFM2.MODENVINDEX :    1EC2 C | *ZSAVESONGFM2.MODENVSENS :     1EBF C |
*ZSAVESONGFM2.MODULATIONCTRL : 1EAB C |
*ZSAVESONGFM2.MODULATIONDELTA :                                        1EC3 C |
*ZSAVESONGFM2.MODULATIONPTRHIGH :                                      1EBE C |
*ZSAVESONGFM2.MODULATIONPTRLOW :                                       1EBD C |
*ZSAVESONGFM2.MODULATIONSPEED :                                        1EC2 C |
*ZSAVESONGFM2.MODULATIONSTEPS :                                        1EC4 C |
*ZSAVESONGFM2.MODULATIONVALHIGH :                                      1EC0 C |
*ZSAVESONGFM2.MODULATIONVALLOW :                                       1EBF C |
*ZSAVESONGFM2.MODULATIONWAIT : 1EC1 C | *ZSAVESONGFM2.NOTEFILLMASTER : 1EBC C |
*ZSAVESONGFM2.NOTEFILLTIMEOUT :                                        1EBB C |
*ZSAVESONGFM2.PLAYBACKCONTROL :                                        1EA4 C |
*ZSAVESONGFM2.PSGNOISE :       1EB8 C | *ZSAVESONGFM2.SAVEDDAC :       1EB1 C |
*ZSAVESONGFM2.SAVEDDURATION :  1EB0 C |
*ZSAVESONGFM2.SSGEGPOINTERHIGH :                                       1EB8 C |
*ZSAVESONGFM2.SSGEGPOINTERLOW :                                        1EB7 C |
*ZSAVESONGFM2.STACKPOINTER :   1EAD C | *ZSAVESONGFM2.STACK_TOP :      1EC9 C |
*ZSAVESONGFM2.TEMPODIVIDER :   1EA6 C | *ZSAVESONGFM2.TLPTRHIGH :      1EBA C |
*ZSAVESONGFM2.TLPTRLOW :       1EB9 C | *ZSAVESONGFM2.TRANSPOSE :      1EA9 C |
*ZSAVESONGFM2.VOICECONTROL :   1EA5 C | *ZSAVESONGFM2.VOICEINDEX :     1EAC C |
*ZSAVESONGFM2.VOICESHIGH :     1EC8 C | *ZSAVESONGFM2.VOICESLOW :      1EC7 C |
*ZSAVESONGFM2.VOICESONGID :    1EB3 C | *ZSAVESONGFM2.VOLENV :         1EB5 C |
*ZSAVESONGFM2.VOLUME :         1EAA C | *ZSAVESONGFM3 :                1ECD C |
*ZSAVESONGFM3.AMSFMSPAN :      1ED7 C | *ZSAVESONGFM3.DACSFXPLAYING :  1EDD C |
*ZSAVESONGFM3.DATAPOINTERHIGH :                                        1ED1 C |
*ZSAVESONGFM3.DATAPOINTERLOW : 1ED0 C | *ZSAVESONGFM3.DETUNE :         1EDD C |
*ZSAVESONGFM3.DURATIONTIMEOUT :                                        1ED8 C |
*ZSAVESONGFM3.FMVOLENV :       1EDF C | *ZSAVESONGFM3.FMVOLENVMASK :   1EE0 C |
*ZSAVESONGFM3.FREQHIGH :       1EDB C | *ZSAVESONGFM3.FREQLOW :        1EDA C |
*ZSAVESONGFM3.HAVESSGEGFLAG :  1EDF C | *ZSAVESONGFM3.LOOPCOUNTERS :   1EEE C |
*ZSAVESONGFM3.MODENVINDEX :    1EEB C | *ZSAVESONGFM3.MODENVSENS :     1EE8 C |
*ZSAVESONGFM3.MODULATIONCTRL : 1ED4 C |
*ZSAVESONGFM3.MODULATIONDELTA :                                        1EEC C |
*ZSAVESONGFM3.MODULATIONPTRHIGH :                                      1EE7 C |
*ZSAVESONGFM3.MODULATIONPTRLOW :                                       1EE6 C |
*ZSAVESONGFM3.MODULATIONSPEED :                                        1EEB C |
*ZSAVESONGFM3.MODULATIONSTEPS :                                        1EED C |
*ZSAVESONGFM3.MODULATIONVALHIGH :                                      1EE9 C |
*ZSAVESONGFM3.MODULATIONVALLOW :                                       1EE8 C |
*ZSAVESONGFM3.MODULATIONWAIT : 1EEA C | *ZSAVESONGFM3.NOTEFILLMASTER : 1EE5 C |
*ZSAVESONGFM3.NOTEFILLTIMEOUT :                                        1EE4 C |
*ZSAVESONGFM3.PLAYBACKCONTROL :                                        1ECD C |
*ZSAVESONGFM3.PSGNOISE :       1EE1 C | *ZSAVESONGFM3.SAVEDDAC :       1EDA C |
*ZSAVESONGFM3.SAVEDDURATION :  1ED9 C |
*ZSAVESONGFM3.SSGEGPOINTERHIGH :                                       1EE1 C |
*ZSAVESONGFM3.SSGEGPOINTERLOW :                                        1EE0 C |
*ZSAVESONGFM3.STACKPOINTER :   1ED6 C | *ZSAVESONGFM3.STACK_TOP :      1EF2 C |
*ZSAVESONGFM3.TEMPODIVIDER :   1ECF C | *ZSAVESONGFM3.TLPTRHIGH :      1EE3 C |
*ZSAVESONGFM3.TLPTRLOW :       1EE2 C | *ZSAVESONGFM3.TRANSPOSE :      1ED2 C |
*ZSAVESONGFM3.VOICECONTROL :   1ECE C | *ZSAVESONGFM3.VOICEINDEX :     1ED5 C |
*ZSAVESONGFM3.VOICESHIGH :     1EF1 C | *ZSAVESONGFM3.VOICESLOW :      1EF0 C |
*ZSAVESONGFM3.VOICESONGID :    1EDC C | *ZSAVESONGFM3.VOLENV :         1EDE C |
*ZSAVESONGFM3.VOLUME :         1ED3 C | *ZSAVESONGFM4 :                1EF6 C |
*ZSAVESONGFM4.AMSFMSPAN :      1F00 C | *ZSAVESONGFM4.DACSFXPLAYING :  1F06 C |
*ZSAVESONGFM4.DATAPOINTERHIGH :                                        1EFA C |
*ZSAVESONGFM4.DATAPOINTERLOW : 1EF9 C | *ZSAVESONGFM4.DETUNE :         1F06 C |
*ZSAVESONGFM4.DURATIONTIMEOUT :                                        1F01 C |
*ZSAVESONGFM4.FMVOLENV :       1F08 C | *ZSAVESONGFM4.FMVOLENVMASK :   1F09 C |
*ZSAVESONGFM4.FREQHIGH :       1F04 C | *ZSAVESONGFM4.FREQLOW :        1F03 C |
*ZSAVESONGFM4.HAVESSGEGFLAG :  1F08 C | *ZSAVESONGFM4.LOOPCOUNTERS :   1F17 C |
*ZSAVESONGFM4.MODENVINDEX :    1F14 C | *ZSAVESONGFM4.MODENVSENS :     1F11 C |
*ZSAVESONGFM4.MODULATIONCTRL : 1EFD C |
*ZSAVESONGFM4.MODULATIONDELTA :                                        1F15 C |
*ZSAVESONGFM4.MODULATIONPTRHIGH :                                      1F10 C |
*ZSAVESONGFM4.MODULATIONPTRLOW :                                       1F0F C |
*ZSAVESONGFM4.MODULATIONSPEED :                                        1F14 C |
*ZSAVESONGFM4.MODULATIONSTEPS :                                        1F16 C |
*ZSAVESONGFM4.MODULATIONVALHIGH :                                      1F12 C |
*ZSAVESONGFM4.MODULATIONVALLOW :                                       1F11 C |
*ZSAVESONGFM4.MODULATIONWAIT : 1F13 C | *ZSAVESONGFM4.NOTEFILLMASTER : 1F0E C |
*ZSAVESONGFM4.NOTEFILLTIMEOUT :                                        1F0D C |
*ZSAVESONGFM4.PLAYBACKCONTROL :                                        1EF6 C |
*ZSAVESONGFM4.PSGNOISE :       1F0A C | *ZSAVESONGFM4.SAVEDDAC :       1F03 C |
*ZSAVESONGFM4.SAVEDDURATION :  1F02 C |
*ZSAVESONGFM4.SSGEGPOINTERHIGH :                                       1F0A C |
*ZSAVESONGFM4.SSGEGPOINTERLOW :                                        1F09 C |
*ZSAVESONGFM4.STACKPOINTER :   1EFF C | *ZSAVESONGFM4.STACK_TOP :      1F1B C |
*ZSAVESONGFM4.TEMPODIVIDER :   1EF8 C | *ZSAVESONGFM4.TLPTRHIGH :      1F0C C |
*ZSAVESONGFM4.TLPTRLOW :       1F0B C | *ZSAVESONGFM4.TRANSPOSE :      1EFB C |
*ZSAVESONGFM4.VOICECONTROL :   1EF7 C | *ZSAVESONGFM4.VOICEINDEX :     1EFE C |
*ZSAVESONGFM4.VOICESHIGH :     1F1A C | *ZSAVESONGFM4.VOICESLOW :      1F19 C |
*ZSAVESONGFM4.VOICESONGID :    1F05 C | *ZSAVESONGFM4.VOLENV :         1F07 C |
*ZSAVESONGFM4.VOLUME :         1EFC C | *ZSAVESONGFM5 :                1F1F C |
*ZSAVESONGFM5.AMSFMSPAN :      1F29 C | *ZSAVESONGFM5.DACSFXPLAYING :  1F2F C |
*ZSAVESONGFM5.DATAPOINTERHIGH :                                        1F23 C |
*ZSAVESONGFM5.DATAPOINTERLOW : 1F22 C | *ZSAVESONGFM5.DETUNE :         1F2F C |
*ZSAVESONGFM5.DURATIONTIMEOUT :                                        1F2A C |
*ZSAVESONGFM5.FMVOLENV :       1F31 C | *ZSAVESONGFM5.FMVOLENVMASK :   1F32 C |
*ZSAVESONGFM5.FREQHIGH :       1F2D C | *ZSAVESONGFM5.FREQLOW :        1F2C C |
*ZSAVESONGFM5.HAVESSGEGFLAG :  1F31 C | *ZSAVESONGFM5.LOOPCOUNTERS :   1F40 C |
*ZSAVESONGFM5.MODENVINDEX :    1F3D C | *ZSAVESONGFM5.MODENVSENS :     1F3A C |
*ZSAVESONGFM5.MODULATIONCTRL : 1F26 C |
*ZSAVESONGFM5.MODULATIONDELTA :                                        1F3E C |
*ZSAVESONGFM5.MODULATIONPTRHIGH :                                      1F39 C |
*ZSAVESONGFM5.MODULATIONPTRLOW :                                       1F38 C |
*ZSAVESONGFM5.MODULATIONSPEED :                                        1F3D C |
*ZSAVESONGFM5.MODULATIONSTEPS :                                        1F3F C |
*ZSAVESONGFM5.MODULATIONVALHIGH :                                      1F3B C |
*ZSAVESONGFM5.MODULATIONVALLOW :                                       1F3A C |
*ZSAVESONGFM5.MODULATIONWAIT : 1F3C C | *ZSAVESONGFM5.NOTEFILLMASTER : 1F37 C |
*ZSAVESONGFM5.NOTEFILLTIMEOUT :                                        1F36 C |
*ZSAVESONGFM5.PLAYBACKCONTROL :                                        1F1F C |
*ZSAVESONGFM5.PSGNOISE :       1F33 C | *ZSAVESONGFM5.SAVEDDAC :       1F2C C |
*ZSAVESONGFM5.SAVEDDURATION :  1F2B C |
*ZSAVESONGFM5.SSGEGPOINTERHIGH :                                       1F33 C |
*ZSAVESONGFM5.SSGEGPOINTERLOW :                                        1F32 C |
*ZSAVESONGFM5.STACKPOINTER :   1F28 C | *ZSAVESONGFM5.STACK_TOP :      1F44 C |
*ZSAVESONGFM5.TEMPODIVIDER :   1F21 C | *ZSAVESONGFM5.TLPTRHIGH :      1F35 C |
*ZSAVESONGFM5.TLPTRLOW :       1F34 C | *ZSAVESONGFM5.TRANSPOSE :      1F24 C |
*ZSAVESONGFM5.VOICECONTROL :   1F20 C | *ZSAVESONGFM5.VOICEINDEX :     1F27 C |
*ZSAVESONGFM5.VOICESHIGH :     1F43 C | *ZSAVESONGFM5.VOICESLOW :      1F42 C |
*ZSAVESONGFM5.VOICESONGID :    1F2E C | *ZSAVESONGFM5.VOLENV :         1F30 C |
*ZSAVESONGFM5.VOLUME :         1F25 C | *ZSAVESONGFM6 :                1F48 C |
*ZSAVESONGFM6.AMSFMSPAN :      1F52 C | *ZSAVESONGFM6.DACSFXPLAYING :  1F58 C |
*ZSAVESONGFM6.DATAPOINTERHIGH :                                        1F4C C |
*ZSAVESONGFM6.DATAPOINTERLOW : 1F4B C | *ZSAVESONGFM6.DETUNE :         1F58 C |
*ZSAVESONGFM6.DURATIONTIMEOUT :                                        1F53 C |
*ZSAVESONGFM6.FMVOLENV :       1F5A C | *ZSAVESONGFM6.FMVOLENVMASK :   1F5B C |
*ZSAVESONGFM6.FREQHIGH :       1F56 C | *ZSAVESONGFM6.FREQLOW :        1F55 C |
*ZSAVESONGFM6.HAVESSGEGFLAG :  1F5A C | *ZSAVESONGFM6.LOOPCOUNTERS :   1F69 C |
*ZSAVESONGFM6.MODENVINDEX :    1F66 C | *ZSAVESONGFM6.MODENVSENS :     1F63 C |
*ZSAVESONGFM6.MODULATIONCTRL : 1F4F C |
*ZSAVESONGFM6.MODULATIONDELTA :                                        1F67 C |
*ZSAVESONGFM6.MODULATIONPTRHIGH :                                      1F62 C |
*ZSAVESONGFM6.MODULATIONPTRLOW :                                       1F61 C |
*ZSAVESONGFM6.MODULATIONSPEED :                                        1F66 C |
*ZSAVESONGFM6.MODULATIONSTEPS :                                        1F68 C |
*ZSAVESONGFM6.MODULATIONVALHIGH :                                      1F64 C |
*ZSAVESONGFM6.MODULATIONVALLOW :                                       1F63 C |
*ZSAVESONGFM6.MODULATIONWAIT : 1F65 C | *ZSAVESONGFM6.NOTEFILLMASTER : 1F60 C |
*ZSAVESONGFM6.NOTEFILLTIMEOUT :                                        1F5F C |
*ZSAVESONGFM6.PLAYBACKCONTROL :                                        1F48 C |
*ZSAVESONGFM6.PSGNOISE :       1F5C C | *ZSAVESONGFM6.SAVEDDAC :       1F55 C |
*ZSAVESONGFM6.SAVEDDURATION :  1F54 C |
*ZSAVESONGFM6.SSGEGPOINTERHIGH :                                       1F5C C |
*ZSAVESONGFM6.SSGEGPOINTERLOW :                                        1F5B C |
*ZSAVESONGFM6.STACKPOINTER :   1F51 C | *ZSAVESONGFM6.STACK_TOP :      1F6D C |
*ZSAVESONGFM6.TEMPODIVIDER :   1F4A C | *ZSAVESONGFM6.TLPTRHIGH :      1F5E C |
*ZSAVESONGFM6.TLPTRLOW :       1F5D C | *ZSAVESONGFM6.TRANSPOSE :      1F4D C |
*ZSAVESONGFM6.VOICECONTROL :   1F49 C | *ZSAVESONGFM6.VOICEINDEX :     1F50 C |
*ZSAVESONGFM6.VOICESHIGH :     1F6C C | *ZSAVESONGFM6.VOICESLOW :      1F6B C |
*ZSAVESONGFM6.VOICESONGID :    1F57 C | *ZSAVESONGFM6.VOLENV :         1F59 C |
*ZSAVESONGFM6.VOLUME :         1F4E C | *ZSAVESONGPSG1 :               1F71 C |
*ZSAVESONGPSG1.AMSFMSPAN :     1F7B C | *ZSAVESONGPSG1.DACSFXPLAYING : 1F81 C |
*ZSAVESONGPSG1.DATAPOINTERHIGH :                                       1F75 C |
*ZSAVESONGPSG1.DATAPOINTERLOW :                                        1F74 C |
*ZSAVESONGPSG1.DETUNE :        1F81 C |
*ZSAVESONGPSG1.DURATIONTIMEOUT :                                       1F7C C |
*ZSAVESONGPSG1.FMVOLENV :      1F83 C | *ZSAVESONGPSG1.FMVOLENVMASK :  1F84 C |
*ZSAVESONGPSG1.FREQHIGH :      1F7F C | *ZSAVESONGPSG1.FREQLOW :       1F7E C |
*ZSAVESONGPSG1.HAVESSGEGFLAG : 1F83 C | *ZSAVESONGPSG1.LOOPCOUNTERS :  1F92 C |
*ZSAVESONGPSG1.MODENVINDEX :   1F8F C | *ZSAVESONGPSG1.MODENVSENS :    1F8C C |
*ZSAVESONGPSG1.MODULATIONCTRL :                                        1F78 C |
*ZSAVESONGPSG1.MODULATIONDELTA :                                       1F90 C |
*ZSAVESONGPSG1.MODULATIONPTRHIGH :                                     1F8B C |
*ZSAVESONGPSG1.MODULATIONPTRLOW :                                      1F8A C |
*ZSAVESONGPSG1.MODULATIONSPEED :                                       1F8F C |
*ZSAVESONGPSG1.MODULATIONSTEPS :                                       1F91 C |
*ZSAVESONGPSG1.MODULATIONVALHIGH :                                     1F8D C |
*ZSAVESONGPSG1.MODULATIONVALLOW :                                      1F8C C |
*ZSAVESONGPSG1.MODULATIONWAIT :                                        1F8E C |
*ZSAVESONGPSG1.NOTEFILLMASTER :                                        1F89 C |
*ZSAVESONGPSG1.NOTEFILLTIMEOUT :                                       1F88 C |
*ZSAVESONGPSG1.PLAYBACKCONTROL :                                       1F71 C |
*ZSAVESONGPSG1.PSGNOISE :      1F85 C | *ZSAVESONGPSG1.SAVEDDAC :      1F7E C |
*ZSAVESONGPSG1.SAVEDDURATION : 1F7D C |
*ZSAVESONGPSG1.SSGEGPOINTERHIGH :                                      1F85 C |
*ZSAVESONGPSG1.SSGEGPOINTERLOW :                                       1F84 C |
*ZSAVESONGPSG1.STACKPOINTER :  1F7A C | *ZSAVESONGPSG1.STACK_TOP :     1F96 C |
*ZSAVESONGPSG1.TEMPODIVIDER :  1F73 C | *ZSAVESONGPSG1.TLPTRHIGH :     1F87 C |
*ZSAVESONGPSG1.TLPTRLOW :      1F86 C | *ZSAVESONGPSG1.TRANSPOSE :     1F76 C |
*ZSAVESONGPSG1.VOICECONTROL :  1F72 C | *ZSAVESONGPSG1.VOICEINDEX :    1F79 C |
*ZSAVESONGPSG1.VOICESHIGH :    1F95 C | *ZSAVESONGPSG1.VOICESLOW :     1F94 C |
*ZSAVESONGPSG1.VOICESONGID :   1F80 C | *ZSAVESONGPSG1.VOLENV :        1F82 C |
*ZSAVESONGPSG1.VOLUME :        1F77 C | *ZSAVESONGPSG2 :               1F9A C |
*ZSAVESONGPSG2.AMSFMSPAN :     1FA4 C | *ZSAVESONGPSG2.DACSFXPLAYING : 1FAA C |
*ZSAVESONGPSG2.DATAPOINTERHIGH :                                       1F9E C |
*ZSAVESONGPSG2.DATAPOINTERLOW :                                        1F9D C |
*ZSAVESONGPSG2.DETUNE :        1FAA C |
*ZSAVESONGPSG2.DURATIONTIMEOUT :                                       1FA5 C |
*ZSAVESONGPSG2.FMVOLENV :      1FAC C | *ZSAVESONGPSG2.FMVOLENVMASK :  1FAD C |
*ZSAVESONGPSG2.FREQHIGH :      1FA8 C | *ZSAVESONGPSG2.FREQLOW :       1FA7 C |
*ZSAVESONGPSG2.HAVESSGEGFLAG : 1FAC C | *ZSAVESONGPSG2.LOOPCOUNTERS :  1FBB C |
*ZSAVESONGPSG2.MODENVINDEX :   1FB8 C | *ZSAVESONGPSG2.MODENVSENS :    1FB5 C |
*ZSAVESONGPSG2.MODULATIONCTRL :                                        1FA1 C |
*ZSAVESONGPSG2.MODULATIONDELTA :                                       1FB9 C |
*ZSAVESONGPSG2.MODULATIONPTRHIGH :                                     1FB4 C |
*ZSAVESONGPSG2.MODULATIONPTRLOW :                                      1FB3 C |
*ZSAVESONGPSG2.MODULATIONSPEED :                                       1FB8 C |
*ZSAVESONGPSG2.MODULATIONSTEPS :                                       1FBA C |
*ZSAVESONGPSG2.MODULATIONVALHIGH :                                     1FB6 C |
*ZSAVESONGPSG2.MODULATIONVALLOW :                                      1FB5 C |
*ZSAVESONGPSG2.MODULATIONWAIT :                                        1FB7 C |
*ZSAVESONGPSG2.NOTEFILLMASTER :                                        1FB2 C |
*ZSAVESONGPSG2.NOTEFILLTIMEOUT :                                       1FB1 C |
*ZSAVESONGPSG2.PLAYBACKCONTROL :                                       1F9A C |
*ZSAVESONGPSG2.PSGNOISE :      1FAE C | *ZSAVESONGPSG2.SAVEDDAC :      1FA7 C |
*ZSAVESONGPSG2.SAVEDDURATION : 1FA6 C |
*ZSAVESONGPSG2.SSGEGPOINTERHIGH :                                      1FAE C |
*ZSAVESONGPSG2.SSGEGPOINTERLOW :                                       1FAD C |
*ZSAVESONGPSG2.STACKPOINTER :  1FA3 C | *ZSAVESONGPSG2.STACK_TOP :     1FBF C |
*ZSAVESONGPSG2.TEMPODIVIDER :  1F9C C | *ZSAVESONGPSG2.TLPTRHIGH :     1FB0 C |
*ZSAVESONGPSG2.TLPTRLOW :      1FAF C | *ZSAVESONGPSG2.TRANSPOSE :     1F9F C |
*ZSAVESONGPSG2.VOICECONTROL :  1F9B C | *ZSAVESONGPSG2.VOICEINDEX :    1FA2 C |
*ZSAVESONGPSG2.VOICESHIGH :    1FBE C | *ZSAVESONGPSG2.VOICESLOW :     1FBD C |
*ZSAVESONGPSG2.VOICESONGID :   1FA9 C | *ZSAVESONGPSG2.VOLENV :        1FAB C |
*ZSAVESONGPSG2.VOLUME :        1FA0 C | *ZSAVESONGPSG3 :               1FC3 C |
*ZSAVESONGPSG3.AMSFMSPAN :     1FCD C | *ZSAVESONGPSG3.DACSFXPLAYING : 1FD3 C |
*ZSAVESONGPSG3.DATAPOINTERHIGH :                                       1FC7 C |
*ZSAVESONGPSG3.DATAPOINTERLOW :                                        1FC6 C |
*ZSAVESONGPSG3.DETUNE :        1FD3 C |
*ZSAVESONGPSG3.DURATIONTIMEOUT :                                       1FCE C |
*ZSAVESONGPSG3.FMVOLENV :      1FD5 C | *ZSAVESONGPSG3.FMVOLENVMASK :  1FD6 C |
*ZSAVESONGPSG3.FREQHIGH :      1FD1 C | *ZSAVESONGPSG3.FREQLOW :       1FD0 C |
*ZSAVESONGPSG3.HAVESSGEGFLAG : 1FD5 C | *ZSAVESONGPSG3.LOOPCOUNTERS :  1FE4 C |
*ZSAVESONGPSG3.MODENVINDEX :   1FE1 C | *ZSAVESONGPSG3.MODENVSENS :    1FDE C |
*ZSAVESONGPSG3.MODULATIONCTRL :                                        1FCA C |
*ZSAVESONGPSG3.MODULATIONDELTA :                                       1FE2 C |
*ZSAVESONGPSG3.MODULATIONPTRHIGH :                                     1FDD C |
*ZSAVESONGPSG3.MODULATIONPTRLOW :                                      1FDC C |
*ZSAVESONGPSG3.MODULATIONSPEED :                                       1FE1 C |
*ZSAVESONGPSG3.MODULATIONSTEPS :                                       1FE3 C |
*ZSAVESONGPSG3.MODULATIONVALHIGH :                                     1FDF C |
*ZSAVESONGPSG3.MODULATIONVALLOW :                                      1FDE C |
*ZSAVESONGPSG3.MODULATIONWAIT :                                        1FE0 C |
*ZSAVESONGPSG3.NOTEFILLMASTER :                                        1FDB C |
*ZSAVESONGPSG3.NOTEFILLTIMEOUT :                                       1FDA C |
*ZSAVESONGPSG3.PLAYBACKCONTROL :                                       1FC3 C |
*ZSAVESONGPSG3.PSGNOISE :      1FD7 C | *ZSAVESONGPSG3.SAVEDDAC :      1FD0 C |
*ZSAVESONGPSG3.SAVEDDURATION : 1FCF C |
*ZSAVESONGPSG3.SSGEGPOINTERHIGH :                                      1FD7 C |
*ZSAVESONGPSG3.SSGEGPOINTERLOW :                                       1FD6 C |
*ZSAVESONGPSG3.STACKPOINTER :  1FCC C | *ZSAVESONGPSG3.STACK_TOP :     1FE8 C |
*ZSAVESONGPSG3.TEMPODIVIDER :  1FC5 C | *ZSAVESONGPSG3.TLPTRHIGH :     1FD9 C |
*ZSAVESONGPSG3.TLPTRLOW :      1FD8 C | *ZSAVESONGPSG3.TRANSPOSE :     1FC8 C |
*ZSAVESONGPSG3.VOICECONTROL :  1FC4 C | *ZSAVESONGPSG3.VOICEINDEX :    1FCB C |
*ZSAVESONGPSG3.VOICESHIGH :    1FE7 C | *ZSAVESONGPSG3.VOICESLOW :     1FE6 C |
*ZSAVESONGPSG3.VOICESONGID :   1FD2 C | *ZSAVESONGPSG3.VOLENV :        1FD4 C |
*ZSAVESONGPSG3.VOLUME :        1FC9 C |  ZSENDFMINSTRDATA :             50C C |
 ZSENDFMINSTRDATARSAR :         51A C |  ZSENDFMINSTRUMENT :            4B6 C |
 ZSENDFMINSTRUMENT.ACTIVE :     4C8 C |
 ZSENDFMINSTRUMENT.SENDINSTRUMENT :                                     4FF C |
 ZSENDSSGEGDATA :              109F C |  ZSENDSSGEGDATA.LOOP :         10AF C |
 ZSENDTL :                      D84 C |  ZSENDTL.ACTIVE :               D89 C |
 ZSENDTL.GOT_POINTERS :         DA6 C |  ZSENDTL.LOOP :                 DA8 C |
 ZSETMAXRELRATE :               AB2 C |  ZSETVOICEDOUPLOAD :            E4F C |
 ZSETVOICEPSG :                 E54 C |  ZSETVOICEUPLOAD :              E4A C |
 ZSETVOICEUPLOADALTER :         E35 C |  ZSFXCHANNELDATA :              855 C |
 ZSFXNUMBER0 :                 1C95 C |  ZSFXNUMBER1 :                 1C96 C |
 ZSFXOVERRIDDENCHANNEL :        865 C |  ZSFXTEMPODIVIDER :            1CB7 C |
 ZSFXTRACKINITLOOP :            7C1 C |  ZSFXVOICETBLPTR :             1CB5 C |
 ZSFX_FM3 :                    1E52 C | *ZSFX_FM3.AMSFMSPAN :          1E5C C |
*ZSFX_FM3.DACSFXPLAYING :      1E62 C | *ZSFX_FM3.DATAPOINTERHIGH :    1E56 C |
*ZSFX_FM3.DATAPOINTERLOW :     1E55 C | *ZSFX_FM3.DETUNE :             1E62 C |
*ZSFX_FM3.DURATIONTIMEOUT :    1E5D C | *ZSFX_FM3.FMVOLENV :           1E64 C |
*ZSFX_FM3.FMVOLENVMASK :       1E65 C | *ZSFX_FM3.FREQHIGH :           1E60 C |
*ZSFX_FM3.FREQLOW :            1E5F C | *ZSFX_FM3.HAVESSGEGFLAG :      1E64 C |
*ZSFX_FM3.LOOPCOUNTERS :       1E73 C | *ZSFX_FM3.MODENVINDEX :        1E70 C |
*ZSFX_FM3.MODENVSENS :         1E6D C | *ZSFX_FM3.MODULATIONCTRL :     1E59 C |
*ZSFX_FM3.MODULATIONDELTA :    1E71 C | *ZSFX_FM3.MODULATIONPTRHIGH :  1E6C C |
*ZSFX_FM3.MODULATIONPTRLOW :   1E6B C | *ZSFX_FM3.MODULATIONSPEED :    1E70 C |
*ZSFX_FM3.MODULATIONSTEPS :    1E72 C | *ZSFX_FM3.MODULATIONVALHIGH :  1E6E C |
*ZSFX_FM3.MODULATIONVALLOW :   1E6D C | *ZSFX_FM3.MODULATIONWAIT :     1E6F C |
*ZSFX_FM3.NOTEFILLMASTER :     1E6A C | *ZSFX_FM3.NOTEFILLTIMEOUT :    1E69 C |
*ZSFX_FM3.PLAYBACKCONTROL :    1E52 C | *ZSFX_FM3.PSGNOISE :           1E66 C |
*ZSFX_FM3.SAVEDDAC :           1E5F C | *ZSFX_FM3.SAVEDDURATION :      1E5E C |
*ZSFX_FM3.SSGEGPOINTERHIGH :   1E66 C | *ZSFX_FM3.SSGEGPOINTERLOW :    1E65 C |
*ZSFX_FM3.STACKPOINTER :       1E5B C | *ZSFX_FM3.STACK_TOP :          1E77 C |
*ZSFX_FM3.TEMPODIVIDER :       1E54 C | *ZSFX_FM3.TLPTRHIGH :          1E68 C |
*ZSFX_FM3.TLPTRLOW :           1E67 C | *ZSFX_FM3.TRANSPOSE :          1E57 C |
*ZSFX_FM3.VOICECONTROL :       1E53 C | *ZSFX_FM3.VOICEINDEX :         1E5A C |
*ZSFX_FM3.VOICESHIGH :         1E76 C | *ZSFX_FM3.VOICESLOW :          1E75 C |
*ZSFX_FM3.VOICESONGID :        1E61 C | *ZSFX_FM3.VOLENV :             1E63 C |
*ZSFX_FM3.VOLUME :             1E58 C |  ZSFX_FM4 :                    1E7B C |
*ZSFX_FM4.AMSFMSPAN :          1E85 C | *ZSFX_FM4.DACSFXPLAYING :      1E8B C |
*ZSFX_FM4.DATAPOINTERHIGH :    1E7F C | *ZSFX_FM4.DATAPOINTERLOW :     1E7E C |
*ZSFX_FM4.DETUNE :             1E8B C | *ZSFX_FM4.DURATIONTIMEOUT :    1E86 C |
*ZSFX_FM4.FMVOLENV :           1E8D C | *ZSFX_FM4.FMVOLENVMASK :       1E8E C |
*ZSFX_FM4.FREQHIGH :           1E89 C | *ZSFX_FM4.FREQLOW :            1E88 C |
*ZSFX_FM4.HAVESSGEGFLAG :      1E8D C | *ZSFX_FM4.LOOPCOUNTERS :       1E9C C |
*ZSFX_FM4.MODENVINDEX :        1E99 C | *ZSFX_FM4.MODENVSENS :         1E96 C |
*ZSFX_FM4.MODULATIONCTRL :     1E82 C | *ZSFX_FM4.MODULATIONDELTA :    1E9A C |
*ZSFX_FM4.MODULATIONPTRHIGH :  1E95 C | *ZSFX_FM4.MODULATIONPTRLOW :   1E94 C |
*ZSFX_FM4.MODULATIONSPEED :    1E99 C | *ZSFX_FM4.MODULATIONSTEPS :    1E9B C |
*ZSFX_FM4.MODULATIONVALHIGH :  1E97 C | *ZSFX_FM4.MODULATIONVALLOW :   1E96 C |
*ZSFX_FM4.MODULATIONWAIT :     1E98 C | *ZSFX_FM4.NOTEFILLMASTER :     1E93 C |
*ZSFX_FM4.NOTEFILLTIMEOUT :    1E92 C | *ZSFX_FM4.PLAYBACKCONTROL :    1E7B C |
*ZSFX_FM4.PSGNOISE :           1E8F C | *ZSFX_FM4.SAVEDDAC :           1E88 C |
*ZSFX_FM4.SAVEDDURATION :      1E87 C | *ZSFX_FM4.SSGEGPOINTERHIGH :   1E8F C |
*ZSFX_FM4.SSGEGPOINTERLOW :    1E8E C | *ZSFX_FM4.STACKPOINTER :       1E84 C |
*ZSFX_FM4.STACK_TOP :          1EA0 C | *ZSFX_FM4.TEMPODIVIDER :       1E7D C |
*ZSFX_FM4.TLPTRHIGH :          1E91 C | *ZSFX_FM4.TLPTRLOW :           1E90 C |
*ZSFX_FM4.TRANSPOSE :          1E80 C | *ZSFX_FM4.VOICECONTROL :       1E7C C |
*ZSFX_FM4.VOICEINDEX :         1E83 C | *ZSFX_FM4.VOICESHIGH :         1E9F C |
*ZSFX_FM4.VOICESLOW :          1E9E C | *ZSFX_FM4.VOICESONGID :        1E8A C |
*ZSFX_FM4.VOLENV :             1E8C C | *ZSFX_FM4.VOLUME :             1E81 C |
 ZSFX_FM5 :                    1EA4 C | *ZSFX_FM5.AMSFMSPAN :          1EAE C |
*ZSFX_FM5.DACSFXPLAYING :      1EB4 C | *ZSFX_FM5.DATAPOINTERHIGH :    1EA8 C |
*ZSFX_FM5.DATAPOINTERLOW :     1EA7 C | *ZSFX_FM5.DETUNE :             1EB4 C |
*ZSFX_FM5.DURATIONTIMEOUT :    1EAF C | *ZSFX_FM5.FMVOLENV :           1EB6 C |
*ZSFX_FM5.FMVOLENVMASK :       1EB7 C | *ZSFX_FM5.FREQHIGH :           1EB2 C |
*ZSFX_FM5.FREQLOW :            1EB1 C | *ZSFX_FM5.HAVESSGEGFLAG :      1EB6 C |
*ZSFX_FM5.LOOPCOUNTERS :       1EC5 C | *ZSFX_FM5.MODENVINDEX :        1EC2 C |
*ZSFX_FM5.MODENVSENS :         1EBF C | *ZSFX_FM5.MODULATIONCTRL :     1EAB C |
*ZSFX_FM5.MODULATIONDELTA :    1EC3 C | *ZSFX_FM5.MODULATIONPTRHIGH :  1EBE C |
*ZSFX_FM5.MODULATIONPTRLOW :   1EBD C | *ZSFX_FM5.MODULATIONSPEED :    1EC2 C |
*ZSFX_FM5.MODULATIONSTEPS :    1EC4 C | *ZSFX_FM5.MODULATIONVALHIGH :  1EC0 C |
*ZSFX_FM5.MODULATIONVALLOW :   1EBF C | *ZSFX_FM5.MODULATIONWAIT :     1EC1 C |
*ZSFX_FM5.NOTEFILLMASTER :     1EBC C | *ZSFX_FM5.NOTEFILLTIMEOUT :    1EBB C |
*ZSFX_FM5.PLAYBACKCONTROL :    1EA4 C | *ZSFX_FM5.PSGNOISE :           1EB8 C |
*ZSFX_FM5.SAVEDDAC :           1EB1 C | *ZSFX_FM5.SAVEDDURATION :      1EB0 C |
*ZSFX_FM5.SSGEGPOINTERHIGH :   1EB8 C | *ZSFX_FM5.SSGEGPOINTERLOW :    1EB7 C |
*ZSFX_FM5.STACKPOINTER :       1EAD C | *ZSFX_FM5.STACK_TOP :          1EC9 C |
*ZSFX_FM5.TEMPODIVIDER :       1EA6 C | *ZSFX_FM5.TLPTRHIGH :          1EBA C |
*ZSFX_FM5.TLPTRLOW :           1EB9 C | *ZSFX_FM5.TRANSPOSE :          1EA9 C |
*ZSFX_FM5.VOICECONTROL :       1EA5 C | *ZSFX_FM5.VOICEINDEX :         1EAC C |
*ZSFX_FM5.VOICESHIGH :         1EC8 C | *ZSFX_FM5.VOICESLOW :          1EC7 C |
*ZSFX_FM5.VOICESONGID :        1EB3 C | *ZSFX_FM5.VOLENV :             1EB5 C |
*ZSFX_FM5.VOLUME :             1EAA C |  ZSFX_FM6 :                    1ECD C |
*ZSFX_FM6.AMSFMSPAN :          1ED7 C | *ZSFX_FM6.DACSFXPLAYING :      1EDD C |
*ZSFX_FM6.DATAPOINTERHIGH :    1ED1 C | *ZSFX_FM6.DATAPOINTERLOW :     1ED0 C |
*ZSFX_FM6.DETUNE :             1EDD C | *ZSFX_FM6.DURATIONTIMEOUT :    1ED8 C |
*ZSFX_FM6.FMVOLENV :           1EDF C | *ZSFX_FM6.FMVOLENVMASK :       1EE0 C |
*ZSFX_FM6.FREQHIGH :           1EDB C | *ZSFX_FM6.FREQLOW :            1EDA C |
*ZSFX_FM6.HAVESSGEGFLAG :      1EDF C | *ZSFX_FM6.LOOPCOUNTERS :       1EEE C |
*ZSFX_FM6.MODENVINDEX :        1EEB C | *ZSFX_FM6.MODENVSENS :         1EE8 C |
*ZSFX_FM6.MODULATIONCTRL :     1ED4 C | *ZSFX_FM6.MODULATIONDELTA :    1EEC C |
*ZSFX_FM6.MODULATIONPTRHIGH :  1EE7 C | *ZSFX_FM6.MODULATIONPTRLOW :   1EE6 C |
*ZSFX_FM6.MODULATIONSPEED :    1EEB C | *ZSFX_FM6.MODULATIONSTEPS :    1EED C |
*ZSFX_FM6.MODULATIONVALHIGH :  1EE9 C | *ZSFX_FM6.MODULATIONVALLOW :   1EE8 C |
*ZSFX_FM6.MODULATIONWAIT :     1EEA C | *ZSFX_FM6.NOTEFILLMASTER :     1EE5 C |
*ZSFX_FM6.NOTEFILLTIMEOUT :    1EE4 C | *ZSFX_FM6.PLAYBACKCONTROL :    1ECD C |
*ZSFX_FM6.PSGNOISE :           1EE1 C | *ZSFX_FM6.SAVEDDAC :           1EDA C |
*ZSFX_FM6.SAVEDDURATION :      1ED9 C | *ZSFX_FM6.SSGEGPOINTERHIGH :   1EE1 C |
*ZSFX_FM6.SSGEGPOINTERLOW :    1EE0 C | *ZSFX_FM6.STACKPOINTER :       1ED6 C |
*ZSFX_FM6.STACK_TOP :          1EF2 C | *ZSFX_FM6.TEMPODIVIDER :       1ECF C |
*ZSFX_FM6.TLPTRHIGH :          1EE3 C | *ZSFX_FM6.TLPTRLOW :           1EE2 C |
*ZSFX_FM6.TRANSPOSE :          1ED2 C | *ZSFX_FM6.VOICECONTROL :       1ECE C |
*ZSFX_FM6.VOICEINDEX :         1ED5 C | *ZSFX_FM6.VOICESHIGH :         1EF1 C |
*ZSFX_FM6.VOICESLOW :          1EF0 C | *ZSFX_FM6.VOICESONGID :        1EDC C |
*ZSFX_FM6.VOLENV :             1EDE C | *ZSFX_FM6.VOLUME :             1ED3 C |
 ZSFX_PSG1 :                   1EF6 C | *ZSFX_PSG1.AMSFMSPAN :         1F00 C |
*ZSFX_PSG1.DACSFXPLAYING :     1F06 C | *ZSFX_PSG1.DATAPOINTERHIGH :   1EFA C |
*ZSFX_PSG1.DATAPOINTERLOW :    1EF9 C | *ZSFX_PSG1.DETUNE :            1F06 C |
*ZSFX_PSG1.DURATIONTIMEOUT :   1F01 C | *ZSFX_PSG1.FMVOLENV :          1F08 C |
*ZSFX_PSG1.FMVOLENVMASK :      1F09 C | *ZSFX_PSG1.FREQHIGH :          1F04 C |
*ZSFX_PSG1.FREQLOW :           1F03 C | *ZSFX_PSG1.HAVESSGEGFLAG :     1F08 C |
*ZSFX_PSG1.LOOPCOUNTERS :      1F17 C | *ZSFX_PSG1.MODENVINDEX :       1F14 C |
*ZSFX_PSG1.MODENVSENS :        1F11 C | *ZSFX_PSG1.MODULATIONCTRL :    1EFD C |
*ZSFX_PSG1.MODULATIONDELTA :   1F15 C | *ZSFX_PSG1.MODULATIONPTRHIGH : 1F10 C |
*ZSFX_PSG1.MODULATIONPTRLOW :  1F0F C | *ZSFX_PSG1.MODULATIONSPEED :   1F14 C |
*ZSFX_PSG1.MODULATIONSTEPS :   1F16 C | *ZSFX_PSG1.MODULATIONVALHIGH : 1F12 C |
*ZSFX_PSG1.MODULATIONVALLOW :  1F11 C | *ZSFX_PSG1.MODULATIONWAIT :    1F13 C |
*ZSFX_PSG1.NOTEFILLMASTER :    1F0E C | *ZSFX_PSG1.NOTEFILLTIMEOUT :   1F0D C |
*ZSFX_PSG1.PLAYBACKCONTROL :   1EF6 C | *ZSFX_PSG1.PSGNOISE :          1F0A C |
*ZSFX_PSG1.SAVEDDAC :          1F03 C | *ZSFX_PSG1.SAVEDDURATION :     1F02 C |
*ZSFX_PSG1.SSGEGPOINTERHIGH :  1F0A C | *ZSFX_PSG1.SSGEGPOINTERLOW :   1F09 C |
*ZSFX_PSG1.STACKPOINTER :      1EFF C | *ZSFX_PSG1.STACK_TOP :         1F1B C |
*ZSFX_PSG1.TEMPODIVIDER :      1EF8 C | *ZSFX_PSG1.TLPTRHIGH :         1F0C C |
*ZSFX_PSG1.TLPTRLOW :          1F0B C | *ZSFX_PSG1.TRANSPOSE :         1EFB C |
*ZSFX_PSG1.VOICECONTROL :      1EF7 C | *ZSFX_PSG1.VOICEINDEX :        1EFE C |
*ZSFX_PSG1.VOICESHIGH :        1F1A C | *ZSFX_PSG1.VOICESLOW :         1F19 C |
*ZSFX_PSG1.VOICESONGID :       1F05 C | *ZSFX_PSG1.VOLENV :            1F07 C |
*ZSFX_PSG1.VOLUME :            1EFC C |  ZSFX_PSG2 :                   1F1F C |
*ZSFX_PSG2.AMSFMSPAN :         1F29 C | *ZSFX_PSG2.DACSFXPLAYING :     1F2F C |
*ZSFX_PSG2.DATAPOINTERHIGH :   1F23 C | *ZSFX_PSG2.DATAPOINTERLOW :    1F22 C |
*ZSFX_PSG2.DETUNE :            1F2F C | *ZSFX_PSG2.DURATIONTIMEOUT :   1F2A C |
*ZSFX_PSG2.FMVOLENV :          1F31 C | *ZSFX_PSG2.FMVOLENVMASK :      1F32 C |
*ZSFX_PSG2.FREQHIGH :          1F2D C | *ZSFX_PSG2.FREQLOW :           1F2C C |
*ZSFX_PSG2.HAVESSGEGFLAG :     1F31 C | *ZSFX_PSG2.LOOPCOUNTERS :      1F40 C |
*ZSFX_PSG2.MODENVINDEX :       1F3D C | *ZSFX_PSG2.MODENVSENS :        1F3A C |
*ZSFX_PSG2.MODULATIONCTRL :    1F26 C | *ZSFX_PSG2.MODULATIONDELTA :   1F3E C |
*ZSFX_PSG2.MODULATIONPTRHIGH : 1F39 C | *ZSFX_PSG2.MODULATIONPTRLOW :  1F38 C |
*ZSFX_PSG2.MODULATIONSPEED :   1F3D C | *ZSFX_PSG2.MODULATIONSTEPS :   1F3F C |
*ZSFX_PSG2.MODULATIONVALHIGH : 1F3B C | *ZSFX_PSG2.MODULATIONVALLOW :  1F3A C |
*ZSFX_PSG2.MODULATIONWAIT :    1F3C C | *ZSFX_PSG2.NOTEFILLMASTER :    1F37 C |
*ZSFX_PSG2.NOTEFILLTIMEOUT :   1F36 C | *ZSFX_PSG2.PLAYBACKCONTROL :   1F1F C |
*ZSFX_PSG2.PSGNOISE :          1F33 C | *ZSFX_PSG2.SAVEDDAC :          1F2C C |
*ZSFX_PSG2.SAVEDDURATION :     1F2B C | *ZSFX_PSG2.SSGEGPOINTERHIGH :  1F33 C |
*ZSFX_PSG2.SSGEGPOINTERLOW :   1F32 C | *ZSFX_PSG2.STACKPOINTER :      1F28 C |
*ZSFX_PSG2.STACK_TOP :         1F44 C | *ZSFX_PSG2.TEMPODIVIDER :      1F21 C |
*ZSFX_PSG2.TLPTRHIGH :         1F35 C | *ZSFX_PSG2.TLPTRLOW :          1F34 C |
*ZSFX_PSG2.TRANSPOSE :         1F24 C | *ZSFX_PSG2.VOICECONTROL :      1F20 C |
*ZSFX_PSG2.VOICEINDEX :        1F27 C | *ZSFX_PSG2.VOICESHIGH :        1F43 C |
*ZSFX_PSG2.VOICESLOW :         1F42 C | *ZSFX_PSG2.VOICESONGID :       1F2E C |
*ZSFX_PSG2.VOLENV :            1F30 C | *ZSFX_PSG2.VOLUME :            1F25 C |
 ZSFX_PSG3 :                   1F48 C | *ZSFX_PSG3.AMSFMSPAN :         1F52 C |
*ZSFX_PSG3.DACSFXPLAYING :     1F58 C | *ZSFX_PSG3.DATAPOINTERHIGH :   1F4C C |
*ZSFX_PSG3.DATAPOINTERLOW :    1F4B C | *ZSFX_PSG3.DETUNE :            1F58 C |
*ZSFX_PSG3.DURATIONTIMEOUT :   1F53 C | *ZSFX_PSG3.FMVOLENV :          1F5A C |
*ZSFX_PSG3.FMVOLENVMASK :      1F5B C | *ZSFX_PSG3.FREQHIGH :          1F56 C |
*ZSFX_PSG3.FREQLOW :           1F55 C | *ZSFX_PSG3.HAVESSGEGFLAG :     1F5A C |
*ZSFX_PSG3.LOOPCOUNTERS :      1F69 C | *ZSFX_PSG3.MODENVINDEX :       1F66 C |
*ZSFX_PSG3.MODENVSENS :        1F63 C | *ZSFX_PSG3.MODULATIONCTRL :    1F4F C |
*ZSFX_PSG3.MODULATIONDELTA :   1F67 C | *ZSFX_PSG3.MODULATIONPTRHIGH : 1F62 C |
*ZSFX_PSG3.MODULATIONPTRLOW :  1F61 C | *ZSFX_PSG3.MODULATIONSPEED :   1F66 C |
*ZSFX_PSG3.MODULATIONSTEPS :   1F68 C | *ZSFX_PSG3.MODULATIONVALHIGH : 1F64 C |
*ZSFX_PSG3.MODULATIONVALLOW :  1F63 C | *ZSFX_PSG3.MODULATIONWAIT :    1F65 C |
*ZSFX_PSG3.NOTEFILLMASTER :    1F60 C | *ZSFX_PSG3.NOTEFILLTIMEOUT :   1F5F C |
*ZSFX_PSG3.PLAYBACKCONTROL :   1F48 C | *ZSFX_PSG3.PSGNOISE :          1F5C C |
*ZSFX_PSG3.SAVEDDAC :          1F55 C | *ZSFX_PSG3.SAVEDDURATION :     1F54 C |
*ZSFX_PSG3.SSGEGPOINTERHIGH :  1F5C C | *ZSFX_PSG3.SSGEGPOINTERLOW :   1F5B C |
*ZSFX_PSG3.STACKPOINTER :      1F51 C | *ZSFX_PSG3.STACK_TOP :         1F6D C |
*ZSFX_PSG3.TEMPODIVIDER :      1F4A C | *ZSFX_PSG3.TLPTRHIGH :         1F5E C |
*ZSFX_PSG3.TLPTRLOW :          1F5D C | *ZSFX_PSG3.TRANSPOSE :         1F4D C |
*ZSFX_PSG3.VOICECONTROL :      1F49 C | *ZSFX_PSG3.VOICEINDEX :        1F50 C |
*ZSFX_PSG3.VOICESHIGH :        1F6C C | *ZSFX_PSG3.VOICESLOW :         1F6B C |
*ZSFX_PSG3.VOICESONGID :       1F57 C | *ZSFX_PSG3.VOLENV :            1F59 C |
*ZSFX_PSG3.VOLUME :            1F4E C |  ZSILENCEPSGCHANNEL :          1188 C |
 ZSILENCESTOPTRACK :            5A3 C |  ZSONGBANK :                   1CB3 C |
 ZSONGBANKSAVE :               1CA9 C |  ZSONGDAC :                    1CB8 C |
*ZSONGDAC.AMSFMSPAN :          1CC2 C |  ZSONGDAC.DACSFXPLAYING :      1CC8 C |
*ZSONGDAC.DATAPOINTERHIGH :    1CBC C | *ZSONGDAC.DATAPOINTERLOW :     1CBB C |
*ZSONGDAC.DETUNE :             1CC8 C | *ZSONGDAC.DURATIONTIMEOUT :    1CC3 C |
*ZSONGDAC.FMVOLENV :           1CCA C | *ZSONGDAC.FMVOLENVMASK :       1CCB C |
*ZSONGDAC.FREQHIGH :           1CC6 C | *ZSONGDAC.FREQLOW :            1CC5 C |
*ZSONGDAC.HAVESSGEGFLAG :      1CCA C | *ZSONGDAC.LOOPCOUNTERS :       1CD9 C |
*ZSONGDAC.MODENVINDEX :        1CD6 C | *ZSONGDAC.MODENVSENS :         1CD3 C |
*ZSONGDAC.MODULATIONCTRL :     1CBF C | *ZSONGDAC.MODULATIONDELTA :    1CD7 C |
*ZSONGDAC.MODULATIONPTRHIGH :  1CD2 C | *ZSONGDAC.MODULATIONPTRLOW :   1CD1 C |
*ZSONGDAC.MODULATIONSPEED :    1CD6 C | *ZSONGDAC.MODULATIONSTEPS :    1CD8 C |
*ZSONGDAC.MODULATIONVALHIGH :  1CD4 C | *ZSONGDAC.MODULATIONVALLOW :   1CD3 C |
*ZSONGDAC.MODULATIONWAIT :     1CD5 C | *ZSONGDAC.NOTEFILLMASTER :     1CD0 C |
*ZSONGDAC.NOTEFILLTIMEOUT :    1CCF C | *ZSONGDAC.PLAYBACKCONTROL :    1CB8 C |
*ZSONGDAC.PSGNOISE :           1CCC C | *ZSONGDAC.SAVEDDAC :           1CC5 C |
*ZSONGDAC.SAVEDDURATION :      1CC4 C | *ZSONGDAC.SSGEGPOINTERHIGH :   1CCC C |
*ZSONGDAC.SSGEGPOINTERLOW :    1CCB C | *ZSONGDAC.STACKPOINTER :       1CC1 C |
*ZSONGDAC.STACK_TOP :          1CDD C | *ZSONGDAC.TEMPODIVIDER :       1CBA C |
*ZSONGDAC.TLPTRHIGH :          1CCE C | *ZSONGDAC.TLPTRLOW :           1CCD C |
*ZSONGDAC.TRANSPOSE :          1CBD C | *ZSONGDAC.VOICECONTROL :       1CB9 C |
*ZSONGDAC.VOICEINDEX :         1CC0 C | *ZSONGDAC.VOICESHIGH :         1CDC C |
*ZSONGDAC.VOICESLOW :          1CDB C | *ZSONGDAC.VOICESONGID :        1CC7 C |
*ZSONGDAC.VOLENV :             1CC9 C | *ZSONGDAC.VOLUME :             1CBE C |
 ZSONGFM1 :                    1CE1 C | *ZSONGFM1.AMSFMSPAN :          1CEB C |
*ZSONGFM1.DACSFXPLAYING :      1CF1 C | *ZSONGFM1.DATAPOINTERHIGH :    1CE5 C |
*ZSONGFM1.DATAPOINTERLOW :     1CE4 C | *ZSONGFM1.DETUNE :             1CF1 C |
*ZSONGFM1.DURATIONTIMEOUT :    1CEC C | *ZSONGFM1.FMVOLENV :           1CF3 C |
*ZSONGFM1.FMVOLENVMASK :       1CF4 C | *ZSONGFM1.FREQHIGH :           1CEF C |
*ZSONGFM1.FREQLOW :            1CEE C | *ZSONGFM1.HAVESSGEGFLAG :      1CF3 C |
*ZSONGFM1.LOOPCOUNTERS :       1D02 C | *ZSONGFM1.MODENVINDEX :        1CFF C |
*ZSONGFM1.MODENVSENS :         1CFC C | *ZSONGFM1.MODULATIONCTRL :     1CE8 C |
*ZSONGFM1.MODULATIONDELTA :    1D00 C | *ZSONGFM1.MODULATIONPTRHIGH :  1CFB C |
*ZSONGFM1.MODULATIONPTRLOW :   1CFA C | *ZSONGFM1.MODULATIONSPEED :    1CFF C |
*ZSONGFM1.MODULATIONSTEPS :    1D01 C | *ZSONGFM1.MODULATIONVALHIGH :  1CFD C |
*ZSONGFM1.MODULATIONVALLOW :   1CFC C | *ZSONGFM1.MODULATIONWAIT :     1CFE C |
*ZSONGFM1.NOTEFILLMASTER :     1CF9 C | *ZSONGFM1.NOTEFILLTIMEOUT :    1CF8 C |
*ZSONGFM1.PLAYBACKCONTROL :    1CE1 C | *ZSONGFM1.PSGNOISE :           1CF5 C |
*ZSONGFM1.SAVEDDAC :           1CEE C | *ZSONGFM1.SAVEDDURATION :      1CED C |
*ZSONGFM1.SSGEGPOINTERHIGH :   1CF5 C | *ZSONGFM1.SSGEGPOINTERLOW :    1CF4 C |
*ZSONGFM1.STACKPOINTER :       1CEA C | *ZSONGFM1.STACK_TOP :          1D06 C |
*ZSONGFM1.TEMPODIVIDER :       1CE3 C | *ZSONGFM1.TLPTRHIGH :          1CF7 C |
*ZSONGFM1.TLPTRLOW :           1CF6 C | *ZSONGFM1.TRANSPOSE :          1CE6 C |
*ZSONGFM1.VOICECONTROL :       1CE2 C | *ZSONGFM1.VOICEINDEX :         1CE9 C |
*ZSONGFM1.VOICESHIGH :         1D05 C | *ZSONGFM1.VOICESLOW :          1D04 C |
*ZSONGFM1.VOICESONGID :        1CF0 C | *ZSONGFM1.VOLENV :             1CF2 C |
*ZSONGFM1.VOLUME :             1CE7 C | *ZSONGFM2 :                    1D0A C |
*ZSONGFM2.AMSFMSPAN :          1D14 C | *ZSONGFM2.DACSFXPLAYING :      1D1A C |
*ZSONGFM2.DATAPOINTERHIGH :    1D0E C | *ZSONGFM2.DATAPOINTERLOW :     1D0D C |
*ZSONGFM2.DETUNE :             1D1A C | *ZSONGFM2.DURATIONTIMEOUT :    1D15 C |
*ZSONGFM2.FMVOLENV :           1D1C C | *ZSONGFM2.FMVOLENVMASK :       1D1D C |
*ZSONGFM2.FREQHIGH :           1D18 C | *ZSONGFM2.FREQLOW :            1D17 C |
*ZSONGFM2.HAVESSGEGFLAG :      1D1C C | *ZSONGFM2.LOOPCOUNTERS :       1D2B C |
*ZSONGFM2.MODENVINDEX :        1D28 C | *ZSONGFM2.MODENVSENS :         1D25 C |
*ZSONGFM2.MODULATIONCTRL :     1D11 C | *ZSONGFM2.MODULATIONDELTA :    1D29 C |
*ZSONGFM2.MODULATIONPTRHIGH :  1D24 C | *ZSONGFM2.MODULATIONPTRLOW :   1D23 C |
*ZSONGFM2.MODULATIONSPEED :    1D28 C | *ZSONGFM2.MODULATIONSTEPS :    1D2A C |
*ZSONGFM2.MODULATIONVALHIGH :  1D26 C | *ZSONGFM2.MODULATIONVALLOW :   1D25 C |
*ZSONGFM2.MODULATIONWAIT :     1D27 C | *ZSONGFM2.NOTEFILLMASTER :     1D22 C |
*ZSONGFM2.NOTEFILLTIMEOUT :    1D21 C | *ZSONGFM2.PLAYBACKCONTROL :    1D0A C |
*ZSONGFM2.PSGNOISE :           1D1E C | *ZSONGFM2.SAVEDDAC :           1D17 C |
*ZSONGFM2.SAVEDDURATION :      1D16 C | *ZSONGFM2.SSGEGPOINTERHIGH :   1D1E C |
*ZSONGFM2.SSGEGPOINTERLOW :    1D1D C | *ZSONGFM2.STACKPOINTER :       1D13 C |
*ZSONGFM2.STACK_TOP :          1D2F C | *ZSONGFM2.TEMPODIVIDER :       1D0C C |
*ZSONGFM2.TLPTRHIGH :          1D20 C | *ZSONGFM2.TLPTRLOW :           1D1F C |
*ZSONGFM2.TRANSPOSE :          1D0F C | *ZSONGFM2.VOICECONTROL :       1D0B C |
*ZSONGFM2.VOICEINDEX :         1D12 C | *ZSONGFM2.VOICESHIGH :         1D2E C |
*ZSONGFM2.VOICESLOW :          1D2D C | *ZSONGFM2.VOICESONGID :        1D19 C |
*ZSONGFM2.VOLENV :             1D1B C | *ZSONGFM2.VOLUME :             1D10 C |
 ZSONGFM3 :                    1D33 C | *ZSONGFM3.AMSFMSPAN :          1D3D C |
*ZSONGFM3.DACSFXPLAYING :      1D43 C | *ZSONGFM3.DATAPOINTERHIGH :    1D37 C |
*ZSONGFM3.DATAPOINTERLOW :     1D36 C | *ZSONGFM3.DETUNE :             1D43 C |
*ZSONGFM3.DURATIONTIMEOUT :    1D3E C | *ZSONGFM3.FMVOLENV :           1D45 C |
*ZSONGFM3.FMVOLENVMASK :       1D46 C | *ZSONGFM3.FREQHIGH :           1D41 C |
*ZSONGFM3.FREQLOW :            1D40 C | *ZSONGFM3.HAVESSGEGFLAG :      1D45 C |
*ZSONGFM3.LOOPCOUNTERS :       1D54 C | *ZSONGFM3.MODENVINDEX :        1D51 C |
*ZSONGFM3.MODENVSENS :         1D4E C | *ZSONGFM3.MODULATIONCTRL :     1D3A C |
*ZSONGFM3.MODULATIONDELTA :    1D52 C | *ZSONGFM3.MODULATIONPTRHIGH :  1D4D C |
*ZSONGFM3.MODULATIONPTRLOW :   1D4C C | *ZSONGFM3.MODULATIONSPEED :    1D51 C |
*ZSONGFM3.MODULATIONSTEPS :    1D53 C | *ZSONGFM3.MODULATIONVALHIGH :  1D4F C |
*ZSONGFM3.MODULATIONVALLOW :   1D4E C | *ZSONGFM3.MODULATIONWAIT :     1D50 C |
*ZSONGFM3.NOTEFILLMASTER :     1D4B C | *ZSONGFM3.NOTEFILLTIMEOUT :    1D4A C |
*ZSONGFM3.PLAYBACKCONTROL :    1D33 C | *ZSONGFM3.PSGNOISE :           1D47 C |
*ZSONGFM3.SAVEDDAC :           1D40 C | *ZSONGFM3.SAVEDDURATION :      1D3F C |
*ZSONGFM3.SSGEGPOINTERHIGH :   1D47 C | *ZSONGFM3.SSGEGPOINTERLOW :    1D46 C |
*ZSONGFM3.STACKPOINTER :       1D3C C | *ZSONGFM3.STACK_TOP :          1D58 C |
*ZSONGFM3.TEMPODIVIDER :       1D35 C | *ZSONGFM3.TLPTRHIGH :          1D49 C |
*ZSONGFM3.TLPTRLOW :           1D48 C | *ZSONGFM3.TRANSPOSE :          1D38 C |
*ZSONGFM3.VOICECONTROL :       1D34 C | *ZSONGFM3.VOICEINDEX :         1D3B C |
*ZSONGFM3.VOICESHIGH :         1D57 C | *ZSONGFM3.VOICESLOW :          1D56 C |
*ZSONGFM3.VOICESONGID :        1D42 C | *ZSONGFM3.VOLENV :             1D44 C |
*ZSONGFM3.VOLUME :             1D39 C |  ZSONGFM4 :                    1D5C C |
*ZSONGFM4.AMSFMSPAN :          1D66 C | *ZSONGFM4.DACSFXPLAYING :      1D6C C |
*ZSONGFM4.DATAPOINTERHIGH :    1D60 C | *ZSONGFM4.DATAPOINTERLOW :     1D5F C |
*ZSONGFM4.DETUNE :             1D6C C | *ZSONGFM4.DURATIONTIMEOUT :    1D67 C |
*ZSONGFM4.FMVOLENV :           1D6E C | *ZSONGFM4.FMVOLENVMASK :       1D6F C |
*ZSONGFM4.FREQHIGH :           1D6A C | *ZSONGFM4.FREQLOW :            1D69 C |
*ZSONGFM4.HAVESSGEGFLAG :      1D6E C | *ZSONGFM4.LOOPCOUNTERS :       1D7D C |
*ZSONGFM4.MODENVINDEX :        1D7A C | *ZSONGFM4.MODENVSENS :         1D77 C |
*ZSONGFM4.MODULATIONCTRL :     1D63 C | *ZSONGFM4.MODULATIONDELTA :    1D7B C |
*ZSONGFM4.MODULATIONPTRHIGH :  1D76 C | *ZSONGFM4.MODULATIONPTRLOW :   1D75 C |
*ZSONGFM4.MODULATIONSPEED :    1D7A C | *ZSONGFM4.MODULATIONSTEPS :    1D7C C |
*ZSONGFM4.MODULATIONVALHIGH :  1D78 C | *ZSONGFM4.MODULATIONVALLOW :   1D77 C |
*ZSONGFM4.MODULATIONWAIT :     1D79 C | *ZSONGFM4.NOTEFILLMASTER :     1D74 C |
*ZSONGFM4.NOTEFILLTIMEOUT :    1D73 C | *ZSONGFM4.PLAYBACKCONTROL :    1D5C C |
*ZSONGFM4.PSGNOISE :           1D70 C | *ZSONGFM4.SAVEDDAC :           1D69 C |
*ZSONGFM4.SAVEDDURATION :      1D68 C | *ZSONGFM4.SSGEGPOINTERHIGH :   1D70 C |
*ZSONGFM4.SSGEGPOINTERLOW :    1D6F C | *ZSONGFM4.STACKPOINTER :       1D65 C |
*ZSONGFM4.STACK_TOP :          1D81 C | *ZSONGFM4.TEMPODIVIDER :       1D5E C |
*ZSONGFM4.TLPTRHIGH :          1D72 C | *ZSONGFM4.TLPTRLOW :           1D71 C |
*ZSONGFM4.TRANSPOSE :          1D61 C | *ZSONGFM4.VOICECONTROL :       1D5D C |
*ZSONGFM4.VOICEINDEX :         1D64 C | *ZSONGFM4.VOICESHIGH :         1D80 C |
*ZSONGFM4.VOICESLOW :          1D7F C | *ZSONGFM4.VOICESONGID :        1D6B C |
*ZSONGFM4.VOLENV :             1D6D C | *ZSONGFM4.VOLUME :             1D62 C |
 ZSONGFM5 :                    1D85 C | *ZSONGFM5.AMSFMSPAN :          1D8F C |
*ZSONGFM5.DACSFXPLAYING :      1D95 C | *ZSONGFM5.DATAPOINTERHIGH :    1D89 C |
*ZSONGFM5.DATAPOINTERLOW :     1D88 C | *ZSONGFM5.DETUNE :             1D95 C |
*ZSONGFM5.DURATIONTIMEOUT :    1D90 C | *ZSONGFM5.FMVOLENV :           1D97 C |
*ZSONGFM5.FMVOLENVMASK :       1D98 C | *ZSONGFM5.FREQHIGH :           1D93 C |
*ZSONGFM5.FREQLOW :            1D92 C | *ZSONGFM5.HAVESSGEGFLAG :      1D97 C |
*ZSONGFM5.LOOPCOUNTERS :       1DA6 C | *ZSONGFM5.MODENVINDEX :        1DA3 C |
*ZSONGFM5.MODENVSENS :         1DA0 C | *ZSONGFM5.MODULATIONCTRL :     1D8C C |
*ZSONGFM5.MODULATIONDELTA :    1DA4 C | *ZSONGFM5.MODULATIONPTRHIGH :  1D9F C |
*ZSONGFM5.MODULATIONPTRLOW :   1D9E C | *ZSONGFM5.MODULATIONSPEED :    1DA3 C |
*ZSONGFM5.MODULATIONSTEPS :    1DA5 C | *ZSONGFM5.MODULATIONVALHIGH :  1DA1 C |
*ZSONGFM5.MODULATIONVALLOW :   1DA0 C | *ZSONGFM5.MODULATIONWAIT :     1DA2 C |
*ZSONGFM5.NOTEFILLMASTER :     1D9D C | *ZSONGFM5.NOTEFILLTIMEOUT :    1D9C C |
*ZSONGFM5.PLAYBACKCONTROL :    1D85 C | *ZSONGFM5.PSGNOISE :           1D99 C |
*ZSONGFM5.SAVEDDAC :           1D92 C | *ZSONGFM5.SAVEDDURATION :      1D91 C |
*ZSONGFM5.SSGEGPOINTERHIGH :   1D99 C | *ZSONGFM5.SSGEGPOINTERLOW :    1D98 C |
*ZSONGFM5.STACKPOINTER :       1D8E C | *ZSONGFM5.STACK_TOP :          1DAA C |
*ZSONGFM5.TEMPODIVIDER :       1D87 C | *ZSONGFM5.TLPTRHIGH :          1D9B C |
*ZSONGFM5.TLPTRLOW :           1D9A C | *ZSONGFM5.TRANSPOSE :          1D8A C |
*ZSONGFM5.VOICECONTROL :       1D86 C | *ZSONGFM5.VOICEINDEX :         1D8D C |
*ZSONGFM5.VOICESHIGH :         1DA9 C | *ZSONGFM5.VOICESLOW :          1DA8 C |
*ZSONGFM5.VOICESONGID :        1D94 C | *ZSONGFM5.VOLENV :             1D96 C |
*ZSONGFM5.VOLUME :             1D8B C |  ZSONGFM6 :                    1DAE C |
*ZSONGFM6.AMSFMSPAN :          1DB8 C | *ZSONGFM6.DACSFXPLAYING :      1DBE C |
*ZSONGFM6.DATAPOINTERHIGH :    1DB2 C | *ZSONGFM6.DATAPOINTERLOW :     1DB1 C |
*ZSONGFM6.DETUNE :             1DBE C | *ZSONGFM6.DURATIONTIMEOUT :    1DB9 C |
*ZSONGFM6.FMVOLENV :           1DC0 C | *ZSONGFM6.FMVOLENVMASK :       1DC1 C |
*ZSONGFM6.FREQHIGH :           1DBC C | *ZSONGFM6.FREQLOW :            1DBB C |
*ZSONGFM6.HAVESSGEGFLAG :      1DC0 C | *ZSONGFM6.LOOPCOUNTERS :       1DCF C |
*ZSONGFM6.MODENVINDEX :        1DCC C | *ZSONGFM6.MODENVSENS :         1DC9 C |
*ZSONGFM6.MODULATIONCTRL :     1DB5 C | *ZSONGFM6.MODULATIONDELTA :    1DCD C |
*ZSONGFM6.MODULATIONPTRHIGH :  1DC8 C | *ZSONGFM6.MODULATIONPTRLOW :   1DC7 C |
*ZSONGFM6.MODULATIONSPEED :    1DCC C | *ZSONGFM6.MODULATIONSTEPS :    1DCE C |
*ZSONGFM6.MODULATIONVALHIGH :  1DCA C | *ZSONGFM6.MODULATIONVALLOW :   1DC9 C |
*ZSONGFM6.MODULATIONWAIT :     1DCB C | *ZSONGFM6.NOTEFILLMASTER :     1DC6 C |
*ZSONGFM6.NOTEFILLTIMEOUT :    1DC5 C | *ZSONGFM6.PLAYBACKCONTROL :    1DAE C |
*ZSONGFM6.PSGNOISE :           1DC2 C | *ZSONGFM6.SAVEDDAC :           1DBB C |
*ZSONGFM6.SAVEDDURATION :      1DBA C | *ZSONGFM6.SSGEGPOINTERHIGH :   1DC2 C |
*ZSONGFM6.SSGEGPOINTERLOW :    1DC1 C | *ZSONGFM6.STACKPOINTER :       1DB7 C |
*ZSONGFM6.STACK_TOP :          1DD3 C | *ZSONGFM6.TEMPODIVIDER :       1DB0 C |
*ZSONGFM6.TLPTRHIGH :          1DC4 C | *ZSONGFM6.TLPTRLOW :           1DC3 C |
*ZSONGFM6.TRANSPOSE :          1DB3 C | *ZSONGFM6.VOICECONTROL :       1DAF C |
*ZSONGFM6.VOICEINDEX :         1DB6 C | *ZSONGFM6.VOICESHIGH :         1DD2 C |
*ZSONGFM6.VOICESLOW :          1DD1 C | *ZSONGFM6.VOICESONGID :        1DBD C |
*ZSONGFM6.VOLENV :             1DBF C | *ZSONGFM6.VOLUME :             1DB4 C |
 ZSONGPOSITION :               1CAD C |  ZSONGPSG1 :                   1DD7 C |
*ZSONGPSG1.AMSFMSPAN :         1DE1 C | *ZSONGPSG1.DACSFXPLAYING :     1DE7 C |
*ZSONGPSG1.DATAPOINTERHIGH :   1DDB C | *ZSONGPSG1.DATAPOINTERLOW :    1DDA C |
*ZSONGPSG1.DETUNE :            1DE7 C | *ZSONGPSG1.DURATIONTIMEOUT :   1DE2 C |
*ZSONGPSG1.FMVOLENV :          1DE9 C | *ZSONGPSG1.FMVOLENVMASK :      1DEA C |
*ZSONGPSG1.FREQHIGH :          1DE5 C | *ZSONGPSG1.FREQLOW :           1DE4 C |
*ZSONGPSG1.HAVESSGEGFLAG :     1DE9 C | *ZSONGPSG1.LOOPCOUNTERS :      1DF8 C |
*ZSONGPSG1.MODENVINDEX :       1DF5 C | *ZSONGPSG1.MODENVSENS :        1DF2 C |
*ZSONGPSG1.MODULATIONCTRL :    1DDE C | *ZSONGPSG1.MODULATIONDELTA :   1DF6 C |
*ZSONGPSG1.MODULATIONPTRHIGH : 1DF1 C | *ZSONGPSG1.MODULATIONPTRLOW :  1DF0 C |
*ZSONGPSG1.MODULATIONSPEED :   1DF5 C | *ZSONGPSG1.MODULATIONSTEPS :   1DF7 C |
*ZSONGPSG1.MODULATIONVALHIGH : 1DF3 C | *ZSONGPSG1.MODULATIONVALLOW :  1DF2 C |
*ZSONGPSG1.MODULATIONWAIT :    1DF4 C | *ZSONGPSG1.NOTEFILLMASTER :    1DEF C |
*ZSONGPSG1.NOTEFILLTIMEOUT :   1DEE C | *ZSONGPSG1.PLAYBACKCONTROL :   1DD7 C |
*ZSONGPSG1.PSGNOISE :          1DEB C | *ZSONGPSG1.SAVEDDAC :          1DE4 C |
*ZSONGPSG1.SAVEDDURATION :     1DE3 C | *ZSONGPSG1.SSGEGPOINTERHIGH :  1DEB C |
*ZSONGPSG1.SSGEGPOINTERLOW :   1DEA C | *ZSONGPSG1.STACKPOINTER :      1DE0 C |
*ZSONGPSG1.STACK_TOP :         1DFC C | *ZSONGPSG1.TEMPODIVIDER :      1DD9 C |
*ZSONGPSG1.TLPTRHIGH :         1DED C | *ZSONGPSG1.TLPTRLOW :          1DEC C |
*ZSONGPSG1.TRANSPOSE :         1DDC C | *ZSONGPSG1.VOICECONTROL :      1DD8 C |
*ZSONGPSG1.VOICEINDEX :        1DDF C | *ZSONGPSG1.VOICESHIGH :        1DFB C |
*ZSONGPSG1.VOICESLOW :         1DFA C | *ZSONGPSG1.VOICESONGID :       1DE6 C |
*ZSONGPSG1.VOLENV :            1DE8 C | *ZSONGPSG1.VOLUME :            1DDD C |
 ZSONGPSG2 :                   1E00 C | *ZSONGPSG2.AMSFMSPAN :         1E0A C |
*ZSONGPSG2.DACSFXPLAYING :     1E10 C | *ZSONGPSG2.DATAPOINTERHIGH :   1E04 C |
*ZSONGPSG2.DATAPOINTERLOW :    1E03 C | *ZSONGPSG2.DETUNE :            1E10 C |
*ZSONGPSG2.DURATIONTIMEOUT :   1E0B C | *ZSONGPSG2.FMVOLENV :          1E12 C |
*ZSONGPSG2.FMVOLENVMASK :      1E13 C | *ZSONGPSG2.FREQHIGH :          1E0E C |
*ZSONGPSG2.FREQLOW :           1E0D C | *ZSONGPSG2.HAVESSGEGFLAG :     1E12 C |
*ZSONGPSG2.LOOPCOUNTERS :      1E21 C | *ZSONGPSG2.MODENVINDEX :       1E1E C |
*ZSONGPSG2.MODENVSENS :        1E1B C | *ZSONGPSG2.MODULATIONCTRL :    1E07 C |
*ZSONGPSG2.MODULATIONDELTA :   1E1F C | *ZSONGPSG2.MODULATIONPTRHIGH : 1E1A C |
*ZSONGPSG2.MODULATIONPTRLOW :  1E19 C | *ZSONGPSG2.MODULATIONSPEED :   1E1E C |
*ZSONGPSG2.MODULATIONSTEPS :   1E20 C | *ZSONGPSG2.MODULATIONVALHIGH : 1E1C C |
*ZSONGPSG2.MODULATIONVALLOW :  1E1B C | *ZSONGPSG2.MODULATIONWAIT :    1E1D C |
*ZSONGPSG2.NOTEFILLMASTER :    1E18 C | *ZSONGPSG2.NOTEFILLTIMEOUT :   1E17 C |
*ZSONGPSG2.PLAYBACKCONTROL :   1E00 C | *ZSONGPSG2.PSGNOISE :          1E14 C |
*ZSONGPSG2.SAVEDDAC :          1E0D C | *ZSONGPSG2.SAVEDDURATION :     1E0C C |
*ZSONGPSG2.SSGEGPOINTERHIGH :  1E14 C | *ZSONGPSG2.SSGEGPOINTERLOW :   1E13 C |
*ZSONGPSG2.STACKPOINTER :      1E09 C | *ZSONGPSG2.STACK_TOP :         1E25 C |
*ZSONGPSG2.TEMPODIVIDER :      1E02 C | *ZSONGPSG2.TLPTRHIGH :         1E16 C |
*ZSONGPSG2.TLPTRLOW :          1E15 C | *ZSONGPSG2.TRANSPOSE :         1E05 C |
*ZSONGPSG2.VOICECONTROL :      1E01 C | *ZSONGPSG2.VOICEINDEX :        1E08 C |
*ZSONGPSG2.VOICESHIGH :        1E24 C | *ZSONGPSG2.VOICESLOW :         1E23 C |
*ZSONGPSG2.VOICESONGID :       1E0F C | *ZSONGPSG2.VOLENV :            1E11 C |
*ZSONGPSG2.VOLUME :            1E06 C |  ZSONGPSG3 :                   1E29 C |
*ZSONGPSG3.AMSFMSPAN :         1E33 C | *ZSONGPSG3.DACSFXPLAYING :     1E39 C |
*ZSONGPSG3.DATAPOINTERHIGH :   1E2D C | *ZSONGPSG3.DATAPOINTERLOW :    1E2C C |
*ZSONGPSG3.DETUNE :            1E39 C | *ZSONGPSG3.DURATIONTIMEOUT :   1E34 C |
*ZSONGPSG3.FMVOLENV :          1E3B C | *ZSONGPSG3.FMVOLENVMASK :      1E3C C |
*ZSONGPSG3.FREQHIGH :          1E37 C | *ZSONGPSG3.FREQLOW :           1E36 C |
*ZSONGPSG3.HAVESSGEGFLAG :     1E3B C | *ZSONGPSG3.LOOPCOUNTERS :      1E4A C |
*ZSONGPSG3.MODENVINDEX :       1E47 C | *ZSONGPSG3.MODENVSENS :        1E44 C |
*ZSONGPSG3.MODULATIONCTRL :    1E30 C | *ZSONGPSG3.MODULATIONDELTA :   1E48 C |
*ZSONGPSG3.MODULATIONPTRHIGH : 1E43 C | *ZSONGPSG3.MODULATIONPTRLOW :  1E42 C |
*ZSONGPSG3.MODULATIONSPEED :   1E47 C | *ZSONGPSG3.MODULATIONSTEPS :   1E49 C |
*ZSONGPSG3.MODULATIONVALHIGH : 1E45 C | *ZSONGPSG3.MODULATIONVALLOW :  1E44 C |
*ZSONGPSG3.MODULATIONWAIT :    1E46 C | *ZSONGPSG3.NOTEFILLMASTER :    1E41 C |
*ZSONGPSG3.NOTEFILLTIMEOUT :   1E40 C | *ZSONGPSG3.PLAYBACKCONTROL :   1E29 C |
*ZSONGPSG3.PSGNOISE :          1E3D C | *ZSONGPSG3.SAVEDDAC :          1E36 C |
*ZSONGPSG3.SAVEDDURATION :     1E35 C | *ZSONGPSG3.SSGEGPOINTERHIGH :  1E3D C |
*ZSONGPSG3.SSGEGPOINTERLOW :   1E3C C | *ZSONGPSG3.STACKPOINTER :      1E32 C |
*ZSONGPSG3.STACK_TOP :         1E4E C | *ZSONGPSG3.TEMPODIVIDER :      1E2B C |
*ZSONGPSG3.TLPTRHIGH :         1E3F C | *ZSONGPSG3.TLPTRLOW :          1E3E C |
*ZSONGPSG3.TRANSPOSE :         1E2E C | *ZSONGPSG3.VOICECONTROL :      1E2A C |
*ZSONGPSG3.VOICEINDEX :        1E31 C | *ZSONGPSG3.VOICESHIGH :        1E4D C |
*ZSONGPSG3.VOICESLOW :         1E4C C | *ZSONGPSG3.VOICESONGID :       1E38 C |
*ZSONGPSG3.VOLENV :            1E3A C | *ZSONGPSG3.VOLUME :            1E2F C |
 ZSOUNDQUEUE0 :                1C8E C |  ZSOUNDQUEUE1 :                1C8F C |
 ZSOUNDQUEUE2 :                1C90 C |  ZSPECFM3FREQS :               1C7C C |
 ZSPECFM3FREQSSFX :            1C84 C |  ZSPECIALFREQCOMMANDS :         227 C |
 ZSPECIALFREQCOMMANDS_END :     22B C |  ZSPEEDUPTIMEOUT :             1CAB C |
 ZSPINDASHREV :                1CA3 C |  ZSTARTUPCODEENDLOC :            26 C |
 ZSTOPCLEANEXIT :               F09 C |  ZSTOPPSGTRACK :                F0E C |
 ZSTOPPSGTRACK.SKIP_COMMAND :   F1E C |  ZSTOPSFX :                     585 C |
 ZSTOPSFX.LOOP :                590 C |  ZSTOREDURATION :               2CF C |
 ZSTORETRACKVOLUME :            DF8 C |  ZTEMPOACCUMULATOR :           1C9F C |
 ZTEMPOSPEEDUP :               1C91 C |  ZTEMPOSPEEDUPREQ :            1C92 C |
 ZTEMPOSPEEDUPSAVE :           1CAA C |  ZTRACK.AMSFMSPAN :               A - |
 ZTRACK.DACSFXPLAYING :          10 - |  ZTRACK.DATAPOINTERHIGH :         4 - |
 ZTRACK.DATAPOINTERLOW :          3 - |  ZTRACK.DETUNE :                 10 - |
 ZTRACK.DURATIONTIMEOUT :         B - |  ZTRACK.FMVOLENV :               12 - |
 ZTRACK.FMVOLENVMASK :           13 - |  ZTRACK.FREQHIGH :                E - |
 ZTRACK.FREQLOW :                 D - |  ZTRACK.HAVESSGEGFLAG :          12 - |
 ZTRACK.LEN :                    29 - |  ZTRACK.LOOPCOUNTERS :           21 - |
 ZTRACK.MODENVINDEX :            1E - |  ZTRACK.MODENVSENS :             1B - |
 ZTRACK.MODULATIONCTRL :          7 - |  ZTRACK.MODULATIONDELTA :        1F - |
 ZTRACK.MODULATIONPTRHIGH :      1A - |  ZTRACK.MODULATIONPTRLOW :       19 - |
 ZTRACK.MODULATIONSPEED :        1E - |  ZTRACK.MODULATIONSTEPS :        20 - |
 ZTRACK.MODULATIONVALHIGH :      1C - |  ZTRACK.MODULATIONVALLOW :       1B - |
 ZTRACK.MODULATIONWAIT :         1D - |  ZTRACK.NOTEFILLMASTER :         18 - |
 ZTRACK.NOTEFILLTIMEOUT :        17 - |  ZTRACK.PLAYBACKCONTROL :         0 - |
 ZTRACK.PSGNOISE :               14 - |  ZTRACK.SAVEDDAC :                D - |
 ZTRACK.SAVEDDURATION :           C - |  ZTRACK.SSGEGPOINTERHIGH :       14 - |
 ZTRACK.SSGEGPOINTERLOW :        13 - |  ZTRACK.STACKPOINTER :            9 - |
*ZTRACK.STACK_TOP :              25 - |  ZTRACK.TEMPODIVIDER :            2 - |
 ZTRACK.TLPTRHIGH :              16 - |  ZTRACK.TLPTRLOW :               15 - |
 ZTRACK.TRANSPOSE :               5 - |  ZTRACK.VOICECONTROL :            1 - |
 ZTRACK.VOICEINDEX :              8 - |  ZTRACK.VOICESHIGH :             24 - |
 ZTRACK.VOICESLOW :              23 - |  ZTRACK.VOICESONGID :             F - |
 ZTRACK.VOLENV :                 11 - |  ZTRACK.VOLUME :                  6 - |
 ZTRACKINITPOS :               1CAF C |  ZTRACKSEND :                  1E52 C |
 ZTRACKSKIP3BYTES :            100E C |  ZTRACKSSAVEEND :              1FEC C |
 ZTRACKSSAVESTART :            1E52 C |  ZTRACKSSFXEND :               1F71 C |
 ZTRACKSSFXSTART :             1E52 C |  ZTRACKSSTART :                1CB8 C |
 ZTRACKUPDLOOP :                172 C |  ZTRACKUPDLOOP.NO_DBL_UPDATE :  197 C |
 ZUPDATEDACTRACK :              C38 C |  ZUPDATEDACTRACK_CONT :         C42 C |
 ZUPDATEDACTRACK_CONT.GET_DURATION :                                    C7B C |
 ZUPDATEDACTRACK_CONT.GOT_SAMPLE :                                      C51 C |
 ZUPDATEEVERYTHING :             D0 C |  ZUPDATEFMORPSGTRACK :          19C C |
 ZUPDATEFMORPSGTRACK.KEEP_GOING :                                       1D3 C |
 ZUPDATEFMORPSGTRACK.NOTE_GOING :                                       1BF C |
 ZUPDATEMUSIC :                  D6 C |  ZUPDATEMUSIC.CHECK_FADE_IN :    FE C |
 ZUPDATEMUSIC.CLR_QUEUE :        F1 C |  ZUPDATEMUSIC.CLR_SFX :          F5 C |
 ZUPDATEMUSIC.UPDATE_MUSIC :    11D C |  ZUPDATEPSGTRACK :             10E2 C |
 ZUPDATEPSGTRACK.NOTE_GOING :  10F4 C |  ZUPDATEPSGTRACK.NOT_NOISE :   1146 C |
 ZUPDATEPSGTRACK.NO_VOLENV :   1130 C |  ZUPDATEPSGTRACK.SKIP_FILL :   1100 C |
 ZUPDATESFXTRACKS :             152 C |  ZUPDATINGSFX :                1CA1 C |
*ZVINT :                         38 C |  ZVINT.DOUPDATE :                3D C |
 ZVINT.NOT_PAL :                 58 C |  ZVINT.PAL_TIMER :               54 C |
 ZVOICETBLPTR :                1CB1 C |  ZVOICETBLPTRSAVE :            1CA6 C |
 ZWRITEFM3SETTINGS :           1008 C |  ZWRITEFMI :                     BC C |
 ZWRITEFMII :                    C7 C |  ZWRITEFMII_REDUCED :            C5 C |
 ZWRITEFMIORII :                 A9 C |  ZYM2612_A0 :                  4000 - |
 ZYM2612_A1 :                  4002 - |  ZYM2612_D0 :                  4001 - |
 ZYM2612_D1 :                  4003 - |  ZZEROFILLTRACKRAM :            842 C |
 ZZEROFILLTRACKRAM.LOOP :       84D C |  _KOS_EXTREMEUNROLLING :          1 - |
 _KOS_LOOPUNROLL :                3 - |  _KOS_USELUT :                    1 - |
*_TEMPF608 :       FFFFFFFFFFFFF608 C | *_TEMPFF88 :       FFFFFFFFFFFFFF88 C |
*_TEMPFF8C :       FFFFFFFFFFFFFF8C C | *_TEMPFF98 :       FFFFFFFFFFFFFF98 C |
*_UNKA880 :        FFFFFFFFFFFFA880 - | *_UNKA8E0 :        FFFFFFFFFFFFA8E0 - |
*_UNKEE08 :        FFFFFFFFFFFFEE08 C | *_UNKEE70 :        FFFFFFFFFFFFEE70 C |
*_UNKEE74 :        FFFFFFFFFFFFEE74 C | *_UNKEE8E :        FFFFFFFFFFFFEE8E C |
*_UNKEE98 :        FFFFFFFFFFFFEE98 C | *_UNKEE9C :        FFFFFFFFFFFFEE9C C |
*_UNKEEA0 :        FFFFFFFFFFFFEEA0 C | *_UNKEEA2 :        FFFFFFFFFFFFEEA2 C |
*_UNKEEB0 :        FFFFFFFFFFFFEEB0 C | *_UNKEEBA :        FFFFFFFFFFFFEEBA C |
*_UNKEEEA :        FFFFFFFFFFFFEEEA C | *_UNKEEEE :        FFFFFFFFFFFFEEEE C |
*_UNKEEF2 :        FFFFFFFFFFFFEEF2 C | *_UNKEEF4 :        FFFFFFFFFFFFEEF4 C |
*_UNKEEF6 :        FFFFFFFFFFFFEEF6 C | *_UNKEEFA :        FFFFFFFFFFFFEEFA C |
*_UNKEF40_1 :      FFFFFFFFFFFFEF40 C | *_UNKEF44_1 :      FFFFFFFFFFFFEF44 - |
*_UNKEF44_2 :      FFFFFFFFFFFFEF44 C | *_UNKEF68 :        FFFFFFFFFFFFEF68 C |
 _UNKF61A :        FFFFFFFFFFFFF61A C | *_UNKF660 :        FFFFFFFFFFFFF660 C |
*_UNKF662 :        FFFFFFFFFFFFF662 C | *_UNKF66C :        FFFFFFFFFFFFF66C C |
*_UNKF712 :        FFFFFFFFFFFFF712 C | *_UNKF740 :        FFFFFFFFFFFFF740 C |
*_UNKF744 :        FFFFFFFFFFFFF744 C | *_UNKF74A :        FFFFFFFFFFFFF74A C |
*_UNKF74B :        FFFFFFFFFFFFF74B C | *_UNKF74C :        FFFFFFFFFFFFF74C C |
*_UNKF7B0 :        FFFFFFFFFFFFF7B0 C | *_UNKF7C1 :        FFFFFFFFFFFFF7C1 C |
*_UNKF7C2 :        FFFFFFFFFFFFF7C2 C | *_UNKF7C3 :        FFFFFFFFFFFFF7C3 C |
*_UNKF7C4 :        FFFFFFFFFFFFF7C4 C | *_UNKF7C7 :        FFFFFFFFFFFFF7C7 C |
*_UNKF7DC :        FFFFFFFFFFFFF7DC C | *_UNKFA80 :        FFFFFFFFFFFFFA80 C |
*_UNKFA82 :        FFFFFFFFFFFFFA82 C | *_UNKFA83 :        FFFFFFFFFFFFFA83 C |
*_UNKFA84 :        FFFFFFFFFFFFFA84 C | *_UNKFA86 :        FFFFFFFFFFFFFA86 C |
*_UNKFA88 :        FFFFFFFFFFFFFA88 C | *_UNKFA89 :        FFFFFFFFFFFFFA89 C |
*_UNKFA8A :        FFFFFFFFFFFFFA8A C | *_UNKFA8C :        FFFFFFFFFFFFFA8C C |
*_UNKFA8E :        FFFFFFFFFFFFFA8E C | *_UNKFA90 :        FFFFFFFFFFFFFA90 C |
*_UNKFAA2 :        FFFFFFFFFFFFFAA2 C | *_UNKFAA3 :        FFFFFFFFFFFFFAA3 C |
*_UNKFAA4 :        FFFFFFFFFFFFFAA4 C | *_UNKFAA8 :        FFFFFFFFFFFFFAA8 C |
*_UNKFAA9 :        FFFFFFFFFFFFFAA9 C | *_UNKFAAB :        FFFFFFFFFFFFFAAB C |
*_UNKFAAC :        FFFFFFFFFFFFFAAC C | *_UNKFAAD :        FFFFFFFFFFFFFAAD C |
*_UNKFAAE :        FFFFFFFFFFFFFAAE C | *_UNKFAB0 :        FFFFFFFFFFFFFAB0 C |
*_UNKFAB2 :        FFFFFFFFFFFFFAB2 C | *_UNKFAB4 :        FFFFFFFFFFFFFAB4 C |
*_UNKFAB6 :        FFFFFFFFFFFFFAB6 C | *_UNKFAB8 :        FFFFFFFFFFFFFAB8 C |
*_UNKFAB9 :        FFFFFFFFFFFFFAB9 C | *_UNKFABA :        FFFFFFFFFFFFFABA C |
*_UNKFABC :        FFFFFFFFFFFFFABC C | *_UNKFABD :        FFFFFFFFFFFFFABD C |
*_UNKFABE :        FFFFFFFFFFFFFABE C | *_UNKFAC0 :        FFFFFFFFFFFFFAC0 C |
*_UNKFAC1 :        FFFFFFFFFFFFFAC1 C | *_UNKFAC2 :        FFFFFFFFFFFFFAC2 C |
*_UNKFAC4 :        FFFFFFFFFFFFFAC4 C | *_UNKFAC8 :        FFFFFFFFFFFFFAC8 C |
*_UNKFACC :        FFFFFFFFFFFFFACC C | *_UNKFACD :        FFFFFFFFFFFFFACD C |
*_UNKFEBE :        FFFFFFFFFFFFFEBE C | *_UNKFF06 :        FFFFFFFFFFFFFF06 C |
*_UNKFF7C :        FFFFFFFFFFFFFF7C C | *_UNKFF7E :        FFFFFFFFFFFFFF7E C |
 __BACK0 :                      320 C |  __BACK1 :                      338 C |
 __BACK2 :                      420 C |  __BACK3 :                      48E C |
 __BACK4 :                      49C C |  __BACK5 :                      4B4 C |
 __BACK6 :                      4C4 C |  __FORW0 :                      280 C |
 __FORW0.CLEARCRAM :            2DA C |  __FORW0.CLEARRAM :             2CE C |
 __FORW0.CLEARVSRAM :           2E4 C |  __FORW0.INITPSG :              2EC C |
 __FORW0.INITVDP :              2A0 C |  __FORW0.INITVDPLOOP :          2AA C |
 __FORW0.INITZ80 :              2BC C |  __FORW0.INITZ80LOOP :          2C2 C |
 __FORW0.START :                2FE C |  __FORW1 :                      43E C |
 __FORW1.WAIT1 :                462 C |  __FORW1.WAIT2 :                46E C |
 __FORW2 :                      4B8 C |  __FORW3 :                      4C8 C |
 __FORW4 :                      558 C |  __FORW5 :                      55E C |

   3663 Symbols
   2583 unused symbols

 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 3 - 6/11/2022 10:54:12


  Defined Macros:
  ---------------

ALIGN                                 | ALIGN0                               
BANKSWITCH                            | BANKSWITCHLOOP                       
BANKSWITCHTOMUSIC                     | CALCVOLUME                           
CHECKEDCHANNELPOINTER                 | CLEARRAM                             
CNOP                                  | CNOP0                                
CONVERTMAINTEMPOMOD                   | DACBINCLUDE                          
DAC_MASTER_TABLE                      | DAC_SETUP                            
DBGLISTHEADER                         | DBGLISTOBJ                           
DECLSONG                              | DMA68KTOVDP                          
DMAFILLVRAM                           | EVEN                                 
FINISHBANK                            | LEVARTPTRS                           
LEVSELSTR                             | MUSIC_MASTER_TABLE                   
OFFSETBANKTABLEENTRY                  | ORG                                  
ORG0                                  | PALSCRIPTDATA                        
PALSCRIPTFILE                         | PALSCRIPTHDR                         
PALSCRIPTLOOP                         | PALSCRIPTPTR                         
PALSCRIPTREPT                         | PALSCRIPTRUN                         
PLREQ                                 | PLRLISTHEADER                        
PSGPITCHCONVERT                       | ROM_PTR_Z80                          
RSTTARGET                             | SETMAXAR                             
SMPSALTERNATESMPS                     | SMPSALTERNOTE                        
SMPSALTERPITCH                        | SMPSALTERVOL                         
SMPSCALL                              | SMPSCHANFMCOMMAND                    
SMPSCHANGETRANSPOSITION               | SMPSCHANTEMPODIV                     
SMPSCLEARPUSH                         | SMPSCONDITIONALJUMP                  
SMPSCONTINUOUSLOOP                    | SMPSCOPYDATA                         
SMPSDETUNE                            | SMPSFADE                             
SMPSFM3SPECIALMODE                    | SMPSFMALTERVOL                       
SMPSFMFLUTTER                         | SMPSFMICOMMAND                       
SMPSFMVOICE                           | SMPSFMVOLENV                         
SMPSHALTMUSIC                         | SMPSHEADERCHAN                       
SMPSHEADERCHANSFX                     | SMPSHEADERDAC                        
SMPSHEADERFM                          | SMPSHEADERPSG                        
SMPSHEADERSFXCHANNEL                  | SMPSHEADERSTARTSONG                  
SMPSHEADERTEMPO                       | SMPSHEADERTEMPOSFX                   
SMPSHEADERVOICE                       | SMPSHEADERVOICENULL                  
SMPSHEADERVOICEUVB                    | SMPSJUMP                             
SMPSLOOP                              | SMPSMAXRELRATE                       
SMPSMODCHANGE                         | SMPSMODCHANGE2                       
SMPSMODOFF                            | SMPSMODON                            
SMPSMODSET                            | SMPSNOP                              
SMPSNOTEFILL                          | SMPSPAN                              
SMPSPITCHSLIDE                        | SMPSPLAYDACSAMPLE                    
SMPSPLAYMUSIC                         | SMPSPLAYSOUND                        
SMPSPSGALTERVOL                       | SMPSPSGFORM                          
SMPSPSGVOICE                          | SMPSRESETSPINDASHREV                 
SMPSRETURN                            | SMPSSETLFO                           
SMPSSETNOTE                           | SMPSSETTEMPODIV                      
SMPSSETTEMPOMOD                       | SMPSSETVOICE                         
SMPSSETVOL                            | SMPSSPINDASHREV                      
SMPSSSGEG                             | SMPSSTOP                             
SMPSSTOPFM                            | SMPSSTOPSPECIAL                      
SMPSVCALGORITHM                       | SMPSVCAMPMOD                         
SMPSVCATTACKRATE                      | SMPSVCCOARSEFREQ                     
SMPSVCDECAYLEVEL                      | SMPSVCDECAYRATE1                     
SMPSVCDECAYRATE2                      | SMPSVCDETUNE                         
SMPSVCFEEDBACK                        | SMPSVCRATESCALE                      
SMPSVCRELEASERATE                     | SMPSVCTOTALLEVEL                     
SMPSVCUNUSEDBITS                      | SMPSWEIRDD1LRR                       
STARTBANK                             | STARTZ80                             
STOPZ80                               | TRACE                                
TRIBYTE                               | WATERTRANSHEADER                     
ZFASTWRITEFM                          | ZGETFMPARTPOINTER                    
ZONEANIMDECL                          | ZONEANIMEND                          
ZONEANIMSTART                         | _KOS_READBIT                         
_KOS_RUNBITSTREAM                     |

    131 macros

 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 4 - 6/11/2022 10:54:12


  Defined Structures/Unions:
  --------------------------

ZTRACK
  0      (I8) PLAYBACKCONTROL
  1      (I8) VOICECONTROL
  2      (I8) TEMPODIVIDER
  3      (I8) DATAPOINTERLOW
  4      (I8) DATAPOINTERHIGH
  5      (I8) TRANSPOSE
  6      (I8) VOLUME
  7      (I8) MODULATIONCTRL
  8      (I8) VOICEINDEX
  9      (I8) STACKPOINTER
 10      (I8) AMSFMSPAN
 11      (I8) DURATIONTIMEOUT
 12      (I8) SAVEDDURATION
 13          SAVEDDAC
 13      (I8) FREQLOW
 14      (I8) FREQHIGH
 15      (I8) VOICESONGID
 16          DACSFXPLAYING
 16      (I8) DETUNE
 17      (I8) VOLENV
 18          FMVOLENV
 18      (I8) HAVESSGEGFLAG
 19          FMVOLENVMASK
 19      (I8) SSGEGPOINTERLOW
 20          PSGNOISE
 20      (I8) SSGEGPOINTERHIGH
 21      (I8) TLPTRLOW
 22      (I8) TLPTRHIGH
 23      (I8) NOTEFILLTIMEOUT
 24      (I8) NOTEFILLMASTER
 25      (I8) MODULATIONPTRLOW
 26      (I8) MODULATIONPTRHIGH
 27          MODULATIONVALLOW
 27      (I8) MODENVSENS
 28      (I8) MODULATIONVALHIGH
 29      (I8) MODULATIONWAIT
 30          MODULATIONSPEED
 30      (I8) MODENVINDEX
 31      (I8) MODULATIONDELTA
 32      (I8) MODULATIONSTEPS
 33      (I8) LOOPCOUNTERS
 35      (I8) VOICESLOW
 36      (I8) VOICESHIGH
 37      (I8) STACK_TOP
1 structure
 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 5 - 6/11/2022 10:54:12


  Defined Functions:
  ------------------

S3TEMPOTOS2                           | S3TEMPOTOS1                          
S1TEMPOTOS3                           | S1TEMPOTOS2                          
S2TEMPOTOS3                           | S2TEMPOTOS1                          
CONV0TO256                            | K68Z80POINTER                        
LITTLE_ENDIAN                         | ZMAKE68KBANK                         
ZMAKE68KPTR                           | PLANELOCH28                          
TILES_TO_BYTES                        | MAKE_ART_TILE                        
Z80_PTR                               | BYTESTOXCNT                          
BYTESTOWCNT                           | BYTESTOLCNT                          
VDPCOMM                               | RAMADDR                              
SIGNEXTENDB                           | SIGNEXTEND                           
SIGNMASK                              | BIT                                  
NOTZ80                                |

 AS V1.42 Beta [Bld 151] - Source File soundtest.asm - Page 6 - 6/11/2022 10:54:12


  Code Pages:
  ----------

LEVELSELECT (67 changed characters)
STANDARD (0 changed characters)

2 code pages

0.29 seconds assembly time

   9742 lines source file
  19162 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
